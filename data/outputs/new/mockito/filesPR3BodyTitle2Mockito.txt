2 ; src/org/mockito/internal/configuration/ClassPathLoader.java ; Pull request: Load default plugins dynamically ; To be able to include Mockito source in the Android Open Source Project  I d like to be able to build a subset of Mockito which doesn t rely on cglib. This removes the compile-time dependency on the default MockMaker implementation  which naturally includes references to cglib.
3 ; src/org/mockito/internal/MockitoCore.java ; Pull Request: Remove class mockable test from ClassImposterizer ; To be able to include Mockito source in the Android Open Source Project  we need to be able to build a subset of Mockito which doesn t rely on cglib. This second part rearranges the code related to checking whether a class can be mocked. I ve moved the logic to MockUtil  where it could later be moved to the MockMaker where it really belongs.  My apologies - I can t see how to get GitHub to make a pull request just with my second change  so this seems to include both of my changes.
3 ;  src/org/mockito/internal/creation/jmock/ClassImposterizer.java ; Pull Request: Remove class mockable test from ClassImposterizer ; To be able to include Mockito source in the Android Open Source Project  we need to be able to build a subset of Mockito which doesn t rely on cglib. This second part rearranges the code related to checking whether a class can be mocked. I ve moved the logic to MockUtil  where it could later be moved to the MockMaker where it really belongs.  My apologies - I can t see how to get GitHub to make a pull request just with my second change  so this seems to include both of my changes.
3 ;  src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java ; Pull Request: Remove class mockable test from ClassImposterizer ; To be able to include Mockito source in the Android Open Source Project  we need to be able to build a subset of Mockito which doesn t rely on cglib. This second part rearranges the code related to checking whether a class can be mocked. I ve moved the logic to MockUtil  where it could later be moved to the MockMaker where it really belongs.  My apologies - I can t see how to get GitHub to make a pull request just with my second change  so this seems to include both of my changes.
3 ;  src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java ; Pull Request: Remove class mockable test from ClassImposterizer ; To be able to include Mockito source in the Android Open Source Project  we need to be able to build a subset of Mockito which doesn t rely on cglib. This second part rearranges the code related to checking whether a class can be mocked. I ve moved the logic to MockUtil  where it could later be moved to the MockMaker where it really belongs.  My apologies - I can t see how to get GitHub to make a pull request just with my second change  so this seems to include both of my changes.
3 ;  src/org/mockito/internal/util/MockCreationValidator.java ; Pull Request: Remove class mockable test from ClassImposterizer ; To be able to include Mockito source in the Android Open Source Project  we need to be able to build a subset of Mockito which doesn t rely on cglib. This second part rearranges the code related to checking whether a class can be mocked. I ve moved the logic to MockUtil  where it could later be moved to the MockMaker where it really belongs.  My apologies - I can t see how to get GitHub to make a pull request just with my second change  so this seems to include both of my changes.
3 ;  src/org/mockito/internal/util/MockUtil.java ; Pull Request: Remove class mockable test from ClassImposterizer ; To be able to include Mockito source in the Android Open Source Project  we need to be able to build a subset of Mockito which doesn t rely on cglib. This second part rearranges the code related to checking whether a class can be mocked. I ve moved the logic to MockUtil  where it could later be moved to the MockMaker where it really belongs.  My apologies - I can t see how to get GitHub to make a pull request just with my second change  so this seems to include both of my changes.
3 ;  test/org/mockito/internal/creation/jmock/ClassImposterizerTest.java ; Pull Request: Remove class mockable test from ClassImposterizer ; To be able to include Mockito source in the Android Open Source Project  we need to be able to build a subset of Mockito which doesn t rely on cglib. This second part rearranges the code related to checking whether a class can be mocked. I ve moved the logic to MockUtil  where it could later be moved to the MockMaker where it really belongs.  My apologies - I can t see how to get GitHub to make a pull request just with my second change  so this seems to include both of my changes.
3 ;  test/org/mockito/internal/util/MockUtilTest.java ; Pull Request: Remove class mockable test from ClassImposterizer ; To be able to include Mockito source in the Android Open Source Project  we need to be able to build a subset of Mockito which doesn t rely on cglib. This second part rearranges the code related to checking whether a class can be mocked. I ve moved the logic to MockUtil  where it could later be moved to the MockMaker where it really belongs.  My apologies - I can t see how to get GitHub to make a pull request just with my second change  so this seems to include both of my changes.
5 ; src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java ; Mock serialization/deserialization across classloader/JVM ; This pull request will enable mocks to be serialized in a certain way  that will allow them to be serialized and especially deserialized outside the classloader the mock was created.  At the moment it s enabled automatically when using  withSettings().serializable() .  It still require to have Mockito on the classpath of the JVM classloader where it is deserialized.
5 ;  test/org/mockitousage/basicapi/MocksSerializationTest.java ; Mock serialization/deserialization across classloader/JVM ; This pull request will enable mocks to be serialized in a certain way  that will allow them to be serialized and especially deserialized outside the classloader the mock was created.  At the moment it s enabled automatically when using  withSettings().serializable() .  It still require to have Mockito on the classpath of the JVM classloader where it is deserialized.
6 ; subprojects/testng/src/main/java/org/mockito/testng/MockitoBeforeTestNGMethod.java ; Improved MockitoTestNGListener by making it reset argument captors before each test ; Before each run of a TestNG test the Captor arguments need to be reset.
6 ;  subprojects/testng/src/test/java/org/mockitousage/testng/CaptorAnnotatedFieldShouldBeClearedTest.java ; Improved MockitoTestNGListener by making it reset argument captors before each test ; Before each run of a TestNG test the Captor arguments need to be reset.
7 ; src/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java ; Refactoring: Remove unused import ; Hi   ClassImposterizer is no longer used in ReturnsMocks  this patch allows us in the Android Open Source Project to build ReturnsMocks without building ClassImposterizer (which ultimately depends on cglib-and-asm  which we can t use.)  Thanks  Ian
10 ; src/org/mockito/MockingDetails.java ; New  MockingDetails.getInvocations  method for inspecting what happened with the mock ; A simple implementation for [Issue 178](https://code.google.com/p/mockito/issues/detail?can=2&start=0&num=100&q=&colspec=ID%20Type%20Status%20Priority%20Milestone%20Owner%20Summary&groupby=&sort=type&id=178)  Modified the MockingDetails API to expose a getInvocations() method. This uses the invocation container from the MockUtil object to return a collection of Invocations (which is in the org.mockito.invocation package). This enables users to debug and see invocations on a given mock and use the debugger (or code) to see arguments passed  the target method  etc. 
10 ;  src/org/mockito/internal/util/DefaultMockingDetails.java ; New  MockingDetails.getInvocations  method for inspecting what happened with the mock ; A simple implementation for [Issue 178](https://code.google.com/p/mockito/issues/detail?can=2&start=0&num=100&q=&colspec=ID%20Type%20Status%20Priority%20Milestone%20Owner%20Summary&groupby=&sort=type&id=178)  Modified the MockingDetails API to expose a getInvocations() method. This uses the invocation container from the MockUtil object to return a collection of Invocations (which is in the org.mockito.invocation package). This enables users to debug and see invocations on a given mock and use the debugger (or code) to see arguments passed  the target method  etc. 
10 ;  test/org/mockito/MockingDetailsTest.java ; New  MockingDetails.getInvocations  method for inspecting what happened with the mock ; A simple implementation for [Issue 178](https://code.google.com/p/mockito/issues/detail?can=2&start=0&num=100&q=&colspec=ID%20Type%20Status%20Priority%20Milestone%20Owner%20Summary&groupby=&sort=type&id=178)  Modified the MockingDetails API to expose a getInvocations() method. This uses the invocation container from the MockUtil object to return a collection of Invocations (which is in the org.mockito.invocation package). This enables users to debug and see invocations on a given mock and use the debugger (or code) to see arguments passed  the target method  etc. 
14 ; src/org/mockito/exceptions/Reporter.java ; Deprecated timeout().never()  in line with timeout().atMost() ; Timeout().atMost() is deprecated due to issue 235: https://code.google.com/p/mockito/issues/detail?id=235  These exact same arguments apply to never()  both verification modes are extremely likely to create assertions that immediately pass  and do not test what they re intended to test. This patch therefore deprecates never() similarly.  Fairly shortly I m also planning on implementing verify(mock  during(x).[...])  as a counterpart to timeout which always waits the full time  as discussed in issue 347: https://code.google.com/p/mockito/issues/detail?id=347. This should allow for the kind of assertion behaviour that timeout().never() implies.  (Also some minor whitespace tidy up and spelling corrections)
14 ;  src/org/mockito/verification/Timeout.java ; Deprecated timeout().never()  in line with timeout().atMost() ; Timeout().atMost() is deprecated due to issue 235: https://code.google.com/p/mockito/issues/detail?id=235  These exact same arguments apply to never()  both verification modes are extremely likely to create assertions that immediately pass  and do not test what they re intended to test. This patch therefore deprecates never() similarly.  Fairly shortly I m also planning on implementing verify(mock  during(x).[...])  as a counterpart to timeout which always waits the full time  as discussed in issue 347: https://code.google.com/p/mockito/issues/detail?id=347. This should allow for the kind of assertion behaviour that timeout().never() implies.  (Also some minor whitespace tidy up and spelling corrections)
15 ; test/org/mockito/verification/TimeoutTest.java ; Verification with timout measures time more more accurately ; The previous timeout implementation doesn t measure time correctly: it only counts time spent intentionally sleeping  thus losing time on anything that happens when not sleeping (both the actual verification time  and time spent in other threads during verification)  and gaining time if any InterruptedExceptions occur.  Typically this means that timeout()s actually run for a longer than they re intended to. The fixed test demonstrates this well  previous the timeout was set to exactly the minimum possible time the sleeps in the code alone could ve taken  ignoring all processing time  and this test consistently passed. After the changes it now fails (as it probably should).  This patch fixes that by just measuring the time directly. I ve also fixed some variables names that were slightly annoying  and that now-failing test has a 500ms buffer before it times out.
15 ;  test/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java ; Verification with timout measures time more more accurately ; The previous timeout implementation doesn t measure time correctly: it only counts time spent intentionally sleeping  thus losing time on anything that happens when not sleeping (both the actual verification time  and time spent in other threads during verification)  and gaining time if any InterruptedExceptions occur.  Typically this means that timeout()s actually run for a longer than they re intended to. The fixed test demonstrates this well  previous the timeout was set to exactly the minimum possible time the sleeps in the code alone could ve taken  ignoring all processing time  and this test consistently passed. After the changes it now fails (as it probably should).  This patch fixes that by just measuring the time directly. I ve also fixed some variables names that were slightly annoying  and that now-failing test has a 500ms buffer before it times out.
15 ;  test/org/mockitousage/bugs/TimeoutWithAtMostOrNeverShouldBeDisabledTest.java ; Verification with timout measures time more more accurately ; The previous timeout implementation doesn t measure time correctly: it only counts time spent intentionally sleeping  thus losing time on anything that happens when not sleeping (both the actual verification time  and time spent in other threads during verification)  and gaining time if any InterruptedExceptions occur.  Typically this means that timeout()s actually run for a longer than they re intended to. The fixed test demonstrates this well  previous the timeout was set to exactly the minimum possible time the sleeps in the code alone could ve taken  ignoring all processing time  and this test consistently passed. After the changes it now fails (as it probably should).  This patch fixes that by just measuring the time directly. I ve also fixed some variables names that were slightly annoying  and that now-failing test has a 500ms buffer before it times out.
21 ; src/org/mockito/internal/matchers/EqualsWithDelta.java ; Improved behavior of EqualsWithDelta with regards to null handling ; Added check to the EqualsWithDelta matcher   If the actual and expected objects are the same.
21 ;  test/org/mockitousage/bugs/EqualsWithDeltaTest.java ; Improved behavior of EqualsWithDelta with regards to null handling ; Added check to the EqualsWithDelta matcher   If the actual and expected objects are the same.
22 ; src/org/mockito/stubbing/Answer.java ; Improved the javadoc example of custom Answer implementation ; So a developer can just copy and paste code from javadocs  snippet to have the expected result.
24 ;  test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java ; Avoided classloader issue when testing in Eclipse plugins environment ; nan
24 ;  test/org/mockitoutil/ClassLoaders.java ; Avoided classloader issue when testing in Eclipse plugins environment ; nan
24 ;  test/org/mockitoutil/ClassLoadersTest.java ; Avoided classloader issue when testing in Eclipse plugins environment ; nan
29 ; src/org/mockito/internal/util/reflection/FieldInitializer.java ; Smarter constructor injection by choosing  biggest  constructor instead of the default one ; See https://code.google.com/p/mockito/issues/detail?id=421  Added additional condition to sorting of constructors by checking amount of mockable constructor arguments
29 ;  test/org/mockitousage/annotation/MockInjectionUsingConstructorIssue421Test.java ; Smarter constructor injection by choosing  biggest  constructor instead of the default one ; See https://code.google.com/p/mockito/issues/detail?id=421  Added additional condition to sorting of constructors by checking amount of mockable constructor arguments
30 ; src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java ; Deep stub style mocks can be serialized ; See https://code.google.com/p/mockito/issues/detail?id=399
32 ; test/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java ; Fixed the behavior of compareTo method of the mock objects ; See https://code.google.com/p/mockito/issues/detail?id=467  Fix compareTo behaviour the same objects
36 ; src/org/mockito/internal/invocation/finder/VerifiableInvocationsFinder.java ; Refactoring: inner implementations of Filter and Comparator should be static ; nan
37 ; src/org/mockito/BDDMockito.java ; Refactoring: avoid static keyword in inner interface definition ; inner interfaces are implicitly static
37 ;  src/org/mockito/internal/creation/AcrossJVMSerializationFeature.java ; Refactoring: avoid static keyword in inner interface definition ; inner interfaces are implicitly static
37 ;  src/org/mockito/internal/util/collections/ListUtil.java ; Refactoring: avoid static keyword in inner interface definition ; inner interfaces are implicitly static
37 ;  src/org/mockito/internal/util/reflection/GenericMetadataSupport.java ; Refactoring: avoid static keyword in inner interface definition ; inner interfaces are implicitly static
37 ;  test/org/mockito/internal/InvalidStateDetectionTest.java ; Refactoring: avoid static keyword in inner interface definition ; inner interfaces are implicitly static
37 ;  test/org/mockito/internal/util/reflection/FieldInitializerTest.java ; Refactoring: avoid static keyword in inner interface definition ; inner interfaces are implicitly static
37 ;  test/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java ; Refactoring: avoid static keyword in inner interface definition ; inner interfaces are implicitly static
37 ;  test/org/mockitousage/bugs/CovariantOverrideTest.java ; Refactoring: avoid static keyword in inner interface definition ; inner interfaces are implicitly static
37 ;  test/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java ; Refactoring: avoid static keyword in inner interface definition ; inner interfaces are implicitly static
37 ;  test/org/mockitoutil/SimplePerRealmReloadingClassLoader.java ; Refactoring: avoid static keyword in inner interface definition ; inner interfaces are implicitly static
38 ; src/org/mockito/BDDMockito.java ; New  then  method for BDD-style interaction testing ; New feature in BddMockito for BDD then part of the test which allows mock behavior verification by using  Mockito#verify(Object) . For example we have classes Person and Bike:      java Bike bike = new Bike()  Person person = mock(Person.class)       and the following interaction      java person.ride(bike)  person.ride(bike)       Current (non BDD) behavior verification would go like:      java verify(person  times(2)).ride(bike)       This feature introduces the following way of verification:      java then(person).should(times(2)).ride(bike)     
38 ;  src/org/mockito/Mockito.java ; New  then  method for BDD-style interaction testing ; New feature in BddMockito for BDD then part of the test which allows mock behavior verification by using  Mockito#verify(Object) . For example we have classes Person and Bike:      java Bike bike = new Bike()  Person person = mock(Person.class)       and the following interaction      java person.ride(bike)  person.ride(bike)       Current (non BDD) behavior verification would go like:      java verify(person  times(2)).ride(bike)       This feature introduces the following way of verification:      java then(person).should(times(2)).ride(bike)     
39 ; src/org/mockito/exceptions/Reporter.java ; Allow calling real implementation of jdk8 extension methods ; See also the google code ticket: https://code.google.com/p/mockito/issues/detail?id=456  Enable calling real implementation on extensions method from jdk8 Additionally change add validation checking whether callRealMethod is invoked on abstract methods. In fact resolving issue could be achieved by removing this validation because when someone do next thing: 1: when(someInteface.abstractMethod()).thanCallRealMethod()  2: someInteface.abstractMethod() Exception will be throwned on second line informing that there were attempt to invoke abstract method
39 ;  src/org/mockito/internal/creation/DelegatingMethod.java ; Allow calling real implementation of jdk8 extension methods ; See also the google code ticket: https://code.google.com/p/mockito/issues/detail?id=456  Enable calling real implementation on extensions method from jdk8 Additionally change add validation checking whether callRealMethod is invoked on abstract methods. In fact resolving issue could be achieved by removing this validation because when someone do next thing: 1: when(someInteface.abstractMethod()).thanCallRealMethod()  2: someInteface.abstractMethod() Exception will be throwned on second line informing that there were attempt to invoke abstract method
39 ;  src/org/mockito/internal/invocation/AbstractAwareMethod.java ; Allow calling real implementation of jdk8 extension methods ; See also the google code ticket: https://code.google.com/p/mockito/issues/detail?id=456  Enable calling real implementation on extensions method from jdk8 Additionally change add validation checking whether callRealMethod is invoked on abstract methods. In fact resolving issue could be achieved by removing this validation because when someone do next thing: 1: when(someInteface.abstractMethod()).thanCallRealMethod()  2: someInteface.abstractMethod() Exception will be throwned on second line informing that there were attempt to invoke abstract method
39 ;  src/org/mockito/internal/invocation/InvocationImpl.java ; Allow calling real implementation of jdk8 extension methods ; See also the google code ticket: https://code.google.com/p/mockito/issues/detail?id=456  Enable calling real implementation on extensions method from jdk8 Additionally change add validation checking whether callRealMethod is invoked on abstract methods. In fact resolving issue could be achieved by removing this validation because when someone do next thing: 1: when(someInteface.abstractMethod()).thanCallRealMethod()  2: someInteface.abstractMethod() Exception will be throwned on second line informing that there were attempt to invoke abstract method
39 ;  src/org/mockito/internal/invocation/MockitoMethod.java ; Allow calling real implementation of jdk8 extension methods ; See also the google code ticket: https://code.google.com/p/mockito/issues/detail?id=456  Enable calling real implementation on extensions method from jdk8 Additionally change add validation checking whether callRealMethod is invoked on abstract methods. In fact resolving issue could be achieved by removing this validation because when someone do next thing: 1: when(someInteface.abstractMethod()).thanCallRealMethod()  2: someInteface.abstractMethod() Exception will be throwned on second line informing that there were attempt to invoke abstract method
39 ;  src/org/mockito/internal/invocation/SerializableMethod.java ; Allow calling real implementation of jdk8 extension methods ; See also the google code ticket: https://code.google.com/p/mockito/issues/detail?id=456  Enable calling real implementation on extensions method from jdk8 Additionally change add validation checking whether callRealMethod is invoked on abstract methods. In fact resolving issue could be achieved by removing this validation because when someone do next thing: 1: when(someInteface.abstractMethod()).thanCallRealMethod()  2: someInteface.abstractMethod() Exception will be throwned on second line informing that there were attempt to invoke abstract method
39 ;  src/org/mockito/internal/stubbing/answers/AnswersValidator.java ; Allow calling real implementation of jdk8 extension methods ; See also the google code ticket: https://code.google.com/p/mockito/issues/detail?id=456  Enable calling real implementation on extensions method from jdk8 Additionally change add validation checking whether callRealMethod is invoked on abstract methods. In fact resolving issue could be achieved by removing this validation because when someone do next thing: 1: when(someInteface.abstractMethod()).thanCallRealMethod()  2: someInteface.abstractMethod() Exception will be throwned on second line informing that there were attempt to invoke abstract method
39 ;  src/org/mockito/internal/stubbing/answers/MethodInfo.java ; Allow calling real implementation of jdk8 extension methods ; See also the google code ticket: https://code.google.com/p/mockito/issues/detail?id=456  Enable calling real implementation on extensions method from jdk8 Additionally change add validation checking whether callRealMethod is invoked on abstract methods. In fact resolving issue could be achieved by removing this validation because when someone do next thing: 1: when(someInteface.abstractMethod()).thanCallRealMethod()  2: someInteface.abstractMethod() Exception will be throwned on second line informing that there were attempt to invoke abstract method
41 ; src/org/mockito/internal/invocation/InvocationImpl.java ; New  getArgumentAt  method for convenient implementation of custom Answers ; The problem is when i need to use answers  I quite often need to cast these arguments. I propose two methods in InvocationOnMock  so we can get two arguments of method typesafely  so this piece of code       java @SuppressWarnings( unchecked )   doAnswer(new Answer() {       public Object answer(InvocationOnMock invocation) {           Object[] args = invocation.getArguments()            int count  = (int)args[1]           //do something       }})   .when(mock).someMethod()       will be better:      java   doAnswer(new Answer() {       public Object answer(InvocationOnMock invocation) {            int count  = invocation.getArgumentAt(1  int.class)           //do something       }})   .when(mock).someMethod()     
41 ;  src/org/mockito/invocation/InvocationOnMock.java ; New  getArgumentAt  method for convenient implementation of custom Answers ; The problem is when i need to use answers  I quite often need to cast these arguments. I propose two methods in InvocationOnMock  so we can get two arguments of method typesafely  so this piece of code       java @SuppressWarnings( unchecked )   doAnswer(new Answer() {       public Object answer(InvocationOnMock invocation) {           Object[] args = invocation.getArguments()            int count  = (int)args[1]           //do something       }})   .when(mock).someMethod()       will be better:      java   doAnswer(new Answer() {       public Object answer(InvocationOnMock invocation) {            int count  = invocation.getArgumentAt(1  int.class)           //do something       }})   .when(mock).someMethod()     
41 ;  test/org/mockito/internal/invocation/InvocationImplTest.java ; New  getArgumentAt  method for convenient implementation of custom Answers ; The problem is when i need to use answers  I quite often need to cast these arguments. I propose two methods in InvocationOnMock  so we can get two arguments of method typesafely  so this piece of code       java @SuppressWarnings( unchecked )   doAnswer(new Answer() {       public Object answer(InvocationOnMock invocation) {           Object[] args = invocation.getArguments()            int count  = (int)args[1]           //do something       }})   .when(mock).someMethod()       will be better:      java   doAnswer(new Answer() {       public Object answer(InvocationOnMock invocation) {            int count  = invocation.getArgumentAt(1  int.class)           //do something       }})   .when(mock).someMethod()     
41 ;  test/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java ; New  getArgumentAt  method for convenient implementation of custom Answers ; The problem is when i need to use answers  I quite often need to cast these arguments. I propose two methods in InvocationOnMock  so we can get two arguments of method typesafely  so this piece of code       java @SuppressWarnings( unchecked )   doAnswer(new Answer() {       public Object answer(InvocationOnMock invocation) {           Object[] args = invocation.getArguments()            int count  = (int)args[1]           //do something       }})   .when(mock).someMethod()       will be better:      java   doAnswer(new Answer() {       public Object answer(InvocationOnMock invocation) {            int count  = invocation.getArgumentAt(1  int.class)           //do something       }})   .when(mock).someMethod()     
44 ; src/org/mockito/BDDMockito.java ; Refactoring: removed then-verify ; Removed verify alias in BddMockito.
44 ;  test/org/mockitousage/customization/BDDMockitoTest.java ; Refactoring: removed then-verify ; Removed verify alias in BddMockito.
47 ; src/org/mockito/internal/matchers/Equality.java ; Issue484 fix ; This fixes the issue when comparing 2 identical objects which throw an exception in their equals method.
56 ; src/org/mockito/AdditionalAnswers.java ; Fixed wrong javadoc for AdditionalAnswers ; Fixed wrong javadoc for AdditionalAnswers
59 ; test/org/mockito/internal/creation/MockSettingsImplTest.java ; Refactoring: Added casts to supress varargs warnings ; nan
59 ;  test/org/mockitousage/basicapi/UsingVarargsTest.java ; Refactoring: Added casts to supress varargs warnings ; nan
59 ;  test/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java ; Refactoring: Added casts to supress varargs warnings ; nan
59 ;  test/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java ; Refactoring: Added casts to supress varargs warnings ; nan
59 ;  test/org/mockitousage/verification/BasicVerificationInOrderTest.java ; Refactoring: Added casts to supress varargs warnings ; nan
59 ;  test/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java ; Refactoring: Added casts to supress varargs warnings ; nan
63 ; src/org/mockito/exceptions/Reporter.java ; Improve NoInteractionsWanted report to include the name of the mock ; This is useful feedback when using multiple mocks in verifyNoMoreInteractions().
63 ;  test/org/mockito/internal/verification/NoMoreInteractionsTest.java ; Improve NoInteractionsWanted report to include the name of the mock ; This is useful feedback when using multiple mocks in verifyNoMoreInteractions().
63 ;  test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java ; Improve NoInteractionsWanted report to include the name of the mock ; This is useful feedback when using multiple mocks in verifyNoMoreInteractions().
65 ; src/org/mockito/internal/creation/DelegatingMethod.java ; Refactoring: Cleanup ignores and fix 1.5 compatibility ; This branch contains a few cleanups I had to do after importing mockito: - There are a few more ignores required for Eclipse.  - As Mockito is configured for 1.5 source compatibility it should adhere to it. Therefore I removed the @Override annotation where it would cause compile errors on 1.5
65 ;  src/org/mockito/internal/invocation/InvocationImpl.java ; Refactoring: Cleanup ignores and fix 1.5 compatibility ; This branch contains a few cleanups I had to do after importing mockito: - There are a few more ignores required for Eclipse.  - As Mockito is configured for 1.5 source compatibility it should adhere to it. Therefore I removed the @Override annotation where it would cause compile errors on 1.5
65 ;  test/org/mockitousage/serialization/DeepStubsSerializableTest.java ; Refactoring: Cleanup ignores and fix 1.5 compatibility ; This branch contains a few cleanups I had to do after importing mockito: - There are a few more ignores required for Eclipse.  - As Mockito is configured for 1.5 source compatibility it should adhere to it. Therefore I removed the @Override annotation where it would cause compile errors on 1.5
68 ; src/org/mockito/Mockito.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/exceptions/base/MockitoAssertionError.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/internal/verification/AtLeast.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/internal/verification/AtMost.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/internal/verification/Calls.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/internal/verification/Description.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/internal/verification/InOrderWrapper.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/internal/verification/MockAwareVerificationMode.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/internal/verification/NoMoreInteractions.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/internal/verification/Only.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/internal/verification/Times.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/internal/verification/VerificationModeFactory.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/internal/verification/VerificationOverTimeImpl.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/verification/After.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/verification/Timeout.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  src/org/mockito/verification/VerificationMode.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  test/org/mockito/exceptions/base/MockitoAssertionErrorTest.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  test/org/mockito/internal/verification/DescriptionTest.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  test/org/mockito/internal/verification/DummyVerificationMode.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
68 ;  test/org/mockito/internal/verification/VerificationWithDescriptionTest.java ; Added custom failure message to Mockito.verify. Issue 482 ; Issue 482: passing custom failure message to Mockito.verify
87 ; src/org/mockito/internal/creation/DelegatingMethod.java ; Fixed DelegatingMethod.equals() so that it s easier to extend Mockito by custom verification modes ; Currently if you create a DelegatingMethod and compare it to itself using .equals() it will show as not equal because the .equals() method expects a java.lang.reflect.Method (without explicitly stating such).  This has a knock on effect on the evaluation of InvocationImpl.equals() which at runtime may be using a DelegatingMethod in its .equals().  I have changed .equals() and .hashCode() in DelegatingMethod to a more appropriate implementation  which can handle both the case where the input object is a DelegatingMethod and where it is a java.lang.reflect.Method.  I ran up against this issue when creating a custom VerificationMode which used InvocationImpl.equals() to check that the appropriate invocation was made.  My comparison failed even though I was comparing two references to the same InvocationImpl instance.
103 ; src/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java ; Fixes issue #99 : RETURNS_DEEP_STUBS automatically tries to create serializable mocks ; See issue #99   What it does is propagating the serializing mode of the parent  upon each mock creation when deep stubbing.  Before each mock created where made serializable by default. Which is not an issue when the types have a default no arg constructor  but may become problematic when the type didn t have one  Mockito would report an error explaining that it couldn t mock this type.
103 ;  test/org/mockitousage/bugs/DeepStubsWronglyReportsSerializationProblemsTest.java ; Fixes issue #99 : RETURNS_DEEP_STUBS automatically tries to create serializable mocks ; See issue #99   What it does is propagating the serializing mode of the parent  upon each mock creation when deep stubbing.  Before each mock created where made serializable by default. Which is not an issue when the types have a default no arg constructor  but may become problematic when the type didn t have one  Mockito would report an error explaining that it couldn t mock this type.
113 ; src/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java ; Improved exception handling of AdditionalAnswers#delegatesTo ; When using the AdditionalAnswers#delegatesTo method  exceptions thrown by the delegate are wrapped in InvocationTargetException due to invocation via Method. Instead  the original exception from the delegate should be propagated to the caller.
113 ;  test/org/mockitousage/stubbing/StubbingWithDelegate.java ; Improved exception handling of AdditionalAnswers#delegatesTo ; When using the AdditionalAnswers#delegatesTo method  exceptions thrown by the delegate are wrapped in InvocationTargetException due to invocation via Method. Instead  the original exception from the delegate should be propagated to the caller.
142 ; test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java ; Fix #128 : Deep stubbing with generic responses in the call chain is not working ; nan
144 ; src/org/mockito/Answers.java ; enum Answers implements now Answer<Object> ; The enum type Answers implements now the Answer interface. This allows us to use the enum values in  Mockito.mock(Class Answer) . This is handy when you have to test legacy code with PowerMockito and want to use both  @Mock  and  Mockito.mock(..) .      java @Mock(answers=RETURNS_DEEP_STUBS)  ClassA a  ClassB b   public void setUp(){   b= mock(ClassB Mockito.RETURNS_DEEP_STUBS)   //<< static import is not possible here  but with this pull request we can use RETURNS_DEEP_STUBS we used in @Mock. }    
176 ; src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java ; Make PropertyAndSetterInjection field sorting consistent ; #155 is caused by calling  Collections.sort  with a comparator that isn t always transitive  as in the case where sorting by name and sorting by type hierarchy imply different orders.  For example  with fields of type  [Iterable  Integer  Number]   it gives  Iterable == Integer  and  Iterable == Number   but also an inconsistent  Integer < Number .  I m not sure it s possible to sort consistently with a stateless  Comparator   so this change switches to a  sortSuperTypesLast  method that first sorts by name and then shuffles any subclasses to after their superclasses. It s slower  but should be deterministic. The existing tests are preserved by leaving behind a dummy  Comparator  that uses the new sort method. New tests make sure that the sorted ordering doesn t depend on the original order.  Fixes #155.
176 ;  src/org/mockito/internal/util/reflection/SuperTypesLastSorter.java ; Make PropertyAndSetterInjection field sorting consistent ; #155 is caused by calling  Collections.sort  with a comparator that isn t always transitive  as in the case where sorting by name and sorting by type hierarchy imply different orders.  For example  with fields of type  [Iterable  Integer  Number]   it gives  Iterable == Integer  and  Iterable == Number   but also an inconsistent  Integer < Number .  I m not sure it s possible to sort consistently with a stateless  Comparator   so this change switches to a  sortSuperTypesLast  method that first sorts by name and then shuffles any subclasses to after their superclasses. It s slower  but should be deterministic. The existing tests are preserved by leaving behind a dummy  Comparator  that uses the new sort method. New tests make sure that the sorted ordering doesn t depend on the original order.  Fixes #155.
176 ;  test/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java ; Make PropertyAndSetterInjection field sorting consistent ; #155 is caused by calling  Collections.sort  with a comparator that isn t always transitive  as in the case where sorting by name and sorting by type hierarchy imply different orders.  For example  with fields of type  [Iterable  Integer  Number]   it gives  Iterable == Integer  and  Iterable == Number   but also an inconsistent  Integer < Number .  I m not sure it s possible to sort consistently with a stateless  Comparator   so this change switches to a  sortSuperTypesLast  method that first sorts by name and then shuffles any subclasses to after their superclasses. It s slower  but should be deterministic. The existing tests are preserved by leaving behind a dummy  Comparator  that uses the new sort method. New tests make sure that the sorted ordering doesn t depend on the original order.  Fixes #155.
201 ; src/org/mockito/ArgumentCaptor.java ; Fixes #200 : ArgumentCaptor.forClass is more friendly with generic types ; We modify the signature of  ArgumentCaptor.fromClass(Class<T>)  to better express the type relationship between the argument and the return type.  There is no change to the behavior of the method.  This change is to allow expressions such as:      java ArgumentCaptor<Consumer<String>> captor = ArgumentCaptor.fromClass(Consumer.class)      to type check  which is desirable as a convenience to users of  ArgumentCaptor .  We also add two tests to document this extension to the api  both of which fail to compile without this change to  ArgumentCaptor.fromClass .  These tests are unusual in that they make no assertions  this is justified because the change which they test is a change to the formal  or compile-time  properties of  ArgumentCaptor   not its behavior.
201 ;  test/org/mockitousage/matchers/CapturingArgumentsTest.java ; Fixes #200 : ArgumentCaptor.forClass is more friendly with generic types ; We modify the signature of  ArgumentCaptor.fromClass(Class<T>)  to better express the type relationship between the argument and the return type.  There is no change to the behavior of the method.  This change is to allow expressions such as:      java ArgumentCaptor<Consumer<String>> captor = ArgumentCaptor.fromClass(Consumer.class)      to type check  which is desirable as a convenience to users of  ArgumentCaptor .  We also add two tests to document this extension to the api  both of which fail to compile without this change to  ArgumentCaptor.fromClass .  These tests are unusual in that they make no assertions  this is justified because the change which they test is a change to the formal  or compile-time  properties of  ArgumentCaptor   not its behavior.
202 ; src/org/mockito/exceptions/Reporter.java ; Better protection against incompatible returned value of default answer  and get safely mock name ; Fixes issue #187  The value returned by the default answer is now validated to make sure there won t be a  ClassCastException  if the default value is incompatible with return type.  Reporter now fetch in safer way the mock name  in case the default answer is incorrectly implemented. This avoid a  ClassCastException  when reporting a verification issue.
202 ;  src/org/mockito/internal/handler/MockHandlerImpl.java ; Better protection against incompatible returned value of default answer  and get safely mock name ; Fixes issue #187  The value returned by the default answer is now validated to make sure there won t be a  ClassCastException  if the default value is incompatible with return type.  Reporter now fetch in safer way the mock name  in case the default answer is incorrectly implemented. This avoid a  ClassCastException  when reporting a verification issue.
202 ;  src/org/mockito/internal/invocation/InvocationImpl.java ; Better protection against incompatible returned value of default answer  and get safely mock name ; Fixes issue #187  The value returned by the default answer is now validated to make sure there won t be a  ClassCastException  if the default value is incompatible with return type.  Reporter now fetch in safer way the mock name  in case the default answer is incorrectly implemented. This avoid a  ClassCastException  when reporting a verification issue.
202 ;  src/org/mockito/internal/stubbing/answers/AnswersValidator.java ; Better protection against incompatible returned value of default answer  and get safely mock name ; Fixes issue #187  The value returned by the default answer is now validated to make sure there won t be a  ClassCastException  if the default value is incompatible with return type.  Reporter now fetch in safer way the mock name  in case the default answer is incorrectly implemented. This avoid a  ClassCastException  when reporting a verification issue.
202 ;  src/org/mockito/invocation/Invocation.java ; Better protection against incompatible returned value of default answer  and get safely mock name ; Fixes issue #187  The value returned by the default answer is now validated to make sure there won t be a  ClassCastException  if the default value is incompatible with return type.  Reporter now fetch in safer way the mock name  in case the default answer is incorrectly implemented. This avoid a  ClassCastException  when reporting a verification issue.
202 ;  test/org/mockito/internal/handler/MockHandlerImplTest.java ; Better protection against incompatible returned value of default answer  and get safely mock name ; Fixes issue #187  The value returned by the default answer is now validated to make sure there won t be a  ClassCastException  if the default value is incompatible with return type.  Reporter now fetch in safer way the mock name  in case the default answer is incorrectly implemented. This avoid a  ClassCastException  when reporting a verification issue.
202 ;  test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java ; Better protection against incompatible returned value of default answer  and get safely mock name ; Fixes issue #187  The value returned by the default answer is now validated to make sure there won t be a  ClassCastException  if the default value is incompatible with return type.  Reporter now fetch in safer way the mock name  in case the default answer is incorrectly implemented. This avoid a  ClassCastException  when reporting a verification issue.
202 ;  test/org/mockito/internal/verification/NoMoreInteractionsTest.java ; Better protection against incompatible returned value of default answer  and get safely mock name ; Fixes issue #187  The value returned by the default answer is now validated to make sure there won t be a  ClassCastException  if the default value is incompatible with return type.  Reporter now fetch in safer way the mock name  in case the default answer is incorrectly implemented. This avoid a  ClassCastException  when reporting a verification issue.
202 ;  test/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java ; Better protection against incompatible returned value of default answer  and get safely mock name ; Fixes issue #187  The value returned by the default answer is now validated to make sure there won t be a  ClassCastException  if the default value is incompatible with return type.  Reporter now fetch in safer way the mock name  in case the default answer is incorrectly implemented. This avoid a  ClassCastException  when reporting a verification issue.
202 ;  test/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java ; Better protection against incompatible returned value of default answer  and get safely mock name ; Fixes issue #187  The value returned by the default answer is now validated to make sure there won t be a  ClassCastException  if the default value is incompatible with return type.  Reporter now fetch in safer way the mock name  in case the default answer is incorrectly implemented. This avoid a  ClassCastException  when reporting a verification issue.
207 ; src/org/mockito/verification/Timeout.java ; Fixes #197 : Blocks ability to use negative value for timeout() and after() method. ; It should fix issue #197.   If user uses Mockito.after() or Mockito.timeout() with negative values  then friendly reminder exception with details will be thrown.
211 ; src/org/mockito/internal/invocation/CapturesArgumentsFromInvocation.java ; ArgumentCaptor no longer working for varargs ; Fixes #188 . These commits should fix issue with capturing varargs.
211 ;  src/org/mockito/internal/invocation/InvocationMarker.java ; ArgumentCaptor no longer working for varargs ; Fixes #188 . These commits should fix issue with capturing varargs.
211 ;  src/org/mockito/internal/invocation/InvocationMatcher.java ; ArgumentCaptor no longer working for varargs ; Fixes #188 . These commits should fix issue with capturing varargs.
211 ;  test/org/mockito/internal/invocation/InvocationMarkerTest.java ; ArgumentCaptor no longer working for varargs ; Fixes #188 . These commits should fix issue with capturing varargs.
211 ;  test/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java ; ArgumentCaptor no longer working for varargs ; Fixes #188 . These commits should fix issue with capturing varargs.
215 ; src/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java ; Improves InjectMocks behavior when injectee has multiple fields of the same type ; Fix to @InjectMocks which injected incorrectly when multiple fields of the same type could be injected into  but only supplying 1 mock. This makes sure that whenever there are multiple type candidates  it will hold off injecting if it finds a different field which has the correct matching name.
215 ;  src/org/mockito/internal/configuration/injection/filter/FinalMockCandidateFilter.java ; Improves InjectMocks behavior when injectee has multiple fields of the same type ; Fix to @InjectMocks which injected incorrectly when multiple fields of the same type could be injected into  but only supplying 1 mock. This makes sure that whenever there are multiple type candidates  it will hold off injecting if it finds a different field which has the correct matching name.
215 ;  src/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java ; Improves InjectMocks behavior when injectee has multiple fields of the same type ; Fix to @InjectMocks which injected incorrectly when multiple fields of the same type could be injected into  but only supplying 1 mock. This makes sure that whenever there are multiple type candidates  it will hold off injecting if it finds a different field which has the correct matching name.
215 ;  src/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java ; Improves InjectMocks behavior when injectee has multiple fields of the same type ; Fix to @InjectMocks which injected incorrectly when multiple fields of the same type could be injected into  but only supplying 1 mock. This makes sure that whenever there are multiple type candidates  it will hold off injecting if it finds a different field which has the correct matching name.
215 ;  src/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java ; Improves InjectMocks behavior when injectee has multiple fields of the same type ; Fix to @InjectMocks which injected incorrectly when multiple fields of the same type could be injected into  but only supplying 1 mock. This makes sure that whenever there are multiple type candidates  it will hold off injecting if it finds a different field which has the correct matching name.
215 ;  test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java ; Improves InjectMocks behavior when injectee has multiple fields of the same type ; Fix to @InjectMocks which injected incorrectly when multiple fields of the same type could be injected into  but only supplying 1 mock. This makes sure that whenever there are multiple type candidates  it will hold off injecting if it finds a different field which has the correct matching name.
221 ; src/org/mockito/BDDMockito.java ; Fixes #212 : Add shouldHaveZeroInteractions as BDD version of verifyZeroInteractions ; Follow-up to #212 
221 ;  test/org/mockitousage/customization/BDDMockitoTest.java ; Fixes #212 : Add shouldHaveZeroInteractions as BDD version of verifyZeroInteractions ; Follow-up to #212 
222 ; src/org/mockito/BDDMockito.java ; Fixes #203 : Introduce BDD InOrder verification ; Follow-up to #203.
222 ;  test/org/mockitousage/customization/BDDMockitoTest.java ; Fixes #203 : Introduce BDD InOrder verification ; Follow-up to #203.
223 ; test/org/mockitoutil/ClassLoaders.java ; [#206] Fix issue related to windows path ; Problem was caused by file separator. Replacing hardcoded char  /  by File.seperatorChar solves issue. In the same file there is second occurence of this character but it is used with getResource(path) method -  in such case  /  is only acceptable separator.
229 ; src/org/mockito/Captor.java ; Fixes #228: fixed a verify() call example in @Captor javadoc ; nan
234 ;  mockmaker/bytebuddy/main/java/org/mockito/internal/creation/bytebuddy/MockBytecodeGenerator.java ; Cannot instantiate type with public method of a public parent class having a non public types in signature ; This should fix #233  (Awaiting delivery of bytebuddy fix https://github.com/raphw/byte-buddy/commit/6f223d93ee57b199abf0e7abaf4837df6d041f41)  Thanks @raphw 
234 ;  test/org/mockitousage/bugs/creation/PublicMethodInParentWithNonPublicTypeInSignatureTest.java ; Cannot instantiate type with public method of a public parent class having a non public types in signature ; This should fix #233  (Awaiting delivery of bytebuddy fix https://github.com/raphw/byte-buddy/commit/6f223d93ee57b199abf0e7abaf4837df6d041f41)  Thanks @raphw 
234 ;  test/org/mockitousage/bugs/creation/api/PublicClass.java ; Cannot instantiate type with public method of a public parent class having a non public types in signature ; This should fix #233  (Awaiting delivery of bytebuddy fix https://github.com/raphw/byte-buddy/commit/6f223d93ee57b199abf0e7abaf4837df6d041f41)  Thanks @raphw 
234 ;  test/org/mockitousage/bugs/creation/otherpackage/PublicParentClass.java ; Cannot instantiate type with public method of a public parent class having a non public types in signature ; This should fix #233  (Awaiting delivery of bytebuddy fix https://github.com/raphw/byte-buddy/commit/6f223d93ee57b199abf0e7abaf4837df6d041f41)  Thanks @raphw 
235 ; mockmaker/bytebuddy/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java ; Fixes #220 constructor invoking methods raise NPE ; In some recent version of mockito  @Spy  annotation will use the constructor rather than objenesis  that mean that constructor carry actual work. But since the interceptor set after instantiation  this raised an NPE with ByteBuddy. It wasn t an issue with CGLIB but it probably didn t event intercept such calls (unconfirmed at this point).  This PR aims to fix that by calling real code  if interceptor is not set  which can only happen if  ConstructorInstanciator  is used  Thanks to @raphw for his tip on this regard as well : https://github.com/raphw/byte-buddy/issues/32#issuecomment-113269844
235 ;  mockmaker/bytebuddy/main/java/org/mockito/internal/creation/bytebuddy/MockBytecodeGenerator.java ; Fixes #220 constructor invoking methods raise NPE ; In some recent version of mockito  @Spy  annotation will use the constructor rather than objenesis  that mean that constructor carry actual work. But since the interceptor set after instantiation  this raised an NPE with ByteBuddy. It wasn t an issue with CGLIB but it probably didn t event intercept such calls (unconfirmed at this point).  This PR aims to fix that by calling real code  if interceptor is not set  which can only happen if  ConstructorInstanciator  is used  Thanks to @raphw for his tip on this regard as well : https://github.com/raphw/byte-buddy/issues/32#issuecomment-113269844
235 ;  mockmaker/bytebuddy/main/java/org/mockito/internal/creation/bytebuddy/MockMethodInterceptor.java ; Fixes #220 constructor invoking methods raise NPE ; In some recent version of mockito  @Spy  annotation will use the constructor rather than objenesis  that mean that constructor carry actual work. But since the interceptor set after instantiation  this raised an NPE with ByteBuddy. It wasn t an issue with CGLIB but it probably didn t event intercept such calls (unconfirmed at this point).  This PR aims to fix that by calling real code  if interceptor is not set  which can only happen if  ConstructorInstanciator  is used  Thanks to @raphw for his tip on this regard as well : https://github.com/raphw/byte-buddy/issues/32#issuecomment-113269844
235 ;  test/org/mockitousage/bugs/ConstructorInvokingMethodShouldNotRaiseExceptionTest.java ; Fixes #220 constructor invoking methods raise NPE ; In some recent version of mockito  @Spy  annotation will use the constructor rather than objenesis  that mean that constructor carry actual work. But since the interceptor set after instantiation  this raised an NPE with ByteBuddy. It wasn t an issue with CGLIB but it probably didn t event intercept such calls (unconfirmed at this point).  This PR aims to fix that by calling real code  if interceptor is not set  which can only happen if  ConstructorInstanciator  is used  Thanks to @raphw for his tip on this regard as well : https://github.com/raphw/byte-buddy/issues/32#issuecomment-113269844
238 ; test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java ; Moves responsibility of isTypeMockable to MockMaker ; Mock makers may have different capabilities. Historically CGLIB and Mockito were deeply related  later Mockmaker was created to allow Android developers to use dexmaker to create mocks. But logic that decided if a type could be mocked still reside in the mockito base  while it should be the responsibility of the mockmaker.  Also for example one could create his own mockmaker that forbid to mock type if some annotation is present. 
239 ; src/main/java/org/mockito/BDDMockito.java ; Rework stubbing api with consecutive vararg to avoid JDK7+ warnings ; The motivation behind this rework  is that developers using JDK7+ see compiler warnings on some varargs methods.  While these warning are false alarms  users may not feel the same way. These compiler warnings cannot be entirely avoided   annotations like  @SafeVarargs  don t work on interfaces  and  @SuppressWarning({ unchecked    varargs })  have a limited impact on user code.  **As these annotations have limited impact  and most people use a single argument anyway  I propose to to introduce API that takes a single argument. While an overload can takes more arguments**  If we don t do that i.e. if we keep the same API with compiler warnings it may encourages users to add  @SuppressWarning({ unchecked    varargs })  in their test code  thus potentially hiding bugs in their code base.
240 ;  mockmaker/bytebuddy/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java ; Fixes coverage reports ; Test coverage reports have been broken with gradle without satisfying explanation  for quite some time. This pull request hopes to fix things
240 ;  test/org/mockitointegration/NoJUnitDependenciesTest.java ; Fixes coverage reports ; Test coverage reports have been broken with gradle without satisfying explanation  for quite some time. This pull request hopes to fix things
240 ;  test/org/mockitoutil/ClassLoaders.java ; Fixes coverage reports ; Test coverage reports have been broken with gradle without satisfying explanation  for quite some time. This pull request hopes to fix things
242 ; mockmaker/bytebuddy/main/java/org/mockito/internal/creation/bytebuddy/MockBytecodeGenerator.java ; Upgraded to Byte Buddy 0.6.11 and took improved features in use. ; Over the recent versions  several new features were added to Byte Buddy: 1. An interceptor is now automatically detecting if a default interface method can be invoked if no super method exists. 2.  @Origin  annotated methods are now automatically cached. 3. A field value can be read without generating a proxy using the  @FieldValue  annotation in order to avoid the overhead of the accessor. 4. Replaced Mockito s  SearchingClassLoader  with Byte Buddy s  MultipleParentClassLoader  to avoid the overhead of multiple class loader creation as class loaders are rather heavy objects for a VM. 5. Removed duplicated interception methods. 6. Added  @StubValue  to return correct default value for intercepted constructors. 7. Generified several  Class  values in order to make the project compile against Byte Buddy s  Class<?>  values. 8. Updated _out of sync_ OSGi manifest.  Also: Why does Mockito explicitly set the Java version for generated classes to version 5? If not specified explicitly  Mockito discovers the JVM version and generates the newest possible version . This way  Byte Buddy can support Java 8 default methods on demand.
252 ;  subprojects/testng/src/test/java/org/mockitousage/testng/AnnotatedFieldsShouldBeInitializedByMockitoTestNGListenerTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  subprojects/testng/src/test/java/org/mockitousage/testng/CaptorAnnotatedFieldShouldBeClearedTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  subprojects/testng/src/test/java/org/mockitousage/testng/ConfigurationMethodTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  subprojects/testng/src/test/java/org/mockitousage/testng/DontResetMocksIfNoListenerTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  subprojects/testng/src/test/java/org/mockitousage/testng/EnsureMocksAreInitializedBeforeBeforeClassMethodTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  subprojects/testng/src/test/java/org/mockitousage/testng/InitializeChildTestWhenParentHasListenerTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  subprojects/testng/src/test/java/org/mockitousage/testng/MockFieldsShouldBeResetBetweenTestMethodsTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  subprojects/testng/src/test/java/org/mockitousage/testng/TestWithoutListenerShouldNotInitializeAnnotatedFieldsTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  subprojects/testng/src/test/java/org/mockitousage/testng/failuretests/TestNGShouldFailWhenMockitoListenerFailsTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/AnnotationsAreCopiedFromMockedTypeTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/configuration/MockInjectionTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/creation/MockSettingsImplTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGeneratorTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/handler/InvocationNotifierHandlerTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/invocation/InvocationMatcherTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/matchers/CapturingMatcherTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/matchers/VarargCapturingMatcherTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/progress/HandyReturnValuesTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/util/MockCreationValidatorTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/util/MockUtilTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/util/junit/JUnitFailureHackerTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/util/reflection/BeanPropertySetterTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/util/reflection/FieldsTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockito/internal/verification/NoMoreInteractionsTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/annotation/MockInjectionUsingConstructorIssue421Test.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/annotation/SpyAnnotationTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/annotation/WrongSetOfAnnotationsTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/basicapi/MocksSerializationTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/bugs/EqualsWithDeltaTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/bugs/IOOBExceptionShouldNotBeThrownWhenNotCodingFluentlyTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/bugs/ParentClassNotPublicTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/bugs/creation/ShouldAllowInlineMockCreationTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/bugs/deepstubs/DeepStubsWronglyReportsSerializationProblemsTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/bugs/injection/Issue353InjectionMightNotHappenInCertainConfigurationTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/debugging/InvocationListenerCallbackTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/matchers/CapturingArgumentsTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/matchers/InvalidUseOfMatchersTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/misuse/SpyStubbingMisuseTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/serialization/DeepStubsSerializableTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/stubbing/DeepStubbingTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/stubbing/StubbingWithAdditionalAnswers.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitousage/stubbing/StubbingWithDelegateTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
252 ;  test/org/mockitoutil/ClassLoadersTest.java ; [#251] Migrate Fest Assert code to AssertJ ; Fixes #251
257 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockBytecodeGenerator.java ; Upgraded to Byte Buddy 0.6.12.  ; Fixes https://github.com/mockito/mockito/issues/253 - Adapted minor API changes.  - Added modifier resolver that removes the synchronization flag from intercepted methods.
261 ; src/main/java/org/mockito/Mockito.java ; Fixes #260: Typo in documentation ; Very minor typo in documentation: https://github.com/mockito/mockito/issues/260  There s an extra  at  (@) in the documentation.  Before it reads:  Annotating the JUnit test class with a @RunWith(@MockitoJUnitRunner.class)   After it reads:  Annotating the JUnit test class with a @RunWith(MockitoJUnitRunner.class)   ![image](https://cloud.githubusercontent.com/assets/338917/8634099/6c7f5264-27b8-11e5-93d9-98b725c9f749.png)
264 ; src/main/java/org/mockito/Mockito.java ; Fix typo in docs  missing breaklines. ; http://mockito.org/  Elements 32 and 33 show inline because they are missing a breakline.  ![image](https://cloud.githubusercontent.com/assets/338917/8639441/43dba808-28a8-11e5-8e9e-5bfc9dcc92bb.png)
266 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockBytecodeGenerator.java ; Ignore Groovy meta methods when instrumenting. ; Added a matcher to ignore any methods that are defined by the Groovy meta class system from instrumentation. This way  it is possible to create mocks of Groovy classes that behave appropriately in Groovy code.
270 ; src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java ; Issue #268: Added support for generic arrays as return types. ; Solves https://github.com/mockito/mockito/issues/268 by explicitly checking for return types that represent a generic array and by resolving for the array s component type.
270 ;  src/test/java/org/mockito/internal/util/reflection/GenericArrayReturnTypeTest.java ; Issue #268: Added support for generic arrays as return types. ; Solves https://github.com/mockito/mockito/issues/268 by explicitly checking for return types that represent a generic array and by resolving for the array s component type.
280 ; src/main/java/org/mockito/internal/util/MockUtil.java ; Reintroduce null check on MockUtil.isMock() ; Will fix #243 - null check on MockUtil.isMock() was incorrectly removed after successive refactoring  this PR reintroduces null check
286 ; src/main/java/org/mockito/Mockito.java ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing.  ---  **EDIT by mockito team** : Fixes #183
286 ;  src/main/java/org/mockito/internal/MockitoCore.java ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing.  ---  **EDIT by mockito team** : Fixes #183
286 ;  src/main/java/org/mockito/internal/stubbing/InvocationContainer.java ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing.  ---  **EDIT by mockito team** : Fixes #183
286 ;  src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing.  ---  **EDIT by mockito team** : Fixes #183
286 ;  src/main/java/org/mockito/internal/verification/DefaultRegisteredInvocations.java ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing.  ---  **EDIT by mockito team** : Fixes #183
286 ;  src/main/java/org/mockito/internal/verification/RegisteredInvocations.java ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing.  ---  **EDIT by mockito team** : Fixes #183
286 ;  src/main/java/org/mockito/internal/verification/SingleRegisteredInvocation.java ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing.  ---  **EDIT by mockito team** : Fixes #183
286 ;  src/test/java/org/mockitousage/basicapi/ResetInvocationsTest.java ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing ; Add new API method to reset invocations of a mock  while maintaining all existing stubbing.  ---  **EDIT by mockito team** : Fixes #183
287 ; src/main/java/org/mockito/junit/MockitoJUnit.java ; Implement VerificationCollector which can collect multiple verifications. ; It will report in the end the result of multiple statements. Fixes #124 
287 ;  src/main/java/org/mockito/junit/VerificationCollector.java ; Implement VerificationCollector which can collect multiple verifications. ; It will report in the end the result of multiple statements. Fixes #124 
287 ;  src/main/java/org/mockito/junit/VerificationCollectorImpl.java ; Implement VerificationCollector which can collect multiple verifications. ; It will report in the end the result of multiple statements. Fixes #124 
287 ;  src/test/java/org/mockitousage/junitrule/VerificationCollectorImplTest.java ; Implement VerificationCollector which can collect multiple verifications. ; It will report in the end the result of multiple statements. Fixes #124 
288 ; src/main/java/org/mockito/Answers.java ; Add optional answer to support mocked Builders ; When googling the mocking of builders  a lot of people said it was not possible with Mockito to support them in a clean way.  RETURNS_DEEPS_STUBS  does allow cascading  but can become quite fast very cumbersome. The added  RETURNS_SELF  will try to return itself by looking at the method  returnType  and compare this with the class of the mock.
288 ;  src/main/java/org/mockito/Mockito.java ; Add optional answer to support mocked Builders ; When googling the mocking of builders  a lot of people said it was not possible with Mockito to support them in a clean way.  RETURNS_DEEPS_STUBS  does allow cascading  but can become quite fast very cumbersome. The added  RETURNS_SELF  will try to return itself by looking at the method  returnType  and compare this with the class of the mock.
288 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/TriesToReturnSelf.java ; Add optional answer to support mocked Builders ; When googling the mocking of builders  a lot of people said it was not possible with Mockito to support them in a clean way.  RETURNS_DEEPS_STUBS  does allow cascading  but can become quite fast very cumbersome. The added  RETURNS_SELF  will try to return itself by looking at the method  returnType  and compare this with the class of the mock.
288 ;  src/test/java/org/mockitousage/stubbing/StubbingReturnsSelfTest.java ; Add optional answer to support mocked Builders ; When googling the mocking of builders  a lot of people said it was not possible with Mockito to support them in a clean way.  RETURNS_DEEPS_STUBS  does allow cascading  but can become quite fast very cumbersome. The added  RETURNS_SELF  will try to return itself by looking at the method  returnType  and compare this with the class of the mock.
293 ; src/main/java/org/mockito/internal/creation/MockSettingsImpl.java ; Remove validateSerializable() ; Fixes #245:  Remove serializable validation.
293 ;  src/main/java/org/mockito/internal/util/MockCreationValidator.java ; Remove validateSerializable() ; Fixes #245:  Remove serializable validation.
293 ;  src/test/java/org/mockito/internal/util/MockCreationValidatorTest.java ; Remove validateSerializable() ; Fixes #245:  Remove serializable validation.
293 ;  src/test/java/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java ; Remove validateSerializable() ; Fixes #245:  Remove serializable validation.
293 ;  src/test/java/org/mockitousage/basicapi/MocksSerializationTest.java ; Remove validateSerializable() ; Fixes #245:  Remove serializable validation.
294 ; src/main/java/org/mockito/Mockito.java ; Removed deprecated ReturnValues and all it s occurrences ; These changes should  deal with  issue #273
294 ;  src/main/java/org/mockito/ReturnValues.java ; Removed deprecated ReturnValues and all it s occurrences ; These changes should  deal with  issue #273
294 ;  src/main/java/org/mockito/configuration/DefaultMockitoConfiguration.java ; Removed deprecated ReturnValues and all it s occurrences ; These changes should  deal with  issue #273
294 ;  src/main/java/org/mockito/configuration/IMockitoConfiguration.java ; Removed deprecated ReturnValues and all it s occurrences ; These changes should  deal with  issue #273
294 ;  src/main/java/org/mockito/internal/configuration/GlobalConfiguration.java ; Removed deprecated ReturnValues and all it s occurrences ; These changes should  deal with  issue #273
294 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswerReturnValuesAdapter.java ; Removed deprecated ReturnValues and all it s occurrences ; These changes should  deal with  issue #273
294 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java ; Removed deprecated ReturnValues and all it s occurrences ; These changes should  deal with  issue #273
301 ;  src/main/java/org/mockito/Answers.java ; Refactor some utilities and TODO done ; Hey guys  awesome framework +1 i ve been looking at the code and i did some improvements  also i did a TODO but i m not quite sure how to handle that null check it would be awesome if you could check it out @bric3 @szczepiq   Answers.java : private is not required  ClassPathLoader.java: Removed unnecessary imports ScenarioPrinter.java: Changed the string concat into another append MockHandlerFactory.java: Return statement changed to be inline ValuePrinter.java: TODO done  null check added  Edit  ReleaseNotesExtension : Made authToken a final String  Edit 2:  Some improvements to the ThreadTests :)
301 ;  src/main/java/org/mockito/internal/configuration/ClassPathLoader.java ; Refactor some utilities and TODO done ; Hey guys  awesome framework +1 i ve been looking at the code and i did some improvements  also i did a TODO but i m not quite sure how to handle that null check it would be awesome if you could check it out @bric3 @szczepiq   Answers.java : private is not required  ClassPathLoader.java: Removed unnecessary imports ScenarioPrinter.java: Changed the string concat into another append MockHandlerFactory.java: Return statement changed to be inline ValuePrinter.java: TODO done  null check added  Edit  ReleaseNotesExtension : Made authToken a final String  Edit 2:  Some improvements to the ThreadTests :)
301 ;  src/main/java/org/mockito/internal/exceptions/util/ScenarioPrinter.java ; Refactor some utilities and TODO done ; Hey guys  awesome framework +1 i ve been looking at the code and i did some improvements  also i did a TODO but i m not quite sure how to handle that null check it would be awesome if you could check it out @bric3 @szczepiq   Answers.java : private is not required  ClassPathLoader.java: Removed unnecessary imports ScenarioPrinter.java: Changed the string concat into another append MockHandlerFactory.java: Return statement changed to be inline ValuePrinter.java: TODO done  null check added  Edit  ReleaseNotesExtension : Made authToken a final String  Edit 2:  Some improvements to the ThreadTests :)
301 ;  src/main/java/org/mockito/internal/handler/MockHandlerFactory.java ; Refactor some utilities and TODO done ; Hey guys  awesome framework +1 i ve been looking at the code and i did some improvements  also i did a TODO but i m not quite sure how to handle that null check it would be awesome if you could check it out @bric3 @szczepiq   Answers.java : private is not required  ClassPathLoader.java: Removed unnecessary imports ScenarioPrinter.java: Changed the string concat into another append MockHandlerFactory.java: Return statement changed to be inline ValuePrinter.java: TODO done  null check added  Edit  ReleaseNotesExtension : Made authToken a final String  Edit 2:  Some improvements to the ThreadTests :)
301 ;  src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java ; Refactor some utilities and TODO done ; Hey guys  awesome framework +1 i ve been looking at the code and i did some improvements  also i did a TODO but i m not quite sure how to handle that null check it would be awesome if you could check it out @bric3 @szczepiq   Answers.java : private is not required  ClassPathLoader.java: Removed unnecessary imports ScenarioPrinter.java: Changed the string concat into another append MockHandlerFactory.java: Return statement changed to be inline ValuePrinter.java: TODO done  null check added  Edit  ReleaseNotesExtension : Made authToken a final String  Edit 2:  Some improvements to the ThreadTests :)
301 ;  src/test/java/org/concurrentmockito/ThreadVerifiesContinuoslyInteractingMockTest.java ; Refactor some utilities and TODO done ; Hey guys  awesome framework +1 i ve been looking at the code and i did some improvements  also i did a TODO but i m not quite sure how to handle that null check it would be awesome if you could check it out @bric3 @szczepiq   Answers.java : private is not required  ClassPathLoader.java: Removed unnecessary imports ScenarioPrinter.java: Changed the string concat into another append MockHandlerFactory.java: Return statement changed to be inline ValuePrinter.java: TODO done  null check added  Edit  ReleaseNotesExtension : Made authToken a final String  Edit 2:  Some improvements to the ThreadTests :)
301 ;  src/test/java/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java ; Refactor some utilities and TODO done ; Hey guys  awesome framework +1 i ve been looking at the code and i did some improvements  also i did a TODO but i m not quite sure how to handle that null check it would be awesome if you could check it out @bric3 @szczepiq   Answers.java : private is not required  ClassPathLoader.java: Removed unnecessary imports ScenarioPrinter.java: Changed the string concat into another append MockHandlerFactory.java: Return statement changed to be inline ValuePrinter.java: TODO done  null check added  Edit  ReleaseNotesExtension : Made authToken a final String  Edit 2:  Some improvements to the ThreadTests :)
301 ;  src/test/java/org/concurrentmockito/ThreadsShareAMockTest.java ; Refactor some utilities and TODO done ; Hey guys  awesome framework +1 i ve been looking at the code and i did some improvements  also i did a TODO but i m not quite sure how to handle that null check it would be awesome if you could check it out @bric3 @szczepiq   Answers.java : private is not required  ClassPathLoader.java: Removed unnecessary imports ScenarioPrinter.java: Changed the string concat into another append MockHandlerFactory.java: Return statement changed to be inline ValuePrinter.java: TODO done  null check added  Edit  ReleaseNotesExtension : Made authToken a final String  Edit 2:  Some improvements to the ThreadTests :)
301 ;  src/test/java/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java ; Refactor some utilities and TODO done ; Hey guys  awesome framework +1 i ve been looking at the code and i did some improvements  also i did a TODO but i m not quite sure how to handle that null check it would be awesome if you could check it out @bric3 @szczepiq   Answers.java : private is not required  ClassPathLoader.java: Removed unnecessary imports ScenarioPrinter.java: Changed the string concat into another append MockHandlerFactory.java: Return statement changed to be inline ValuePrinter.java: TODO done  null check added  Edit  ReleaseNotesExtension : Made authToken a final String  Edit 2:  Some improvements to the ThreadTests :)
301 ;  src/test/java/org/concurrentmockito/ThreadsStubSharedMockTest.java ; Refactor some utilities and TODO done ; Hey guys  awesome framework +1 i ve been looking at the code and i did some improvements  also i did a TODO but i m not quite sure how to handle that null check it would be awesome if you could check it out @bric3 @szczepiq   Answers.java : private is not required  ClassPathLoader.java: Removed unnecessary imports ScenarioPrinter.java: Changed the string concat into another append MockHandlerFactory.java: Return statement changed to be inline ValuePrinter.java: TODO done  null check added  Edit  ReleaseNotesExtension : Made authToken a final String  Edit 2:  Some improvements to the ThreadTests :)
306 ; src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java ; Eliminate direct dependency on ObjenesisInstantiator ; Updated InstantiatorProvider to be a plug-in  to eliminate direct dependency on ObjenesisInstantiator. This allows Mockito to be used by runtimes that don t execute bytecode  such as j2objc-translated code on iOS.
306 ;  src/main/java/org/mockito/internal/configuration/plugins/Plugins.java ; Eliminate direct dependency on ObjenesisInstantiator ; Updated InstantiatorProvider to be a plug-in  to eliminate direct dependency on ObjenesisInstantiator. This allows Mockito to be used by runtimes that don t execute bytecode  such as j2objc-translated code on iOS.
306 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java ; Eliminate direct dependency on ObjenesisInstantiator ; Updated InstantiatorProvider to be a plug-in  to eliminate direct dependency on ObjenesisInstantiator. This allows Mockito to be used by runtimes that don t execute bytecode  such as j2objc-translated code on iOS.
306 ;  src/main/java/org/mockito/internal/creation/instance/DefaultInstantiatorProvider.java ; Eliminate direct dependency on ObjenesisInstantiator ; Updated InstantiatorProvider to be a plug-in  to eliminate direct dependency on ObjenesisInstantiator. This allows Mockito to be used by runtimes that don t execute bytecode  such as j2objc-translated code on iOS.
306 ;  src/main/java/org/mockito/internal/stubbing/answers/ClonesArguments.java ; Eliminate direct dependency on ObjenesisInstantiator ; Updated InstantiatorProvider to be a plug-in  to eliminate direct dependency on ObjenesisInstantiator. This allows Mockito to be used by runtimes that don t execute bytecode  such as j2objc-translated code on iOS.
306 ;  src/main/java/org/mockito/plugins/InstantiatorProvider.java ; Eliminate direct dependency on ObjenesisInstantiator ; Updated InstantiatorProvider to be a plug-in  to eliminate direct dependency on ObjenesisInstantiator. This allows Mockito to be used by runtimes that don t execute bytecode  such as j2objc-translated code on iOS.
309 ; src/main/java/org/mockito/Mockito.java ; Tweaks to the main Mockito javadocs to aid readability ; @szczepiq as discussed  please review.
314 ; src/main/java/org/mockito/BDDMockito.java ; Add shouldHaveNoMoreInteractions() to BDDMockito ; Replicates  verifyNoMoreInteractions  on the BDD API.  ---  **EDIT by mockito team** : Fixes #311
314 ;  src/test/java/org/mockitousage/customization/BDDMockitoTest.java ; Add shouldHaveNoMoreInteractions() to BDDMockito ; Replicates  verifyNoMoreInteractions  on the BDD API.  ---  **EDIT by mockito team** : Fixes #311
317 ; src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java ; Modify StackTraceFilter to not exclude  good  stack trace elements ; currently StackTraceFilter filters in this way (example from javadoc): [a+  b+  c-  d+  e+  f-  g+] -> [a+  b+  g+]  this patch makes it work: [a+  b+  c-  d+  e+  f-  g+] -> [a+  b+  d+  e+  g+]  Not sure why it was implemented first time in this strange manner.  ---  **EDIT by Mockito team** : Fixes #316
317 ;  src/test/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java ; Modify StackTraceFilter to not exclude  good  stack trace elements ; currently StackTraceFilter filters in this way (example from javadoc): [a+  b+  c-  d+  e+  f-  g+] -> [a+  b+  g+]  this patch makes it work: [a+  b+  c-  d+  e+  f-  g+] -> [a+  b+  d+  e+  g+]  Not sure why it was implemented first time in this strange manner.  ---  **EDIT by Mockito team** : Fixes #316
344 ; src/test/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java ; Show correct location of unwanted interaction with mock when using MockitoJUnitRule ; This pull request by @indy5858 and me changes the stacktrace filtering so that when using  MockitoJUnitRule  the correct location of an unwanted interaction with a mock.  Before this commit the location on an unwanted interaction was not reported properly. Instead of      No interactions wanted here: -> at <package>.<TestClass>.<testMethod>(<TestClass.java>:<lineNumber>)      the assertion message said:      No interactions wanted here: -> at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)      The issue with the current behaviour in master is that all stacktrace elements above an element containing  org.mockito.  are removed. As  org.mockito.internal.junit.JUnitRule  fullfills this condition and comes below the  payload  (i.e. test code and code under test) stack elements the interesting part of the stack is filtered. In case the pull request #317 (which we only found after hacking on this) is merged this pull becomes obsolete except for the two tests that are added: - checking that the  payload  stack elements aren t removed from the stack and - a test for removal of the Byte Buddy stack elements.
349 ; src/main/java/org/mockito/internal/verification/AtMost.java ; Issue #345 : Removes previously verified invocations when capturing argument is combined with after and atMost verifiers ; Solves #345 by removing already verified invocations before redundant capture of their arguments in AtMost class.
373 ; src/main/java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java ; Fixes #365 Simplify the InvocationOnMock-API to get a casted argument ; This pull request fixes #365 by introducing  T getArgument(int)  and deprecating  T getArgumentAt(int Class<T>)  in type  InvocationOnMock . This improves the readabilty of custom Answers.   This...  String text = invocation.getArgumentAt(1 String.class)   can be replaced by...   String text = invocation.getArgument(1)  
373 ;  src/main/java/org/mockito/internal/invocation/InvocationImpl.java ; Fixes #365 Simplify the InvocationOnMock-API to get a casted argument ; This pull request fixes #365 by introducing  T getArgument(int)  and deprecating  T getArgumentAt(int Class<T>)  in type  InvocationOnMock . This improves the readabilty of custom Answers.   This...  String text = invocation.getArgumentAt(1 String.class)   can be replaced by...   String text = invocation.getArgument(1)  
373 ;  src/main/java/org/mockito/internal/invocation/InvocationMatcher.java ; Fixes #365 Simplify the InvocationOnMock-API to get a casted argument ; This pull request fixes #365 by introducing  T getArgument(int)  and deprecating  T getArgumentAt(int Class<T>)  in type  InvocationOnMock . This improves the readabilty of custom Answers.   This...  String text = invocation.getArgumentAt(1 String.class)   can be replaced by...   String text = invocation.getArgument(1)  
373 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java ; Fixes #365 Simplify the InvocationOnMock-API to get a casted argument ; This pull request fixes #365 by introducing  T getArgument(int)  and deprecating  T getArgumentAt(int Class<T>)  in type  InvocationOnMock . This improves the readabilty of custom Answers.   This...  String text = invocation.getArgumentAt(1 String.class)   can be replaced by...   String text = invocation.getArgument(1)  
373 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java ; Fixes #365 Simplify the InvocationOnMock-API to get a casted argument ; This pull request fixes #365 by introducing  T getArgument(int)  and deprecating  T getArgumentAt(int Class<T>)  in type  InvocationOnMock . This improves the readabilty of custom Answers.   This...  String text = invocation.getArgumentAt(1 String.class)   can be replaced by...   String text = invocation.getArgument(1)  
373 ;  src/main/java/org/mockito/invocation/InvocationOnMock.java ; Fixes #365 Simplify the InvocationOnMock-API to get a casted argument ; This pull request fixes #365 by introducing  T getArgument(int)  and deprecating  T getArgumentAt(int Class<T>)  in type  InvocationOnMock . This improves the readabilty of custom Answers.   This...  String text = invocation.getArgumentAt(1 String.class)   can be replaced by...   String text = invocation.getArgument(1)  
373 ;  src/test/java/org/mockito/internal/AllInvocationsFinderTest.java ; Fixes #365 Simplify the InvocationOnMock-API to get a casted argument ; This pull request fixes #365 by introducing  T getArgument(int)  and deprecating  T getArgumentAt(int Class<T>)  in type  InvocationOnMock . This improves the readabilty of custom Answers.   This...  String text = invocation.getArgumentAt(1 String.class)   can be replaced by...   String text = invocation.getArgument(1)  
373 ;  src/test/java/org/mockito/internal/invocation/InvocationImplTest.java ; Fixes #365 Simplify the InvocationOnMock-API to get a casted argument ; This pull request fixes #365 by introducing  T getArgument(int)  and deprecating  T getArgumentAt(int Class<T>)  in type  InvocationOnMock . This improves the readabilty of custom Answers.   This...  String text = invocation.getArgumentAt(1 String.class)   can be replaced by...   String text = invocation.getArgument(1)  
373 ;  src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java ; Fixes #365 Simplify the InvocationOnMock-API to get a casted argument ; This pull request fixes #365 by introducing  T getArgument(int)  and deprecating  T getArgumentAt(int Class<T>)  in type  InvocationOnMock . This improves the readabilty of custom Answers.   This...  String text = invocation.getArgumentAt(1 String.class)   can be replaced by...   String text = invocation.getArgument(1)  
373 ;  src/test/java/org/mockitousage/customization/BDDMockitoTest.java ; Fixes #365 Simplify the InvocationOnMock-API to get a casted argument ; This pull request fixes #365 by introducing  T getArgument(int)  and deprecating  T getArgumentAt(int Class<T>)  in type  InvocationOnMock . This improves the readabilty of custom Answers.   This...  String text = invocation.getArgumentAt(1 String.class)   can be replaced by...   String text = invocation.getArgument(1)  
373 ;  src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java ; Fixes #365 Simplify the InvocationOnMock-API to get a casted argument ; This pull request fixes #365 by introducing  T getArgument(int)  and deprecating  T getArgumentAt(int Class<T>)  in type  InvocationOnMock . This improves the readabilty of custom Answers.   This...  String text = invocation.getArgumentAt(1 String.class)   can be replaced by...   String text = invocation.getArgument(1)  
376 ; src/main/java/org/mockito/Spy.java ; Fix typo in example in javadoc. ; This is a trivial javadoc-only change  just fixing a typo.
377 ; src/main/java/org/mockito/Spy.java ; Remove duplication. ; simple documentation-only change.
380 ; src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java ; Fixes the issue #379 by removing previously verified invocations  some tests were added to verify that works ; check list - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how - [ ] If possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change - [x] Avoid other runtime dependencies - [x] Meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/master/.github/CONTRIBUTING.md) - [x] Mention  Fixes #<issue number>  in the description _if relevant_ - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_
381 ; src/main/java/org/mockito/stubbing/OngoingStubbing.java ; Fixes #312.  Added documentation in OngoingStubbing.thenThrow(). ; This fixes #312.  Added documentation in OngoingStubbing.thenThrow where new ThrowsExceptionClass() is used to create a new Throwable using Objenesis.
382 ; src/test/java/org/mockito/internal/verification/VerificationWithDescriptionTest.java ; correct package declaration of VerificationWithDescriptionTest ; allows project to compile without errors in eclipse  check list - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how - [ ] If possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change - [x] Avoid other runtime dependencies - [x] Meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/master/.github/CONTRIBUTING.md) - [ ] Mention  Fixes #<issue number>  in the description _if relevant_ - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_
386 ; src/main/java/org/mockito/stubbing/answers/ReturnsElementsOf.java ; Remove deprecated code ; Fixes for #374 - more left though.
386 ;  src/test/java/org/mockitousage/stubbing/StubbingWithExtraAnswersTest.java ; Remove deprecated code ; Fixes for #374 - more left though.
389 ; src/main/java/org/mockito/Mockito.java ; Lazily verify without calling collector.verify() ; As originally requested in #287: lazily verify all  Mockito.verify(...)  calls inside JUnit test cases.
389 ;  src/main/java/org/mockito/internal/MockitoCore.java ; Lazily verify without calling collector.verify() ; As originally requested in #287: lazily verify all  Mockito.verify(...)  calls inside JUnit test cases.
389 ;  src/main/java/org/mockito/internal/progress/MockingProgress.java ; Lazily verify without calling collector.verify() ; As originally requested in #287: lazily verify all  Mockito.verify(...)  calls inside JUnit test cases.
389 ;  src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; Lazily verify without calling collector.verify() ; As originally requested in #287: lazily verify all  Mockito.verify(...)  calls inside JUnit test cases.
389 ;  src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java ; Lazily verify without calling collector.verify() ; As originally requested in #287: lazily verify all  Mockito.verify(...)  calls inside JUnit test cases.
389 ;  src/main/java/org/mockito/internal/verification/MockAwareVerificationMode.java ; Lazily verify without calling collector.verify() ; As originally requested in #287: lazily verify all  Mockito.verify(...)  calls inside JUnit test cases.
389 ;  src/main/java/org/mockito/junit/VerificationCollector.java ; Lazily verify without calling collector.verify() ; As originally requested in #287: lazily verify all  Mockito.verify(...)  calls inside JUnit test cases.
389 ;  src/main/java/org/mockito/junit/VerificationCollectorImpl.java ; Lazily verify without calling collector.verify() ; As originally requested in #287: lazily verify all  Mockito.verify(...)  calls inside JUnit test cases.
389 ;  src/main/java/org/mockito/verification/VerificationStrategy.java ; Lazily verify without calling collector.verify() ; As originally requested in #287: lazily verify all  Mockito.verify(...)  calls inside JUnit test cases.
389 ;  src/test/java/org/mockitousage/junitrule/VerificationCollectorImplTest.java ; Lazily verify without calling collector.verify() ; As originally requested in #287: lazily verify all  Mockito.verify(...)  calls inside JUnit test cases.
404 ; src/main/java/org/mockito/Answers.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/BDDMockito.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/Mockito.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/MockitoAnnotations.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/MockitoCore.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/configuration/DefaultAnnotationEngine.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/configuration/MockitoAnnotationsMockAnnotationProcessor.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/configuration/injection/scanner/InjectMocksScanner.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/configuration/injection/scanner/MockScanner.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/invocation/InvocationImpl.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/junit/JUnitRule.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/progress/IOngoingStubbing.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/progress/MockingProgress.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/stubbing/BaseStubbing.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/stubbing/ConsecutiveStubbing.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/Answers.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/invocation/InvocationOnMock.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/junit/MockitoJUnit.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/junit/MockitoJUnitRule.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/stubbing/DeprecatedOngoingStubbing.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/stubbing/OngoingStubbing.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/main/java/org/mockito/verification/VerificationWithTimeout.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/concurrentmockito/ThreadsStubSharedMockTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockito/MockitoTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockito/internal/InvalidStateDetectionTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockito/internal/junit/JUnitRuleTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockito/internal/verification/VerificationWithDescriptionTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockitousage/annotation/AnnotationsTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockitousage/annotation/DeprecatedMockAnnotationTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockitousage/bugs/TimeoutWithAtMostOrNeverShouldBeDisabledTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockitousage/junitrule/InvalidTargetMockitoJUnitRuleTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockitousage/junitrule/RuleTestWithParameterConstructorTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockitousage/stubbing/DeprecatedStubbingTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockitousage/stubbing/StubbingWithExtraAnswersTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  src/test/java/org/mockitoutil/ExtraMatchers.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
404 ;  subprojects/testng/src/main/java/org/mockito/testng/MockitoAfterTestNGMethod.java ; Fixes #374 Removed deprecated classes and methods ; Fixes #374 removed deprecated classes and methods
412 ; src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java ; Fixed #407 Vararg method call on mock object fails ; nan
412 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocationsTest.java ; Fixed #407 Vararg method call on mock object fails ; nan
412 ;  src/test/java/org/mockitousage/stubbing/StubbingWithDelegateVarArgsTest.java ; Fixed #407 Vararg method call on mock object fails ; nan
413 ; src/main/java/org/mockito/InOrder.java ; Fixed method name to verifyNoMoreInteractions ; nan
413 ;  src/main/java/org/mockito/Mockito.java ; Fixed method name to verifyNoMoreInteractions ; nan
413 ;  src/main/java/org/mockito/verification/VerificationWithTimeout.java ; Fixed method name to verifyNoMoreInteractions ; nan
419 ; src/main/java/org/mockito/BDDMockito.java ; BDDMockito: rename willNothing to willDoNothing ; .. and keep the original signature as deprecated
424 ; src/main/java/org/mockito/Mockito.java ; Inorder timeouts ;   *Fixes issue https://code.google.com/archive/p/mockito/issues/292   *Updated code provided by https://github.com/sirchia in PR #20  Closes #20
424 ;  src/main/java/org/mockito/internal/InOrderImpl.java ; Inorder timeouts ;   *Fixes issue https://code.google.com/archive/p/mockito/issues/292   *Updated code provided by https://github.com/sirchia in PR #20  Closes #20
424 ;  src/main/java/org/mockito/internal/verification/VerificationOverTimeImpl.java ; Inorder timeouts ;   *Fixes issue https://code.google.com/archive/p/mockito/issues/292   *Updated code provided by https://github.com/sirchia in PR #20  Closes #20
424 ;  src/main/java/org/mockito/verification/Timeout.java ; Inorder timeouts ;   *Fixes issue https://code.google.com/archive/p/mockito/issues/292   *Updated code provided by https://github.com/sirchia in PR #20  Closes #20
424 ;  src/main/java/org/mockito/verification/VerificationWrapperInOrderWrapper.java ; Inorder timeouts ;   *Fixes issue https://code.google.com/archive/p/mockito/issues/292   *Updated code provided by https://github.com/sirchia in PR #20  Closes #20
424 ;  src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; Inorder timeouts ;   *Fixes issue https://code.google.com/archive/p/mockito/issues/292   *Updated code provided by https://github.com/sirchia in PR #20  Closes #20
427 ; src/main/java/org/mockito/MockitoAnnotations.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/exceptions/Reporter.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/exceptions/stacktrace/StackTraceCleaner.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/InOrderImpl.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/MockitoCore.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/configuration/DefaultAnnotationEngine.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/configuration/DefaultInjectionEngine.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/configuration/injection/ConstructorInjection.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/configuration/injection/filter/TerminalMockCandidateFilter.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/configuration/injection/scanner/InjectMocksScanner.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/creation/MockSettingsImpl.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleaner.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/handler/MockHandlerImpl.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/invocation/InvocationImpl.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/invocation/MatchersBinder.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/matchers/CapturingMatcher.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/matchers/VarargCapturingMatcher.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswersValidator.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/util/MockCreationValidator.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/util/Timer.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/verification/AtMost.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/verification/NoMoreInteractions.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/verification/Only.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/verification/VerificationDataImpl.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/verification/checkers/MissingInvocationChecker.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/verification/checkers/NonGreedyNumberOfInvocationsInOrderChecker.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/main/java/org/mockito/verification/Timeout.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/test/java/org/mockito/exceptions/ReporterTest.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/test/java/org/mockito/exceptions/base/MockitoSerializationIssueTest.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/test/java/org/mockito/exceptions/stacktrace/StackTraceCleanerTest.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/test/java/org/mockito/internal/progress/TimesTest.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
427 ;  subprojects/extTest/src/test/java/org/mockitousage/plugins/stacktrace/MyStackTraceCleanerProvider.java ; Refactored class Reporter to a static utillity ; Fixes #426 for class Reporter   This PR changes the way errors are created and thrown. All methods of the Reporter are now static so they can be imported statically and return an exception instead of throwing it directly. This improves the readability and eliminates the use of hacks to satisfiy the compiler.  Here is a sample:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             Reporter().noArgumentValueWasCaptured()              return null          } else {             return arguments.getLast()          } }      The above code snipped can be rewritten to this:      public List<T> getLastVarargs() {         if (arguments.isEmpty()) {             throw noArgumentValueWasCaptured()          }          return arguments.getLast()  }    
429 ; src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java ; Added default answer for java.util.stream.Stream ; I hope the description says it all. :-)  The new Java 8 based code only uses reflection  so the library still compiles and runs under older Java versions.
429 ;  src/main/java/org/mockito/internal/util/JavaEightUtil.java ; Added default answer for java.util.stream.Stream ; I hope the description says it all. :-)  The new Java 8 based code only uses reflection  so the library still compiles and runs under older Java versions.
429 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java ; Added default answer for java.util.stream.Stream ; I hope the description says it all. :-)  The new Java 8 based code only uses reflection  so the library still compiles and runs under older Java versions.
431 ;  src/main/java/org/mockito/AdditionalMatchers.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/main/java/org/mockito/ArgumentCaptor.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/main/java/org/mockito/Matchers.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/main/java/org/mockito/hamcrest/MockitoHamcrest.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/main/java/org/mockito/internal/handler/NullResultGuardian.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/main/java/org/mockito/internal/progress/ArgumentMatcherStorage.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/main/java/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/main/java/org/mockito/internal/progress/HandyReturnValues.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/main/java/org/mockito/internal/util/Primitives.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/test/java/org/mockito/ArgumentCaptorTest.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/test/java/org/mockito/MockitoTest.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/test/java/org/mockito/internal/progress/HandyReturnValuesTest.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/test/java/org/mockito/internal/progress/PrimitivesTest.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/test/java/org/mockito/internal/util/PrimitivesTest.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
431 ;  src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java ; Fixes #426 Dropped class HandyReturnValues ; #426  While refactoring the class HandyReturnValues  towards a static utility class I notices that it is not required at all. Therefore I decided to remove the type  HandyReturnValues .
432 ; src/main/java/org/mockito/internal/invocation/InvocationMarker.java ; Fixes #426 Refactored InvocationMarker to a static utility class ; #426  Refactored  InvocationMarker to a static utility class
432 ;  src/main/java/org/mockito/internal/verification/AtMost.java ; Fixes #426 Refactored InvocationMarker to a static utility class ; #426  Refactored  InvocationMarker to a static utility class
432 ;  src/main/java/org/mockito/internal/verification/Only.java ; Fixes #426 Refactored InvocationMarker to a static utility class ; #426  Refactored  InvocationMarker to a static utility class
432 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java ; Fixes #426 Refactored InvocationMarker to a static utility class ; #426  Refactored  InvocationMarker to a static utility class
432 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java ; Fixes #426 Refactored InvocationMarker to a static utility class ; #426  Refactored  InvocationMarker to a static utility class
432 ;  src/main/java/org/mockito/internal/verification/checkers/NonGreedyNumberOfInvocationsInOrderChecker.java ; Fixes #426 Refactored InvocationMarker to a static utility class ; #426  Refactored  InvocationMarker to a static utility class
432 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java ; Fixes #426 Refactored InvocationMarker to a static utility class ; #426  Refactored  InvocationMarker to a static utility class
432 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java ; Fixes #426 Refactored InvocationMarker to a static utility class ; #426  Refactored  InvocationMarker to a static utility class
432 ;  src/test/java/org/mockito/internal/invocation/InvocationMarkerTest.java ; Fixes #426 Refactored InvocationMarker to a static utility class ; #426  Refactored  InvocationMarker to a static utility class
432 ;  src/test/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java ; Fixes #426 Refactored InvocationMarker to a static utility class ; #426  Refactored  InvocationMarker to a static utility class
434 ; src/main/java/org/mockito/internal/MockitoCore.java ; Very tiny typo. ; Missing word in error message.
436 ; buildSrc/src/main/groovy/org/mockito/release/comparison/PublicationsComparatorTask.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  buildSrc/src/main/groovy/org/mockito/release/comparison/ZipComparator.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  buildSrc/src/main/groovy/org/mockito/release/comparison/ZipCompare.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  buildSrc/src/main/groovy/org/mockito/release/exec/DefaultProcessRunner.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  buildSrc/src/main/groovy/org/mockito/release/notes/GitNotesBuilder.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  buildSrc/src/main/groovy/org/mockito/release/notes/Notes.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  buildSrc/src/main/groovy/org/mockito/release/notes/improvements/GitHubTicketFetcher.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  buildSrc/src/main/groovy/org/mockito/release/notes/improvements/Improvement.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  buildSrc/src/main/groovy/org/mockito/release/notes/util/IOUtil.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitCommit.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitContributionsProvider.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  buildSrc/src/main/groovy/org/mockito/release/steps/DefaultReleaseSteps.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/AdditionalMatchers.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/MockitoAnnotations.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/configuration/AnnotationEngine.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/exceptions/Reporter.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/configuration/DefaultAnnotationEngine.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/configuration/injection/ConstructorInjection.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/configuration/injection/MockInjectionStrategy.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/configuration/injection/SpyOnInjectedFieldsHandler.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/configuration/injection/filter/TerminalMockCandidateFilter.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/configuration/injection/scanner/InjectMocksScanner.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginFileReader.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/configuration/plugins/Plugins.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/creation/MockSettingsImpl.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGenerator.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/creation/util/MockitoMethodProxy.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/debugging/LoggingListener.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/debugging/WarningsCollector.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/hamcrest/HamcrestArgumentMatcher.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/invocation/InvocationImpl.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/invocation/MatchersBinder.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/invocation/MockitoMethod.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/junit/FriendlyExceptionMaker.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/junit/JUnitTool.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/listeners/MockingStartedListener.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/matchers/CapturingMatcher.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/matchers/Equality.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/matchers/VarargCapturingMatcher.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/matchers/text/FormattedText.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/TriesToReturnSelf.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/util/SimpleMockitoLogger.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/util/Timer.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/util/collections/IdentitySet.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/util/collections/Sets.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/util/reflection/GenericMaster.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/util/reflection/SuperTypesLastSorter.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/verification/Description.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/verification/NoMoreInteractions.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/verification/RegisteredInvocations.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/verification/VerificationDataImpl.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/plugins/MockMaker.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/verification/VerificationAfterDelay.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/verification/VerificationWithTimeout.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/main/java/org/mockito/verification/VerificationWrapperInOrderWrapper.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/test/java/org/mockito/internal/configuration/injection/ConstructorInjectionTest.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  src/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  subprojects/testng/src/main/java/org/mockito/testng/MockitoBeforeTestNGMethod.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
436 ;  subprojects/testng/src/main/java/org/mockito/testng/MockitoTestNGListener.java ; Clean up issues reported by IntelliJ ; Some general issues reported by IntelliJ. Mostly concerning modifiers and unused imports.
441 ; src/test/java/org/mockitousage/bugs/ParentClassNotPublicTest.java ; delete ignored cglib related tests ; nan
441 ;  src/test/java/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java ; delete ignored cglib related tests ; nan
442 ; src/test/java/org/mockitousage/bugs/BridgeMethodsHitAgainTest.java ; enable some ignored tests of BridgeMethodsHitAgainTest and DetectingF… ; …inalMethodsTest  This worked locally  so let s see if this also works on the ci server.  Fixes #304 
442 ;  src/test/java/org/mockitousage/misuse/DetectingFinalMethodsTest.java ; enable some ignored tests of BridgeMethodsHitAgainTest and DetectingF… ; …inalMethodsTest  This worked locally  so let s see if this also works on the ci server.  Fixes #304 
444 ; src/main/java/org/mockito/Mock.java ; Add PARAMETER ElementType to @Mock ; TODO: Add a regression test to also show how this functionality can be used. CC @smoyer64  Fixes #438 
446 ; src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java ; Make tests which test for timeouts with Thread#sleep more lenient. ; I took a look at the recently builds on travis ci and noticed a lot of failed builds. These failures where mostly unrelated to the actual changes  but caused by these strict timeout tests.  This pull request will not completely fix these random failures  but it should reduce their occurrences.   The ideal solution would be to completely remove usage of  Thread#sleep  from the test  but I have no idea how to do this.
446 ;  src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; Make tests which test for timeouts with Thread#sleep more lenient. ; I took a look at the recently builds on travis ci and noticed a lot of failed builds. These failures where mostly unrelated to the actual changes  but caused by these strict timeout tests.  This pull request will not completely fix these random failures  but it should reduce their occurrences.   The ideal solution would be to completely remove usage of  Thread#sleep  from the test  but I have no idea how to do this.
451 ; src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java ; Refactored Timeout and After concurrent test ; Refactored concurrent test in order to fix #433. The implementation now uses  an  Executor to perform async calls instead of extending  Thread  and doesn t extend TestBase anymore.   I also added a Stopwatch which can be used for further time dependent testing. In the future I want to use this class to write more tests for After/Timeout.
451 ;  src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; Refactored Timeout and After concurrent test ; Refactored concurrent test in order to fix #433. The implementation now uses  an  Executor to perform async calls instead of extending  Thread  and doesn t extend TestBase anymore.   I also added a Stopwatch which can be used for further time dependent testing. In the future I want to use this class to write more tests for After/Timeout.
451 ;  src/test/java/org/mockitoutil/Stopwatch.java ; Refactored Timeout and After concurrent test ; Refactored concurrent test in order to fix #433. The implementation now uses  an  Executor to perform async calls instead of extending  Thread  and doesn t extend TestBase anymore.   I also added a Stopwatch which can be used for further time dependent testing. In the future I want to use this class to write more tests for After/Timeout.
452 ; src/main/java/org/mockito/Mockito.java ; javadoc: improve grammar of some sentences ; nan
454 ; src/main/java/org/mockito/ArgumentMatcher.java ; Modified JavaDoc for ArgumentMatcher ; To fix #453 - this is the amendment to the  ArgumentMatcher  JavaDoc.
455 ; src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; activate VerificationWithTimeoutTest#shouldAllowTimeoutVerificationIn… ; …Order  This test work since https://github.com/mockito/mockito/pull/424 but was deactivated by mistake with https://github.com/mockito/mockito/pull/451
456 ; src/main/java/org/mockito/BDDMockito.java ; fix some rawtype warnings ; nan
456 ;  src/main/java/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java ; fix some rawtype warnings ; nan
456 ;  src/test/java/org/mockito/internal/stubbing/answers/AnswersValidatorTest.java ; fix some rawtype warnings ; nan
456 ;  src/test/java/org/mockito/internal/util/MockUtilTest.java ; fix some rawtype warnings ; nan
456 ;  src/test/java/org/mockitousage/matchers/HamcrestMatchersTest.java ; fix some rawtype warnings ; nan
456 ;  src/test/java/org/mockitoutil/ExtraMatchers.java ; fix some rawtype warnings ; nan
458 ; src/test/java/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java ; remove dead code in ClassCacheVersusClassReloadingTest ; nan
459 ; src/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java ; fix some rawtype warnings in tests ; nan
459 ;  src/test/java/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGeneratorTest.java ; fix some rawtype warnings in tests ; nan
459 ;  src/test/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractorTest.java ; fix some rawtype warnings in tests ; nan
459 ;  src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java ; fix some rawtype warnings in tests ; nan
459 ;  src/test/java/org/mockito/internal/matchers/CapturingMatcherTest.java ; fix some rawtype warnings in tests ; nan
459 ;  src/test/java/org/mockito/internal/matchers/VarargCapturingMatcherTest.java ; fix some rawtype warnings in tests ; nan
459 ;  src/test/java/org/mockitousage/annotation/SpyAnnotationTest.java ; fix some rawtype warnings in tests ; nan
459 ;  src/test/java/org/mockitousage/basicapi/MockAccessTest.java ; fix some rawtype warnings in tests ; nan
459 ;  src/test/java/org/mockitousage/serialization/ParallelSerializationTest.java ; fix some rawtype warnings in tests ; nan
460 ; src/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java ; delete disabled test for removed objenesis missing reporting feature ; nan
462 ; src/main/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java ; refactored InvocationsFinder to static utility class ; Relates to #426 - refactored  InvocationsFinder  to static utility class - added 6 more test to  NumberOfInvocationsInOrderCheckerTest  that are basically taken over from  NumberOfInvocationsCheckerTest 
462 ;  src/test/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerInOrderTest.java ; refactored InvocationsFinder to static utility class ; Relates to #426 - refactored  InvocationsFinder  to static utility class - added 6 more test to  NumberOfInvocationsInOrderCheckerTest  that are basically taken over from  NumberOfInvocationsCheckerTest 
464 ; src/test/java/org/mockitousage/bugs/ClassCastExOnVerifyZeroInteractionsTest.java ; fix some rawtype warnings in tests ; nan
464 ;  src/test/java/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java ; fix some rawtype warnings in tests ; nan
464 ;  src/test/java/org/mockitousage/bugs/MultipleInOrdersTest.java ; fix some rawtype warnings in tests ; nan
464 ;  src/test/java/org/mockitousage/misuse/RestrictedObjectMethodsTest.java ; fix some rawtype warnings in tests ; nan
464 ;  src/test/java/org/mockitousage/performance/LoadsOfMocksTest.java ; fix some rawtype warnings in tests ; nan
464 ;  src/test/java/org/mockitousage/spies/SpyingOnInterfacesTest.java ; fix some rawtype warnings in tests ; nan
464 ;  src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java ; fix some rawtype warnings in tests ; nan
464 ;  src/test/java/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java ; fix some rawtype warnings in tests ; nan
464 ;  src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java ; fix some rawtype warnings in tests ; nan
464 ;  src/test/java/org/mockitousage/verification/AtLeastXVerificationTest.java ; fix some rawtype warnings in tests ; nan
464 ;  src/test/java/org/mockitousage/verification/AtMostXVerificationTest.java ; fix some rawtype warnings in tests ; nan
464 ;  src/test/java/org/mockitousage/verification/BasicVerificationTest.java ; fix some rawtype warnings in tests ; nan
464 ;  src/test/java/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java ; fix some rawtype warnings in tests ; nan
467 ; src/test/java/org/mockito/internal/configuration/injection/SimpleArgumentResolverTest.java ; fix some rawtype warnings in tests ; nan
467 ;  src/test/java/org/mockito/internal/handler/InvocationNotifierHandlerTest.java ; fix some rawtype warnings in tests ; nan
467 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java ; fix some rawtype warnings in tests ; nan
467 ;  src/test/java/org/mockitousage/annotation/AnnotationsTest.java ; fix some rawtype warnings in tests ; nan
467 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java ; fix some rawtype warnings in tests ; nan
467 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java ; fix some rawtype warnings in tests ; nan
467 ;  src/test/java/org/mockitousage/customization/BDDMockitoTest.java ; fix some rawtype warnings in tests ; nan
468 ; src/main/java/org/mockito/AdditionalAnswers.java ; add missing since javadoc tags for recently added methods and classes… ; nan
468 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java ; add missing since javadoc tags for recently added methods and classes… ; nan
468 ;  src/main/java/org/mockito/invocation/InvocationOnMock.java ; add missing since javadoc tags for recently added methods and classes… ; nan
469 ; src/test/java/org/mockito/internal/configuration/MockInjectionTest.java ; fix some rawtype warnings in tests ; nan
469 ;  src/test/java/org/mockito/internal/util/collections/ListUtilTest.java ; fix some rawtype warnings in tests ; nan
469 ;  src/test/java/org/mockito/internal/util/reflection/GenericMasterTest.java ; fix some rawtype warnings in tests ; nan
469 ;  src/test/java/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java ; fix some rawtype warnings in tests ; nan
469 ;  src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java ; fix some rawtype warnings in tests ; nan
469 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationBasicTest.java ; fix some rawtype warnings in tests ; nan
469 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationTest.java ; fix some rawtype warnings in tests ; nan
469 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationUnhappyPathTest.java ; fix some rawtype warnings in tests ; nan
469 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java ; fix some rawtype warnings in tests ; nan
469 ;  src/test/java/org/mockitousage/annotation/WrongSetOfAnnotationsTest.java ; fix some rawtype warnings in tests ; nan
469 ;  src/test/java/org/mockitousage/matchers/CapturingArgumentsTest.java ; fix some rawtype warnings in tests ; nan
469 ;  src/test/java/org/mockitousage/matchers/MatchersTest.java ; fix some rawtype warnings in tests ; nan
469 ;  src/test/java/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java ; fix some rawtype warnings in tests ; nan
470 ; src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java ; Refactored mock cache to be non-blocking. ; The previous cache used a lock to unify concurrency and weak references. Instead  keys are now explicitly wrapped using weak references and similarly to the functioning of a weak hash map  the entries are polled upon accessing the cache. This avoids blocking.
470 ;  src/main/java/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGenerator.java ; Refactored mock cache to be non-blocking. ; The previous cache used a lock to unify concurrency and weak references. Instead  keys are now explicitly wrapped using weak references and similarly to the functioning of a weak hash map  the entries are polled upon accessing the cache. This avoids blocking.
470 ;  src/test/java/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGeneratorTest.java ; Refactored mock cache to be non-blocking. ; The previous cache used a lock to unify concurrency and weak references. Instead  keys are now explicitly wrapped using weak references and similarly to the functioning of a weak hash map  the entries are polled upon accessing the cache. This avoids blocking.
471 ; src/main/java/org/mockito/internal/creation/bytebuddy/MockBytecodeGenerator.java ; Reference correct types for multiple parent class loader if user class and Mockito are loaded by different loaders (e.g. OSGi) ; Fixes #385.
475 ; src/main/java/org/mockito/Mockito.java ; Typo fix ; > Hey   >  > Thanks for the contribution  this is awesome. > As you may have read  project members have somehow an opinionated view on what and how should be > Mockito  e.g. we don t want mockito to be a feature bloat. > There may be a thorough review  with feedback -> code change loop. >  > _This block can be removed_ > _Something wrong in the template fix it here  .github/PULL_REQUEST_TEMPLATE.md   check list - [ ] PR should be motivated  i.e. what does it fix  why  and if relevant how - [ ] If possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change - [x] Avoid other runtime dependencies - [ ] Meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/master/.github/CONTRIBUTING.md) - [ ] Mention  Fixes #<issue number>  in the description _if relevant_ - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
476 ; src/main/java/org/mockito/AdditionalMatchers.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/main/java/org/mockito/Matchers.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/main/java/org/mockito/hamcrest/MockitoHamcrest.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/main/java/org/mockito/internal/MockitoCore.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/main/java/org/mockito/internal/debugging/WarningsCollector.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/main/java/org/mockito/internal/handler/MockHandlerImpl.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/main/java/org/mockito/junit/VerificationCollectorImpl.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/test/java/org/mockito/MockitoTest.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/test/java/org/mockito/StateMaster.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/test/java/org/mockito/internal/handler/MockHandlerImplTest.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/test/java/org/mockito/internal/progress/ThreadSafeMockingProgressTest.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/test/java/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/test/java/org/mockito/internal/stubbing/InvocationContainerImplTest.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
476 ;  src/test/java/org/mockito/internal/verification/NoMoreInteractionsTest.java ; refactored ThreadSafeMockingProgress to a singleton ; The actual implementation of [ThreadSafeMockingProgress](https://github.com/mockito/mockito/blob/master/src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java) disguise that it is effectively a singleton cause the ThreadLocal member is static. This makes it hard to see that different instances  share the same state.  This PR... - refactores  ThreadSafeMockingProgress to provider of MockingProgress instances - uses the standard way of instantiating the initial  ThreadLocal value this also avoids possible race conditions
479 ; src/main/java/org/mockito/Mockito.java ; fix grammar of sentence in Mockito javadoc ; nan
481 ;  buildSrc/src/main/java/org/mockito/javadoc/JavadocExclude.java ; Exclude mockito internal packages from the Javadoc ; This one was a toughy  but I managed to write a Doclet that post-processes the generated classes. It filters all internal classes. This way  there are no compilation failures when generating the Javadoc if you would use  exclude  **/internal/**  .  Fixes #226 
483 ;  buildSrc/src/main/groovy/org/mockito/release/version/VersionBumper.java ; Update version scheme to publish release candidate ; Beta releases now follow the official semver scheme of  MAJOR.MINOR.PATCH-beta.BETAVERSION . This PR also updates the current version to a release candidate.  We should decide after the release candiate what the version of Mockito 2.0 should be. E.g. should it be  2.0.0 ? That would mean we go down on our  PATCH  number which might confuses people. For the Mockito 3.0 beta is to set the version to  3.0.0-beta.BETAVERSION  to not confuse with the  PATCH  number  but it still leaves us with the question regarding the official release of Mockito 2.0 :cry:   Closes #123 
486 ; src/main/java/org/mockito/Matchers.java ; Cleanup: removed dead/unnecessary classes ; Removed dead/unnecessary classes: - VarargCapturingMatcher and Test - AnyVararg removed in Favor of Any  Any can now used as varargs matcher too       removed test [shouldNotAllowAnyObjectMatchEntireVararg()](https://github.com/mockito/mockito/blob/master/src/test/java/org/mockito/internal/invocation/ArgumentsComparatorTest.java#L110) cause it was not clear why ANY should not be allowed as varargs matcher
486 ;  src/main/java/org/mockito/internal/matchers/Any.java ; Cleanup: removed dead/unnecessary classes ; Removed dead/unnecessary classes: - VarargCapturingMatcher and Test - AnyVararg removed in Favor of Any  Any can now used as varargs matcher too       removed test [shouldNotAllowAnyObjectMatchEntireVararg()](https://github.com/mockito/mockito/blob/master/src/test/java/org/mockito/internal/invocation/ArgumentsComparatorTest.java#L110) cause it was not clear why ANY should not be allowed as varargs matcher
486 ;  src/main/java/org/mockito/internal/matchers/AnyVararg.java ; Cleanup: removed dead/unnecessary classes ; Removed dead/unnecessary classes: - VarargCapturingMatcher and Test - AnyVararg removed in Favor of Any  Any can now used as varargs matcher too       removed test [shouldNotAllowAnyObjectMatchEntireVararg()](https://github.com/mockito/mockito/blob/master/src/test/java/org/mockito/internal/invocation/ArgumentsComparatorTest.java#L110) cause it was not clear why ANY should not be allowed as varargs matcher
486 ;  src/test/java/org/mockito/internal/invocation/ArgumentsComparatorTest.java ; Cleanup: removed dead/unnecessary classes ; Removed dead/unnecessary classes: - VarargCapturingMatcher and Test - AnyVararg removed in Favor of Any  Any can now used as varargs matcher too       removed test [shouldNotAllowAnyObjectMatchEntireVararg()](https://github.com/mockito/mockito/blob/master/src/test/java/org/mockito/internal/invocation/ArgumentsComparatorTest.java#L110) cause it was not clear why ANY should not be allowed as varargs matcher
486 ;  src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java ; Cleanup: removed dead/unnecessary classes ; Removed dead/unnecessary classes: - VarargCapturingMatcher and Test - AnyVararg removed in Favor of Any  Any can now used as varargs matcher too       removed test [shouldNotAllowAnyObjectMatchEntireVararg()](https://github.com/mockito/mockito/blob/master/src/test/java/org/mockito/internal/invocation/ArgumentsComparatorTest.java#L110) cause it was not clear why ANY should not be allowed as varargs matcher
490 ; src/main/java/org/mockito/internal/verification/AtLeast.java ; Atleast to static ; - Unified  AtLeastXNumberOfInvocationsChecker  and    AtLeastXNumberOfInvocationsInOrderChecker  into a static utility class - Unified  MissingInvocationChecker  and  MissingInvocationInOrderChecker  in   a static utility class
490 ;  src/main/java/org/mockito/internal/verification/Calls.java ; Atleast to static ; - Unified  AtLeastXNumberOfInvocationsChecker  and    AtLeastXNumberOfInvocationsInOrderChecker  into a static utility class - Unified  MissingInvocationChecker  and  MissingInvocationInOrderChecker  in   a static utility class
490 ;  src/main/java/org/mockito/internal/verification/Times.java ; Atleast to static ; - Unified  AtLeastXNumberOfInvocationsChecker  and    AtLeastXNumberOfInvocationsInOrderChecker  into a static utility class - Unified  MissingInvocationChecker  and  MissingInvocationInOrderChecker  in   a static utility class
490 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java ; Atleast to static ; - Unified  AtLeastXNumberOfInvocationsChecker  and    AtLeastXNumberOfInvocationsInOrderChecker  into a static utility class - Unified  MissingInvocationChecker  and  MissingInvocationInOrderChecker  in   a static utility class
490 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java ; Atleast to static ; - Unified  AtLeastXNumberOfInvocationsChecker  and    AtLeastXNumberOfInvocationsInOrderChecker  into a static utility class - Unified  MissingInvocationChecker  and  MissingInvocationInOrderChecker  in   a static utility class
490 ;  src/main/java/org/mockito/internal/verification/checkers/MissingInvocationChecker.java ; Atleast to static ; - Unified  AtLeastXNumberOfInvocationsChecker  and    AtLeastXNumberOfInvocationsInOrderChecker  into a static utility class - Unified  MissingInvocationChecker  and  MissingInvocationInOrderChecker  in   a static utility class
490 ;  src/main/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java ; Atleast to static ; - Unified  AtLeastXNumberOfInvocationsChecker  and    AtLeastXNumberOfInvocationsInOrderChecker  into a static utility class - Unified  MissingInvocationChecker  and  MissingInvocationInOrderChecker  in   a static utility class
490 ;  src/test/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerInOrderTest.java ; Atleast to static ; - Unified  AtLeastXNumberOfInvocationsChecker  and    AtLeastXNumberOfInvocationsInOrderChecker  into a static utility class - Unified  MissingInvocationChecker  and  MissingInvocationInOrderChecker  in   a static utility class
490 ;  src/test/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java ; Atleast to static ; - Unified  AtLeastXNumberOfInvocationsChecker  and    AtLeastXNumberOfInvocationsInOrderChecker  into a static utility class - Unified  MissingInvocationChecker  and  MissingInvocationInOrderChecker  in   a static utility class
490 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java ; Atleast to static ; - Unified  AtLeastXNumberOfInvocationsChecker  and    AtLeastXNumberOfInvocationsInOrderChecker  into a static utility class - Unified  MissingInvocationChecker  and  MissingInvocationInOrderChecker  in   a static utility class
490 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java ; Atleast to static ; - Unified  AtLeastXNumberOfInvocationsChecker  and    AtLeastXNumberOfInvocationsInOrderChecker  into a static utility class - Unified  MissingInvocationChecker  and  MissingInvocationInOrderChecker  in   a static utility class
491 ; src/main/java/org/mockito/internal/util/junit/JUnitFailureHacker.java ; Deprecate whitebox and corresponding verboserunner and junitfailureha… ; A quick google showed that there are almost zero usages of this runner. Moreover it was relying on a very hackish implementation. I think we can do a better job by creating a new runner with JUnit 5 as part of #390. Therefore the intent is to deprecate these classes and remove them in Mockito 3.0.  Fixes #489
491 ;  src/main/java/org/mockito/internal/util/reflection/Whitebox.java ; Deprecate whitebox and corresponding verboserunner and junitfailureha… ; A quick google showed that there are almost zero usages of this runner. Moreover it was relying on a very hackish implementation. I think we can do a better job by creating a new runner with JUnit 5 as part of #390. Therefore the intent is to deprecate these classes and remove them in Mockito 3.0.  Fixes #489
491 ;  src/main/java/org/mockito/runners/VerboseMockitoJUnitRunner.java ; Deprecate whitebox and corresponding verboserunner and junitfailureha… ; A quick google showed that there are almost zero usages of this runner. Moreover it was relying on a very hackish implementation. I think we can do a better job by creating a new runner with JUnit 5 as part of #390. Therefore the intent is to deprecate these classes and remove them in Mockito 3.0.  Fixes #489
491 ;  src/test/java/org/mockito/internal/util/reflection/WhiteboxTest.java ; Deprecate whitebox and corresponding verboserunner and junitfailureha… ; A quick google showed that there are almost zero usages of this runner. Moreover it was relying on a very hackish implementation. I think we can do a better job by creating a new runner with JUnit 5 as part of #390. Therefore the intent is to deprecate these classes and remove them in Mockito 3.0.  Fixes #489
492 ; src/main/java/org/mockito/Answers.java ; Revert  Remove deprecated method  ; Simple git revert for an accidental removal of a deprecated api since 2.0 instead of 1.X.  Fixes #482.
495 ; src/main/java/org/mockito/internal/InOrderImpl.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/MockitoCore.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/configuration/DefaultAnnotationEngine.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/configuration/injection/ConstructorInjection.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/configuration/injection/filter/TerminalMockCandidateFilter.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/configuration/injection/scanner/InjectMocksScanner.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/creation/MockSettingsImpl.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/handler/MockHandlerImpl.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/invocation/InvocationImpl.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/invocation/MatchersBinder.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/matchers/CapturingMatcher.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswersValidator.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/util/MockCreationValidator.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/util/Timer.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/verification/AtMost.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/verification/NoMoreInteractions.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/verification/Only.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/verification/VerificationDataImpl.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsInOrderChecker.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/verification/checkers/MissingInvocationChecker.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderChecker.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/verification/checkers/NonGreedyNumberOfInvocationsInOrderChecker.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/main/java/org/mockito/verification/Timeout.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/test/java/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
495 ;  src/test/java/org/mockito/internal/exceptions/ReporterTest.java ; Moves Reporter friendly exception factory to internal package ; The  Reporter  friendly exception factory class lies in  org.mockito.exceptions.Reporter   however it s API is subject to change without really impacting user experience.  Thus  I propose to move  org.mockito.exceptions.Reporter  to  org.mockito.internal.exceptions.Reporter .  I didn t provided a dummy class for two reasons : 1. I would like to schedule this for Mockito 2 a major version 2. This class shouldn t be used outside framework development
496 ; src/main/java/org/mockito/ArgumentMatchers.java ; Renames Matchers to ArgumentMatchers to avoid name clash with Hamcrest Matchers class ; Renames  Matchers  to  ArgumentMatchers  to avoid name clash with Hamcrest  org.hamcrest.Matchers  class.  This plagued usage of mockito and hamcrest together since the introduction of matchers. The work in Mockito 2 beta allowed to avoid relying on hamcrest internally and thus split the Hamcrest matcher factory  MockitoHamcrest . Yet this is not enough as using both mockito matchers and hamcrest matchers in the same class  made the developer life not comfortable when using both API.  This change helps in that regard  as it renames the import class. Not this change tweaks only the class hierarchy  so current code still compiles  thanks to the javac compiler that can lookup static method in parent classes. (That is why I didn t updated tests yest  they could be upgraded in a late PR  a good timing would probably be when  Matchers  is removed)   Matchers  class can be removed in the next version of mockito  likely 3.0.
496 ;  src/main/java/org/mockito/Matchers.java ; Renames Matchers to ArgumentMatchers to avoid name clash with Hamcrest Matchers class ; Renames  Matchers  to  ArgumentMatchers  to avoid name clash with Hamcrest  org.hamcrest.Matchers  class.  This plagued usage of mockito and hamcrest together since the introduction of matchers. The work in Mockito 2 beta allowed to avoid relying on hamcrest internally and thus split the Hamcrest matcher factory  MockitoHamcrest . Yet this is not enough as using both mockito matchers and hamcrest matchers in the same class  made the developer life not comfortable when using both API.  This change helps in that regard  as it renames the import class. Not this change tweaks only the class hierarchy  so current code still compiles  thanks to the javac compiler that can lookup static method in parent classes. (That is why I didn t updated tests yest  they could be upgraded in a late PR  a good timing would probably be when  Matchers  is removed)   Matchers  class can be removed in the next version of mockito  likely 3.0.
496 ;  src/main/java/org/mockito/Mockito.java ; Renames Matchers to ArgumentMatchers to avoid name clash with Hamcrest Matchers class ; Renames  Matchers  to  ArgumentMatchers  to avoid name clash with Hamcrest  org.hamcrest.Matchers  class.  This plagued usage of mockito and hamcrest together since the introduction of matchers. The work in Mockito 2 beta allowed to avoid relying on hamcrest internally and thus split the Hamcrest matcher factory  MockitoHamcrest . Yet this is not enough as using both mockito matchers and hamcrest matchers in the same class  made the developer life not comfortable when using both API.  This change helps in that regard  as it renames the import class. Not this change tweaks only the class hierarchy  so current code still compiles  thanks to the javac compiler that can lookup static method in parent classes. (That is why I didn t updated tests yest  they could be upgraded in a late PR  a good timing would probably be when  Matchers  is removed)   Matchers  class can be removed in the next version of mockito  likely 3.0.
498 ; src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java ; remove unused imports ; nan
498 ;  src/test/java/org/mockito/internal/configuration/injection/ConstructorInjectionTest.java ; remove unused imports ; nan
498 ;  src/test/java/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGeneratorTest.java ; remove unused imports ; nan
498 ;  src/test/java/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java ; remove unused imports ; nan
498 ;  src/test/java/org/mockito/internal/stubbing/InvocationContainerImplTest.java ; remove unused imports ; nan
498 ;  src/test/java/org/mockito/internal/verification/NoMoreInteractionsTest.java ; remove unused imports ; nan
498 ;  src/test/java/org/mockitousage/CompilationWarningsTest.java ; remove unused imports ; nan
498 ;  src/test/java/org/mockitousage/stubbing/StubbingWithAdditionalAnswersTest.java ; remove unused imports ; nan
499 ; src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; Fixes #401 - makes the JUnit runner detect unused stubs ; Fixes #401  This is a breaking change because JUnit runner will now fail the test class if there is an unused stubbing.  Feedback is welcome. Sorry for working on it for a long time and big number of commits.
499 ;  src/main/java/org/mockito/internal/progress/NoOpStubbingListener.java ; Fixes #401 - makes the JUnit runner detect unused stubs ; Fixes #401  This is a breaking change because JUnit runner will now fail the test class if there is an unused stubbing.  Feedback is welcome. Sorry for working on it for a long time and big number of commits.
501 ; src/main/java/org/mockito/internal/runners/RunnerFactory.java ; refactored TestMethodsFinder to a static utility class (#426) ; nan
501 ;  src/main/java/org/mockito/internal/runners/util/TestMethodsFinder.java ; refactored TestMethodsFinder to a static utility class (#426) ; nan
501 ;  src/test/java/org/mockito/internal/runners/util/TestMethodsFinderTest.java ; refactored TestMethodsFinder to a static utility class (#426) ; nan
502 ; src/main/java/org/mockito/internal/invocation/ArgumentsComparator.java ; refactored ArgumentsComparator to a static utility class (#426) ; nan
502 ;  src/main/java/org/mockito/internal/invocation/InvocationMatcher.java ; refactored ArgumentsComparator to a static utility class (#426) ; nan
502 ;  src/test/java/org/mockito/internal/invocation/ArgumentsComparatorTest.java ; refactored ArgumentsComparator to a static utility class (#426) ; nan
503 ; src/main/java/org/mockito/internal/verification/Calls.java ; refactored NonGreedyNumberOfInvocationsInOrderChecker to a static uti… ; …lity class (#426)
503 ;  src/main/java/org/mockito/internal/verification/checkers/NonGreedyNumberOfInvocationsInOrderChecker.java ; refactored NonGreedyNumberOfInvocationsInOrderChecker to a static uti… ; …lity class (#426)
504 ; src/main/java/org/mockito/MockingDetails.java ; fixed some rawtype warnings ; nan
504 ;  src/main/java/org/mockito/internal/InternalMockHandler.java ; fixed some rawtype warnings ; nan
504 ;  src/main/java/org/mockito/internal/creation/MockSettingsImpl.java ; fixed some rawtype warnings ; nan
504 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java ; fixed some rawtype warnings ; nan
504 ;  src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java ; fixed some rawtype warnings ; nan
504 ;  src/main/java/org/mockito/internal/handler/MockHandlerImpl.java ; fixed some rawtype warnings ; nan
504 ;  src/main/java/org/mockito/internal/handler/NullResultGuardian.java ; fixed some rawtype warnings ; nan
504 ;  src/main/java/org/mockito/internal/util/DefaultMockingDetails.java ; fixed some rawtype warnings ; nan
504 ;  src/main/java/org/mockito/mock/MockCreationSettings.java ; fixed some rawtype warnings ; nan
504 ;  src/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java ; fixed some rawtype warnings ; nan
504 ;  src/test/java/org/mockito/internal/handler/InvocationNotifierHandlerTest.java ; fixed some rawtype warnings ; nan
507 ; src/main/java/org/mockito/internal/exceptions/Reporter.java ; Improved exception message - fixes issue 506 ; Fixes #506 
507 ;  src/main/java/org/mockito/internal/reporting/Pluralizer.java ; Improved exception message - fixes issue 506 ; Fixes #506 
507 ;  src/test/java/org/mockito/internal/reporting/PluralizerTest.java ; Improved exception message - fixes issue 506 ; Fixes #506 
507 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java ; Improved exception message - fixes issue 506 ; Fixes #506 
507 ;  src/test/java/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java ; Improved exception message - fixes issue 506 ; Fixes #506 
510 ; src/main/java/org/mockito/ArgumentMatchers.java ; Fixes #194 tweaks any matchers ; Details is #194   I took the opportunity to  - replace  TestBase.assertThat  by more powerful AssertJ equivalent. There s still some work to be done in this class. - add iterable matchers  Before merging - [x] I ponder to make  anyObject()  not to accept  null   currently  any()  is an alias of  anyObject()  => Keeping the  anyObjet  behaviour and deprecate the method - [x] I need to update  anyInt  family description.
511 ; src/test/java/org/mockito/internal/creation/DelegatingMethodTest.java ; Fix some warnings ; Fixed various warnings  mostly unused imports  but also a couple of unnecessary semicolons and interface modifiers.   ./gradlew build  built successfully.
511 ;  src/test/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractorTest.java ; Fix some warnings ; Fixed various warnings  mostly unused imports  but also a couple of unnecessary semicolons and interface modifiers.   ./gradlew build  built successfully.
511 ;  src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java ; Fix some warnings ; Fixed various warnings  mostly unused imports  but also a couple of unnecessary semicolons and interface modifiers.   ./gradlew build  built successfully.
511 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationBasicTest.java ; Fix some warnings ; Fixed various warnings  mostly unused imports  but also a couple of unnecessary semicolons and interface modifiers.   ./gradlew build  built successfully.
511 ;  src/test/java/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java ; Fix some warnings ; Fixed various warnings  mostly unused imports  but also a couple of unnecessary semicolons and interface modifiers.   ./gradlew build  built successfully.
511 ;  src/test/java/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java ; Fix some warnings ; Fixed various warnings  mostly unused imports  but also a couple of unnecessary semicolons and interface modifiers.   ./gradlew build  built successfully.
511 ;  src/test/java/org/mockitousage/bugs/MultithreadedStubbingHalfManualTest.java ; Fix some warnings ; Fixed various warnings  mostly unused imports  but also a couple of unnecessary semicolons and interface modifiers.   ./gradlew build  built successfully.
512 ; src/test/java/org/mockito/internal/verification/VerificationWithDescriptionTest.java ; fix some raw type warnings in tests ; nan
512 ;  src/test/java/org/mockitousage/annotation/SpyInjectionTest.java ; fix some raw type warnings in tests ; nan
512 ;  src/test/java/org/mockitousage/configuration/ClassCacheVersusClassReloadingTest.java ; fix some raw type warnings in tests ; nan
512 ;  src/test/java/org/mockitousage/junitrunner/JUnit45RunnerTest.java ; fix some raw type warnings in tests ; nan
512 ;  src/test/java/org/mockitousage/junitrunner/SilentRunnerTest.java ; fix some raw type warnings in tests ; nan
512 ;  src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java ; fix some raw type warnings in tests ; nan
513 ; src/test/java/org/mockitousage/debugging/PrintingInvocationsDetectsUnusedStubTest.java ; replace TestBase#assertContainsIgnoringCase(String sub  String string… ; …) with AssertJ #containsIgnoringCase  Other methods of TestBase could be replaced in a similar way.
513 ;  src/test/java/org/mockitoutil/CustomAssertionsTest.java ; replace TestBase#assertContainsIgnoringCase(String sub  String string… ; …) with AssertJ #containsIgnoringCase  Other methods of TestBase could be replaced in a similar way.
513 ;  src/test/java/org/mockitoutil/TestBase.java ; replace TestBase#assertContainsIgnoringCase(String sub  String string… ; …) with AssertJ #containsIgnoringCase  Other methods of TestBase could be replaced in a similar way.
514 ; src/main/java/org/mockito/internal/MockitoCore.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/configuration/injection/SpyOnInjectedFieldsHandler.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/configuration/injection/scanner/MockScanner.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/invocation/finder/AllInvocationsFinder.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/reporting/PrintSettings.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/stubbing/answers/ThrowsException.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/TriesToReturnSelf.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/util/DefaultMockingDetails.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/util/MockCreationValidator.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/util/MockUtil.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/util/collections/HashCodeAndEqualsMockWrapper.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/test/java/org/mockito/internal/util/MockUtilTest.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorIssue421Test.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/test/java/org/mockitousage/annotation/SpyAnnotationInitializedInBaseClassTest.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/test/java/org/mockitousage/annotation/SpyInjectionTest.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/test/java/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java ; refactored MockUtil to a static utility class (#426) ; nan
514 ;  src/test/java/org/mockitoutil/TestBase.java ; refactored MockUtil to a static utility class (#426) ; nan
515 ; src/main/java/org/mockito/internal/MockitoCore.java ; refactored AllInvocationsFinder and VerifiableInvocationsFinder to st… ; …atic utility classes (#426)
515 ;  src/main/java/org/mockito/internal/debugging/MockitoDebuggerImpl.java ; refactored AllInvocationsFinder and VerifiableInvocationsFinder to st… ; …atic utility classes (#426)
515 ;  src/main/java/org/mockito/internal/debugging/WarningsCollector.java ; refactored AllInvocationsFinder and VerifiableInvocationsFinder to st… ; …atic utility classes (#426)
515 ;  src/main/java/org/mockito/internal/invocation/finder/AllInvocationsFinder.java ; refactored AllInvocationsFinder and VerifiableInvocationsFinder to st… ; …atic utility classes (#426)
515 ;  src/main/java/org/mockito/internal/invocation/finder/VerifiableInvocationsFinder.java ; refactored AllInvocationsFinder and VerifiableInvocationsFinder to st… ; …atic utility classes (#426)
515 ;  src/main/java/org/mockito/internal/verification/InOrderWrapper.java ; refactored AllInvocationsFinder and VerifiableInvocationsFinder to st… ; …atic utility classes (#426)
515 ;  src/test/java/org/mockito/internal/AllInvocationsFinderTest.java ; refactored AllInvocationsFinder and VerifiableInvocationsFinder to st… ; …atic utility classes (#426)
516 ; src/test/java/org/mockito/internal/verification/SmartPrinterTest.java ; replace TestBase#assertNotContains(String sub  String string) with As… ; …sertJ #doesNotContain(CharSequence sequence)
516 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java ; replace TestBase#assertNotContains(String sub  String string) with As… ; …sertJ #doesNotContain(CharSequence sequence)
516 ;  src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java ; replace TestBase#assertNotContains(String sub  String string) with As… ; …sertJ #doesNotContain(CharSequence sequence)
516 ;  src/test/java/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java ; replace TestBase#assertNotContains(String sub  String string) with As… ; …sertJ #doesNotContain(CharSequence sequence)
516 ;  src/test/java/org/mockitoutil/TestBase.java ; replace TestBase#assertNotContains(String sub  String string) with As… ; …sertJ #doesNotContain(CharSequence sequence)
517 ; subprojects/testng/src/main/java/org/mockito/testng/MockitoBeforeTestNGMethod.java ; Make ciBuild depends also on subprojects state ; Before those changes CI build was silently ignoring compilation erros in Mockito submodules. Because of that  gw check  was failing locally (e.g. due to missing  assertNotContainsError() ).  In addition to enable building those modules (I don t know what are the plans about testng module by the way) I fixed Java 6 compatibility in them.
519 ; src/test/java/org/mockito/internal/configuration/plugins/PluginFinderTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockito/internal/exceptions/util/ScenarioPrinterTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockito/internal/util/junit/JUnitFailureHackerTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockito/internal/verification/SmartPrinterTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationUnhappyPathTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/annotation/SpyAnnotationTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/basicapi/MocksCreationTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/basicapi/ResetTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/debugging/PrintingInvocationsWhenEverythingOkTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/debugging/PrintingInvocationsWhenStubNotUsedTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/internal/debugging/LocationImplTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/matchers/CapturingArgumentsTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/matchers/CustomMatchersTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/matchers/HamcrestMatchersTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/matchers/MatchersTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/misuse/DetectingMisusedMatchersTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/misuse/RestrictedObjectMethodsTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/stacktrace/ClickableStackTracesTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/stubbing/SmartNullsStubbingTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/verification/AtMostXVerificationTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitousage/verification/VerificationInOrderTest.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
519 ;  src/test/java/org/mockitoutil/TestBase.java ; replace TestBase#assertContains(String sub  String string) with Asser… ; …tJ #contains and #hasMessageContaining
523 ; src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java ; made some timeouts in VerificationAfterDelayTest and VerificationWith… ; …TimeoutTest more lenient to prevent frequent build failures on travis ci
523 ;  src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; made some timeouts in VerificationAfterDelayTest and VerificationWith… ; …TimeoutTest more lenient to prevent frequent build failures on travis ci
525 ; src/test/java/org/mockitousage/bugs/ConfusedSignatureTest.java ; Add regression test for #508 ; As mentioned in the bug report for #508   adds a test which would catch this issue if it happened to regress in the future.
528 ; src/main/java/org/mockito/ArgumentMatchers.java ; Missing generics info on collection matchers ; Follow up on #510 (issue #194) following this comment https://github.com/mockito/mockito/pull/510#issuecomment-236877717  Basically it tweaks the collection matchers with generic support. It should have bee in abf9851.
532 ; src/main/java/org/mockito/Mockito.java ; Fix typo in Javadocs ; - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how - [x] If possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change - [x] Avoid other runtime dependencies - [x] Meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/master/.github/CONTRIBUTING.md) - [x] Mention  Fixes #<issue number>  in the description _if relevant_ - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_  Also improve sentence structure of surrounding sentences.
535 ; src/main/java/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java ; refactored SuperTypesLastSorter to a static utility class ; refactored SuperTypesLastSorter to a static utility class  relates to #426 
535 ;  src/main/java/org/mockito/internal/util/reflection/SuperTypesLastSorter.java ; refactored SuperTypesLastSorter to a static utility class ; refactored SuperTypesLastSorter to a static utility class  relates to #426 
535 ;  src/test/java/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java ; refactored SuperTypesLastSorter to a static utility class ; refactored SuperTypesLastSorter to a static utility class  relates to #426 
535 ;  src/test/java/org/mockitousage/bugs/ConfusedSignatureTest.java ; refactored SuperTypesLastSorter to a static utility class ; refactored SuperTypesLastSorter to a static utility class  relates to #426 
540 ; src/main/java/org/mockito/internal/invocation/ArgumentsProcessor.java ; inlined ArrayUtils.isEmpty() in ArgumentsProcessor ; Inlined ArrayUtils.isEmpty() in ArgumentsProcessor and removed ArrayUtils cause it was only used in ArgumentProcessor. Also isEmpty(..) was renamed to isNullOrEmpty(..) for clarity.  relates to #426 
540 ;  src/main/java/org/mockito/internal/util/collections/ArrayUtils.java ; inlined ArrayUtils.isEmpty() in ArgumentsProcessor ; Inlined ArrayUtils.isEmpty() in ArgumentsProcessor and removed ArrayUtils cause it was only used in ArgumentProcessor. Also isEmpty(..) was renamed to isNullOrEmpty(..) for clarity.  relates to #426 
547 ; src/main/java/org/mockito/internal/matchers/text/MatcherToString.java ; refactored ObjectMethodsGuru to a static utility class ; - refactored  ObjectMethodsGuru  to a static utility class - removed unused methods and associated tests:   -  isToString(MockitoMethod method)    -  isEqualsMethod(Method method)    -  isHashCodeMethod(Method method)  - renamed  isToString(..)  to  isToStringMethod(..)   relates to #426 
547 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java ; refactored ObjectMethodsGuru to a static utility class ; - refactored  ObjectMethodsGuru  to a static utility class - removed unused methods and associated tests:   -  isToString(MockitoMethod method)    -  isEqualsMethod(Method method)    -  isHashCodeMethod(Method method)  - renamed  isToString(..)  to  isToStringMethod(..)   relates to #426 
547 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java ; refactored ObjectMethodsGuru to a static utility class ; - refactored  ObjectMethodsGuru  to a static utility class - removed unused methods and associated tests:   -  isToString(MockitoMethod method)    -  isEqualsMethod(Method method)    -  isHashCodeMethod(Method method)  - renamed  isToString(..)  to  isToStringMethod(..)   relates to #426 
547 ;  src/main/java/org/mockito/internal/util/ObjectMethodsGuru.java ; refactored ObjectMethodsGuru to a static utility class ; - refactored  ObjectMethodsGuru  to a static utility class - removed unused methods and associated tests:   -  isToString(MockitoMethod method)    -  isEqualsMethod(Method method)    -  isHashCodeMethod(Method method)  - renamed  isToString(..)  to  isToStringMethod(..)   relates to #426 
547 ;  src/main/java/org/mockito/internal/verification/DefaultRegisteredInvocations.java ; refactored ObjectMethodsGuru to a static utility class ; - refactored  ObjectMethodsGuru  to a static utility class - removed unused methods and associated tests:   -  isToString(MockitoMethod method)    -  isEqualsMethod(Method method)    -  isHashCodeMethod(Method method)  - renamed  isToString(..)  to  isToStringMethod(..)   relates to #426 
547 ;  src/main/java/org/mockito/internal/verification/VerificationDataImpl.java ; refactored ObjectMethodsGuru to a static utility class ; - refactored  ObjectMethodsGuru  to a static utility class - removed unused methods and associated tests:   -  isToString(MockitoMethod method)    -  isEqualsMethod(Method method)    -  isHashCodeMethod(Method method)  - renamed  isToString(..)  to  isToStringMethod(..)   relates to #426 
547 ;  src/test/java/org/mockito/internal/util/ObjectMethodsGuruTest.java ; refactored ObjectMethodsGuru to a static utility class ; - refactored  ObjectMethodsGuru  to a static utility class - removed unused methods and associated tests:   -  isToString(MockitoMethod method)    -  isEqualsMethod(Method method)    -  isHashCodeMethod(Method method)  - renamed  isToString(..)  to  isToStringMethod(..)   relates to #426 
549 ; src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java ; Fully register a class ancestry for GenericMetadataSupport ; The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497
549 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java ; Fully register a class ancestry for GenericMetadataSupport ; The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497
549 ;  src/test/java/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java ; Fully register a class ancestry for GenericMetadataSupport ; The old implemention would take a class X and consider all of its superclasses and the interfaces implemented by X and the interfaces implemented by all of its superclasses.  The new implementation also considers the superinterfaces of the interfaces implemented by X and the superinterfaces of the interfaces implemented by its superclasses.  Fixes #497
550 ; src/main/java/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java ; Fixed #538 changed error message in case initialization for mock injection fails. ; Fixed #538  If a filed is annotated with @InjectMocks and the type of a field is an enum  inner class  interface or local class the error message is now: _ Mock injection failed on field  fieldName  cause the type  AbstractCollection  is an abstract class._ 
550 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Fixed #538 changed error message in case initialization for mock injection fails. ; Fixed #538  If a filed is annotated with @InjectMocks and the type of a field is an enum  inner class  interface or local class the error message is now: _ Mock injection failed on field  fieldName  cause the type  AbstractCollection  is an abstract class._ 
550 ;  src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java ; Fixed #538 changed error message in case initialization for mock injection fails. ; Fixed #538  If a filed is annotated with @InjectMocks and the type of a field is an enum  inner class  interface or local class the error message is now: _ Mock injection failed on field  fieldName  cause the type  AbstractCollection  is an abstract class._ 
550 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java ; Fixed #538 changed error message in case initialization for mock injection fails. ; Fixed #538  If a filed is annotated with @InjectMocks and the type of a field is an enum  inner class  interface or local class the error message is now: _ Mock injection failed on field  fieldName  cause the type  AbstractCollection  is an abstract class._ 
550 ;  src/test/java/org/mockitousage/basicapi/MocksCreationTest.java ; Fixed #538 changed error message in case initialization for mock injection fails. ; Fixed #538  If a filed is annotated with @InjectMocks and the type of a field is an enum  inner class  interface or local class the error message is now: _ Mock injection failed on field  fieldName  cause the type  AbstractCollection  is an abstract class._ 
555 ; src/main/java/org/mockito/MockingDetails.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/Mockito.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/MockitoFramework.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/exceptions/misusing/UnnecessaryStubbingException.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/DefaultMockitoFramework.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/MockitoCore.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/debugging/WarningsCollector.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/framework/DefaultMockitoFramework.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/framework/ThreadSafeStubbingListener.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/invocation/Stubbing.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/invocation/finder/AllInvocationsFinder.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/junit/ArgMismatchFinder.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/junit/JUnitRule.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/junit/RuleStubbingHintsReporter.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/junit/StubbingArgMismatches.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/junit/StubbingHint.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/junit/UnusedStubbings.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/junit/UnusedStubbingsFinder.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/listeners/CollectCreatedMocks.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/listeners/MockingStartedListener.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/progress/MockingProgress.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/progress/NoOpStubbingListener.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/runners/StrictRunner.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/runners/UnnecessaryStubbingsReporter.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/runners/util/FrameworkUsageValidator.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/internal/stubbing/StubbedInvocationMatcher.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/junit/MockitoJUnit.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/junit/MockitoRule.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/junit/VerificationCollector.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/listeners/MockCreationListener.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/listeners/MockitoListener.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/listeners/StubbingListener.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/main/java/org/mockito/quality/MockitoHint.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockito/MockingDetailsTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockito/internal/AllInvocationsFinderTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockito/internal/framework/DefaultMockitoFrameworkTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockito/internal/junit/ArgMismatchFinderTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockito/internal/junit/JUnitRuleTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockito/internal/junit/StubbingArgMismatchesTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockito/internal/junit/UnusedStubbingsFinderTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockito/internal/junit/UnusedStubbingsTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockito/internal/progress/MockingProgressImplTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockito/internal/util/SimpleMockitoLogger.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockitousage/examples/use/ExampleTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockitousage/junitrule/SilentJUnitRuleTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockitousage/junitrule/StubbingWarningsJUnitRuleTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockitousage/junitrule/StubbingWarningsMultiThreadingTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockitousage/junitrunner/StrictRunnerTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
555 ;  src/test/java/org/mockitousage/junitrunner/UnusedStubsExceptionMessageTest.java ; JUnit rules report unused stubs - fixes #384 ; - Makes JUnit rules detect unused stubs - Introduces MockitoListener API - See the use case in issue #384  - Recreated PR #527 with squashed commits
556 ; src/main/java/org/mockito/internal/InOrderImpl.java ; Move Mockito internal classes to internal package ; Fixes #551
556 ;  src/main/java/org/mockito/internal/junit/VerificationCollectorImpl.java ; Move Mockito internal classes to internal package ; Fixes #551
556 ;  src/main/java/org/mockito/internal/verification/VerificationWrapper.java ; Move Mockito internal classes to internal package ; Fixes #551
556 ;  src/main/java/org/mockito/internal/verification/VerificationWrapperInOrderWrapper.java ; Move Mockito internal classes to internal package ; Fixes #551
556 ;  src/main/java/org/mockito/junit/MockitoJUnit.java ; Move Mockito internal classes to internal package ; Fixes #551
556 ;  src/main/java/org/mockito/verification/After.java ; Move Mockito internal classes to internal package ; Fixes #551
556 ;  src/main/java/org/mockito/verification/Timeout.java ; Move Mockito internal classes to internal package ; Fixes #551
557 ;  src/main/java/org/mockito/AdditionalAnswers.java ; Replace or remove code.google.com links in documentation ; Most links are replaced by their GitHub equivalent. Some links were pointing to issues on code.google.com  but given the large amount of documentation on these methods I decided to remove them.  Fixes #533
557 ;  src/main/java/org/mockito/MockSettings.java ; Replace or remove code.google.com links in documentation ; Most links are replaced by their GitHub equivalent. Some links were pointing to issues on code.google.com  but given the large amount of documentation on these methods I decided to remove them.  Fixes #533
557 ;  src/main/java/org/mockito/Mockito.java ; Replace or remove code.google.com links in documentation ; Most links are replaced by their GitHub equivalent. Some links were pointing to issues on code.google.com  but given the large amount of documentation on these methods I decided to remove them.  Fixes #533
560 ; src/main/java/org/mockito/internal/util/Checks.java ; Fixes #554 : Checks.checkNotNull now throws IAE instead of NPE ; Changes NPE to IAE  see #554 
560 ;  src/test/java/org/mockito/internal/configuration/MockInjectionTest.java ; Fixes #554 : Checks.checkNotNull now throws IAE instead of NPE ; Changes NPE to IAE  see #554 
568 ; src/main/java/org/mockito/internal/junit/UnusedStubbingsFinder.java ; Ensured that MockitoJUnitRunner is thread safe wrt unused stubs detection ; This PR concludes #401 Yay!!!!  Highlights: - fixed the thread safety problem by leveraging the same API that JUnit rules used for hinting at unused stubs - removed StubbingListener API (it could not work to the thread safety levels we support in Mockito  see also #545)  Closes #332 Fixes #401
569 ; src/main/java/org/mockito/MockingDetails.java ; Improved the public API of MockingDetails ; Fixes #541  highlights: - started exposing full mock creation information instead of just type to mock and extra interfaces - changed public API but only for methods that were introduced in 2.x. So it is _not_ backwards incompatible change as far as 1.10 is concerned.
569 ;  src/main/java/org/mockito/internal/util/DefaultMockingDetails.java ; Improved the public API of MockingDetails ; Fixes #541  highlights: - started exposing full mock creation information instead of just type to mock and extra interfaces - changed public API but only for methods that were introduced in 2.x. So it is _not_ backwards incompatible change as far as 1.10 is concerned.
569 ;  src/test/java/org/mockito/internal/util/DefaultMockingDetailsTest.java ; Improved the public API of MockingDetails ; Fixes #541  highlights: - started exposing full mock creation information instead of just type to mock and extra interfaces - changed public API but only for methods that were introduced in 2.x. So it is _not_ backwards incompatible change as far as 1.10 is concerned.
571 ; src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java ; Pretty print primitive and wrappers types in Maps ; check list - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how - [x] If possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change - [x] Avoid other runtime dependencies - [x] Meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/master/.github/CONTRIBUTING.md) - [x] Mention  Fixes #<issue number>  in the description _if relevant_ - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_  In following case  user can t understand the difference between expected and actual.  Code:      @Test public void foo() {     Foo m = mock(Foo.class)      m.foo(new HashMap<String  Object>(){{         put( hoge   4)      }})      verify(m).foo(new HashMap<String  Object>(){{         put( hoge   4L)      }})  }  public static class Foo {     void foo(Map<String  Object> map) {     } }      Output:      Argument(s) are different! Wanted: foo.foo(() {hoge=4})  -> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) Actual invocation has different arguments: foo.foo(() {hoge=4})  -> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)      If mockito outputs the  L  suffix for long values  user can understand the difference easily.  After this commit  the output will be following:      Argument(s) are different! Wanted: foo.foo({ hoge =4L})  -> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) Actual invocation has different arguments: foo.foo({ hoge =4})  -> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)      This will fix #570
571 ;  src/test/java/org/mockito/internal/matchers/text/ValuePrinterTest.java ; Pretty print primitive and wrappers types in Maps ; check list - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how - [x] If possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change - [x] Avoid other runtime dependencies - [x] Meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/master/.github/CONTRIBUTING.md) - [x] Mention  Fixes #<issue number>  in the description _if relevant_ - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_  In following case  user can t understand the difference between expected and actual.  Code:      @Test public void foo() {     Foo m = mock(Foo.class)      m.foo(new HashMap<String  Object>(){{         put( hoge   4)      }})      verify(m).foo(new HashMap<String  Object>(){{         put( hoge   4L)      }})  }  public static class Foo {     void foo(Map<String  Object> map) {     } }      Output:      Argument(s) are different! Wanted: foo.foo(() {hoge=4})  -> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) Actual invocation has different arguments: foo.foo(() {hoge=4})  -> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)      If mockito outputs the  L  suffix for long values  user can understand the difference easily.  After this commit  the output will be following:      Argument(s) are different! Wanted: foo.foo({ hoge =4L})  -> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) Actual invocation has different arguments: foo.foo({ hoge =4})  -> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)      This will fix #570
571 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java ; Pretty print primitive and wrappers types in Maps ; check list - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how - [x] If possible / relevant include an example in the description  that could help all readers      including project members to get a better picture of the change - [x] Avoid other runtime dependencies - [x] Meaningful commit history   intention is important please rebase your commit history so that each      commit is meaningful and help the people that will explore a change in 2 years - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/master/.github/CONTRIBUTING.md) - [x] Mention  Fixes #<issue number>  in the description _if relevant_ - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_  In following case  user can t understand the difference between expected and actual.  Code:      @Test public void foo() {     Foo m = mock(Foo.class)      m.foo(new HashMap<String  Object>(){{         put( hoge   4)      }})      verify(m).foo(new HashMap<String  Object>(){{         put( hoge   4L)      }})  }  public static class Foo {     void foo(Map<String  Object> map) {     } }      Output:      Argument(s) are different! Wanted: foo.foo(() {hoge=4})  -> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) Actual invocation has different arguments: foo.foo(() {hoge=4})  -> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)      If mockito outputs the  L  suffix for long values  user can understand the difference easily.  After this commit  the output will be following:      Argument(s) are different! Wanted: foo.foo({ hoge =4L})  -> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) Actual invocation has different arguments: foo.foo({ hoge =4})  -> at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)      This will fix #570
572 ; src/test/java/org/mockito/internal/creation/MockSettingsImplTest.java ; replace TestBase#assertContainsType(final Collection<?> list  final C… ; …lass<?> clazz) with AssertJ assertion
572 ;  src/test/java/org/mockitoutil/TestBase.java ; replace TestBase#assertContainsType(final Collection<?> list  final C… ; …lass<?> clazz) with AssertJ assertion
573 ; src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java ; replace TestBase#assertNotEquals with AssertJ #isNotEqualTo ; nan
573 ;  src/test/java/org/mockitoutil/TestBase.java ; replace TestBase#assertNotEquals with AssertJ #isNotEqualTo ; nan
574 ; src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java ; fix some rawtype warnings ; nan
574 ;  src/test/java/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java ; fix some rawtype warnings ; nan
578 ; src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java ; made some timeouts in VerificationAfterDelayTest and VerificationWith… ; …TimeoutTest more lenient to reduce build failures on travis ci
578 ;  src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; made some timeouts in VerificationAfterDelayTest and VerificationWith… ; …TimeoutTest more lenient to reduce build failures on travis ci
579 ; src/main/java/org/mockito/internal/debugging/WarningsFinder.java ; fix some rawtype warnings ; nan
579 ;  src/main/java/org/mockito/internal/matchers/text/MatchersPrinter.java ; fix some rawtype warnings ; nan
579 ;  src/main/java/org/mockito/internal/util/Checks.java ; fix some rawtype warnings ; nan
579 ;  src/main/java/org/mockito/internal/util/MockNameImpl.java ; fix some rawtype warnings ; nan
579 ;  src/main/java/org/mockito/internal/util/reflection/GenericMaster.java ; fix some rawtype warnings ; nan
579 ;  src/test/java/org/mockito/internal/invocation/InvocationImplTest.java ; fix some rawtype warnings ; nan
579 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java ; fix some rawtype warnings ; nan
579 ;  src/test/java/org/mockito/internal/util/ObjectMethodsGuruTest.java ; fix some rawtype warnings ; nan
579 ;  src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java ; fix some rawtype warnings ; nan
579 ;  src/test/java/org/mockitoutil/ClassLoaders.java ; fix some rawtype warnings ; nan
579 ;  src/test/java/org/mockitoutil/SimplePerRealmReloadingClassLoader.java ; fix some rawtype warnings ; nan
587 ; src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; make VerificationWithTimeoutTest#shouldAllowMixingOnlyWithTimeout mor… ; …e lenient to reduce build failures on travis ci  The two recent build failures where both caused by this test: https://travis-ci.org/mockito/mockito/jobs/154189781 https://travis-ci.org/mockito/mockito/jobs/154506554
590 ; src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java ; removed package org.mockito.internal.listeners ; - deleted unused and empty interface  MockingProgressListener  - moved  NotifiedMethodInvocationReport  to  org.mockito.internal.handler 
590 ;  src/main/java/org/mockito/internal/handler/NotifiedMethodInvocationReport.java ; removed package org.mockito.internal.listeners ; - deleted unused and empty interface  MockingProgressListener  - moved  NotifiedMethodInvocationReport  to  org.mockito.internal.handler 
590 ;  src/main/java/org/mockito/internal/listeners/MockingProgressListener.java ; removed package org.mockito.internal.listeners ; - deleted unused and empty interface  MockingProgressListener  - moved  NotifiedMethodInvocationReport  to  org.mockito.internal.handler 
590 ;  src/test/java/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java ; removed package org.mockito.internal.listeners ; - deleted unused and empty interface  MockingProgressListener  - moved  NotifiedMethodInvocationReport  to  org.mockito.internal.handler 
590 ;  src/test/java/org/mockito/internal/handler/InvocationNotifierHandlerTest.java ; removed package org.mockito.internal.listeners ; - deleted unused and empty interface  MockingProgressListener  - moved  NotifiedMethodInvocationReport  to  org.mockito.internal.handler 
591 ; src/main/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java ; refactored ArgumentMatchingTool to a static utillity class ; relates to #426
591 ;  src/main/java/org/mockito/internal/verification/checkers/MissingInvocationChecker.java ; refactored ArgumentMatchingTool to a static utillity class ; relates to #426
591 ;  src/test/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java ; refactored ArgumentMatchingTool to a static utillity class ; relates to #426
592 ; src/main/java/org/mockito/ArgumentMatcher.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
592 ;  src/main/java/org/mockito/ArgumentMatchers.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
592 ;  src/main/java/org/mockito/BDDMockito.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
592 ;  src/main/java/org/mockito/Mockito.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
592 ;  src/main/java/org/mockito/MockitoFramework.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
592 ;  src/main/java/org/mockito/hamcrest/MockitoHamcrest.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
592 ;  src/main/java/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
592 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
592 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
592 ;  src/main/java/org/mockito/junit/MockitoJUnit.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
592 ;  src/main/java/org/mockito/junit/MockitoRule.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
592 ;  src/main/java/org/mockito/junit/VerificationCollector.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
592 ;  src/main/java/org/mockito/plugins/MockMaker.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
592 ;  src/main/java/org/mockito/quality/MockitoHint.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
592 ;  src/main/java/org/mockito/runners/MockitoJUnitRunner.java ; stylesheet-tweaks-for-openjdk6 ; #589 aimed to fix the javadoc rendering  but the assumption was that the javadoc tool of the Sun JDK6 will render javadoc the same way as openjdk6.  Unfortunately this is not the same  the javadoc rendering of openjdk6 is a pre work that avoid the use of table elements  this making the stylesheet incompatible.  This PR aims to fix that and thus fix #552   Bonus I changed the  2.*  and  2.0  by  2.0.0  in the javadoc  this way we have aligned version numbers
597 ; src/main/java/org/mockito/internal/creation/util/SearchingClassLoader.java ; Removed TODO and dead code ; - Sweeped through all TODOs  found some dead code to remove - Hamcrest docs looks good overall  TODO is obsolete - Updated javadoc for deprecated Mockito.debug()  Fixes #593 
599 ; buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Commit.java ; Improved release notes generation ; Fixes issue #598  Does not change Mockito library code  just the release pipeline.
599 ;  buildSrc/src/main/groovy/org/mockito/release/notes/vcs/Contribution.java ; Improved release notes generation ; Fixes issue #598  Does not change Mockito library code  just the release pipeline.
599 ;  buildSrc/src/main/groovy/org/mockito/release/notes/vcs/DefaultContributionSet.java ; Improved release notes generation ; Fixes issue #598  Does not change Mockito library code  just the release pipeline.
599 ;  buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitCommit.java ; Improved release notes generation ; Fixes issue #598  Does not change Mockito library code  just the release pipeline.
599 ;  buildSrc/src/main/groovy/org/mockito/release/notes/vcs/GitContributionsProvider.java ; Improved release notes generation ; Fixes issue #598  Does not change Mockito library code  just the release pipeline.
600 ; src/main/java/org/mockito/internal/junit/UnusedStubbings.java ; suppressed compiler warning and unchecked collections cast ; - suppressed compile time warning - refactor raw collection cast
600 ;  src/main/java/org/mockito/internal/junit/UnusedStubbingsFinder.java ; suppressed compiler warning and unchecked collections cast ; - suppressed compile time warning - refactor raw collection cast
615 ; src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java ; Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes ; Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**
615 ;  src/test/java/org/mockitousage/stubbing/DeepStubbingTest.java ; Fixes #497 : RETURNS_DEEP_STUBS may try to mock final classes ; Fixes #497  With deep stubs  it was possible for generic metadata to be lost/unused through nested invocations on non generic types. This could cause  RETURNS_DEEP_STUBS  to try mocking final classes which would result in a  ClassCastException .  Apparently my other PR (#549) wasn t quite enough to fully fix this problem.  ---  **EDITED by mockito team**
617 ; src/main/java/org/mockito/AdditionalAnswers.java ; Moves arity interfaces of java8 helper answers to public API ; The Java 8 helper interfaces have been introduced in #338. However the public  AdditionalAnswers.answer  family leak the functional interfaces.  These _parameter arity_ interfaces can be public  hence they are moved next to  Answer  in the  org.mockito.stubbing  package.  I m however in favor of adding the  @Incubating  annotation on those APIs and related objects. Thoughts ?  Fixes #614
617 ;  src/main/java/org/mockito/stubbing/Answer1.java ; Moves arity interfaces of java8 helper answers to public API ; The Java 8 helper interfaces have been introduced in #338. However the public  AdditionalAnswers.answer  family leak the functional interfaces.  These _parameter arity_ interfaces can be public  hence they are moved next to  Answer  in the  org.mockito.stubbing  package.  I m however in favor of adding the  @Incubating  annotation on those APIs and related objects. Thoughts ?  Fixes #614
617 ;  src/main/java/org/mockito/stubbing/Answer2.java ; Moves arity interfaces of java8 helper answers to public API ; The Java 8 helper interfaces have been introduced in #338. However the public  AdditionalAnswers.answer  family leak the functional interfaces.  These _parameter arity_ interfaces can be public  hence they are moved next to  Answer  in the  org.mockito.stubbing  package.  I m however in favor of adding the  @Incubating  annotation on those APIs and related objects. Thoughts ?  Fixes #614
617 ;  src/main/java/org/mockito/stubbing/Answer3.java ; Moves arity interfaces of java8 helper answers to public API ; The Java 8 helper interfaces have been introduced in #338. However the public  AdditionalAnswers.answer  family leak the functional interfaces.  These _parameter arity_ interfaces can be public  hence they are moved next to  Answer  in the  org.mockito.stubbing  package.  I m however in favor of adding the  @Incubating  annotation on those APIs and related objects. Thoughts ?  Fixes #614
617 ;  src/main/java/org/mockito/stubbing/Answer4.java ; Moves arity interfaces of java8 helper answers to public API ; The Java 8 helper interfaces have been introduced in #338. However the public  AdditionalAnswers.answer  family leak the functional interfaces.  These _parameter arity_ interfaces can be public  hence they are moved next to  Answer  in the  org.mockito.stubbing  package.  I m however in favor of adding the  @Incubating  annotation on those APIs and related objects. Thoughts ?  Fixes #614
617 ;  src/main/java/org/mockito/stubbing/Answer5.java ; Moves arity interfaces of java8 helper answers to public API ; The Java 8 helper interfaces have been introduced in #338. However the public  AdditionalAnswers.answer  family leak the functional interfaces.  These _parameter arity_ interfaces can be public  hence they are moved next to  Answer  in the  org.mockito.stubbing  package.  I m however in favor of adding the  @Incubating  annotation on those APIs and related objects. Thoughts ?  Fixes #614
617 ;  src/main/java/org/mockito/stubbing/VoidAnswer1.java ; Moves arity interfaces of java8 helper answers to public API ; The Java 8 helper interfaces have been introduced in #338. However the public  AdditionalAnswers.answer  family leak the functional interfaces.  These _parameter arity_ interfaces can be public  hence they are moved next to  Answer  in the  org.mockito.stubbing  package.  I m however in favor of adding the  @Incubating  annotation on those APIs and related objects. Thoughts ?  Fixes #614
617 ;  src/main/java/org/mockito/stubbing/VoidAnswer2.java ; Moves arity interfaces of java8 helper answers to public API ; The Java 8 helper interfaces have been introduced in #338. However the public  AdditionalAnswers.answer  family leak the functional interfaces.  These _parameter arity_ interfaces can be public  hence they are moved next to  Answer  in the  org.mockito.stubbing  package.  I m however in favor of adding the  @Incubating  annotation on those APIs and related objects. Thoughts ?  Fixes #614
617 ;  src/main/java/org/mockito/stubbing/VoidAnswer3.java ; Moves arity interfaces of java8 helper answers to public API ; The Java 8 helper interfaces have been introduced in #338. However the public  AdditionalAnswers.answer  family leak the functional interfaces.  These _parameter arity_ interfaces can be public  hence they are moved next to  Answer  in the  org.mockito.stubbing  package.  I m however in favor of adding the  @Incubating  annotation on those APIs and related objects. Thoughts ?  Fixes #614
617 ;  src/main/java/org/mockito/stubbing/VoidAnswer4.java ; Moves arity interfaces of java8 helper answers to public API ; The Java 8 helper interfaces have been introduced in #338. However the public  AdditionalAnswers.answer  family leak the functional interfaces.  These _parameter arity_ interfaces can be public  hence they are moved next to  Answer  in the  org.mockito.stubbing  package.  I m however in favor of adding the  @Incubating  annotation on those APIs and related objects. Thoughts ?  Fixes #614
617 ;  src/main/java/org/mockito/stubbing/VoidAnswer5.java ; Moves arity interfaces of java8 helper answers to public API ; The Java 8 helper interfaces have been introduced in #338. However the public  AdditionalAnswers.answer  family leak the functional interfaces.  These _parameter arity_ interfaces can be public  hence they are moved next to  Answer  in the  org.mockito.stubbing  package.  I m however in favor of adding the  @Incubating  annotation on those APIs and related objects. Thoughts ?  Fixes #614
619 ; src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; Fixes #548 from now on verification happens always call in other thre… ; Should fix problems with #548 and #601 
623 ; src/main/java/org/mockito/junit/VerificationCollector.java ; Updated the javadocs ; Polishing the javadocs  starting with this small PR:  Issue #596 - updated @since to 2.1.0 (instead 2.0.0) - added more docs around the verification collector
626 ; src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java ; Ensured javadocs are correct ; Based on feedback from Brice.
628 ; src/main/java/org/mockito/Mockito.java ; Fixed javadoc documentation in the main class ; Checks out line item in #596
635 ; src/test/java/org/mockito/internal/util/reflection/FieldInitializerTest.java ; Unified logic of argument matching and capturing ; The logic of argument matching and capturing is the same but can be found in ArgumentsComparator and InvocationMatcher. This PR unifies the decision logic how matchers are applied to argument+varargs by introducing a  MatcherApplicationStrategy . This strategy can apply an action to an pair of ArgumentMatcher and Argument. One action is used to perform the ArgumentMatcher.matches(arg) call and an other is used to perfrom the capturing. - fixes #439 ArgumentCaptor and ArgumentMatcher s can now be mixed in varargs - fixes #583 No more NPE when null is passed to an varargs  - added 25 regression tests in VarargsTest (5 are ignored cause they belong to other issues and fail currently)  - reduced logic duplication
639 ; src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Update Travis configuration to also build on oraclejdk9 ; Let s see if this actually works. Testing for #520 
646 ; src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java ; Fixes #640 Warns user to upgrade if Java 8 version is to low ; Fixes #640 Warns user to upgrade if Java 8 version is to low.  Also took the opportunity to log other platform details if mock class cannot be created.
646 ;  src/main/java/org/mockito/internal/creation/bytebuddy/CachingMockBytecodeGenerator.java ; Fixes #640 Warns user to upgrade if Java 8 version is to low ; Fixes #640 Warns user to upgrade if Java 8 version is to low.  Also took the opportunity to log other platform details if mock class cannot be created.
646 ;  src/main/java/org/mockito/internal/util/Platform.java ; Fixes #640 Warns user to upgrade if Java 8 version is to low ; Fixes #640 Warns user to upgrade if Java 8 version is to low.  Also took the opportunity to log other platform details if mock class cannot be created.
646 ;  src/test/java/org/mockito/internal/util/PlatformTest.java ; Fixes #640 Warns user to upgrade if Java 8 version is to low ; Fixes #640 Warns user to upgrade if Java 8 version is to low.  Also took the opportunity to log other platform details if mock class cannot be created.
647 ; src/main/java/org/mockito/Mockito.java ; A small fix on Mockito javadocs. Adding some styling and an anchor to section 12. ; Better now  right @TimvdLippe?
648 ; src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java ; Added InlineByteBuddyMockMaker which uses the instrumentation API for redefining classes and inlining the mocking logic. ; Inline mocks allow for creating mocks of final types and final methods within any type. The inline mock engine also makes the mocking type invisible such that  mock(Foo.class).getClass() == Foo.class . Exceptions need to be made for abstract types and for types with serialization requirements where final methods are still instrumented but where a subclass needs to be created nevertheless. There are however few limitations of the inline mock engine that do not apply for the subclass mock engine: 1. It is no longer possible to mock  native  methods which do not provide any byte code that can be manipulated. 2. Synchronized methods remain synchronized as the instrumentation API does not allow the changing of modifiers.  The final mock engine is activated just like any other custom mock engine by placing an indicator file into the root folder. To make this more convenient  an alias mechanism was added where the mock type name can be referenced by _inline_.
654 ; src/main/java/org/mockito/internal/runners/StrictRunner.java ; Renamed FailureDetecter to Failure Detector. ; Also renamed misspelled isSussessful() to isSuccessful().  Fixes: #653.
654 ;  src/main/java/org/mockito/internal/runners/util/FailureDetector.java ; Renamed FailureDetecter to Failure Detector. ; Also renamed misspelled isSussessful() to isSuccessful().  Fixes: #653.
656 ; src/main/java/org/mockito/internal/junit/FriendlyExceptionMaker.java ; Fixing the typo in JUnitDetecter class name ;  JUnitDetecter  class has been renamed to  JUnitDetector . The variables in  FriendlyExceptionMaker  and  JUniTool  have been renamed accordingly.  Fixes https://github.com/mockito/mockito/issues/655
656 ;  src/main/java/org/mockito/internal/junit/JUnitDetector.java ; Fixing the typo in JUnitDetecter class name ;  JUnitDetecter  class has been renamed to  JUnitDetector . The variables in  FriendlyExceptionMaker  and  JUniTool  have been renamed accordingly.  Fixes https://github.com/mockito/mockito/issues/655
656 ;  src/main/java/org/mockito/internal/junit/JUnitTool.java ; Fixing the typo in JUnitDetecter class name ;  JUnitDetecter  class has been renamed to  JUnitDetector . The variables in  FriendlyExceptionMaker  and  JUniTool  have been renamed accordingly.  Fixes https://github.com/mockito/mockito/issues/655
673 ; src/test/java/org/mockitousage/bugs/ConfusedSignatureTest.java ; Removed duplicate test ; Hello again :p   I originally requested this test to be added in #525 after the underlying problem had been resolved. While browsing the code now  I discovered that it had already been added (as https://github.com/mockito/mockito/blob/master/src/test/java/org/mockitousage/bugs/DiamondInheritanceIsConfusingMockitoTest.java). This probably doesn t need to be tested twice  so I ve removed the duplicate test.
683 ; src/main/java/org/mockito/Mockito.java ; Updated release process so that Mockito can continuously deliver high quality features ; When merged  this will produce new version 2.2.0 and set release/2.x to continuously publish 2.2.1  2.2.2  ... as new high quality features and enhancements are merged. Hurray!  Highlights: - set next version to 2.2.0 (arbitrary number) - reworked the conditional complexity to avoid accidental releases - removed custom release version logic because it does not work (not opposed to this feature  just cleaned up the code. This feature should be implemented in version.gradle file)   - for the time being  custom version can be achieved by using Gradle env variable: ORG_GRADLE_PROJECT_version=2.3.0 (it looks like magic but it is a real feature from the Gradle book  ) - added basic docs around testing the release process (it s way too hard now)
693 ; src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java ; Improved the format of arguments in verification failures when describing short and byte values ; Currently the code can print some arguments without necessary casts  see https://github.com/mockito/mockito/pull/571#issuecomment-241357864.  Before the exception message contained :       iMethods.forByte(0x19)      Which is actually not valid java. So the exception message now prints       iMethods.forByte((byte) 0x19)      This PR intends to fix it  this especially affects short and byte values.
693 ;  src/test/java/org/mockito/internal/matchers/text/ValuePrinterTest.java ; Improved the format of arguments in verification failures when describing short and byte values ; Currently the code can print some arguments without necessary casts  see https://github.com/mockito/mockito/pull/571#issuecomment-241357864.  Before the exception message contained :       iMethods.forByte(0x19)      Which is actually not valid java. So the exception message now prints       iMethods.forByte((byte) 0x19)      This PR intends to fix it  this especially affects short and byte values.
693 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java ; Improved the format of arguments in verification failures when describing short and byte values ; Currently the code can print some arguments without necessary casts  see https://github.com/mockito/mockito/pull/571#issuecomment-241357864.  Before the exception message contained :       iMethods.forByte(0x19)      Which is actually not valid java. So the exception message now prints       iMethods.forByte((byte) 0x19)      This PR intends to fix it  this especially affects short and byte values.
698 ; src/test/java/org/mockitousage/debugging/InvocationsPrinterTest.java ; New API: MockingDetails.printInvocations() for debugging mock behavior ; For motivation  see issue #543
704 ; src/test/java/org/mockitousage/verification/DelayedExecution.java ; DelayedExecution uses now a more precise approach to call a mock async. ; New approach to fix flickering async tests.  Detail description  coming soon...
704 ;  src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java ; DelayedExecution uses now a more precise approach to call a mock async. ; New approach to fix flickering async tests.  Detail description  coming soon...
704 ;  src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; DelayedExecution uses now a more precise approach to call a mock async. ; New approach to fix flickering async tests.  Detail description  coming soon...
705 ; src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java ; Fixes exception typo ; This is a simple correction in an error message that can be thrown by Mockito.
711 ; src/main/java/org/mockito/stubbing/Answer1.java ; Fixes #707  adds throwable to arity answers  also improved javadoc ; All in the title. This should fix #707
711 ;  src/main/java/org/mockito/stubbing/Answer2.java ; Fixes #707  adds throwable to arity answers  also improved javadoc ; All in the title. This should fix #707
711 ;  src/main/java/org/mockito/stubbing/Answer3.java ; Fixes #707  adds throwable to arity answers  also improved javadoc ; All in the title. This should fix #707
711 ;  src/main/java/org/mockito/stubbing/Answer4.java ; Fixes #707  adds throwable to arity answers  also improved javadoc ; All in the title. This should fix #707
711 ;  src/main/java/org/mockito/stubbing/Answer5.java ; Fixes #707  adds throwable to arity answers  also improved javadoc ; All in the title. This should fix #707
711 ;  src/main/java/org/mockito/stubbing/VoidAnswer1.java ; Fixes #707  adds throwable to arity answers  also improved javadoc ; All in the title. This should fix #707
711 ;  src/main/java/org/mockito/stubbing/VoidAnswer2.java ; Fixes #707  adds throwable to arity answers  also improved javadoc ; All in the title. This should fix #707
711 ;  src/main/java/org/mockito/stubbing/VoidAnswer3.java ; Fixes #707  adds throwable to arity answers  also improved javadoc ; All in the title. This should fix #707
711 ;  src/main/java/org/mockito/stubbing/VoidAnswer4.java ; Fixes #707  adds throwable to arity answers  also improved javadoc ; All in the title. This should fix #707
711 ;  src/main/java/org/mockito/stubbing/VoidAnswer5.java ; Fixes #707  adds throwable to arity answers  also improved javadoc ; All in the title. This should fix #707
719 ; src/main/java/org/mockito/verification/VerificationEvent.java ; Verification listeners ; I had the need to be notified when ever a verification happens  this pr implements this.  To do anything useful with this notification the following data is important: - The mock that we are verifying on. - The verification mode we are using. - And what method we wish to verify.  The one place where this data is collectable is in MockAwareVerificationMode.  What remains is to get the listeners there so we are able to notify them.  The tests I added try to follow those of the invocation listeners  however there might be more cases that are important that i m unaware of. 
719 ;  src/test/java/org/mockitousage/debugging/VerificationListenerCallBackTest.java ; Verification listeners ; I had the need to be notified when ever a verification happens  this pr implements this.  To do anything useful with this notification the following data is important: - The mock that we are verifying on. - The verification mode we are using. - And what method we wish to verify.  The one place where this data is collectable is in MockAwareVerificationMode.  What remains is to get the listeners there so we are able to notify them.  The tests I added try to follow those of the invocation listeners  however there might be more cases that are important that i m unaware of. 
724 ;  src/main/java/org/mockito/ArgumentMatcher.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/ArgumentMatchers.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/MockitoFramework.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/configuration/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/exceptions/base/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/exceptions/misusing/CannotStubVoidMethodWithReturnValue.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/exceptions/misusing/UnnecessaryStubbingException.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/exceptions/misusing/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/exceptions/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/exceptions/stacktrace/StackTraceCleaner.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/exceptions/stacktrace/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/exceptions/verification/junit/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/exceptions/verification/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/hamcrest/MockitoHamcrest.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/hamcrest/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/configuration/injection/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/configuration/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/configuration/plugins/DefaultPluginSwitch.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginFileReader.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginFinder.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/configuration/plugins/Plugins.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/configuration/plugins/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/BytecodeGenerator.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ClassCreatingMockMaker.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockAccess.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockFeatures.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodDispatcher.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodInterceptor.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/bytebuddy/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/instance/DefaultInstantiatorProvider.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/instance/InstantiationException.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/instance/Instantiator.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/instance/ObjenesisInstantiator.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/creation/util/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/debugging/InvocationsPrinter.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/debugging/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/exceptions/MockitoLimitations.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleaner.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleanerProvider.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/framework/DefaultMockitoFramework.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/hamcrest/HamcrestArgumentMatcher.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractor.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/invocation/ArgumentMatcherAction.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/invocation/InvocationComparator.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/invocation/InvocationMarker.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/invocation/InvocationMatcher.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/invocation/InvocationsFinder.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/invocation/MatcherApplicationStrategy.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/invocation/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/invocation/realmethod/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/junit/ArgMismatchFinder.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/junit/FriendlyExceptionMaker.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/junit/JUnitDetecter.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/junit/JUnitRule.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/junit/RuleStubbingHintsReporter.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/junit/StubbingArgMismatches.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/junit/StubbingHint.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/junit/UnnecessaryStubbingsReporter.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/junit/UnusedStubbings.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/junit/UnusedStubbingsFinder.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/junit/VerificationCollectorImpl.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/junit/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/matchers/apachecommons/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/matchers/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/matchers/text/ArrayIterator.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/matchers/text/FormattedText.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/matchers/text/MatcherToString.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/progress/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/reporting/PrintSettings.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/reporting/SmartPrinter.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/reporting/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/runners/StrictRunner.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/runners/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/runners/util/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/stubbing/StubbingComparator.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/stubbing/answers/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/TriesToReturnSelf.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/stubbing/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/util/JavaEightUtil.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/util/Platform.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/util/Timer.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/util/collections/Iterables.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/util/concurrent/DetachedThreadLocal.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentSet.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/util/io/IOUtil.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/util/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/util/reflection/Constructors.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/util/reflection/GenericTypeExtractor.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/util/reflection/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/AtLeast.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/AtMost.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/Calls.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/Description.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/InOrderWrapper.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/Only.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/Times.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/VerificationDataImpl.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/VerificationWrapper.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/VerificationWrapperInOrderWrapper.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/api/VerificationData.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/api/VerificationDataInOrder.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/api/VerificationDataInOrderImpl.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/api/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/argumentmatching/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/checkers/MissingInvocationChecker.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/checkers/NonGreedyNumberOfInvocationsInOrderChecker.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/checkers/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/internal/verification/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/invocation/MatchableInvocation.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/invocation/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/junit/MockitoJUnit.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/junit/MockitoRule.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/junit/VerificationCollector.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/junit/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/listeners/MockCreationListener.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/listeners/MockitoListener.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/listeners/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/mock/SerializableMode.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/mock/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/plugins/PluginSwitch.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/plugins/StackTraceCleanerProvider.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/plugins/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/quality/MockitoHint.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/quality/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/runners/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/stubbing/Answer1.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/stubbing/Answer2.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/stubbing/Answer3.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/stubbing/Answer4.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/stubbing/Answer5.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/stubbing/Stubbing.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/stubbing/VoidAnswer1.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/stubbing/VoidAnswer2.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/stubbing/VoidAnswer3.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/stubbing/VoidAnswer4.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/stubbing/VoidAnswer5.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/stubbing/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/verification/After.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/verification/VerificationMode.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/verification/VerificationStrategy.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/main/java/org/mockito/verification/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/test/java/org/concurrentmockito/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/test/java/org/mockito/internal/invocation/InvocationMarkerTest.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/test/java/org/mockito/internal/verification/OnlyTest.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/test/java/org/mockito/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/test/java/org/mockitointegration/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/test/java/org/mockitousage/internal/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/test/java/org/mockitousage/package-info.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/test/java/org/mockitousage/verification/CustomVerificationTest.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/test/java/org/mockitousage/verification/DelayedExecution.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
724 ;  src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; Added new release workflow for release automation ; The purpose of this RB is to give you heads-up about the improvements to the release automation that I work on. The algorithm is implemented and will not change much. Documentation  edge case unit tests and fixing runnability from Gradle are pending (Travis CI will fail on this PR).  The goal of the new  release-workflow  plugin is to able to express the release automation in the build.gradle file like that:      groovy releaseWorkflow {     step releaseNeeded     onlyIf { releaseNeeded.needed }     step bintrayUpload     step pullCommits     step configureGenericGitUser  cleanup: restoreGitUser     step commitReleaseNotes  rollback: resetReleaseNotes     step tagNewVersion  rollback: removeNewTag     step bumpVersion  rollback: unbumpVersion     step pushChanges }      More over  it will be very easy to test out the release locally or even individual release steps:      ./gradlew release -PdryRun ./gradlew pullCommits -PsingleStep    
734 ; src/main/java/org/mockito/ArgumentMatchers.java ; New nullable(Class<T>) matcher for convenient matching of nullable arguments ; After using mockito  I have found that the new behaviors of matcher are good and indeed show problems in the test code or in the production code. However I have found that I miss an easy way to express a matcher for  nullable  argument when the production code may produce either  null  or value types  typically  Stream.of(<mixed values>).map(o -> mapper.map(c))...   the current options are :  *  <T> T any()  is nice but don t check the type. * there s always  AdditionalMatchers.or()  but this feel more heavy to use.  I m proposing the introduction of the argument matcher  <T> nullable(Class<T>)  which is a combination of  isA  and  isNull . I m not adding  <T> T nullable()  because this would have the same meaning as  <T> T any() 
734 ;  src/test/java/org/mockitousage/matchers/MatchersTest.java ; New nullable(Class<T>) matcher for convenient matching of nullable arguments ; After using mockito  I have found that the new behaviors of matcher are good and indeed show problems in the test code or in the production code. However I have found that I miss an easy way to express a matcher for  nullable  argument when the production code may produce either  null  or value types  typically  Stream.of(<mixed values>).map(o -> mapper.map(c))...   the current options are :  *  <T> T any()  is nice but don t check the type. * there s always  AdditionalMatchers.or()  but this feel more heavy to use.  I m proposing the introduction of the argument matcher  <T> nullable(Class<T>)  which is a combination of  isA  and  isNull . I m not adding  <T> T nullable()  because this would have the same meaning as  <T> T any() 
735 ; src/main/java/org/mockito/verification/VerificationMode.java ; Exposed existing verification API so that it no longer leaks internal API ; See motivation and plan in #730
735 ;  src/test/java/org/mockito/internal/verification/OnlyTest.java ; Exposed existing verification API so that it no longer leaks internal API ; See motivation and plan in #730
745 ; src/main/java/org/mockito/configuration/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/exceptions/base/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/exceptions/misusing/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/exceptions/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/exceptions/stacktrace/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/exceptions/verification/junit/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/exceptions/verification/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/hamcrest/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/configuration/injection/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/configuration/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/configuration/plugins/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/creation/bytebuddy/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/creation/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/creation/util/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/debugging/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/invocation/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/invocation/realmethod/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/junit/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/matchers/apachecommons/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/matchers/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/progress/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/reporting/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/runners/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/runners/util/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/stubbing/answers/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/stubbing/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/util/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/util/reflection/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/verification/api/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/verification/argumentmatching/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/verification/checkers/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/internal/verification/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/invocation/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/junit/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/listeners/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/mock/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/plugins/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/quality/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/runners/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/stubbing/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/main/java/org/mockito/verification/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/test/java/org/concurrentmockito/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/test/java/org/mockito/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/test/java/org/mockitointegration/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/test/java/org/mockitousage/internal/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
745 ;  src/test/java/org/mockitousage/package-info.java ; Removes deprecated way of documenting package by package-info.java ; Should fix #665   Nothing to say really  but it has to be done at some point. The most important selling point is that it may allow to annotate a package.
746 ; src/main/java/org/mockito/ArgumentMatcher.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/ArgumentMatchers.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/MockitoFramework.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/exceptions/misusing/CannotStubVoidMethodWithReturnValue.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/exceptions/misusing/UnnecessaryStubbingException.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/exceptions/stacktrace/StackTraceCleaner.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/hamcrest/MockitoHamcrest.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/configuration/plugins/DefaultPluginSwitch.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginFileReader.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginFinder.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/configuration/plugins/Plugins.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/bytebuddy/BytecodeGenerator.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ClassCreatingMockMaker.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockAccess.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockFeatures.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodDispatcher.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodInterceptor.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/instance/DefaultInstantiatorProvider.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/instance/InstantiationException.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/instance/Instantiator.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/creation/instance/ObjenesisInstantiator.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/debugging/InvocationsPrinter.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/exceptions/MockitoLimitations.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleaner.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleanerProvider.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/framework/DefaultMockitoFramework.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/hamcrest/HamcrestArgumentMatcher.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractor.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/invocation/ArgumentMatcherAction.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/invocation/InvocationComparator.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/invocation/MatcherApplicationStrategy.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/junit/ArgMismatchFinder.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/junit/FriendlyExceptionMaker.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/junit/JUnitDetecter.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/junit/JUnitRule.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/junit/RuleStubbingHintsReporter.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/junit/StubbingArgMismatches.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/junit/StubbingHint.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/junit/UnnecessaryStubbingsReporter.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/junit/UnusedStubbings.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/junit/UnusedStubbingsFinder.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/junit/VerificationCollectorImpl.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/matchers/text/ArrayIterator.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/matchers/text/FormattedText.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/matchers/text/MatcherToString.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/runners/StrictRunner.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/stubbing/StubbingComparator.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/TriesToReturnSelf.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/util/JavaEightUtil.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/util/Platform.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/util/Timer.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/util/collections/Iterables.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/util/concurrent/DetachedThreadLocal.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentSet.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/util/io/IOUtil.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/util/reflection/Constructors.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/util/reflection/GenericTypeExtractor.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/verification/Description.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/verification/VerificationWrapper.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/internal/verification/VerificationWrapperInOrderWrapper.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/invocation/MatchableInvocation.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/junit/MockitoJUnit.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/junit/MockitoRule.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/junit/VerificationCollector.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/listeners/MockCreationListener.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/listeners/MockitoListener.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/mock/SerializableMode.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/plugins/PluginSwitch.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/plugins/StackTraceCleanerProvider.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/quality/MockitoHint.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/stubbing/Answer1.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/stubbing/Answer2.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/stubbing/Answer3.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/stubbing/Answer4.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/stubbing/Answer5.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/stubbing/Stubbing.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/stubbing/VoidAnswer1.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/stubbing/VoidAnswer2.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/stubbing/VoidAnswer3.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/stubbing/VoidAnswer4.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/stubbing/VoidAnswer5.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/verification/After.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
746 ;  src/main/java/org/mockito/verification/VerificationStrategy.java ; Add missing copyright headers ; - [x] Fixes #727  - [x] Add missing copyrights using [license-gradle-plugin](https://github.com/hierynomus/license-gradle-plugin). - [x] Updated only source files. Test files were skipped. Existing copyright headers were not modified.
747 ; src/main/java/org/mockito/internal/framework/DefaultMockitoFramework.java ; Allow fluent usage of Mockito.framework() listeners methods ; Currently  addListener  and  removeListener  returns  void  which makes it repetitive to add or remove these :     java Mockito.framework().addListener(...)  Mockito.framework().addListener(...)  Mockito.framework().addListener(...)       The main change of this PR is to return  MockitoFramework  instead  thus allowing to chain invocations :     java Mockito.framework().addListener(...)                    .addListener(...)                    .addListener(...)       This improvements is a breaking change  however the API is still **incubating** and should be expected to break  source wise there s no problem since nothing could be done before due to the  void  return.
748 ; src/main/java/org/mockito/InjectMocks.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/Mock.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/Mockito.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/MockitoAnnotations.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/Spy.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/exceptions/misusing/UnnecessaryStubbingException.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleaner.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/junit/MockitoJUnit.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/junit/MockitoJUnitRunner.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/junit/MockitoRule.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/junit/package-info.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/quality/MockitoHint.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/runners/MockitoJUnitRunner.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/runners/VerboseMockitoJUnitRunner.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/main/java/org/mockito/runners/package-info.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockito/exceptions/stacktrace/StackTraceCleanerTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockito/internal/configuration/injection/ConstructorInjectionTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockito/internal/handler/InvocationNotifierHandlerTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/annotation/InjectionOfInlinedMockDeclarationTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorIssue421Test.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/bugs/MockitoRunnerBreaksWhenNoTestMethodsTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/bugs/injection/ChildWithSameParentFieldInjectionTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/bugs/injection/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/bugs/injection/InjectionByTypeShouldFirstLookForExactTypeThenAncestorTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/bugs/injection/Issue353InjectionMightNotHappenInCertainConfigurationTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/bugs/injection/ShouldNotTryToInjectInFinalOrStaticFieldsTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/junitrunner/JUnit45RunnerTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/junitrunner/ModellingVerboseMockitoTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/junitrunner/SilentRunnerTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/junitrunner/StrictRunnerTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/junitrunner/UnusedStubsExceptionMessageTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/matchers/InvalidUseOfMatchersTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
748 ;  src/test/java/org/mockitousage/stubbing/StubbingWithAdditionalAnswersTest.java ; Regroup Junit classes in junit packages ; This PR proposes to regroup all JUnit related classes in corrct packages. There s two changes :  * public : Deprecates  org.mockito.runners.MockitoJUnitRunner  and moves logic over  org.mockito.junit.runners.MockitoJUnitRunner     Questions :      * Should the runner be moved in the subpackage  junit.runner  or regroup the runner along with the rule in the  junit  package? (JUnit 5 will have neither of those)     * Should I do the same for already deprecated runners (console spamming and verbose runner)  * private : Moves JUnitHackerTool to  org.mockito.internal.junit.util 
751 ;  buildSrc/src/main/java/org/mockito/javadoc/JavadocExclude.java ; Pushed release automation code into separate GitHub repository ; Moved release automation code into separate GitHub repository  mockito-release-tools . This way it can be tested and shared easily.   - Removed most code from buildSrc  instead we re using binary dependency  - Added necessary dependencies  Next steps:   - Move most of  release.gradle  and  version.gradle  into opinionated Gradle plugins under  mockito-release-tools   - Enable autopublication of  mockito-release-tools   Tested by running:  ./gradlew release -PdryRun 
754 ; src/main/java/org/mockito/exceptions/misusing/UnnecessaryStubbingException.java ; Improved documentation regarding unused stubbing detection ; Improved documentation regarding unused stubbing detection  fixes #609
754 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Improved documentation regarding unused stubbing detection ; Improved documentation regarding unused stubbing detection  fixes #609
754 ;  src/test/java/org/mockitousage/junitrunner/UnusedStubsExceptionMessageTest.java ; Improved documentation regarding unused stubbing detection ; Improved documentation regarding unused stubbing detection  fixes #609
759 ; src/main/java/org/mockito/Mockito.java ; Updated the verification documentation to correctly use argThat with Java8 lambdas ; The example for custom argument matchers using a lambda in the main mockito documentation is missing a call to argThat.  This pr fixes the docs to correctly use argThat.
771 ; src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java ; Fixes #731 Implements retry rule for flaky tests ; Previous attempts at fixing the time related tests failed. Indeed the previous attempts are not bullet proof when the CI can run schedule some threads slower than _expected_.  A proper harness should be implemented  but in the meantime  I implemented the retry rule as proposed in #731 to gain back stability on the build.
771 ;  src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; Fixes #731 Implements retry rule for flaky tests ; Previous attempts at fixing the time related tests failed. Indeed the previous attempts are not bullet proof when the CI can run schedule some threads slower than _expected_.  A proper harness should be implemented  but in the meantime  I implemented the retry rule as proposed in #731 to gain back stability on the build.
771 ;  src/test/java/org/mockitoutil/RetryRule.java ; Fixes #731 Implements retry rule for flaky tests ; Previous attempts at fixing the time related tests failed. Indeed the previous attempts are not bullet proof when the CI can run schedule some threads slower than _expected_.  A proper harness should be implemented  but in the meantime  I implemented the retry rule as proposed in #731 to gain back stability on the build.
775 ; src/main/java/org/mockito/internal/util/MockUtil.java ; Removed private isMockitoMock(..) in MockUtil ; Small internal refactoring.
776 ; src/main/java/org/mockito/internal/invocation/InvocationMatcher.java ; InvocationMatcher internal improvements ; InvocationMatcher internal improvements  * Added missing @Override annotations to reduce warning count.  * Simplified parameter comparison in hasSameMethod(..)  * Fixed compile error due to char conversion in MatchersTest
777 ; src/test/java/org/mockito/internal/invocation/InvocationMarkerTest.java ; Replaced ObjectBox with AtomicReference ; Removed ObjectBox in favor of AtomicReference.
777 ;  src/test/java/org/mockito/internal/util/ObjectBox.java ; Replaced ObjectBox with AtomicReference ; Removed ObjectBox in favor of AtomicReference.
778 ; src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java ; ValuePrinter small improvements ;  * added private construtor  * removed unneccessary  else  statements  * added missing type arguments  * replaced  new ArrayIterator(new String[]{  })  with  emptyIterator()  in _printValues(..)_
779 ; src/main/java/org/mockito/internal/progress/MockingProgress.java ; Removed argument from MockingProgress.stubbingCompleted(..) ; Removed unneccessary argument from internal MockingProgress.stubbingCompleted(..)
779 ;  src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; Removed argument from MockingProgress.stubbingCompleted(..) ; Removed unneccessary argument from internal MockingProgress.stubbingCompleted(..)
779 ;  src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java ; Removed argument from MockingProgress.stubbingCompleted(..) ; Removed unneccessary argument from internal MockingProgress.stubbingCompleted(..)
782 ; src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java ; Introduce default answers for primitive Optionals/Streams ; I introduced  #invokeNullaryFactoryMethod  to remove some of the existing code duplication  but am unhappy about the _new_ duplication  especially in the test code. What s your view on introducing deduplicating logic in test code? Also  the singleton fields in  JavaEightUtil  could be replaced with a  ConcurrentMap<String  Object>  (i.e. a map from FQCNs to singletons). If you agree  I d love to reduce the size of this PR.
782 ;  src/main/java/org/mockito/internal/util/JavaEightUtil.java ; Introduce default answers for primitive Optionals/Streams ; I introduced  #invokeNullaryFactoryMethod  to remove some of the existing code duplication  but am unhappy about the _new_ duplication  especially in the test code. What s your view on introducing deduplicating logic in test code? Also  the singleton fields in  JavaEightUtil  could be replaced with a  ConcurrentMap<String  Object>  (i.e. a map from FQCNs to singletons). If you agree  I d love to reduce the size of this PR.
782 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java ; Introduce default answers for primitive Optionals/Streams ; I introduced  #invokeNullaryFactoryMethod  to remove some of the existing code duplication  but am unhappy about the _new_ duplication  especially in the test code. What s your view on introducing deduplicating logic in test code? Also  the singleton fields in  JavaEightUtil  could be replaced with a  ConcurrentMap<String  Object>  (i.e. a map from FQCNs to singletons). If you agree  I d love to reduce the size of this PR.
783 ; src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java ; Simplify  ReturnsEmptyValuesTest  ; As [discussed](https://github.com/mockito/mockito/pull/782#discussion_r89658266) in the comments under #782. Longer term this approach could be replaced with a proper test parametrization framework  but then at least the foundation has been laid.
791 ; src/test/java/org/mockitoutil/RetryRule.java ; Test improvements ; Simple tests improvements  Basically disable some test for Java 9  and report tried attempts. And actually make the retry rule retry  )
795 ; src/test/java/org/mockitousage/junitrunner/DeepStubbingWithJUnitRunnerTest.java ; Deep stubs no longer cause unnecessary stubbing exception with JUnit runner ; Fixes #756
803 ; src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Adds a warning for IBM J9 VMs if mock generation fails ; Related to #801  this PR simply adds a warning for IBM J9 VMs if the mock maker fails.
803 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java ; Adds a warning for IBM J9 VMs if mock generation fails ; Related to #801  this PR simply adds a warning for IBM J9 VMs if the mock maker fails.
803 ;  src/main/java/org/mockito/internal/util/Platform.java ; Adds a warning for IBM J9 VMs if mock generation fails ; Related to #801  this PR simply adds a warning for IBM J9 VMs if the mock maker fails.
803 ;  src/test/java/org/mockito/internal/util/PlatformTest.java ; Adds a warning for IBM J9 VMs if mock generation fails ; Related to #801  this PR simply adds a warning for IBM J9 VMs if the mock maker fails.
805 ; src/main/java/org/mockito/exceptions/base/MockitoInitializationException.java ; Never throw mockito exceptions from a plugin type s constructor ; Throwing a  MockitoException  from a mock maker constructor will cause the stack trace cleaning to be applied which itself relies on the plugin registry which is not yet initialized during the mock maker plugin s creation.
805 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Never throw mockito exceptions from a plugin type s constructor ; Throwing a  MockitoException  from a mock maker constructor will cause the stack trace cleaning to be applied which itself relies on the plugin registry which is not yet initialized during the mock maker plugin s creation.
807 ; src/main/java/org/mockito/mock/MockCreationSettings.java ; New opt-in stubbing strictness implemented in JUnit rules ; New API (for rationale  see #769  for code review history see #770):     java //Existing API: @Rule public MockitoRule mockito = MockitoJUnit.rule()  //Proposed improvements: rule().strictness(Strictness.LENIENT) rule().strictness(Strictness.WARN)       // <-- is the default rule().strictness(Strictness.STRICT_STUBS)  // <-- Mockito 3.0 default      What  strict stubbing  means? - Improved debuggability: the test fails early when code under test invokes stubbed method with different arguments. - Cleaner tests without unnecessary stubbings: the test fails when there are any unused stubs declared. - Cleaner  more DRY tests ( Don t Repeat Yourself ): If you use Mockito.verifyNoMoreInteractions() you no longer need to explicitly verify stubbed invocations. They are automatically verified.  For background and motivation  check out [Szczepan s article on LinkedIn](https://www.linkedin.com/pulse/curious-how-get-even-cleaner-tests-new-mockito-features-faber).
811 ; src/test/java/org/mockitoutil/ClassLoaders.java ; Enable annotation engine as plugin ; Currently  AnnotationEngine  can be overrriden with the _deprecated_  MockitoConfiguration   in order to be more consistent with the new way  I propose to get the  AnnotationEngine  from the  PluginRegistry .  Regarding backward compatible behavior  if the  MockitoConfiguration  class exists and can be seen then Mockito will select the engine of this configuration instead of the  Plugins  one. If  MockitoConfiguration  class don t exist then Mockito wil chose the  Plugins  one.  Bonus I extended the classloader util to support some tests.
819 ; src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java ; Fixes bug were previously verified invocations could not capture argu… ; Since Mockito 2 / #380 captured arguments is not anymore done for already verified interactions.     java IMethods mock = mock(IMethods.class)  mock.oneArg( first )  ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class)  verify(mock  times(1)).oneArg(argument.capture())  assertThat(argument.getAllValues()).isEqualTo(1)   // additional interactions mock.oneArg( second )  argument = ArgumentCaptor.forClass(String.class)  verify(mock  times(2)).oneArg(argument.capture())  assertThat(argument.getAllValues()).isEqualTo(2)  // fail with mockito 2      The current behavior (Mockito 2.1 - 2.3.3) of  NumberedInvocationChecker  clears already verified interactions  before verifying the remaining interactions so the new argument captor is not populated with previous values. Which is akward if the times value is different that the lit size.
819 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java ; Fixes bug were previously verified invocations could not capture argu… ; Since Mockito 2 / #380 captured arguments is not anymore done for already verified interactions.     java IMethods mock = mock(IMethods.class)  mock.oneArg( first )  ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class)  verify(mock  times(1)).oneArg(argument.capture())  assertThat(argument.getAllValues()).isEqualTo(1)   // additional interactions mock.oneArg( second )  argument = ArgumentCaptor.forClass(String.class)  verify(mock  times(2)).oneArg(argument.capture())  assertThat(argument.getAllValues()).isEqualTo(2)  // fail with mockito 2      The current behavior (Mockito 2.1 - 2.3.3) of  NumberedInvocationChecker  clears already verified interactions  before verifying the remaining interactions so the new argument captor is not populated with previous values. Which is akward if the times value is different that the lit size.
819 ;  src/test/java/org/mockitousage/bugs/ArgumentCaptorDontCapturePreviouslyVerifiedTest.java ; Fixes bug were previously verified invocations could not capture argu… ; Since Mockito 2 / #380 captured arguments is not anymore done for already verified interactions.     java IMethods mock = mock(IMethods.class)  mock.oneArg( first )  ArgumentCaptor<String> argument = ArgumentCaptor.forClass(String.class)  verify(mock  times(1)).oneArg(argument.capture())  assertThat(argument.getAllValues()).isEqualTo(1)   // additional interactions mock.oneArg( second )  argument = ArgumentCaptor.forClass(String.class)  verify(mock  times(2)).oneArg(argument.capture())  assertThat(argument.getAllValues()).isEqualTo(2)  // fail with mockito 2      The current behavior (Mockito 2.1 - 2.3.3) of  NumberedInvocationChecker  clears already verified interactions  before verifying the remaining interactions so the new argument captor is not populated with previous values. Which is akward if the times value is different that the lit size.
821 ; src/main/java/org/mockito/AdditionalAnswers.java ; Fixes #820 ReturnsArgAt to handle returning vararg as arrays ; Attempt at fixing #820  Basically it makes the ReturnsArgumentAt answer a bit more smart about varargs. But I m not satisfied with the fix yet.
821 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java ; Fixes #820 ReturnsArgAt to handle returning vararg as arrays ; Attempt at fixing #820  Basically it makes the ReturnsArgumentAt answer a bit more smart about varargs. But I m not satisfied with the fix yet.
821 ;  src/test/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java ; Fixes #820 ReturnsArgAt to handle returning vararg as arrays ; Attempt at fixing #820  Basically it makes the ReturnsArgumentAt answer a bit more smart about varargs. But I m not satisfied with the fix yet.
821 ;  src/test/java/org/mockitousage/IMethods.java ; Fixes #820 ReturnsArgAt to handle returning vararg as arrays ; Attempt at fixing #820  Basically it makes the ReturnsArgumentAt answer a bit more smart about varargs. But I m not satisfied with the fix yet.
821 ;  src/test/java/org/mockitousage/MethodsImpl.java ; Fixes #820 ReturnsArgAt to handle returning vararg as arrays ; Attempt at fixing #820  Basically it makes the ReturnsArgumentAt answer a bit more smart about varargs. But I m not satisfied with the fix yet.
823 ; src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Only resolve instrumented method after validating that an instance is… ; This is both a performance improvement and a way of ensuring that no stack overflow error occurs upon looking up a  Method  instance which requires using a  HashMap  which causes an infitite loop upon mocking the hash map type. Fixes #818.
823 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodDispatcher.java ; Only resolve instrumented method after validating that an instance is… ; This is both a performance improvement and a way of ensuring that no stack overflow error occurs upon looking up a  Method  instance which requires using a  HashMap  which causes an infitite loop upon mocking the hash map type. Fixes #818.
823 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Only resolve instrumented method after validating that an instance is… ; This is both a performance improvement and a way of ensuring that no stack overflow error occurs upon looking up a  Method  instance which requires using a  HashMap  which causes an infitite loop upon mocking the hash map type. Fixes #818.
826 ; src/main/java/org/mockito/internal/stubbing/answers/CallsRealMethods.java ; Introduce validable answers for early validation of stubbing ; ## Overview  Custom Answers are now more robust - users can add add validation logic to the Answer implementation. It can validate the return type early  during stubbing in test  rather than fail late  during execution of code under test. Mockito team uses this API behind the hood for all custom implementations of Answer interface. Now advanced users can leverage this new API  too!     java class MyCustomAnswer implements Answer  ValidableAnswer { // <-- note extra  ValidableAnswer  interface   public Object answer(InvocationOnMock invocation) {     // answer implementation   }    public void validateFor(InvocationOnMock invocation) {     // throw MockitoException if answer cannot be applied to given invocation   } }        ## Implementation  While trying to fix #820 / #821  I noticed that  AnswersValidator  knew too much about other answers. To fix the design issue I propose the following design :  * Introduce  ValidableAnswer  in public API which is a single method interface that doesn t extends  Answer . * Each answer that wants to be validated hence implement this interface  Benefit  reduced visibility of some methods in these answers. Each new answer that want to be validated can just by implementing the new contract.  Validating returned value of a mock s default answer had to be handled differently.
826 ;  src/main/java/org/mockito/internal/stubbing/answers/DefaultAnswerValidator.java ; Introduce validable answers for early validation of stubbing ; ## Overview  Custom Answers are now more robust - users can add add validation logic to the Answer implementation. It can validate the return type early  during stubbing in test  rather than fail late  during execution of code under test. Mockito team uses this API behind the hood for all custom implementations of Answer interface. Now advanced users can leverage this new API  too!     java class MyCustomAnswer implements Answer  ValidableAnswer { // <-- note extra  ValidableAnswer  interface   public Object answer(InvocationOnMock invocation) {     // answer implementation   }    public void validateFor(InvocationOnMock invocation) {     // throw MockitoException if answer cannot be applied to given invocation   } }        ## Implementation  While trying to fix #820 / #821  I noticed that  AnswersValidator  knew too much about other answers. To fix the design issue I propose the following design :  * Introduce  ValidableAnswer  in public API which is a single method interface that doesn t extends  Answer . * Each answer that wants to be validated hence implement this interface  Benefit  reduced visibility of some methods in these answers. Each new answer that want to be validated can just by implementing the new contract.  Validating returned value of a mock s default answer had to be handled differently.
826 ;  src/main/java/org/mockito/internal/stubbing/answers/DoesNothing.java ; Introduce validable answers for early validation of stubbing ; ## Overview  Custom Answers are now more robust - users can add add validation logic to the Answer implementation. It can validate the return type early  during stubbing in test  rather than fail late  during execution of code under test. Mockito team uses this API behind the hood for all custom implementations of Answer interface. Now advanced users can leverage this new API  too!     java class MyCustomAnswer implements Answer  ValidableAnswer { // <-- note extra  ValidableAnswer  interface   public Object answer(InvocationOnMock invocation) {     // answer implementation   }    public void validateFor(InvocationOnMock invocation) {     // throw MockitoException if answer cannot be applied to given invocation   } }        ## Implementation  While trying to fix #820 / #821  I noticed that  AnswersValidator  knew too much about other answers. To fix the design issue I propose the following design :  * Introduce  ValidableAnswer  in public API which is a single method interface that doesn t extends  Answer . * Each answer that wants to be validated hence implement this interface  Benefit  reduced visibility of some methods in these answers. Each new answer that want to be validated can just by implementing the new contract.  Validating returned value of a mock s default answer had to be handled differently.
826 ;  src/main/java/org/mockito/internal/stubbing/answers/InvocationInfo.java ; Introduce validable answers for early validation of stubbing ; ## Overview  Custom Answers are now more robust - users can add add validation logic to the Answer implementation. It can validate the return type early  during stubbing in test  rather than fail late  during execution of code under test. Mockito team uses this API behind the hood for all custom implementations of Answer interface. Now advanced users can leverage this new API  too!     java class MyCustomAnswer implements Answer  ValidableAnswer { // <-- note extra  ValidableAnswer  interface   public Object answer(InvocationOnMock invocation) {     // answer implementation   }    public void validateFor(InvocationOnMock invocation) {     // throw MockitoException if answer cannot be applied to given invocation   } }        ## Implementation  While trying to fix #820 / #821  I noticed that  AnswersValidator  knew too much about other answers. To fix the design issue I propose the following design :  * Introduce  ValidableAnswer  in public API which is a single method interface that doesn t extends  Answer . * Each answer that wants to be validated hence implement this interface  Benefit  reduced visibility of some methods in these answers. Each new answer that want to be validated can just by implementing the new contract.  Validating returned value of a mock s default answer had to be handled differently.
826 ;  src/main/java/org/mockito/internal/stubbing/answers/Returns.java ; Introduce validable answers for early validation of stubbing ; ## Overview  Custom Answers are now more robust - users can add add validation logic to the Answer implementation. It can validate the return type early  during stubbing in test  rather than fail late  during execution of code under test. Mockito team uses this API behind the hood for all custom implementations of Answer interface. Now advanced users can leverage this new API  too!     java class MyCustomAnswer implements Answer  ValidableAnswer { // <-- note extra  ValidableAnswer  interface   public Object answer(InvocationOnMock invocation) {     // answer implementation   }    public void validateFor(InvocationOnMock invocation) {     // throw MockitoException if answer cannot be applied to given invocation   } }        ## Implementation  While trying to fix #820 / #821  I noticed that  AnswersValidator  knew too much about other answers. To fix the design issue I propose the following design :  * Introduce  ValidableAnswer  in public API which is a single method interface that doesn t extends  Answer . * Each answer that wants to be validated hence implement this interface  Benefit  reduced visibility of some methods in these answers. Each new answer that want to be validated can just by implementing the new contract.  Validating returned value of a mock s default answer had to be handled differently.
826 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java ; Introduce validable answers for early validation of stubbing ; ## Overview  Custom Answers are now more robust - users can add add validation logic to the Answer implementation. It can validate the return type early  during stubbing in test  rather than fail late  during execution of code under test. Mockito team uses this API behind the hood for all custom implementations of Answer interface. Now advanced users can leverage this new API  too!     java class MyCustomAnswer implements Answer  ValidableAnswer { // <-- note extra  ValidableAnswer  interface   public Object answer(InvocationOnMock invocation) {     // answer implementation   }    public void validateFor(InvocationOnMock invocation) {     // throw MockitoException if answer cannot be applied to given invocation   } }        ## Implementation  While trying to fix #820 / #821  I noticed that  AnswersValidator  knew too much about other answers. To fix the design issue I propose the following design :  * Introduce  ValidableAnswer  in public API which is a single method interface that doesn t extends  Answer . * Each answer that wants to be validated hence implement this interface  Benefit  reduced visibility of some methods in these answers. Each new answer that want to be validated can just by implementing the new contract.  Validating returned value of a mock s default answer had to be handled differently.
826 ;  src/main/java/org/mockito/internal/stubbing/answers/ThrowsException.java ; Introduce validable answers for early validation of stubbing ; ## Overview  Custom Answers are now more robust - users can add add validation logic to the Answer implementation. It can validate the return type early  during stubbing in test  rather than fail late  during execution of code under test. Mockito team uses this API behind the hood for all custom implementations of Answer interface. Now advanced users can leverage this new API  too!     java class MyCustomAnswer implements Answer  ValidableAnswer { // <-- note extra  ValidableAnswer  interface   public Object answer(InvocationOnMock invocation) {     // answer implementation   }    public void validateFor(InvocationOnMock invocation) {     // throw MockitoException if answer cannot be applied to given invocation   } }        ## Implementation  While trying to fix #820 / #821  I noticed that  AnswersValidator  knew too much about other answers. To fix the design issue I propose the following design :  * Introduce  ValidableAnswer  in public API which is a single method interface that doesn t extends  Answer . * Each answer that wants to be validated hence implement this interface  Benefit  reduced visibility of some methods in these answers. Each new answer that want to be validated can just by implementing the new contract.  Validating returned value of a mock s default answer had to be handled differently.
826 ;  src/test/java/org/mockito/internal/stubbing/answers/InvocationInfoTest.java ; Introduce validable answers for early validation of stubbing ; ## Overview  Custom Answers are now more robust - users can add add validation logic to the Answer implementation. It can validate the return type early  during stubbing in test  rather than fail late  during execution of code under test. Mockito team uses this API behind the hood for all custom implementations of Answer interface. Now advanced users can leverage this new API  too!     java class MyCustomAnswer implements Answer  ValidableAnswer { // <-- note extra  ValidableAnswer  interface   public Object answer(InvocationOnMock invocation) {     // answer implementation   }    public void validateFor(InvocationOnMock invocation) {     // throw MockitoException if answer cannot be applied to given invocation   } }        ## Implementation  While trying to fix #820 / #821  I noticed that  AnswersValidator  knew too much about other answers. To fix the design issue I propose the following design :  * Introduce  ValidableAnswer  in public API which is a single method interface that doesn t extends  Answer . * Each answer that wants to be validated hence implement this interface  Benefit  reduced visibility of some methods in these answers. Each new answer that want to be validated can just by implementing the new contract.  Validating returned value of a mock s default answer had to be handled differently.
826 ;  src/test/java/org/mockito/internal/stubbing/answers/MethodInfoTest.java ; Introduce validable answers for early validation of stubbing ; ## Overview  Custom Answers are now more robust - users can add add validation logic to the Answer implementation. It can validate the return type early  during stubbing in test  rather than fail late  during execution of code under test. Mockito team uses this API behind the hood for all custom implementations of Answer interface. Now advanced users can leverage this new API  too!     java class MyCustomAnswer implements Answer  ValidableAnswer { // <-- note extra  ValidableAnswer  interface   public Object answer(InvocationOnMock invocation) {     // answer implementation   }    public void validateFor(InvocationOnMock invocation) {     // throw MockitoException if answer cannot be applied to given invocation   } }        ## Implementation  While trying to fix #820 / #821  I noticed that  AnswersValidator  knew too much about other answers. To fix the design issue I propose the following design :  * Introduce  ValidableAnswer  in public API which is a single method interface that doesn t extends  Answer . * Each answer that wants to be validated hence implement this interface  Benefit  reduced visibility of some methods in these answers. Each new answer that want to be validated can just by implementing the new contract.  Validating returned value of a mock s default answer had to be handled differently.
827 ; src/test/java/org/mockitousage/debugging/VerificationListenerCallBackTest.java ; Test for verification listeners test can introduces bogus erro in other test cases. ; The following test (org.mockitousage.debugging.VerificationListenerCallBackTest#should_not_call_listener_when_verify_was_called_incorrectly) was causing non wanted exception in mockito      org.mockitousage.misuse.CleaningUpPotentialStubbingTest > shouldResetOngoingStubbingOnInOrder FAILED     org.mockito.exceptions.misusing.CannotStubVoidMethodWithReturnValue:       onVerification  is a *void method* and it *cannot* be stubbed with a *return value*!     Voids are usually stubbed with Throwables:         doThrow(exception).when(mock).someVoidMethod()      ***     If you re unsure why you re getting above error read on.     Due to the nature of the syntax above problem might occur because:     1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.     2. Somewhere in your test you are stubbing *final methods*. Sorry  Mockito does not verify/stub final methods.     3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies -         - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.     4. Mocking methods declared on non-public parent classes is not supported.         at org.mockito.internal.exceptions.Reporter.cannotStubVoidMethodWithAReturnValue(Reporter.java:448)         at org.mockito.internal.stubbing.answers.AnswersValidator.validateReturnValue(AnswersValidator.java:72)         at org.mockito.internal.stubbing.answers.AnswersValidator.validate(AnswersValidator.java:29)         at org.mockito.internal.stubbing.InvocationContainerImpl.addAnswer(InvocationContainerImpl.java:63)         at org.mockito.internal.stubbing.InvocationContainerImpl.addAnswer(InvocationContainerImpl.java:49)         at org.mockito.internal.stubbing.OngoingStubbingImpl.thenAnswer(OngoingStubbingImpl.java:28)         at org.mockito.internal.stubbing.BaseStubbing.thenReturn(BaseStubbing.java:16)         at org.mockitousage.misuse.CleaningUpPotentialStubbingTest.assertOngoingStubbingIsReset(CleaningUpPotentialStubbingTest.java:50)         at org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnInOrder(CleaningUpPotentialStubbingTest.java:36) org.mockitousage.misuse.CleaningUpPotentialStubbingTest > shouldResetOngoingStubbingOnVerify FAILED     org.mockito.exceptions.misusing.CannotStubVoidMethodWithReturnValue:       onVerification  is a *void method* and it *cannot* be stubbed with a *return value*!     Voids are usually stubbed with Throwables:         doThrow(exception).when(mock).someVoidMethod()      ***     If you re unsure why you re getting above error read on.     Due to the nature of the syntax above problem might occur because:     1. The method you are trying to stub is *overloaded*. Make sure you are calling the right overloaded version.     2. Somewhere in your test you are stubbing *final methods*. Sorry  Mockito does not verify/stub final methods.     3. A spy is stubbed using when(spy.foo()).then() syntax. It is safer to stub spies -         - with doReturn|Throw() family of methods. More in javadocs for Mockito.spy() method.     4. Mocking methods declared on non-public parent classes is not supported.         at org.mockito.internal.exceptions.Reporter.cannotStubVoidMethodWithAReturnValue(Reporter.java:448)         at org.mockito.internal.stubbing.answers.AnswersValidator.validateReturnValue(AnswersValidator.java:72)         at org.mockito.internal.stubbing.answers.AnswersValidator.validate(AnswersValidator.java:29)         at org.mockito.internal.stubbing.InvocationContainerImpl.addAnswer(InvocationContainerImpl.java:63)         at org.mockito.internal.stubbing.InvocationContainerImpl.addAnswer(InvocationContainerImpl.java:49)         at org.mockito.internal.stubbing.OngoingStubbingImpl.thenAnswer(OngoingStubbingImpl.java:28)         at org.mockito.internal.stubbing.BaseStubbing.thenReturn(BaseStubbing.java:16)         at org.mockitousage.misuse.CleaningUpPotentialStubbingTest.assertOngoingStubbingIsReset(CleaningUpPotentialStubbingTest.java:50)         at org.mockitousage.misuse.CleaningUpPotentialStubbingTest.shouldResetOngoingStubbingOnVerify(CleaningUpPotentialStubbingTest.java:28)        The issue is that the mentionned test used a mock to create a listener for a test  but forgot to remove it. So on a next interaction with a mock  the listener was called  as such the last interaction is  void onVerification   so the answer could not be validated.  The case is easy to reproduce :     java interface Foo {     String nonVoid(String param)      void doSomething(String param)  } @Test public void should_not_call_listener_when_verify_was_called_incorrectly() {     //when     Foo foo = null      VerificationListener mockListener = mock(VerificationListener.class)      Mockito.framework().addListener(mockListener)      try {         verify(foo).nonVoid(  )          fail( Exception expected. )      } catch (NullInsteadOfMockException expected) {         //then         verify(mockListener  never()).onVerification(any(VerificationEvent.class))     }     // Mockito.framework().removeListener(mockListener)  // fix      // done in CleaningUpPotentialStubbingTest     try {         when(null).thenReturn( anything )  // throws instead CannotStubVoidMethodWithReturnValue         Assertions.fail( expected )      } catch (MissingMethodInvocationException e) {}  }      Given the conditions to reproduce the bug I d say we can keep the code that way.
830 ; src/test/java/org/mockitousage/bugs/MockitoRunnerBreaksWhenNoTestMethodsTest.java ; Improves exception message in case a matcher is used for a primitive parameter ; This should help for cases like #822   NPE can be raised by the JVM on the callsite of a matcher returning object like  any() . The thing is that the JVM does several thing like to allows a type to match a signature like  <T> T any()   type inference with Java 8  cast and unboxing. However  any()  can only return  null  so the JVM raises an NPE on the cast opcode. Of course the problem isn t new but more possible due to Java 8 flexibility. That s why Mockito had for a long time the primitive.  When mockito is used with the junit runner or the junit rule there s a  InvalidUseOfMatchersException  raised **after** the NPE with a message about misplaced matchers. This exception is raised because the matchers were not consumed by the mock since the NPE is raised first. So this exception is correct and can help the neophyte to discover the primitive variant like  anyInt() .
831 ; src/test/java/org/mockitousage/debugging/InvocationListenerCallbackTest.java ; Test clean up according to discussions for RememberingListeners ; According to issue @719 we wanted to clean up the tests for RememberingListeners.  The tests should follow the same style and conventions. Set up should not contain variables used by all the tests.  We previously had another PR for this in #825. That build was failing for some reason not obvious and had 1 merge commit that we wanted to remove. In an attempt to rebase and reset the history github lost the connection to the remote fork. Instead of spending time investigating I just created a new PR.
831 ;  src/test/java/org/mockitousage/debugging/VerificationListenerCallBackTest.java ; Test clean up according to discussions for RememberingListeners ; According to issue @719 we wanted to clean up the tests for RememberingListeners.  The tests should follow the same style and conventions. Set up should not contain variables used by all the tests.  We previously had another PR for this in #825. That build was failing for some reason not obvious and had 1 merge commit that we wanted to remove. In an attempt to rebase and reset the history github lost the connection to the remote fork. Instead of spending time investigating I just created a new PR.
839 ; src/main/java/org/mockito/ArgumentMatchers.java ; Fixes #838 : Adds a matches(Pattern) ; Following discussion in #838 it is sensible to add a mockito matcher that can take a  Pattern  as an argument.  The usage is the same as  matches(String) .     java when(mock.oneArg(matches(Pattern.compile( [a-z]+\\d\\d )))).thenReturn(...)       Although it allows to build more complex regex  especially with regular expression flags.
839 ;  src/main/java/org/mockito/internal/matchers/Matches.java ; Fixes #838 : Adds a matches(Pattern) ; Following discussion in #838 it is sensible to add a mockito matcher that can take a  Pattern  as an argument.  The usage is the same as  matches(String) .     java when(mock.oneArg(matches(Pattern.compile( [a-z]+\\d\\d )))).thenReturn(...)       Although it allows to build more complex regex  especially with regular expression flags.
839 ;  src/test/java/org/mockito/internal/matchers/MatchersToStringTest.java ; Fixes #838 : Adds a matches(Pattern) ; Following discussion in #838 it is sensible to add a mockito matcher that can take a  Pattern  as an argument.  The usage is the same as  matches(String) .     java when(mock.oneArg(matches(Pattern.compile( [a-z]+\\d\\d )))).thenReturn(...)       Although it allows to build more complex regex  especially with regular expression flags.
839 ;  src/test/java/org/mockitousage/matchers/MatchersTest.java ; Fixes #838 : Adds a matches(Pattern) ; Following discussion in #838 it is sensible to add a mockito matcher that can take a  Pattern  as an argument.  The usage is the same as  matches(String) .     java when(mock.oneArg(matches(Pattern.compile( [a-z]+\\d\\d )))).thenReturn(...)       Although it allows to build more complex regex  especially with regular expression flags.
842 ; src/main/java/org/mockito/internal/runners/RunnerFactory.java ; Added missing Javadoc and few other tidy-ups ; 1. No API / no behavior changes. 2. Publicly visible changes:   - Added missing Javadoc and updated an existing one for MockitoException and MockitoAssertionError classes 3. Remaining changes  refactoring:  - Rename job for consistency  - Removed some unnecessary code  - Made the tests more stable
843 ; src/main/java/org/mockito/exceptions/misusing/PotentialStubbingProblem.java ; JUnit rule strictness can be tweaked per test method ; See the design and rationale at #840  Please review!
843 ;  src/main/java/org/mockito/junit/MockitoRule.java ; JUnit rule strictness can be tweaked per test method ; See the design and rationale at #840  Please review!
854 ; src/main/java/org/mockito/junit/MockitoJUnitRunner.java ; Mockito JUnit Runner supports strict stubbing ; Background:  - Mockito  strictness  is explained in #769  - Since 2.3.x Mockito JUnit Rules already provide opt-in  strict stubbing  capability  [see the javadoc](https://static.javadoc.io/org.mockito/mockito-core/2.4.5/org/mockito/junit/MockitoRule.html#strictness(org.mockito.quality.Strictness)).  This change adds new opt-in  strict stubbing  support for Mockito JUnit Runner. This behavior is tentatively planned to be the default in Mockito v3. Example usage:     java //Note  StrictStubs  inner class: @RunWith(MockitoJUnitRunner.StrictStubs.class) public class ExampleTest {     // ... }            The behavior added by the StrictStubs runner is documented in the [javadoc](https://static.javadoc.io/org.mockito/mockito-core/2.4.5/org/mockito/junit/MockitoRule.html#strictness(org.mockito.quality.Strictness)). See also Javadoc improvements in code changes for this PR. The general direction of Mockito  strictness  is documented in #769.
858 ; src/main/java/org/mockito/exceptions/misusing/RedundantListenerException.java ; Safeguard for MockitoListener API ; Reminds user if he forgets about  removeListener()  when working with [MockitoListener API](https://static.javadoc.io/org.mockito/mockito-core/2.5.0/org/mockito/MockitoFramework.html#addListener(org.mockito.listeners.MockitoListener)).  - Added a safeguard that reminds users to clean up MockitoListeners via removeListener() method. The implementation is very simple  checking if the type of the listener is already added. I found out about this problem when working on strict stubbing support without JUnit runner. - This change makes MockitoListener API safer. It s easy to leak state which we have encountered in our own test suite. - If we encounter legit use cases for adding the same listener type  we can remove the safeguard or updated it  The PR also contains a couple of refactorings and tidy-ups. I hope it s ok.
858 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Safeguard for MockitoListener API ; Reminds user if he forgets about  removeListener()  when working with [MockitoListener API](https://static.javadoc.io/org.mockito/mockito-core/2.5.0/org/mockito/MockitoFramework.html#addListener(org.mockito.listeners.MockitoListener)).  - Added a safeguard that reminds users to clean up MockitoListeners via removeListener() method. The implementation is very simple  checking if the type of the listener is already added. I found out about this problem when working on strict stubbing support without JUnit runner. - This change makes MockitoListener API safer. It s easy to leak state which we have encountered in our own test suite. - If we encounter legit use cases for adding the same listener type  we can remove the safeguard or updated it  The PR also contains a couple of refactorings and tidy-ups. I hope it s ok.
858 ;  src/test/java/org/mockito/internal/framework/DefaultMockitoFrameworkTest.java ; Safeguard for MockitoListener API ; Reminds user if he forgets about  removeListener()  when working with [MockitoListener API](https://static.javadoc.io/org.mockito/mockito-core/2.5.0/org/mockito/MockitoFramework.html#addListener(org.mockito.listeners.MockitoListener)).  - Added a safeguard that reminds users to clean up MockitoListeners via removeListener() method. The implementation is very simple  checking if the type of the listener is already added. I found out about this problem when working on strict stubbing support without JUnit runner. - This change makes MockitoListener API safer. It s easy to leak state which we have encountered in our own test suite. - If we encounter legit use cases for adding the same listener type  we can remove the safeguard or updated it  The PR also contains a couple of refactorings and tidy-ups. I hope it s ok.
858 ;  src/test/java/org/mockitoutil/ThrowableAssert.java ; Safeguard for MockitoListener API ; Reminds user if he forgets about  removeListener()  when working with [MockitoListener API](https://static.javadoc.io/org.mockito/mockito-core/2.5.0/org/mockito/MockitoFramework.html#addListener(org.mockito.listeners.MockitoListener)).  - Added a safeguard that reminds users to clean up MockitoListeners via removeListener() method. The implementation is very simple  checking if the type of the listener is already added. I found out about this problem when working on strict stubbing support without JUnit runner. - This change makes MockitoListener API safer. It s easy to leak state which we have encountered in our own test suite. - If we encounter legit use cases for adding the same listener type  we can remove the safeguard or updated it  The PR also contains a couple of refactorings and tidy-ups. I hope it s ok.
861 ; src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Backport  release/2.x  changes to master (20161231) + fix for #860 ; Backport  release/2.x  changes to master + the fix for #860.
864 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Updated to Byte Buddy 1.6.0 ; Updated Byte Buddy  several performance and API improvements. Also with much better Android support.
864 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; Updated to Byte Buddy 1.6.0 ; Updated Byte Buddy  several performance and API improvements. Also with much better Android support.
864 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassInjectionLoader.java ; Updated to Byte Buddy 1.6.0 ; Updated Byte Buddy  several performance and API improvements. Also with much better Android support.
864 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassLoader.java ; Updated to Byte Buddy 1.6.0 ; Updated Byte Buddy  several performance and API improvements. Also with much better Android support.
864 ;  src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java ; Updated to Byte Buddy 1.6.0 ; Updated Byte Buddy  several performance and API improvements. Also with much better Android support.
864 ;  src/test/java/org/mockito/internal/creation/bytebuddy/TypeCachingMockBytecodeGeneratorTest.java ; Updated to Byte Buddy 1.6.0 ; Updated Byte Buddy  several performance and API improvements. Also with much better Android support.
864 ;  subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidLoadingStrategy.java ; Updated to Byte Buddy 1.6.0 ; Updated Byte Buddy  several performance and API improvements. Also with much better Android support.
865 ; src/test/java/org/mockitoutil/JUnitResultAssert.java ; New strict stubbing API - MockitoSession ; See proposed design at #857  The code is reviewable  especially new public API. Please give feedback! More work is pending.  Current status:  - [x]  address @bric3 feedback   - [x] getter   - [x] javadoc - [x] review documentation for consistency   - [x] Mockito.session()   - [x] MockitoSessionBuilder   - [x] Strictness   - [x] MockitoHint   - [x] PotentialStubbingProblem   - [x] UnnecessaryStubbingException   - [x] MockitoJUnitRunner and subclasses   - [x] MockitoSession   - [x] MockitoRule - [x] Add / update mentions in the main Mockito class - [x] add validate mockito usage (should be very easy) - [x] Try making rules/runner use the session. They already reuse the code  they just don t use the API directly. Created #898 to track this work. - [x] Address @TimvdLippe feedback - [x] Create concurrent test (multiple sessions active in different threads) - [x] (non-code change  not blocking merge) GitHub tickets linked from source code should be better documented #769  #384. Alternatively  create ticket for tracking.
867 ; src/main/java/org/mockito/internal/stubbing/answers/ThrowsException.java ; Fixes #866 should not throw NPE  when custom Exception fillInStackTrace returns null ; fixes #866.
867 ;  src/test/java/org/mockitousage/bugs/NPEWhenCustomExceptionStackTraceReturnNullTest.java ; Fixes #866 should not throw NPE  when custom Exception fillInStackTrace returns null ; fixes #866.
868 ;  src/test/java/org/mockitoutil/ClassLoaders.java ; Fixes #860  jacaco synthetic fields are not anymore final in 0.7.8 ; Fixes #860   This internal assumed JaCoCo fields will always be  static final   obviously not. JaCoCo 0.7.8 changed that. The simple fix was to make the source field _accessible_ instead of skipping this field.  Hence removing the test exclusion.
870 ; src/main/java/org/mockito/Mockito.java ; Remove redundant defaultAnswer(RETURNS_DEFAULTS) ;  withSettings()  invokes  defaultAnswer(RETURNS_DEFAULTS)  as follows:          public static MockSettings withSettings() {         return new MockSettingsImpl().defaultAnswer(RETURNS_DEFAULTS)      }      so  invoking it again is redundant.  This PR simply removes the redundant invocation.  > Hey   >  > Thanks for the contribution  this is awesome. > As you may have read  project members have somehow an opinionated view on what and how should be > Mockito  e.g. we don t want mockito to be a feature bloat. > There may be a thorough review  with feedback -> code change loop. >  > Which branch :  > - On mockito 2.x  make your pull request target  release/2.x  > - On next mockito version make your pull request target  master  > > _This block can be removed_ > _Something wrong in the template fix it here  .github/PULL_REQUEST_TEMPLATE.md    check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
872 ;  src/main/java/org/mockito/Mockito.java ; Prepare Android library for publication and bump version to 2.6.0 ; References first step of #848
872 ;  subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidLoadingStrategy.java ; Prepare Android library for publication and bump version to 2.6.0 ; References first step of #848
875 ;  subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidLoadingStrategy.java ; Update Byte Buddy and enable injecting loading strategy for Android ; This enables Byte Buddy s new injection strategy for Android which loads types within a target class loader instead of creating a new one. Also  this updates Byte Buddy with a few bug fixes.
880 ; src/main/java/org/mockito/ArgumentMatchers.java ; Fixes #879: ArgumentMatchers javadoc grammar improvement ; Fixed grammar issue in  ArgumentMatchers :  > This implementation is due static type safety imposed by java compiler.  Should be:  > This implementation is due to static type safety imposed by java compiler.  This PR fixes issue #879.
881 ; src/main/java/org/mockito/ArgumentMatchers.java ; Fixed #879: ArgumentMatchers grammar fix ; Cherry-pick PR #880 to the 2.x branch  This PR should fix issue #879 on this branch too.
885 ; src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java ; Spy annotation reports better error message if instance creation is impossible ; This simple piece of code prevents the  SpyAnnotationEngine  to try create a spy instance for a some inner private class with different set of modifiers.  While preventing execution it reports slightly better error messages  before  some time the cause was  null  . This should fix #878 
891 ;  src/test/java/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java ; Update to Byte Buddy 1.6.4: Fixes bridge method resolution for generic types ; Fixes #874.
893 ; src/main/java/org/mockito/Mockito.java ; Add detection for Android environments and give warnings if used incorrectly. Corrected documentation. ; The documentation gave an incorrect configuration example. Also  warnings were added for using Android on a non-Android environment.
893 ;  src/main/java/org/mockito/internal/util/Platform.java ; Add detection for Android environments and give warnings if used incorrectly. Corrected documentation. ; The documentation gave an incorrect configuration example. Also  warnings were added for using Android on a non-Android environment.
893 ;  subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidByteBuddyMockMaker.java ; Add detection for Android environments and give warnings if used incorrectly. Corrected documentation. ; The documentation gave an incorrect configuration example. Also  warnings were added for using Android on a non-Android environment.
896 ; src/main/java/org/mockito/Mockito.java ; Clarify documentation for consecutive stubbing ; Fixes #895  As of now  the documentation does not clarify the difference of behaviour between chaining multiple .thenReturn() statements and using multiple when/thenReturn statements  when someone attempts to perform consecutive stubbing.  I added a warning/clarification in the documentation with a corresponding example  so that it s more clear (especially for new users of Mockito).
897 ; src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java ; CleansEmpty value returns empty arrays ; Fixes #876 and do a bit more cleanup  * Moves returning empty array from  ReturnsMoreEmtpyValues  to  ReturnsEmptyValues  * Cleans up javadoc * Removes reflection for Java8 types (implementation and tests)  Best to review commit by commit.
897 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java ; CleansEmpty value returns empty arrays ; Fixes #876 and do a bit more cleanup  * Moves returning empty array from  ReturnsMoreEmtpyValues  to  ReturnsEmptyValues  * Cleans up javadoc * Removes reflection for Java8 types (implementation and tests)  Best to review commit by commit.
902 ;  src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java ; Fix TypeCache dead lock ; I could trace the problem to more eager resolution of types in Java u31 upon loading where concurrent mock creation with locking on the class level causes a dead lock. This can happen in other VM implementations but can be solved with a more granular lock on our type cache.  This fixes https://github.com/mockito/mockito/issues/892.
905 ; src/main/java/org/mockito/Mockito.java ; Fixes #814 : A elements were missing the name attribute ; Meaningful links probably never worked as expected.  The  A  elements were missing the  name  attribute  so the browser couldn t find the matching part of the document.  For reference : [5.9.8 Navigating to a fragment identifier](http://www.w3.org/html/wg/drafts/html/master/browsers.html#scroll-to-fragid)  > For HTML documents (and the text/html MIME type)  the following processing model must be followed to determine what the indicated part of the document is. >  > 1. Parse the URL  and let fragid be the <fragment> component of the URL. > 2. If fragid is the empty string  then the indicated part of the document is the top of the document. > 3. If there is an element in the DOM that has an ID exactly equal to fragid  then the first such element in tree order is the indicated part of the document  stop the algorithm here. > 4. If there is an a element in the DOM that has a name attribute whose value is exactly equal to fragid  then the first such element in tree order is the indicated part of the document  stop the algorithm here. > 5. Otherwise  there is no indicated part of the document.
907 ; src/main/java/org/mockito/internal/verification/Calls.java ; Unified all number of invocations checker in NumberOfInvocationsChecker ; fixes #426  This PR unifies the functionality of  NonGreedyNumberOfInvocationsChecker    NumberOfInvocationsCheckerInOrder  and  NumberOfInvocationsChecker  in static methods of the type  NumberOfInvocationsChecker .   This saves ~50 lines of code and increases readability on the call sides.
907 ;  src/main/java/org/mockito/internal/verification/Times.java ; Unified all number of invocations checker in NumberOfInvocationsChecker ; fixes #426  This PR unifies the functionality of  NonGreedyNumberOfInvocationsChecker    NumberOfInvocationsCheckerInOrder  and  NumberOfInvocationsChecker  in static methods of the type  NumberOfInvocationsChecker .   This saves ~50 lines of code and increases readability on the call sides.
907 ;  src/main/java/org/mockito/internal/verification/checkers/NonGreedyNumberOfInvocationsInOrderChecker.java ; Unified all number of invocations checker in NumberOfInvocationsChecker ; fixes #426  This PR unifies the functionality of  NonGreedyNumberOfInvocationsChecker    NumberOfInvocationsCheckerInOrder  and  NumberOfInvocationsChecker  in static methods of the type  NumberOfInvocationsChecker .   This saves ~50 lines of code and increases readability on the call sides.
907 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java ; Unified all number of invocations checker in NumberOfInvocationsChecker ; fixes #426  This PR unifies the functionality of  NonGreedyNumberOfInvocationsChecker    NumberOfInvocationsCheckerInOrder  and  NumberOfInvocationsChecker  in static methods of the type  NumberOfInvocationsChecker .   This saves ~50 lines of code and increases readability on the call sides.
907 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java ; Unified all number of invocations checker in NumberOfInvocationsChecker ; fixes #426  This PR unifies the functionality of  NonGreedyNumberOfInvocationsChecker    NumberOfInvocationsCheckerInOrder  and  NumberOfInvocationsChecker  in static methods of the type  NumberOfInvocationsChecker .   This saves ~50 lines of code and increases readability on the call sides.
907 ;  src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java ; Unified all number of invocations checker in NumberOfInvocationsChecker ; fixes #426  This PR unifies the functionality of  NonGreedyNumberOfInvocationsChecker    NumberOfInvocationsCheckerInOrder  and  NumberOfInvocationsChecker  in static methods of the type  NumberOfInvocationsChecker .   This saves ~50 lines of code and increases readability on the call sides.
907 ;  src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java ; Unified all number of invocations checker in NumberOfInvocationsChecker ; fixes #426  This PR unifies the functionality of  NonGreedyNumberOfInvocationsChecker    NumberOfInvocationsCheckerInOrder  and  NumberOfInvocationsChecker  in static methods of the type  NumberOfInvocationsChecker .   This saves ~50 lines of code and increases readability on the call sides.
908 ; src/main/java/org/mockito/internal/exceptions/Reporter.java ; Simplified the creation of ArgumentsAreDifferent-Exceptions. ; relates to #426   This PR simplifies the creation of ArgumentsAreDifferent-Exceptions. Saving 2 classes and ~40 lines of code.
908 ;  src/main/java/org/mockito/internal/junit/ExceptionFactory.java ; Simplified the creation of ArgumentsAreDifferent-Exceptions. ; relates to #426   This PR simplifies the creation of ArgumentsAreDifferent-Exceptions. Saving 2 classes and ~40 lines of code.
908 ;  src/main/java/org/mockito/internal/junit/FriendlyExceptionMaker.java ; Simplified the creation of ArgumentsAreDifferent-Exceptions. ; relates to #426   This PR simplifies the creation of ArgumentsAreDifferent-Exceptions. Saving 2 classes and ~40 lines of code.
908 ;  src/main/java/org/mockito/internal/junit/JUnitDetecter.java ; Simplified the creation of ArgumentsAreDifferent-Exceptions. ; relates to #426   This PR simplifies the creation of ArgumentsAreDifferent-Exceptions. Saving 2 classes and ~40 lines of code.
908 ;  src/main/java/org/mockito/internal/junit/JUnitTool.java ; Simplified the creation of ArgumentsAreDifferent-Exceptions. ; relates to #426   This PR simplifies the creation of ArgumentsAreDifferent-Exceptions. Saving 2 classes and ~40 lines of code.
908 ;  src/test/java/org/mockito/internal/junit/ExceptionFactoryTest.java ; Simplified the creation of ArgumentsAreDifferent-Exceptions. ; relates to #426   This PR simplifies the creation of ArgumentsAreDifferent-Exceptions. Saving 2 classes and ~40 lines of code.
912 ; src/main/java/org/mockito/internal/util/reflection/Constructors.java ; Small improvements ; This PR fixes some compile errors and removes dead code:  - compile error: duplicate org.mockito.package-info.java in _src/main/java_ and _src/test/java_  - ~~compile error: char enconding error in MatchersTest -> relates to #765~~  - dead code: Constructors -> relates to #904   
912 ;  src/test/java/org/mockito/package-info.java ; Small improvements ; This PR fixes some compile errors and removes dead code:  - compile error: duplicate org.mockito.package-info.java in _src/main/java_ and _src/test/java_  - ~~compile error: char enconding error in MatchersTest -> relates to #765~~  - dead code: Constructors -> relates to #904   
914 ; src/main/java/org/mockito/exceptions/verification/ArgumentsAreDifferent.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/main/java/org/mockito/exceptions/verification/WantedButNotInvoked.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/main/java/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/main/java/org/mockito/internal/debugging/LoggingListener.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/main/java/org/mockito/internal/matchers/text/MatcherToString.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/main/java/org/mockito/internal/util/Decamelizer.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/main/java/org/mockito/internal/util/RemoveFirstLine.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/main/java/org/mockito/internal/util/StringJoiner.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/main/java/org/mockito/internal/util/StringUtil.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/test/java/org/mockito/internal/util/DecamelizerTest.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  src/test/java/org/mockito/internal/util/StringUtilTest.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
914 ;  subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidLoadingStrategy.java ; Refactored RemoveFirstLine to a static utility class. ; Relates to #426   Refactored  RemoveFirstLine  to a static utility class.  I would like to unifiy  RemoveFirstLine    Decamelizer  and  StringJoiner  to a new type  StringUtil . They all manipulate strings and contain only a few methods that are not worth to live in a dedicated classes  any thoughts?
920 ;  src/main/java/org/mockito/Mockito.java ; Added subproject for configuration-free inline mock making. ; Added a preconfiguration for using the inline mock maker as a convenience artifact that can be included instead of creating the plugin file. This is very helpful when creating multi-module projects where the mock maker file has to repeated many times.  Once we choose to change the mock maker to be default or enable programmatic access  we can decide to drop this artifact similar to  mockito-all  from version one.
923 ; src/test/java/org/mockito/internal/verification/SmartPrinterTest.java ; SmartPrinterTest toStirng() calls ; Calling  toStirng()  on a string just returns the same instance  making this call quite useless. This patch removes those calls in order to clean up the code a bit.
926 ; src/main/java/org/mockito/internal/debugging/InvocationsPrinter.java ; Remove string concatination inside an append call ; Concatinating Strings creates a temporary StringBuilder  which is then converted to a String. Having such an argument inside a StringBuilder#append call thus pointless. Using a chained append call will have the exact same outcome  and would profit a slight [probably unnoticeable in this instance] performance benefit.
928 ; src/main/java/org/mockito/AdditionalMatchers.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/Answers.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/ArgumentCaptor.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/InOrder.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/Mock.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/MockingDetails.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/MockitoAnnotations.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/configuration/DefaultMockitoConfiguration.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/configuration/IMockitoConfiguration.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/exceptions/base/MockitoAssertionError.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/exceptions/base/MockitoException.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/exceptions/misusing/UnfinishedVerificationException.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/exceptions/verification/ArgumentsAreDifferent.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/exceptions/verification/TooLittleActualInvocations.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/exceptions/verification/WantedButNotInvoked.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/InOrderImpl.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/MockitoCore.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/configuration/GlobalConfiguration.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/configuration/IndependentAnnotationEngine.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/configuration/InjectingAnnotationEngine.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/configuration/injection/scanner/MockScanner.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/debugging/MockitoDebuggerImpl.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/debugging/VerboseMockInvocationLogger.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/debugging/WarningsCollector.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/debugging/WarningsFinder.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/exceptions/VerificationAwareInvocation.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilter.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/exceptions/util/ScenarioPrinter.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/handler/MockHandlerImpl.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/invocation/ArgumentMatcherAction.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/invocation/ArgumentsProcessor.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/invocation/InvocationMarker.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/invocation/InvocationMatcher.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/invocation/InvocationsFinder.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/invocation/MatcherApplicationStrategy.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/invocation/TypeSafeMatching.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/invocation/finder/AllInvocationsFinder.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/junit/util/JUnitFailureHacker.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/matchers/CapturingMatcher.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/matchers/CompareTo.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/matchers/Equality.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/matchers/GreaterThan.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/progress/SequenceNumber.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/reporting/Discrepancy.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/reporting/SmartPrinter.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/runners/InternalRunner.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/runners/util/RunnerProvider.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/stubbing/BaseStubbing.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/stubbing/answers/CallsRealMethods.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/stubbing/answers/DoesNothing.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsElementsOf.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/GloballyConfiguredAnswer.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/util/Decamelizer.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/util/MockNameImpl.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/util/ObjectMethodsGuru.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/util/collections/IdentitySet.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/util/collections/ListUtil.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/util/reflection/AccessibilityChanger.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/util/reflection/GenericMaster.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/util/reflection/SuperTypesLastSorter.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/AtLeast.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/AtMost.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/Calls.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/Description.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/InOrderContextImpl.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/InOrderWrapper.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/NoMoreInteractions.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/Only.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/Times.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/VerificationModeFactory.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/VerificationWrapper.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/api/VerificationDataInOrder.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/api/VerificationDataInOrderImpl.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/api/VerificationInOrderMode.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastDiscrepancy.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/checkers/MissingInvocationChecker.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/invocation/InvocationOnMock.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/junit/MockitoJUnitRunner.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/listeners/InvocationListener.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/runners/MockitoJUnitRunner.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/runners/VerboseMockitoJUnitRunner.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/stubbing/Answer.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/stubbing/OngoingStubbing.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/stubbing/Stubber.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/verification/After.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/verification/Timeout.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/verification/VerificationAfterDelay.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/verification/VerificationMode.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/main/java/org/mockito/verification/VerificationWithTimeout.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/concurrentmockito/ThreadVerifiesContinuoslyInteractingMockTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/ArgumentCaptorTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/MockitoTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/exceptions/base/MockitoAssertionErrorTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/exceptions/base/MockitoExceptionTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/exceptions/base/StackTraceBuilder.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/exceptions/base/TraceBuilder.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/AllInvocationsFinderTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/InOrderImplTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/InvalidStateDetectionTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/creation/MockSettingsImplTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilterTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/exceptions/util/ScenarioPrinterTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/invocation/InvocationImplTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/invocation/InvocationMarkerTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/invocation/InvocationsFinderTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/invocation/MatcherApplicationStrategyTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/invocation/SerializableMethodTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/invocation/TypeSafeMatchingTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/junit/util/JUnitFailureHackerTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/matchers/CapturingMatcherTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/matchers/EqualityTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/matchers/EqualsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/progress/MockingProgressImplTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/progress/TimesTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/runners/util/RunnerProviderTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/util/DecamelizerTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/util/ObjectMethodsGuruTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/util/PrimitivesTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/util/collections/IdentitySetTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/util/collections/ListUtilTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/util/reflection/FieldInitializerTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/util/reflection/FieldReaderTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/util/reflection/GenericMasterTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/verification/DescriptionTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/verification/DummyVerificationMode.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/verification/OnlyTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/verification/SmartPrinterTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/verification/VerificationWithDescriptionTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockito/verification/TimeoutTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/IMethods.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/MethodsImpl.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/PlaygroundTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/annotation/AnnotationsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationBasicTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationUnhappyPathTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/annotation/SpyAnnotationTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/annotation/SpyInjectionTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/basicapi/MocksCreationTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/AtLeastMarksAllInvocationsVerified.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/CompareMatcherTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/MultipleInOrdersTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/MultithreadedStubbingHalfManualTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/NPEWhenMockingThrowablesTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/NPEWithCertainMatchersTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/ShouldOnlyModeAllowCapturingArgumentsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/injection/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/debugging/NewMockito.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/examples/use/ArticleManager.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/examples/use/ExampleTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/junitrule/LenientJUnitRuleTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/junitrunner/ModellingVerboseMockitoTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/matchers/CapturingArgumentsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/matchers/CustomMatchersTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/matchers/GenericMatchersTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/matchers/HamcrestMatchersTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/matchers/MatchersMixedWithRawArgumentsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/matchers/NewMatchersTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/matchers/ReflectionMatchersTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/matchers/VarargsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/misuse/DetectingFinalMethodsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/misuse/DetectingMisusedMatchersTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/misuse/InvalidUsageTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/misuse/RestrictedObjectMethodsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/packageprotected/MockingPackageProtectedTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/performance/LoadsOfMocksTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/serialization/DeepStubsSerializableTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/spies/PartialMockingWithSpiesTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/spies/StubbingSpiesDoesNotYieldNPETest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/stacktrace/ClickableStackTracesTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/stacktrace/StackTraceFilteringTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/stubbing/DeepStubbingTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/stubbing/ReturningDefaultValuesTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/stubbing/SmartNullsStubbingTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/stubbing/StubbingWithExtraAnswersTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/AtLeastXVerificationTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/AtMostXVerificationTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/BasicVerificationTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/DelayedExecution.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/OnlyVerificationTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/RelaxedVerificationInOrderTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/VerificationExcludingStubsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/VerificationInOrderTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/VerificationInOrderWithCallsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitoutil/Assertor.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  src/test/java/org/mockitoutil/TestBase.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  subprojects/extTest/src/test/java/org/mockitousage/plugins/stacktrace/PluginStackTraceFilteringTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/PluginSwitchTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  subprojects/testng/src/test/java/org/mockitousage/testng/EnsureMocksAreInitializedBeforeBeforeClassMethodTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
928 ;  subprojects/testng/src/test/java/org/mockitousage/testng/MockFieldsShouldBeResetBetweenTestMethodsTest.java ; Fix whitespace issues throughout the code ; This patch applies de-facto standards the codebsae currently has regarding whitespaces on all the java files in the project:  - Newlines were added at the end of files that didn t have them. - Whitespaces at the end of source lines were removed.  All these changes were done by running  sed  on the codebase. The exact details can be found in the individual commit messages.
933 ;  src/main/java/org/mockito/AdditionalMatchers.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/Answers.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/ArgumentCaptor.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/InOrder.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/Mock.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/MockingDetails.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/MockitoAnnotations.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/MockitoDebugger.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/configuration/DefaultMockitoConfiguration.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/configuration/IMockitoConfiguration.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/exceptions/base/MockitoAssertionError.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/exceptions/base/MockitoException.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/exceptions/base/MockitoInitializationException.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/exceptions/misusing/FriendlyReminderException.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/exceptions/misusing/MockitoConfigurationException.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/exceptions/misusing/UnfinishedVerificationException.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/exceptions/verification/ArgumentsAreDifferent.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/exceptions/verification/NoInteractionsWanted.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/exceptions/verification/SmartNullPointerException.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/exceptions/verification/TooLittleActualInvocations.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/exceptions/verification/WantedButNotInvoked.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/InOrderImpl.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/InternalMockHandler.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/MockitoCore.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/configuration/GlobalConfiguration.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/configuration/IndependentAnnotationEngine.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/configuration/InjectingAnnotationEngine.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/configuration/injection/scanner/MockScanner.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/creation/DelegatingMethod.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/creation/instance/DefaultInstantiatorProvider.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/creation/util/MockitoMethodProxy.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/debugging/Localized.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/debugging/LoggingListener.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/debugging/MockitoDebuggerImpl.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/debugging/VerboseMockInvocationLogger.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/debugging/WarningsCollector.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/debugging/WarningsFinder.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/debugging/WarningsPrinterImpl.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/exceptions/VerificationAwareInvocation.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilter.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleanerProvider.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/exceptions/util/ScenarioPrinter.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/hamcrest/HamcrestArgumentMatcher.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractor.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/handler/MockHandlerImpl.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/invocation/ArgumentMatcherAction.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/invocation/ArgumentsProcessor.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/invocation/InvocationComparator.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/invocation/InvocationMarker.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/invocation/InvocationMatcher.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/invocation/InvocationsFinder.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/invocation/MatcherApplicationStrategy.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/invocation/StubInfoImpl.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/invocation/TypeSafeMatching.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/invocation/finder/AllInvocationsFinder.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/invocation/realmethod/CleanTraceRealMethod.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/junit/DefaultTestFinishedEvent.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/junit/JUnitRule.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/junit/JUnitTool.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/junit/MismatchReportingTestListener.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/junit/MockitoTestListener.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/junit/StrictStubsRunnerTestListener.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/junit/UniversalTestListener.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/junit/util/JUnitFailureHacker.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/And.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/CapturingMatcher.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/CompareTo.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/ContainsExtraTypeInfo.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/EndsWith.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/Equality.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/Equals.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/Find.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/GreaterThan.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/LocalizedMatcher.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/Not.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/Or.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/text/MatcherToString.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/progress/ArgumentMatcherStorage.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/progress/SequenceNumber.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/reporting/Discrepancy.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/reporting/PrintSettings.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/reporting/SmartPrinter.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/runners/InternalRunner.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/runners/RunnerFactory.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/runners/util/RunnerProvider.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/session/DefaultMockitoSessionBuilder.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/BaseStubbing.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/ConsecutiveStubbing.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/StubbedInvocationMatcher.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/answers/CallsRealMethods.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/answers/ClonesArguments.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/answers/DoesNothing.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsElementsOf.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/GloballyConfiguredAnswer.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/util/Decamelizer.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/util/MockNameImpl.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/util/MockitoLogger.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/util/ObjectMethodsGuru.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/util/Primitives.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/util/StringUtil.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/util/collections/IdentitySet.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/util/collections/ListUtil.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/util/reflection/AccessibilityChanger.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/util/reflection/Constructors.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/util/reflection/GenericMaster.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/util/reflection/LenientCopyTool.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/util/reflection/SuperTypesLastSorter.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/AtLeast.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/AtMost.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/Calls.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/Description.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/InOrderContextImpl.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/InOrderWrapper.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/NoMoreInteractions.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/Only.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/Times.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/VerificationModeFactory.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/VerificationWrapper.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/api/VerificationData.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/api/VerificationDataInOrder.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/api/VerificationDataInOrderImpl.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/api/VerificationInOrderMode.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastDiscrepancy.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/checkers/MissingInvocationChecker.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/invocation/InvocationOnMock.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/junit/MockitoJUnitRunner.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/listeners/InvocationListener.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/mock/MockCreationSettings.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/mock/SerializableMode.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/plugins/InstantiatorProvider.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/plugins/StackTraceCleanerProvider.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/runners/MockitoJUnitRunner.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/runners/VerboseMockitoJUnitRunner.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/stubbing/Answer.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/stubbing/OngoingStubbing.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/stubbing/Stubber.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/verification/After.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/verification/Timeout.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/verification/VerificationAfterDelay.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/verification/VerificationMode.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/main/java/org/mockito/verification/VerificationWithTimeout.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/concurrentmockito/ThreadVerifiesContinuoslyInteractingMockTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/concurrentmockito/ThreadsShareAMockTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/ArgumentCaptorTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/MockitoTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/StateMaster.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/exceptions/base/MockitoAssertionErrorTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/exceptions/base/MockitoExceptionTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/exceptions/base/StackTraceBuilder.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/exceptions/base/TraceBuilder.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/AllInvocationsFinderTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/InOrderImplTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/InvalidStateDetectionTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/configuration/ConfigurationAccess.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/configuration/plugins/PluginFinderTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/creation/DelegatingMethodTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/creation/MockSettingsImplTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/debugging/LoggingListenerTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/debugging/WarningsFinderTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilterTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/exceptions/util/ScenarioPrinterTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/framework/DefaultMockitoFrameworkTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractorTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/invocation/InvocationImplTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/invocation/InvocationMarkerTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/invocation/InvocationsFinderTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/invocation/MatcherApplicationStrategyTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/invocation/SerializableMethodTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/invocation/TypeSafeMatchingTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/junit/ArgMismatchFinderTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/junit/StubbingArgMismatchesTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/junit/util/JUnitFailureHackerTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/matchers/CapturingMatcherTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/matchers/EqualityTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/matchers/EqualsTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/matchers/InstanceOfTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/matchers/MatchersPrinterTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/matchers/text/MatcherToStringTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/progress/MockingProgressImplTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/progress/TimesTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/progress/VerificationModeBuilder.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/runners/util/RunnerProviderTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/runners/util/TestMethodsFinderTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/session/DefaultMockitoSessionBuilderTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocationsTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/DecamelizerTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/MockNameImplTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/ObjectMethodsGuruTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/PrimitivesTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/SimpleMockitoLogger.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/SimpleMockitoLoggerTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/StringUtilTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSetTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/collections/IdentitySetTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/collections/ListUtilTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/io/IOUtilTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/reflection/FieldInitializerTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/reflection/FieldReaderTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/reflection/GenericMasterTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/reflection/GenericTypeExtractorTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/verification/DefaultRegisteredInvocationsTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/verification/DescriptionTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/verification/DummyVerificationMode.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/verification/OnlyTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/verification/SmartPrinterTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/verification/VerificationWithDescriptionTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/junit/TestableJUnitRunner.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/package-info.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockito/verification/TimeoutTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/IMethods.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/MethodsImpl.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/PlaygroundTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/annotation/AnnotationsTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationBasicTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationUnhappyPathTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/annotation/SpyAnnotationTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/annotation/SpyInjectionTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/basicapi/MocksCreationTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/basicapi/ObjectsSerializationTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/basicapi/ResetTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/AIOOBExceptionWithAtLeastTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/AtLeastMarksAllInvocationsVerified.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/CompareMatcherTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/ConcurrentModificationExceptionOnMultiThreadedVerificationTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/CovariantOverrideTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/DiamondInheritanceIsConfusingMockitoTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/EqualsWithDeltaTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/MultipleInOrdersTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/MultithreadedStubbingHalfManualTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/NPEOnAnyClassMatcherAutounboxTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/NPEWhenMockingThrowablesTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/NPEWithCertainMatchersTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/ShouldOnlyModeAllowCapturingArgumentsTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/StubbingMocksThatAreConfiguredToReturnMocksTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/injection/InjectMocksShouldTryPropertySettersFirstBeforeFieldAccessTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/debugging/InvocationsPrinterTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/debugging/NewMockito.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/debugging/VerboseLoggingOfInvocationsOnMockTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/examples/use/ArticleCalculator.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/examples/use/ArticleManager.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
933 ;  src/test/java/org/mockitousage/examples/use/ExampleTest.java ; Support for return type  Void  in DoesNothingAnswer ; fixes #927  This PR allows to use  doNothing(..)  for methods with return type  java.lang.Void  like void-methods.    To solve this  InvocationInfo.isVoid()  checks now the return type for the pseudo-type of the keyword  void  or  Void .
935 ; src/main/java/org/mockito/MockSettings.java ; New feature - enable mocking using constructor arguments ; ## Motivation and design - see #685  To quote the requirement (see in-depth design in #685): > We already support spying on abstract classes by allowing parameterless constructor. However  there is no support for constructor parameters. This has been asked about long time ago. Mockito API is not robust enough if it supports mocking with constructor but not when one has any constructor parameters.  This patch enhances the  MockSettings#useConstrctor()  method (as suggested in the alternative API comment in the issue) and adds optional ellipsis arguments that are passed to the constructor.  The patch streamlines the creation of mocks via constructors to a single flow  where using a no-arg constructor or an enclosing class are just private cases of this flow  and don t require their own special treatment.
935 ;  src/main/java/org/mockito/Mockito.java ; New feature - enable mocking using constructor arguments ; ## Motivation and design - see #685  To quote the requirement (see in-depth design in #685): > We already support spying on abstract classes by allowing parameterless constructor. However  there is no support for constructor parameters. This has been asked about long time ago. Mockito API is not robust enough if it supports mocking with constructor but not when one has any constructor parameters.  This patch enhances the  MockSettings#useConstrctor()  method (as suggested in the alternative API comment in the issue) and adds optional ellipsis arguments that are passed to the constructor.  The patch streamlines the creation of mocks via constructors to a single flow  where using a no-arg constructor or an enclosing class are just private cases of this flow  and don t require their own special treatment.
935 ;  src/main/java/org/mockito/internal/creation/MockSettingsImpl.java ; New feature - enable mocking using constructor arguments ; ## Motivation and design - see #685  To quote the requirement (see in-depth design in #685): > We already support spying on abstract classes by allowing parameterless constructor. However  there is no support for constructor parameters. This has been asked about long time ago. Mockito API is not robust enough if it supports mocking with constructor but not when one has any constructor parameters.  This patch enhances the  MockSettings#useConstrctor()  method (as suggested in the alternative API comment in the issue) and adds optional ellipsis arguments that are passed to the constructor.  The patch streamlines the creation of mocks via constructors to a single flow  where using a no-arg constructor or an enclosing class are just private cases of this flow  and don t require their own special treatment.
935 ;  src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java ; New feature - enable mocking using constructor arguments ; ## Motivation and design - see #685  To quote the requirement (see in-depth design in #685): > We already support spying on abstract classes by allowing parameterless constructor. However  there is no support for constructor parameters. This has been asked about long time ago. Mockito API is not robust enough if it supports mocking with constructor but not when one has any constructor parameters.  This patch enhances the  MockSettings#useConstrctor()  method (as suggested in the alternative API comment in the issue) and adds optional ellipsis arguments that are passed to the constructor.  The patch streamlines the creation of mocks via constructors to a single flow  where using a no-arg constructor or an enclosing class are just private cases of this flow  and don t require their own special treatment.
935 ;  src/main/java/org/mockito/internal/creation/instance/DefaultInstantiatorProvider.java ; New feature - enable mocking using constructor arguments ; ## Motivation and design - see #685  To quote the requirement (see in-depth design in #685): > We already support spying on abstract classes by allowing parameterless constructor. However  there is no support for constructor parameters. This has been asked about long time ago. Mockito API is not robust enough if it supports mocking with constructor but not when one has any constructor parameters.  This patch enhances the  MockSettings#useConstrctor()  method (as suggested in the alternative API comment in the issue) and adds optional ellipsis arguments that are passed to the constructor.  The patch streamlines the creation of mocks via constructors to a single flow  where using a no-arg constructor or an enclosing class are just private cases of this flow  and don t require their own special treatment.
935 ;  src/main/java/org/mockito/internal/creation/settings/CreationSettings.java ; New feature - enable mocking using constructor arguments ; ## Motivation and design - see #685  To quote the requirement (see in-depth design in #685): > We already support spying on abstract classes by allowing parameterless constructor. However  there is no support for constructor parameters. This has been asked about long time ago. Mockito API is not robust enough if it supports mocking with constructor but not when one has any constructor parameters.  This patch enhances the  MockSettings#useConstrctor()  method (as suggested in the alternative API comment in the issue) and adds optional ellipsis arguments that are passed to the constructor.  The patch streamlines the creation of mocks via constructors to a single flow  where using a no-arg constructor or an enclosing class are just private cases of this flow  and don t require their own special treatment.
935 ;  src/main/java/org/mockito/mock/MockCreationSettings.java ; New feature - enable mocking using constructor arguments ; ## Motivation and design - see #685  To quote the requirement (see in-depth design in #685): > We already support spying on abstract classes by allowing parameterless constructor. However  there is no support for constructor parameters. This has been asked about long time ago. Mockito API is not robust enough if it supports mocking with constructor but not when one has any constructor parameters.  This patch enhances the  MockSettings#useConstrctor()  method (as suggested in the alternative API comment in the issue) and adds optional ellipsis arguments that are passed to the constructor.  The patch streamlines the creation of mocks via constructors to a single flow  where using a no-arg constructor or an enclosing class are just private cases of this flow  and don t require their own special treatment.
935 ;  src/test/java/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java ; New feature - enable mocking using constructor arguments ; ## Motivation and design - see #685  To quote the requirement (see in-depth design in #685): > We already support spying on abstract classes by allowing parameterless constructor. However  there is no support for constructor parameters. This has been asked about long time ago. Mockito API is not robust enough if it supports mocking with constructor but not when one has any constructor parameters.  This patch enhances the  MockSettings#useConstrctor()  method (as suggested in the alternative API comment in the issue) and adds optional ellipsis arguments that are passed to the constructor.  The patch streamlines the creation of mocks via constructors to a single flow  where using a no-arg constructor or an enclosing class are just private cases of this flow  and don t require their own special treatment.
935 ;  src/test/java/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java ; New feature - enable mocking using constructor arguments ; ## Motivation and design - see #685  To quote the requirement (see in-depth design in #685): > We already support spying on abstract classes by allowing parameterless constructor. However  there is no support for constructor parameters. This has been asked about long time ago. Mockito API is not robust enough if it supports mocking with constructor but not when one has any constructor parameters.  This patch enhances the  MockSettings#useConstrctor()  method (as suggested in the alternative API comment in the issue) and adds optional ellipsis arguments that are passed to the constructor.  The patch streamlines the creation of mocks via constructors to a single flow  where using a no-arg constructor or an enclosing class are just private cases of this flow  and don t require their own special treatment.
942 ; src/main/java/org/mockito/Mockito.java ; Allow spying on interfaces so that it is convenient to work with Java 8 default methods ; Fixes #680 
953 ; src/main/java/org/mockito/junit/MockitoRule.java ; Fix Javadocs on MockitoRule.java to correct an error on its usage. ; Fixing the Javadoc to reflect the API for MockitoJUnitRule  > Hey   >  > Thanks for the contribution  this is awesome. > As you may have read  project members have somehow an opinionated view on what and how should be > Mockito  e.g. we don t want mockito to be a feature bloat. > There may be a thorough review  with feedback -> code change loop. >  > Which branch :  > - On mockito 2.x  make your pull request target  release/2.x  > - On next mockito version make your pull request target  master  > > _This block can be removed_ > _Something wrong in the template fix it here  .github/PULL_REQUEST_TEMPLATE.md    check list   - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [ ] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [ ] Avoid other runtime dependencies  - [ ] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [ ] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
959 ; src/main/java/org/mockito/internal/util/Platform.java ; Fix broken build ; Commit da4e42 introduced a static import from the non-existent  org.mockito.internal.util.StringJoiner  (it exists only in the master branch  not the release/2.x branch). This patch fixes the build by correcting the import to reference  org.mockito.internal.util.StringUtil .
959 ;  subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidByteBuddyMockMaker.java ; Fix broken build ; Commit da4e42 introduced a static import from the non-existent  org.mockito.internal.util.StringJoiner  (it exists only in the master branch  not the release/2.x branch). This patch fixes the build by correcting the import to reference  org.mockito.internal.util.StringUtil .
972 ; src/test/java/org/mockitousage/bugs/EnabledMockingInterfaceCloneMethodTest.java ; Verifies #688: Acceptance test to prevent future regression ; Added an acceptance test to verify #688 
975 ; src/main/java/org/mockito/exceptions/package-info.java ; Corrected a comment in exceptions package-info ; In the description comment of exceptions package-info.java  it wrote as  Mockito configuration utilities   which should be  Mockito exceptions utilities .
979 ; src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Fixes #974: Fix to get correct stubbing location with inline mocking ; - Fix StackTraceFilter to support inline mocking - Add one test to StackTraceFilterTest - Add StubbingLocationTest into inline subproject  This PR fixes #974.
979 ;  subprojects/inline/src/test/java/org/mockitoinline/StubbingLocationTest.java ; Fixes #974: Fix to get correct stubbing location with inline mocking ; - Fix StackTraceFilter to support inline mocking - Add one test to StackTraceFilterTest - Add StubbingLocationTest into inline subproject  This PR fixes #974.
980 ; src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java ; Fixes #976: Resolve ambiguous constructors ; With the current code (introduced in Mockito 2.7.14 by commit 6a82c03)  calling  MockSettings.useConstructor  with an argument list that would be applicable to more than one constructor would fail with an  org.mockito.internal.creation.instance.InstantiationException .  This behavior  however  is suboptimal  as described in issue #976  as it makes  useConstructor  less robust than the Java compiler  which is able to resolve such ambiguities. With this patch  Mockito will attempt to match the constructor with the most specific parameter types. A constructor X is considered more specific than a constructor Y if:  1. They are both applicable to the given argument list 2. Constructor X has at least one parameter which is a further specialization of the corresponding parameter of constructor Y (i.e.  paramX.isAssignableFrom(paramY) ). 3. Constructor Y has no parameter which is a further specialization of the corresponding parameter of constructor X  as defined above.  E.g.  consider the following class:      public class SomeClass {         SomeClass(Object o) {}         SomeClass(String s) {}     }  Without this patch  calling      mock(SomeClass.class  withSettings().useConstructor( string! ))  would fail. With this patch  such a call would invoke the  SomeClass(String)  constructor.   As noted above  this PR fixes issue #976.
980 ;  src/test/java/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java ; Fixes #976: Resolve ambiguous constructors ; With the current code (introduced in Mockito 2.7.14 by commit 6a82c03)  calling  MockSettings.useConstructor  with an argument list that would be applicable to more than one constructor would fail with an  org.mockito.internal.creation.instance.InstantiationException .  This behavior  however  is suboptimal  as described in issue #976  as it makes  useConstructor  less robust than the Java compiler  which is able to resolve such ambiguities. With this patch  Mockito will attempt to match the constructor with the most specific parameter types. A constructor X is considered more specific than a constructor Y if:  1. They are both applicable to the given argument list 2. Constructor X has at least one parameter which is a further specialization of the corresponding parameter of constructor Y (i.e.  paramX.isAssignableFrom(paramY) ). 3. Constructor Y has no parameter which is a further specialization of the corresponding parameter of constructor X  as defined above.  E.g.  consider the following class:      public class SomeClass {         SomeClass(Object o) {}         SomeClass(String s) {}     }  Without this patch  calling      mock(SomeClass.class  withSettings().useConstructor( string! ))  would fail. With this patch  such a call would invoke the  SomeClass(String)  constructor.   As noted above  this PR fixes issue #976.
983 ; src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Break cyclical compile time dependency on hideRecursiveCall ; Fixes #982.
983 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Break cyclical compile time dependency on hideRecursiveCall ; Fixes #982.
983 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Break cyclical compile time dependency on hideRecursiveCall ; Fixes #982.
985 ; src/main/java/org/mockito/Mockito.java ; Fixes #981: Update Javadoc about the  mockito-inline  artifact ; This PR fixes #981.  In the Javadoc  I write that the first version of  mockito-inline  is  2.7.6 . This artifact was actually offered in version  2.7.2   but  2.7.5  or earlier it did not work due to the issue #929  so I write like that.
986 ; src/main/java/org/mockito/internal/matchers/CapturingMatcher.java ; Made CaturingMatcher threadsafe ; In my tests I faced two problems with current capturing matcher. 1. It exposes its internal store through  #getAllValues() . 2. Internal data store in CapturingMatcher is not threadsafe. Exposing internal store when interraction with mocked object isn t finished may produce all kind of weird exceptions in tests.
994 ; src/main/java/org/mockito/Mockito.java ; fix the broken link on 1357 line in Mockito.java ; The link  MockitoJUnitRunner.StrictStubs  in the 40th section in Javadoc [Mockito](https://static.javadoc.io/org.mockito/mockito-core/2.7.19/org/mockito/Mockito.html) interface is broken. I fixed it by changing   {@link MockitoJUnitRunner.StrictStubs}    to    {@link MockitoJUnitRunner.StrictStubs.class}   .
995 ; src/main/java/org/mockito/internal/MockitoCore.java ; verifyZeroInteractions guarantees zero interactions instead of just delegating to verifyNoMoreInteractions ; Fixes #989   verifyZeroInteractions  no longer delegates to  verifyNoMoreInteractions  Instead  it fetches the number of invocations made to the mock and checks if they are zero  failing otherwise  I m not sure if the style of my code complies with mockito: please let me know what to change and where to look to make it more mockitoish
1007 ; src/test/java/org/mockito/internal/junit/UnusedStubbingsTest.java ; Fix test failing with Java 9-ea+146+ ; Stack trace in JDK part contains also module name:      java.lang.AssertionError:  Expecting:   [MockitoHint] 1. Unused -> at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  to match pattern:   \[MockitoHint\] 1\. Unused \-\> at [\w\.]+\.reflect\.NativeMethodAccessorImpl\.invoke0\(.*Native Method\)       The new regexp handles both variants.
1008 ;  src/test/java/org/mockito/internal/junit/UnusedStubbingsTest.java ; Sample usage of soft assertions ; Could be propagated by the way also in other similar places.
1009 ;  src/main/java/org/mockito/exceptions/misusing/PotentialStubbingProblem.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/MockitoCore.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InterceptedInvocation.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/reporting/PrintSettings.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/reporting/SmartPrinter.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/verification/AtMost.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/verification/DefaultRegisteredInvocations.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/verification/Only.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/verification/api/VerificationDataInOrder.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/verification/api/VerificationDataInOrderImpl.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/verification/checkers/MissingInvocationChecker.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/junit/MockitoRule.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/main/java/org/mockito/junit/VerificationCollector.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/mockito/internal/framework/DefaultMockitoFrameworkTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/mockito/internal/junit/UnusedStubbingsTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/mockito/internal/progress/MockingProgressImplTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/mockito/internal/stubbing/answers/InvocationInfoTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/mockito/internal/util/DefaultMockingDetailsTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/mockito/internal/util/reflection/FieldInitializerTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/mockitointegration/NoJUnitDependenciesTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/mockitousage/basicapi/MocksCreationTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/mockitousage/debugging/InvocationsPrinterTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/mockitousage/junitrunner/StrictStubsRunnerTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1009 ;  src/test/java/org/mockitousage/spies/SpyingOnInterfacesTest.java ; Clean up unused imports ; During development work  orphaned  unused  imports sometime get left behind in the code. At best  these imports are just redundant. At worst  they introduce false dependencies in places there aren t supposed to be any dependencies.  This patch removes all those unused imports and adds a Checkstyle module to verify no such redundant imports will be introduced in the future.
1012 ; src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Do not suppress instrumentation exceptions ; Rather propagate them to mock maker that attempts instrumentation. Addresses #1005.
1016 ;  subprojects/migration/src/main/java/org/mockito/migration/MockitoV1CompatibilityMatcher.java ; Fixes #991: Backport MockitoV1CompatibilityMatcher from 2.x to aid in… ; Fixes #991: Backport MockitoV1CompatibilityMatcher from 2.x to aid in migration to 2.x  The 2.x version of ArgumentMatcher<T> differs quite significantly from the current version: 1) It is an interface not a class and no longer extends    org.hamcrest.Matcher. 2) Its main method is matches(T) not matches(Object). 3) It uses the toString() method to construct a description and    not the describeTo(Description) method.  This class supports the following strategy for migrating implementations of ArgumentMatcher from 1.10.19 to 2.x: 1) First migrate to a 1.x version that has    MockitoV1CompatibilityMatcher change in it. That should be    relatively simple. 2) Then modify all existing implementation of ArgumentMatcher    to extend MockitoV1CompatibilityMatcher. 3) Switch to use a version of 2.x that contains this change.    Everything should compile as usual. 4) Modify the classes that extend MockitoV1CompatibilityMatcher    to implement ArgumentMatcher interface directly.  The above strategy is overkill when migrating a small project that can be updated atomically but it has proven to be a good approach when upgrading a large project spread across multiple git repositories. This is added in part because of the experience doing exactly that with the Android Open Source Platform.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [ x PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
1016 ;  subprojects/migration/src/test/java/org/mockito/migration/MockitoV1CompatibilityMatcherTest.java ; Fixes #991: Backport MockitoV1CompatibilityMatcher from 2.x to aid in… ; Fixes #991: Backport MockitoV1CompatibilityMatcher from 2.x to aid in migration to 2.x  The 2.x version of ArgumentMatcher<T> differs quite significantly from the current version: 1) It is an interface not a class and no longer extends    org.hamcrest.Matcher. 2) Its main method is matches(T) not matches(Object). 3) It uses the toString() method to construct a description and    not the describeTo(Description) method.  This class supports the following strategy for migrating implementations of ArgumentMatcher from 1.10.19 to 2.x: 1) First migrate to a 1.x version that has    MockitoV1CompatibilityMatcher change in it. That should be    relatively simple. 2) Then modify all existing implementation of ArgumentMatcher    to extend MockitoV1CompatibilityMatcher. 3) Switch to use a version of 2.x that contains this change.    Everything should compile as usual. 4) Modify the classes that extend MockitoV1CompatibilityMatcher    to implement ArgumentMatcher interface directly.  The above strategy is overkill when migrating a small project that can be updated atomically but it has proven to be a good approach when upgrading a large project spread across multiple git repositories. This is added in part because of the experience doing exactly that with the Android Open Source Platform.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [ x PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
1018 ;  src/main/java/org/mockito/Mockito.java ; Enabled continuous delivery via robust mockito-release-tools project ; - Continuous Delivery Pipeline 2.0 (#911) almost implemented! - Removed tons of release logic complexity  now all that is a part of general purpose  mockito release tools  project. - The new release automation should be much easier to test.
1018 ;  src/test/java/org/mockito/internal/verification/SmartPrinterTest.java ; Enabled continuous delivery via robust mockito-release-tools project ; - Continuous Delivery Pipeline 2.0 (#911) almost implemented! - Removed tons of release logic complexity  now all that is a part of general purpose  mockito release tools  project. - The new release automation should be much easier to test.
1022 ; src/test/java/org/mockitousage/matchers/MatchersTest.java ; MatchersTest numeric literals ; Use numeric literals  which are more elegant  instead of casting int literals to other primitive types.
1023 ; src/main/java/org/mockito/Mockito.java ; Fix broken link in Mockito javadoc ; Commit  6a82c030756a30932406d6b807e7ca34f20631e3 (included in Mockito 2.7.14) changed  MockSetting#useConstructor  s signature to accept an  Object...  argument. While this change is backwards compatible (as calls can continue passing an empty argument list)  it broke the javadoc reference to  useConstructor()  in Mockito s javadoc.
1025 ; src/test/java/org/mockito/internal/verification/SmartPrinterTest.java ; SmartPrinterTest toString() calls ; Calling  toString()  on a String object just returns the same object  making such calls useless in most cases.  This patch removes such calls from  SmartPrinterTest   making the code a cleaner and easier to read.
1027 ; src/main/java/org/mockito/internal/invocation/TypeSafeMatching.java ; Fix some issues reported by SonarQube ; Colleague students ran SonarQube on Mockito. These were some easy fixes I was able to do  no extreme value. I will open an issue regarding a different and potentially more serious issue.
1027 ;  src/main/java/org/mockito/internal/junit/UnnecessaryStubbingsReporter.java ; Fix some issues reported by SonarQube ; Colleague students ran SonarQube on Mockito. These were some easy fixes I was able to do  no extreme value. I will open an issue regarding a different and potentially more serious issue.
1027 ;  src/main/java/org/mockito/internal/junit/UnusedStubbings.java ; Fix some issues reported by SonarQube ; Colleague students ran SonarQube on Mockito. These were some easy fixes I was able to do  no extreme value. I will open an issue regarding a different and potentially more serious issue.
1027 ;  src/main/java/org/mockito/internal/matchers/text/ArrayIterator.java ; Fix some issues reported by SonarQube ; Colleague students ran SonarQube on Mockito. These were some easy fixes I was able to do  no extreme value. I will open an issue regarding a different and potentially more serious issue.
1027 ;  src/main/java/org/mockito/internal/util/ObjectMethodsGuru.java ; Fix some issues reported by SonarQube ; Colleague students ran SonarQube on Mockito. These were some easy fixes I was able to do  no extreme value. I will open an issue regarding a different and potentially more serious issue.
1027 ;  src/main/java/org/mockito/internal/verification/Only.java ; Fix some issues reported by SonarQube ; Colleague students ran SonarQube on Mockito. These were some easy fixes I was able to do  no extreme value. I will open an issue regarding a different and potentially more serious issue.
1035 ; src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java ; Fix NullPointerException in JUnit test runner when test fails early in initialization ; On case of   MockitoAnnotations.initMocks(target)   throw any exception  this.target  still null. As impact to throw a **NullPointerException on all next tests** on the method  DefaultInternalRunner.testFinished .  What append  the method testFinished is never call on case of any error on the initialization phase as impact that the listener is not cleanup. On next tests the method testFinished will notify the previous listener that have not been unregistered.  To avoid this issue the mockitoListener must be remove if test fail and never started.  > java.lang.NullPointerException  at org.mockito.internal.junit.util.TestName.getTestName(TestName.java:15) 	at org.mockito.internal.junit.MismatchReportingTestListener.testFinished(MismatchReportingTestListener.java:33) 	at org.mockito.internal.runners.DefaultInternalRunner$1$1.testFinished(DefaultInternalRunner.java:60) 	at org.junit.runner.notification.SynchronizedRunListener.testFinished(SynchronizedRunListener.java:56)  
1035 ;  src/test/java/org/mockito/internal/runners/DefaultInternalRunnerTest.java ; Fix NullPointerException in JUnit test runner when test fails early in initialization ; On case of   MockitoAnnotations.initMocks(target)   throw any exception  this.target  still null. As impact to throw a **NullPointerException on all next tests** on the method  DefaultInternalRunner.testFinished .  What append  the method testFinished is never call on case of any error on the initialization phase as impact that the listener is not cleanup. On next tests the method testFinished will notify the previous listener that have not been unregistered.  To avoid this issue the mockitoListener must be remove if test fail and never started.  > java.lang.NullPointerException  at org.mockito.internal.junit.util.TestName.getTestName(TestName.java:15) 	at org.mockito.internal.junit.MismatchReportingTestListener.testFinished(MismatchReportingTestListener.java:33) 	at org.mockito.internal.runners.DefaultInternalRunner$1$1.testFinished(DefaultInternalRunner.java:60) 	at org.junit.runner.notification.SynchronizedRunListener.testFinished(SynchronizedRunListener.java:56)  
1036 ; src/main/java/org/mockito/internal/util/Decamelizer.java ; Remove duplicated code ; Remove class Decamelizer.decamelizeMatcher duplicated by StringUtil.decamelizeMatcher Remove class NumberOfInvocationsInOrderChecker duplicated by NumberOfInvocationsChecker.checkNumberOfInvocations 
1036 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderChecker.java ; Remove duplicated code ; Remove class Decamelizer.decamelizeMatcher duplicated by StringUtil.decamelizeMatcher Remove class NumberOfInvocationsInOrderChecker duplicated by NumberOfInvocationsChecker.checkNumberOfInvocations 
1036 ;  src/test/java/org/mockito/internal/util/DecamelizerTest.java ; Remove duplicated code ; Remove class Decamelizer.decamelizeMatcher duplicated by StringUtil.decamelizeMatcher Remove class NumberOfInvocationsInOrderChecker duplicated by NumberOfInvocationsChecker.checkNumberOfInvocations 
1040 ; src/test/java/org/mockitousage/matchers/VarargsTest.java ; Fix javadoc issues ; This PR fixes several javadoc issues reported by IntelliJ IDEA. Two types of errors are not handled in this PR:  - References which gradle is unable to resolve - these references seem to be valid javadoc links  so there s either an issue with gradle itself of with the configuration this project is using  and needs a deeper look - Javadoc tags missing descriptions  which require a deeper understanding of the methods in question in order to resolve.
1041 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java ; Backport fixes of release/2.x to master ; Yeah  we did this quite some time ago and this merge was hell. I hope I did not screw anything up. There are still 7 test failures  but I have to get dinner now. Please review this PR very carefully  to make sure I did not introduce regressions into master :sob: 
1041 ;  src/main/java/org/mockito/internal/stubbing/BaseStubbing.java ; Backport fixes of release/2.x to master ; Yeah  we did this quite some time ago and this merge was hell. I hope I did not screw anything up. There are still 7 test failures  but I have to get dinner now. Please review this PR very carefully  to make sure I did not introduce regressions into master :sob: 
1041 ;  src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java ; Backport fixes of release/2.x to master ; Yeah  we did this quite some time ago and this merge was hell. I hope I did not screw anything up. There are still 7 test failures  but I have to get dinner now. Please review this PR very carefully  to make sure I did not introduce regressions into master :sob: 
1041 ;  src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; Backport fixes of release/2.x to master ; Yeah  we did this quite some time ago and this merge was hell. I hope I did not screw anything up. There are still 7 test failures  but I have to get dinner now. Please review this PR very carefully  to make sure I did not introduce regressions into master :sob: 
1041 ;  src/main/java/org/mockito/internal/stubbing/answers/ThrowsExceptionClass.java ; Backport fixes of release/2.x to master ; Yeah  we did this quite some time ago and this merge was hell. I hope I did not screw anything up. There are still 7 test failures  but I have to get dinner now. Please review this PR very carefully  to make sure I did not introduce regressions into master :sob: 
1041 ;  src/test/java/org/mockito/internal/junit/UnusedStubbingsTest.java ; Backport fixes of release/2.x to master ; Yeah  we did this quite some time ago and this merge was hell. I hope I did not screw anything up. There are still 7 test failures  but I have to get dinner now. Please review this PR very carefully  to make sure I did not introduce regressions into master :sob: 
1041 ;  src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java ; Backport fixes of release/2.x to master ; Yeah  we did this quite some time ago and this merge was hell. I hope I did not screw anything up. There are still 7 test failures  but I have to get dinner now. Please review this PR very carefully  to make sure I did not introduce regressions into master :sob: 
1058 ;  src/test/java/org/mockitousage/matchers/VarargsTest.java ; Test code refactoring - updated assertj test dependency from 1.x to 2.6.0 ; make use of assertj 2.6.0 since java 7 is used now for building mockito and assertj 1.x is no longer under development. 
1060 ; src/main/java/org/mockito/ArgumentMatchers.java ; Fixed  typos across the codebase ; nan
1060 ;  src/main/java/org/mockito/Mockito.java ; Fixed  typos across the codebase ; nan
1060 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Fixed  typos across the codebase ; nan
1060 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java ; Fixed  typos across the codebase ; nan
1060 ;  src/main/java/org/mockito/internal/util/concurrent/DetachedThreadLocal.java ; Fixed  typos across the codebase ; nan
1060 ;  src/main/java/org/mockito/internal/util/reflection/FieldInitializationReport.java ; Fixed  typos across the codebase ; nan
1060 ;  src/main/java/org/mockito/internal/util/reflection/GenericTypeExtractor.java ; Fixed  typos across the codebase ; nan
1060 ;  src/test/java/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java ; Fixed  typos across the codebase ; nan
1060 ;  src/test/java/org/mockito/internal/stubbing/answers/InvocationInfoTest.java ; Fixed  typos across the codebase ; nan
1060 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationTest.java ; Fixed  typos across the codebase ; nan
1060 ;  src/test/java/org/mockitousage/junitrule/VerificationCollectorImplTest.java ; Fixed  typos across the codebase ; nan
1060 ;  src/test/java/org/mockitousage/misuse/InvalidUsageTest.java ; Fixed  typos across the codebase ; nan
1060 ;  src/test/java/org/mockitousage/misuse/RestrictedObjectMethodsTest.java ; Fixed  typos across the codebase ; nan
1060 ;  src/test/java/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java ; Fixed  typos across the codebase ; nan
1060 ;  src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java ; Fixed  typos across the codebase ; nan
1060 ;  src/test/java/org/mockitousage/verification/AtLeastXVerificationTest.java ; Fixed  typos across the codebase ; nan
1060 ;  src/test/java/org/mockitousage/verification/DelayedExecution.java ; Fixed  typos across the codebase ; nan
1060 ;  src/test/java/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java ; Fixed  typos across the codebase ; nan
1075 ;  src/test/java/org/mockitoutil/SafeJUnitRuleTest.java ; Streamline assertj and junit4 usage in gradle files and update assertj (v2.7.0) ; It looks like I missed some occurrences of assertj-core 1.7.1 in #1058. Therefore I thought it might be a good idea to add a  dependencies.gradle  file which defines certain dependencies (for now assertj and junit4). 
1076 ; src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java ; Fixed validation in returnArgumentAt(int) in case of type erasure on the parameter ; Fixes #1071   The parameter type inference takes now the type of the actual instance into account to avoid type erasure issues in case the parameter is generic.  see also: https://github.com/mockito/mockito/issues/1071#issuecomment-300091021
1079 ; src/main/java/org/mockito/internal/exceptions/Reporter.java ; Fixed #1065. Add information about doNothing() method to CannotStubVo… ; nan
1090 ; src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Fixes #1083: Interfaces only declare toString implicitly and should t… ; …herefore override it explicitly from the inline mock maker.
1090 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Fixes #1083: Interfaces only declare toString implicitly and should t… ; …herefore override it explicitly from the inline mock maker.
1091 ; src/main/java/org/mockito/Mockito.java ; Fixes #1088 : Updating documentation of verify feature to correct a s… ; Updating documentation of verify feature to correct a supposed typo that results in confusing behaviour when cut  pasted  and run verbatim.  The documentation presents the following example of the verify exact number of invocations feature:      //using mock     mockedList.add( once )           mockedList.add( twice )      mockedList.add( twice )           mockedList.add( three times )      mockedList.add( three times )      mockedList.add( three times )           //following two verifications work exactly the same - times(1) is used by default     verify(mockedList).add( once )      verify(mockedList  times(1)).add( once )           //exact number of invocations verification     verify(mockedList  times(2)).add( twice )      verify(mockedList  times(3)).add( three times )           //verification using never(). never() is an alias to times(0)     verify(mockedList  never()).add( never happened )           //verification using atLeast()/atMost()     verify(mockedList  atLeastOnce()).add( three times )      verify(mockedList  atLeast(2)).add( five times )      verify(mockedList  atMost(5)).add( three times )   The last but one line says:      verify(mockedList  atLeast(2)).add( five times )   This could be confusing to someone using these examples as it would result in a TooLittleActualInvocations failure being reported by Mockito. This is because in the example the  add()  method is never called with the String  five times . In order to have this example make sense in the way I think it should I ve replaced the String  five times  with  three times   as suggested by @szczepiq   Cheers  Tim Cooke
1092 ; src/main/java/org/mockito/Mockito.java ; Fix link to Mockito JUnit rule heading ; 
1096 ; src/main/java/org/mockito/internal/InOrderImpl.java ; InOrderImpl constructor signature ; Replace  List<? extends Object>  in the constructor s argument list with a simpler  List<?> . The  extends Object  adds nothing  and just serves to confuse the reader.
1118 ; src/main/java/org/mockito/internal/junit/ArgMismatchFinder.java ; ArgsMismatchFinder#getStubbingArgMismatches generics ; This patch allows calling  getStubbingArgMismatches  with any  Iterable   not just an  Iterable<Object>  in order to make it more convenient to use.  As seen in  ArgMismatchFinderTest   this saves having to cast potential arguments to raw types.
1118 ;  src/test/java/org/mockito/internal/junit/ArgMismatchFinderTest.java ; ArgsMismatchFinder#getStubbingArgMismatches generics ; This patch allows calling  getStubbingArgMismatches  with any  Iterable   not just an  Iterable<Object>  in order to make it more convenient to use.  As seen in  ArgMismatchFinderTest   this saves having to cast potential arguments to raw types.
1119 ; src/main/java/org/mockito/AdditionalAnswers.java ; Made it possible to delay the return of a mock or spy.  (#1117) ; This is a useful aid in debugging race conditions and other synchronicity problems.
1119 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswersWithDelay.java ; Made it possible to delay the return of a mock or spy.  (#1117) ; This is a useful aid in debugging race conditions and other synchronicity problems.
1119 ;  src/test/java/org/mockito/internal/stubbing/answers/AnswersWithDelayTest.java ; Made it possible to delay the return of a mock or spy.  (#1117) ; This is a useful aid in debugging race conditions and other synchronicity problems.
1119 ;  src/test/java/org/mockitousage/stubbing/StubbingWithAdditionalAnswersTest.java ; Made it possible to delay the return of a mock or spy.  (#1117) ; This is a useful aid in debugging race conditions and other synchronicity problems.
1121 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Improve and develop APIs required for framework integrators ; ### Problem  Mockito does not do static mocking at the moment  Powermockito does. Powermockito uses a lot of internal Mockito APIs exposing the community to issues and wasted productivity on version upgrades. We want Mockito APIs to be easily extensible by framework integrators such us Powermockito without compromising API simplicity and consistency.  All proposed changes are backwards compatible in accordance to Mockito s compatibility contract (in short: limited changes to org.mockito.* types  freedom to change org.mockito.internal.*).  ### Public API changes  The full discussion on the use cases  implementation options and decisions is in #1110 ticket.  1. New public method for creating mock creation settings object:     java Mockito.withSettings().name(“my mock”).build(Foo.class)       2. Framework integrators can now provide custom MockHandler via    MockMaker#getMockHandler()   . Previously  it we didn’t offer this capability because we didn’t have convincing use cases that it was needed.  ### Public API considerations  1. Framework integrators may **not** provide custom implementation of    InvocationContainer    at this stage. This part of API is accessible via public    MockMaker#getMockHandler().getInvocationContainer()    method. There are no convincing use cases that exposing this new public API is needed.
1121 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Improve and develop APIs required for framework integrators ; ### Problem  Mockito does not do static mocking at the moment  Powermockito does. Powermockito uses a lot of internal Mockito APIs exposing the community to issues and wasted productivity on version upgrades. We want Mockito APIs to be easily extensible by framework integrators such us Powermockito without compromising API simplicity and consistency.  All proposed changes are backwards compatible in accordance to Mockito s compatibility contract (in short: limited changes to org.mockito.* types  freedom to change org.mockito.internal.*).  ### Public API changes  The full discussion on the use cases  implementation options and decisions is in #1110 ticket.  1. New public method for creating mock creation settings object:     java Mockito.withSettings().name(“my mock”).build(Foo.class)       2. Framework integrators can now provide custom MockHandler via    MockMaker#getMockHandler()   . Previously  it we didn’t offer this capability because we didn’t have convincing use cases that it was needed.  ### Public API considerations  1. Framework integrators may **not** provide custom implementation of    InvocationContainer    at this stage. This part of API is accessible via public    MockMaker#getMockHandler().getInvocationContainer()    method. There are no convincing use cases that exposing this new public API is needed.
1122 ; src/main/java/org/mockito/AdditionalAnswers.java ; Made it possible to delay the return of a mock or spy (#1117) ; A cherry-picked version of #1119 for the 2.x branch.
1122 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswersWithDelay.java ; Made it possible to delay the return of a mock or spy (#1117) ; A cherry-picked version of #1119 for the 2.x branch.
1122 ;  src/test/java/org/mockito/internal/stubbing/answers/AnswersWithDelayTest.java ; Made it possible to delay the return of a mock or spy (#1117) ; A cherry-picked version of #1119 for the 2.x branch.
1125 ; src/main/java/org/mockito/Mockito.java ; Fix typo: Remove repeated  a  ; 
1128 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; Improve detection on non-mockable types - byte buddy 1.6.14->1.7.0 ; Stronger assertions on class loader origin when choosing what methods are mockable.
1136 ; src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Fixes #1135: Properly resolve visibility bridges. ; Resolve the method hierarchy by Byte Buddy s method graph compiler to properly handle bridge methods which require a full method hierarchy analysis to detect.
1136 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Fixes #1135: Properly resolve visibility bridges. ; Resolve the method hierarchy by Byte Buddy s method graph compiler to properly handle bridge methods which require a full method hierarchy analysis to detect.
1137 ; src/test/java/org/mockito/internal/junit/UnusedStubbingsTest.java ; Don t use raw rypes in UnusedStubbingsTest ; Use generic specification instead of casting to the raw List type in order to make it a bit stricter.  Note that when we move to Java 8 language level these workarounds could be completely removed as the built in type inference should handle it.
1146 ; src/test/java/org/mockitousage/annotation/AnnotationsTest.java ; Enable stubOnly() on @Mock annotation ; Since Issue #86   withSettings() has a API stubOnly() which speed up mocked stub a lots.  In my case  stubOnly() huge amount of test overhead  stacktrace and avoid invocation footprint list grow too large and cause OOM.  However   the API is not available with  @Mock  annotation. I had to move tens of mock annotation from  @Mock Foo foo   into  Mockito mock(Foo.class  withSetting().stubOnly()) .      @Mock(stubOnly=true) public Foo lightweight        Suggest adding the above api for convenience   check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1157 ; src/test/java/org/mockitousage/annotation/SpyAnnotationTest.java ; Add tests to verify and show that @Spy can be used to allow stubbing/verification of List parameters using varargs. ; Hi  I thought about sending an email first but then figured that I d probably put in the test code as the example anyway  which is what this PR is all about.  I m not completely sure that there isn t already a better way to go about stubbing List params. If there are  I m happy to learn! :)
1161 ; src/main/java/org/mockito/package-info.java ; Remove duplicated word in Javadoc ; nan
1162 ; src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java ; Fix for #1155 thenThrow(Class)  ; Fix for #1155  Mockito.thenThrow(Class) now fails when the given Throwable type is not declared on the stubbed method.
1181 ; src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; #1179: Fix performance regression caused by use of method graph compiler. ; In order to properly discover visibility bridges  we have to run a full analysis of the method graph. The compilation of this method graph is rather expensive and we require to cache a computed graph. The caching is however non-trivial as it references classes which might be unloaded. In order to avoid a leak  we cache classes using non-strong references.  This requires some real-world experience to discover if this caching mechanism suffices.
1186 ; src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Compare method of graph to defined form of method. ; Fixes #1180: Compare against non-generic method when deciding if a method should be stubbed.
1186 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Compare method of graph to defined form of method. ; Fixes #1180: Compare against non-generic method when deciding if a method should be stubbed.
1192 ;  src/main/java/org/mockito/MockSettings.java ; Added new public API for spring-boot use case ; Not intended for merging yet  submitted for visibility.  - for design and rationale  see #1191 - for usage  see  VerificationStartedListenerTest  class  This is still experimental so refactorings  error handling  javadoc is missing.
1192 ;  src/test/java/org/mockitousage/debugging/InvocationListenerCallbackTest.java ; Added new public API for spring-boot use case ; Not intended for merging yet  submitted for visibility.  - for design and rationale  see #1191 - for usage  see  VerificationStartedListenerTest  class  This is still experimental so refactorings  error handling  javadoc is missing.
1199 ; src/main/java/org/mockito/Mockito.java ; Fixes 977: Javadoc on verifyZeroInteractions ; Make the javadoc of  Mockito#verifyZeroInteractions  to make it more obvious that it does the same thing as  Mockito#verifyNoMoreInteractions .  Fixes #977
1201 ; src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java ; Fix javadoc in PluginLoader#withAlias  javadoc ; Fix the misuse of  @Deprecated  in  PluginLoader#withAlias  -  @Deprecated  is an annotation  while the correct javadoc tag is  @deprecated .
1202 ; src/test/java/org/mockito/internal/junit/UnusedStubbingsTest.java ; [#1202] Java 9 CI build for Mockito 2.x ; ## Summary  Provide Java 9 Travis build to ensure Java 9 compatibility in at least tested use cases.  Support for Java 9 was improved in Gradle 4.x and that version is being used. Due to some issues with newer Gradle versions (#1198) some other configuration changes were required. As well as JaCoCo version has been bump (https://travis-ci.org/mockito/mockito/jobs/284996316#L799-L816).  Fixes #1198.  ## Check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
1203 ; src/test/java/org/mockitousage/debugging/InvocationListenerCallbackTest.java ; Fixed documentation issue  added unit tests ; - While working on new verification started listeners (#1191) I found an instance of incorrect documentation. I added unit tests and simplified the documentation. - Currently  contrary to what the Javadoc said  we do guarantee the order in which invocation listeners get notified. Some of our users might have started to depend on this behavior. I added unit tests and fixed the Javadoc. In general  it is seems useful to guarantee the order. This way  the API is more predictable  easier to use.
1209 ; src/test/java/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/exceptions/base/MockitoAssertionErrorTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/exceptions/base/MockitoExceptionTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/AllInvocationsFinderTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/InOrderImplTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/InvalidStateDetectionTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/configuration/plugins/PluginFinderTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/creation/DelegatingMethodTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/creation/InterfaceOverrideTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/creation/MockSettingsImplTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/debugging/LoggingListenerTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractorTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/handler/MockHandlerFactoryTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/handler/MockHandlerImplTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/invocation/InvocationMarkerTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/invocation/InvocationsFinderTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/invocation/MatcherApplicationStrategyTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/junit/util/JUnitFailureHackerTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/matchers/ComparableMatchersTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/matchers/EqualityTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/matchers/EqualsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/matchers/MatchersPrinterTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/matchers/MatchersToStringTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/matchers/text/MatcherToStringTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/progress/AtLeastTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/progress/MockingProgressImplTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/progress/ThreadSafeMockingProgressTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/reporting/PluralizerTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/runners/util/RunnerProviderTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/runners/util/TestMethodsFinderTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocationsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/util/DefaultMockingDetailsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/util/MockNameImplTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/util/MockUtilTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/util/ObjectMethodsGuruTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/util/SimpleMockitoLoggerTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/util/StringUtilTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/util/collections/ListUtilTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/util/reflection/FieldReaderTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/util/reflection/GenericTypeExtractorTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/verification/DefaultRegisteredInvocationsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/verification/DescriptionTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/verification/NoMoreInteractionsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/verification/VerificationDataImplTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/verification/VerificationWithDescriptionTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockito/verification/TimeoutTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/annotation/AnnotationsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationBasicTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationUnhappyPathTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/annotation/SpyAnnotationInitializedInBaseClassTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/annotation/SpyAnnotationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/annotation/WrongSetOfAnnotationsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/basicapi/MocksCreationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/basicapi/MocksSerializationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/basicapi/ObjectsSerializationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/basicapi/ResetInvocationsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/basicapi/ResetTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/BridgeMethodsHitAgainTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/CovariantOverrideTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/MockitoRunnerBreaksWhenNoTestMethodsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/NPEWhenCustomExceptionStackTraceReturnNullTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/NPEWhenMockingThrowablesTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/ShouldOnlyModeAllowCapturingArgumentsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/creation/ShouldAllowInlineMockCreationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/varargs/VarargsErrorWhenCallingRealMethodTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/customization/BDDMockitoTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/internal/debugging/LocationImplTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/junitrunner/ModellingVerboseMockitoTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/matchers/CapturingArgumentsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/matchers/CustomMatchersTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/matchers/HamcrestMatchersTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/matchers/MatchersTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/matchers/MoreMatchersTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/matchers/NewMatchersTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/misuse/DetectingFinalMethodsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/misuse/DetectingMisusedMatchersTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/misuse/RestrictedObjectMethodsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/performance/LoadsOfMocksTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/plugins/MockitoPluginsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/puzzlers/OverloadingPuzzleTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/session/MockitoSessionTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/spies/PartialMockingWithSpiesTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/spies/SpyingOnInterfacesTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stacktrace/ClickableStackTracesTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stacktrace/StackTraceFilteringTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stubbing/CallingRealMethodTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stubbing/CloningParameterTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stubbing/DeepStubbingTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stubbing/ReturningDefaultValuesTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stubbing/SmartNullsStubbingTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stubbing/StubbingWithDelegateTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stubbing/StubbingWithExtraAnswersTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/AtLeastXVerificationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/AtMostXVerificationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/BasicVerificationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/CustomVerificationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/OnlyVerificationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/RelaxedVerificationInOrderTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/VerificationExcludingStubsTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/VerificationInOrderTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitousage/verification/VerificationUsingMatchersTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  src/test/java/org/mockitoutil/SimpleSerializationUtil.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1209 ;  subprojects/extTest/src/test/java/org/mockitousage/plugins/stacktrace/PluginStackTraceFilteringTest.java ; Clean up JUnit imports ; Fix JUnit imports throughout the project to use the standard  org.junit.Assert  assertions instead of the obsolete  junit.framework.TestCase  assertions which just delegate to  Assert  s methods.
1213 ; src/test/java/org/mockitousage/bugs/DiamondInheritanceIsConfusingMockitoTest.java ; Standardize JUnit imports ; This PR standardizes importing assertion methods  making the code base cleaner and easier to maintian.
1213 ;  src/test/java/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java ; Standardize JUnit imports ; This PR standardizes importing assertion methods  making the code base cleaner and easier to maintian.
1213 ;  src/test/java/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java ; Standardize JUnit imports ; This PR standardizes importing assertion methods  making the code base cleaner and easier to maintian.
1213 ;  src/test/java/org/mockitousage/stubbing/CallingRealMethodTest.java ; Standardize JUnit imports ; This PR standardizes importing assertion methods  making the code base cleaner and easier to maintian.
1213 ;  src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java ; Standardize JUnit imports ; This PR standardizes importing assertion methods  making the code base cleaner and easier to maintian.
1214 ; src/main/java/org/mockito/Mockito.java ; Fixes #1211: Improve @deprecated JavaDoc ; This pull request fixes #1211 by improving the  @deprecated  JavaDoc of  Mockito.debug()    MockitoDebugger  and  MockitoDebugger.printInvocations(Object ... mocks)  by adding the additional information on how to retrieve an actual instance of the  MockitoDebugger  interface. 
1214 ;  src/main/java/org/mockito/MockitoDebugger.java ; Fixes #1211: Improve @deprecated JavaDoc ; This pull request fixes #1211 by improving the  @deprecated  JavaDoc of  Mockito.debug()    MockitoDebugger  and  MockitoDebugger.printInvocations(Object ... mocks)  by adding the additional information on how to retrieve an actual instance of the  MockitoDebugger  interface. 
1216 ; src/main/java/org/mockito/MockSettings.java ; Adresses #1206: allow opting out from annotation copying within mocks. ; The  MockSettings  now include an option to disable copying of annotations to mock classes.
1216 ;  src/main/java/org/mockito/internal/creation/MockSettingsImpl.java ; Adresses #1206: allow opting out from annotation copying within mocks. ; The  MockSettings  now include an option to disable copying of annotations to mock classes.
1216 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Adresses #1206: allow opting out from annotation copying within mocks. ; The  MockSettings  now include an option to disable copying of annotations to mock classes.
1216 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockFeatures.java ; Adresses #1206: allow opting out from annotation copying within mocks. ; The  MockSettings  now include an option to disable copying of annotations to mock classes.
1216 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java ; Adresses #1206: allow opting out from annotation copying within mocks. ; The  MockSettings  now include an option to disable copying of annotations to mock classes.
1216 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; Adresses #1206: allow opting out from annotation copying within mocks. ; The  MockSettings  now include an option to disable copying of annotations to mock classes.
1216 ;  src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java ; Adresses #1206: allow opting out from annotation copying within mocks. ; The  MockSettings  now include an option to disable copying of annotations to mock classes.
1216 ;  src/main/java/org/mockito/internal/creation/settings/CreationSettings.java ; Adresses #1206: allow opting out from annotation copying within mocks. ; The  MockSettings  now include an option to disable copying of annotations to mock classes.
1216 ;  src/main/java/org/mockito/mock/MockCreationSettings.java ; Adresses #1206: allow opting out from annotation copying within mocks. ; The  MockSettings  now include an option to disable copying of annotations to mock classes.
1216 ;  src/test/java/org/mockito/internal/creation/bytebuddy/AbstractByteBuddyMockMakerTest.java ; Adresses #1206: allow opting out from annotation copying within mocks. ; The  MockSettings  now include an option to disable copying of annotations to mock classes.
1216 ;  src/test/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMakerTest.java ; Adresses #1206: allow opting out from annotation copying within mocks. ; The  MockSettings  now include an option to disable copying of annotations to mock classes.
1216 ;  src/test/java/org/mockito/internal/creation/bytebuddy/TypeCachingMockBytecodeGeneratorTest.java ; Adresses #1206: allow opting out from annotation copying within mocks. ; The  MockSettings  now include an option to disable copying of annotations to mock classes.
1217 ; src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Fixes #1183: Make override check more forgiving to accomondate Kotlin compile patterns. ; The override check implies Java compile patterns such that Kotlin method resolutions could fail for void return types which do not fit into Java s reference-type only generic hierarchies. This PR eases this restriction to fix this resolution for Kotlin.  I added the test case of the reported issue as a reference.
1219 ; src/test/java/org/mockitousage/bugs/GenericsMockitoAnnotationsTest.java ; Add regression test for issue #1174 ; Regression that shows the issue of #1174. I am unable to reproduce this locally. Let s see what Travis says.  Closes #1174 
1220 ;  src/main/java/org/mockito/MockSettings.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/MockingDetails.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/Mockito.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/MockitoDebugger.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/internal/MockitoCore.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/internal/creation/MockSettingsImpl.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockFeatures.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/internal/creation/settings/CreationSettings.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/internal/util/DefaultMockingDetails.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/internal/util/MockUtil.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/listeners/VerificationStartedEvent.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/listeners/VerificationStartedListener.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/main/java/org/mockito/mock/MockCreationSettings.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/exceptions/base/MockitoAssertionErrorTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/exceptions/base/MockitoExceptionTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/AllInvocationsFinderTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/InOrderImplTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/InvalidStateDetectionTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/configuration/plugins/PluginFinderTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/creation/DelegatingMethodTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/creation/InterfaceOverrideTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/creation/MockSettingsImplTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/creation/bytebuddy/AbstractByteBuddyMockMakerTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMakerTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/creation/bytebuddy/TypeCachingMockBytecodeGeneratorTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/debugging/LoggingListenerTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/exceptions/ReporterTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractorTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/handler/MockHandlerFactoryTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/handler/MockHandlerImplTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/invocation/InvocationMarkerTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/invocation/InvocationsFinderTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/invocation/MatcherApplicationStrategyTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/junit/util/JUnitFailureHackerTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/listeners/VerificationStartedNotifierTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/matchers/ComparableMatchersTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/matchers/EqualityTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/matchers/EqualsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/matchers/MatchersPrinterTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/matchers/MatchersToStringTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/matchers/text/MatcherToStringTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/progress/AtLeastTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/progress/MockingProgressImplTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/progress/ThreadSafeMockingProgressTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/reporting/PluralizerTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/runners/util/RunnerProviderTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/runners/util/TestMethodsFinderTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocationsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/util/DefaultMockingDetailsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/util/MockNameImplTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/util/MockUtilTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/util/ObjectMethodsGuruTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/util/SimpleMockitoLoggerTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/util/StringUtilTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/util/TimerTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/util/collections/ListUtilTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/util/reflection/FieldReaderTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/util/reflection/GenericTypeExtractorTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/verification/DefaultRegisteredInvocationsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/verification/DescriptionTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/verification/NoMoreInteractionsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/verification/VerificationDataImplTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/verification/VerificationWithDescriptionTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingToolTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunnerTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/verification/NegativeDurationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockito/verification/TimeoutTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/annotation/AnnotationsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationBasicTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationUnhappyPathTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/annotation/SpyAnnotationInitializedInBaseClassTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/annotation/SpyAnnotationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/annotation/WrongSetOfAnnotationsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/basicapi/MocksCreationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/basicapi/MocksSerializationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/basicapi/ObjectsSerializationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/basicapi/ResetInvocationsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/basicapi/ResetTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/BridgeMethodsHitAgainTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/CovariantOverrideTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/DiamondInheritanceIsConfusingMockitoTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/MockitoRunnerBreaksWhenNoTestMethodsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/NPEWhenCustomExceptionStackTraceReturnNullTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/NPEWhenMockingThrowablesTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/ShouldOnlyModeAllowCapturingArgumentsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/creation/ShouldAllowInlineMockCreationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/varargs/VarargsErrorWhenCallingRealMethodTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/configuration/CustomizedAnnotationForSmartMockTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/customization/BDDMockitoTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/debugging/InvocationListenerCallbackTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/internal/debugging/LocationImplTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/junitrunner/ModellingVerboseMockitoTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/junitrunner/VerboseMockitoRunnerTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/matchers/AnyXMatchersAcceptNullsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/matchers/CapturingArgumentsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/matchers/CustomMatchersTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/matchers/HamcrestMatchersTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/matchers/MatchersTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/matchers/MoreMatchersTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/matchers/NewMatchersTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/misuse/CleaningUpPotentialStubbingTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/misuse/DetectingFinalMethodsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/misuse/DetectingMisusedMatchersTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/misuse/RestrictedObjectMethodsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/performance/LoadsOfMocksTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/plugins/MockitoPluginsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/puzzlers/OverloadingPuzzleTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/session/MockitoSessionTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/spies/PartialMockingWithSpiesTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/spies/SpyingOnInterfacesTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stacktrace/ClickableStackTracesTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stacktrace/StackTraceFilteringTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stubbing/CallingRealMethodTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stubbing/CloningParameterTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stubbing/DeepStubbingTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stubbing/ReturningDefaultValuesTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stubbing/SmartNullsStubbingTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stubbing/StubbingWithDelegateTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stubbing/StubbingWithExtraAnswersTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/AtLeastXVerificationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/AtMostXVerificationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/BasicVerificationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/CustomVerificationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/OnlyVerificationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/RelaxedVerificationInOrderTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/VerificationExcludingStubsTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/VerificationInOrderTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/VerificationStartedListenerTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitousage/verification/VerificationUsingMatchersTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitoutil/SimpleSerializationUtil.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  src/test/java/org/mockitoutil/TestBase.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1220 ;  subprojects/extTest/src/test/java/org/mockitousage/plugins/stacktrace/PluginStackTraceFilteringTest.java ; Backport fixes from release/2.x to master ; Because we should do this more frequent :joy: 
1221 ; subprojects/junit-jupiter/src/main/java/org/mockito/junit/jupiter/MockitoExtension.java ; MockitoExtension for JUnit5  ; Fixes #445  Discussion: https://groups.google.com/forum/#!topic/mockito/R1L1aG2RgBQ  First of all  thanks to the JUnit5-Team (@sbrannen) for that great API! The implementation was straight forward and the docu is top notch. Not comparable to a JUnitRule or Runner implementation. One can feel the hard work.   ----  The here provided  MockitoExtension  allows to mock/spy/validate like the well known Mockito-JUnitRule/Runner. This is still  work in progress   feel free to comment.  Usage:     Java @ExtendWith(MockitoExtension.class) class JUnit5Test {     @Mock   private Dependency mock      @Test   void checkMockCreation(){     when(mock.foo()).thenReturn( Hello JUnit5 )      mock.foo()      verify(mock).foo()    } }    
1221 ;  subprojects/junit-jupiter/src/main/java/org/mockito/junit/jupiter/MockitoSettings.java ; MockitoExtension for JUnit5  ; Fixes #445  Discussion: https://groups.google.com/forum/#!topic/mockito/R1L1aG2RgBQ  First of all  thanks to the JUnit5-Team (@sbrannen) for that great API! The implementation was straight forward and the docu is top notch. Not comparable to a JUnitRule or Runner implementation. One can feel the hard work.   ----  The here provided  MockitoExtension  allows to mock/spy/validate like the well known Mockito-JUnitRule/Runner. This is still  work in progress   feel free to comment.  Usage:     Java @ExtendWith(MockitoExtension.class) class JUnit5Test {     @Mock   private Dependency mock      @Test   void checkMockCreation(){     when(mock.foo()).thenReturn( Hello JUnit5 )      mock.foo()      verify(mock).foo()    } }    
1221 ;  subprojects/junit-jupiter/src/test/java/org/mockitousage/StrictnessTest.java ; MockitoExtension for JUnit5  ; Fixes #445  Discussion: https://groups.google.com/forum/#!topic/mockito/R1L1aG2RgBQ  First of all  thanks to the JUnit5-Team (@sbrannen) for that great API! The implementation was straight forward and the docu is top notch. Not comparable to a JUnitRule or Runner implementation. One can feel the hard work.   ----  The here provided  MockitoExtension  allows to mock/spy/validate like the well known Mockito-JUnitRule/Runner. This is still  work in progress   feel free to comment.  Usage:     Java @ExtendWith(MockitoExtension.class) class JUnit5Test {     @Mock   private Dependency mock      @Test   void checkMockCreation(){     when(mock.foo()).thenReturn( Hello JUnit5 )      mock.foo()      verify(mock).foo()    } }    
1227 ;  src/main/java/org/mockito/NotExtensible.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/main/java/org/mockito/internal/configuration/plugins/DefaultMockitoPlugins.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/main/java/org/mockito/internal/creation/SuspendMethod.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/main/java/org/mockito/internal/invocation/DefaultInvocationFactory.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/main/java/org/mockito/internal/invocation/RealMethod.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/main/java/org/mockito/invocation/InvocationFactory.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/main/java/org/mockito/listeners/VerificationStartedEvent.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/main/java/org/mockito/listeners/VerificationStartedListener.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/main/java/org/mockito/plugins/MockitoPlugins.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/test/java/org/mockito/StaticMockingExperimentTest.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/test/java/org/mockito/internal/configuration/plugins/DefaultMockitoPluginsTest.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/test/java/org/mockito/internal/listeners/VerificationStartedNotifierTest.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/test/java/org/mockito/internal/util/MockSettingsTest.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/test/java/org/mockitousage/bugs/EnabledMockingInterfaceCloneMethodTest.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/test/java/org/mockitousage/plugins/MockitoPluginsTest.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1227 ;  src/test/java/org/mockitousage/verification/VerificationStartedListenerTest.java ; Update license plugin and add missing license headers ; The license plugin could be updated to later versions  as we dropped JDK6 on Travis. Moreover  quite some licenses were reported missing  so I ran  ./gradlew licenseFormatMain licenseFormatTest  to add them.
1228 ; src/main/java/org/mockito/CheckReturnValue.java ; Add @CheckReturnValue to stubbing/verification methods ; Introduce a new annotation  @CheckReturnValue  and add this to methods like  when  and  verify  such that static analysis can verify the value is actually used (http://errorprone.info/bugpattern/CheckReturnValue). This makes sure developers can get warnings on build-time instead of run-time (with our internal  validateState )  Fixes #1130 
1231 ; src/main/java/org/mockito/internal/debugging/InvocationsPrinter.java ; InvocationsPrinter string concatination ; Replace string concatination inside an append call with a chained  append  calls to make the code a tad easier to read  so the reader isn t left wondering why some of the concatinations are done with  append s and some with the  +  operator.
1238 ; src/test/java/org/mockitousage/bugs/GenericsMockitoAnnotationsTest.java ; Backport fixes release/2.x to master ; - Update licenses - Remove unused  buildSrc  - Remove old gradle files - Add some more tests - Fix coverage
1247 ; src/main/java/org/mockito/internal/exceptions/MockitoLimitations.java ; Remove several container classes and inline code ; Remove several classes that were containers for code that is easier to be inlined. They were only referenced once  or never at all. This makes it easier to reason about the code  while also maintaining less code and classes.  Closes #904 
1247 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Remove several container classes and inline code ; Remove several classes that were containers for code that is easier to be inlined. They were only referenced once  or never at all. This makes it easier to reason about the code  while also maintaining less code and classes.  Closes #904 
1247 ;  src/main/java/org/mockito/internal/junit/MismatchReportingTestListener.java ; Remove several container classes and inline code ; Remove several classes that were containers for code that is easier to be inlined. They were only referenced once  or never at all. This makes it easier to reason about the code  while also maintaining less code and classes.  Closes #904 
1247 ;  src/main/java/org/mockito/internal/junit/util/TestName.java ; Remove several container classes and inline code ; Remove several classes that were containers for code that is easier to be inlined. They were only referenced once  or never at all. This makes it easier to reason about the code  while also maintaining less code and classes.  Closes #904 
1247 ;  src/main/java/org/mockito/internal/matchers/text/ArrayIterator.java ; Remove several container classes and inline code ; Remove several classes that were containers for code that is easier to be inlined. They were only referenced once  or never at all. This makes it easier to reason about the code  while also maintaining less code and classes.  Closes #904 
1247 ;  src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java ; Remove several container classes and inline code ; Remove several classes that were containers for code that is easier to be inlined. They were only referenced once  or never at all. This makes it easier to reason about the code  while also maintaining less code and classes.  Closes #904 
1247 ;  src/main/java/org/mockito/internal/util/collections/Sets.java ; Remove several container classes and inline code ; Remove several classes that were containers for code that is easier to be inlined. They were only referenced once  or never at all. This makes it easier to reason about the code  while also maintaining less code and classes.  Closes #904 
1257 ; src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Fixes #1254 and #1256: improved check for self-invocation. ; Better checks for recursive calls and guards internally used JDK types.  Fixes #1254  Fixes #1256
1257 ;  src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java ; Fixes #1254 and #1256: improved check for self-invocation. ; Better checks for recursive calls and guards internally used JDK types.  Fixes #1254  Fixes #1256
1257 ;  subprojects/inline/src/test/java/org/mockitoinline/RecursionTest.java ; Fixes #1254 and #1256: improved check for self-invocation. ; Better checks for recursive calls and guards internally used JDK types.  Fixes #1254  Fixes #1256
1257 ;  subprojects/inline/src/test/java/org/mockitoinline/SuperCallTest.java ; Fixes #1254 and #1256: improved check for self-invocation. ; Better checks for recursive calls and guards internally used JDK types.  Fixes #1254  Fixes #1256
1258 ; src/main/java/org/mockito/Mockito.java ; Prevent class loading race condition ; Allow singleton locking in context with class loading races.  Fixes #1067
1258 ;  src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java ; Prevent class loading race condition ; Allow singleton locking in context with class loading races.  Fixes #1067
1268 ; src/main/java/org/mockito/Mockito.java ; Fixes #1262: update doc for Answers.CALLS_REAL_METHODS ; Update the documentation for the Answers.CALLS_REAL_METHODS according to #1262 and also included a note with recommendation not to use when().thenReturn() for partial mock.
1270 ; src/main/java/org/mockito/Mockito.java ; Cleaner code for Mockito users by better integration with static code checkers  more @CheckReturnValue ; Builds on #1130  #1228.
1270 ;  src/test/java/org/mockito/MockitoTest.java ; Cleaner code for Mockito users by better integration with static code checkers  more @CheckReturnValue ; Builds on #1130  #1228.
1270 ;  src/test/java/org/mockito/internal/InvalidStateDetectionTest.java ; Cleaner code for Mockito users by better integration with static code checkers  more @CheckReturnValue ; Builds on #1130  #1228.
1270 ;  src/test/java/org/mockito/internal/framework/DefaultMockitoFrameworkTest.java ; Cleaner code for Mockito users by better integration with static code checkers  more @CheckReturnValue ; Builds on #1130  #1228.
1270 ;  src/test/java/org/mockitousage/basicapi/MocksCreationTest.java ; Cleaner code for Mockito users by better integration with static code checkers  more @CheckReturnValue ; Builds on #1130  #1228.
1270 ;  src/test/java/org/mockitousage/basicapi/ResetTest.java ; Cleaner code for Mockito users by better integration with static code checkers  more @CheckReturnValue ; Builds on #1130  #1228.
1270 ;  src/test/java/org/mockitousage/constructor/CreatingMocksWithConstructorTest.java ; Cleaner code for Mockito users by better integration with static code checkers  more @CheckReturnValue ; Builds on #1130  #1228.
1270 ;  src/test/java/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java ; Cleaner code for Mockito users by better integration with static code checkers  more @CheckReturnValue ; Builds on #1130  #1228.
1270 ;  src/test/java/org/mockitousage/misuse/InvalidUsageTest.java ; Cleaner code for Mockito users by better integration with static code checkers  more @CheckReturnValue ; Builds on #1130  #1228.
1270 ;  src/test/java/org/mockitousage/packageprotected/MockingPackageProtectedTest.java ; Cleaner code for Mockito users by better integration with static code checkers  more @CheckReturnValue ; Builds on #1130  #1228.
1270 ;  src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java ; Cleaner code for Mockito users by better integration with static code checkers  more @CheckReturnValue ; Builds on #1130  #1228.
1270 ;  src/test/java/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java ; Cleaner code for Mockito users by better integration with static code checkers  more @CheckReturnValue ; Builds on #1130  #1228.
1270 ;  src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java ; Cleaner code for Mockito users by better integration with static code checkers  more @CheckReturnValue ; Builds on #1130  #1228.
1270 ;  src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java ; Cleaner code for Mockito users by better integration with static code checkers  more @CheckReturnValue ; Builds on #1130  #1228.
1272 ; src/main/java/org/mockito/Mockito.java ; Strictness configurable per mock / stubbing ; Fixes #792  ### Problem  Today we have strict stubs feature  a key enabler for cleaner tests and improved debuggability. Strict stubs don t work well with  common stubbing  pattern. They also don t like when we call stubbed methods with unexpected arguments - even though sometimes it is legit. For more  see #792   ### Solution     java @Test public void demo() {   //1.  lenient()  method on MockSettings interface:   Foo mock = Mockito.mock(Foo.class  withSettings().lenient())     //2.  lenient()  method on Mockito class:   Mockito.lenient().when(mock.foo(1)).thenReturn(1)    Mockito.lenient().doReturn(1).when(mock).foo(1)  }      For more  see #792  ### Public API changes  - New methods:    - Mockito#lenient()    - MockSettings#lenient()    - MockCreationSettings#isLenient()    - Stubbing#getStrictness()   - New interfaces:    - BaseStubber - extracted out from existing  Stubber  interface  so that we can reuse API with  LenientStubber     - LenientStubber - instance returned by  Mockito.lenient()  - Other changes:    - Made @org.mockito.NotExtensible annotation public so that we can use it in subpackages
1272 ;  src/main/java/org/mockito/exceptions/misusing/UnnecessaryStubbingException.java ; Strictness configurable per mock / stubbing ; Fixes #792  ### Problem  Today we have strict stubs feature  a key enabler for cleaner tests and improved debuggability. Strict stubs don t work well with  common stubbing  pattern. They also don t like when we call stubbed methods with unexpected arguments - even though sometimes it is legit. For more  see #792   ### Solution     java @Test public void demo() {   //1.  lenient()  method on MockSettings interface:   Foo mock = Mockito.mock(Foo.class  withSettings().lenient())     //2.  lenient()  method on Mockito class:   Mockito.lenient().when(mock.foo(1)).thenReturn(1)    Mockito.lenient().doReturn(1).when(mock).foo(1)  }      For more  see #792  ### Public API changes  - New methods:    - Mockito#lenient()    - MockSettings#lenient()    - MockCreationSettings#isLenient()    - Stubbing#getStrictness()   - New interfaces:    - BaseStubber - extracted out from existing  Stubber  interface  so that we can reuse API with  LenientStubber     - LenientStubber - instance returned by  Mockito.lenient()  - Other changes:    - Made @org.mockito.NotExtensible annotation public so that we can use it in subpackages
1272 ;  src/main/java/org/mockito/junit/MockitoJUnit.java ; Strictness configurable per mock / stubbing ; Fixes #792  ### Problem  Today we have strict stubs feature  a key enabler for cleaner tests and improved debuggability. Strict stubs don t work well with  common stubbing  pattern. They also don t like when we call stubbed methods with unexpected arguments - even though sometimes it is legit. For more  see #792   ### Solution     java @Test public void demo() {   //1.  lenient()  method on MockSettings interface:   Foo mock = Mockito.mock(Foo.class  withSettings().lenient())     //2.  lenient()  method on Mockito class:   Mockito.lenient().when(mock.foo(1)).thenReturn(1)    Mockito.lenient().doReturn(1).when(mock).foo(1)  }      For more  see #792  ### Public API changes  - New methods:    - Mockito#lenient()    - MockSettings#lenient()    - MockCreationSettings#isLenient()    - Stubbing#getStrictness()   - New interfaces:    - BaseStubber - extracted out from existing  Stubber  interface  so that we can reuse API with  LenientStubber     - LenientStubber - instance returned by  Mockito.lenient()  - Other changes:    - Made @org.mockito.NotExtensible annotation public so that we can use it in subpackages
1272 ;  src/main/java/org/mockito/quality/Strictness.java ; Strictness configurable per mock / stubbing ; Fixes #792  ### Problem  Today we have strict stubs feature  a key enabler for cleaner tests and improved debuggability. Strict stubs don t work well with  common stubbing  pattern. They also don t like when we call stubbed methods with unexpected arguments - even though sometimes it is legit. For more  see #792   ### Solution     java @Test public void demo() {   //1.  lenient()  method on MockSettings interface:   Foo mock = Mockito.mock(Foo.class  withSettings().lenient())     //2.  lenient()  method on Mockito class:   Mockito.lenient().when(mock.foo(1)).thenReturn(1)    Mockito.lenient().doReturn(1).when(mock).foo(1)  }      For more  see #792  ### Public API changes  - New methods:    - Mockito#lenient()    - MockSettings#lenient()    - MockCreationSettings#isLenient()    - Stubbing#getStrictness()   - New interfaces:    - BaseStubber - extracted out from existing  Stubber  interface  so that we can reuse API with  LenientStubber     - LenientStubber - instance returned by  Mockito.lenient()  - Other changes:    - Made @org.mockito.NotExtensible annotation public so that we can use it in subpackages
1280 ; src/main/java/org/mockito/quality/Strictness.java ; Update STRICT_STUBS documentation for verifyNoMoreInteractions ; Fixes #1086
1281 ; src/main/java/org/mockito/verification/VerificationWithTimeout.java ; fix VerificationWithTimout javadoc comment ; as opposed to VerificationAfterDelay  VerificationWithTimout doesn t support never()  > Hey   >  > Thanks for the contribution  this is awesome. > As you may have read  project members have somehow an opinionated view on what and how should be > Mockito  e.g. we don t want mockito to be a feature bloat. > There may be a thorough review  with feedback -> code change loop. >  > Which branch :  > - On mockito 2.x  make your pull request target  release/2.x  > - On next mockito version make your pull request target  master  > > _This block can be removed_ > _Something wrong in the template fix it here  .github/PULL_REQUEST_TEMPLATE.md    check list   - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [ ] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [ ] Avoid other runtime dependencies  - [ ] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [ ] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1282 ; src/main/java/org/mockito/internal/exceptions/Reporter.java ; Extra test case  javadoc update ; Let s keep adding test cases to ensure great coverage of the entire behavior.  Also updated documentation so that we consistently use the  lenient  vocabulary.  Stumbled upon it when working on #1272    
1282 ;  src/main/java/org/mockito/junit/MockitoJUnitRunner.java ; Extra test case  javadoc update ; Let s keep adding test cases to ensure great coverage of the entire behavior.  Also updated documentation so that we consistently use the  lenient  vocabulary.  Stumbled upon it when working on #1272    
1282 ;  src/test/java/org/mockitousage/junitrule/StrictJUnitRuleTest.java ; Extra test case  javadoc update ; Let s keep adding test cases to ensure great coverage of the entire behavior.  Also updated documentation so that we consistently use the  lenient  vocabulary.  Stumbled upon it when working on #1272    
1282 ;  src/test/java/org/mockitousage/junitrunner/UnusedStubsExceptionMessageTest.java ; Extra test case  javadoc update ; Let s keep adding test cases to ensure great coverage of the entire behavior.  Also updated documentation so that we consistently use the  lenient  vocabulary.  Stumbled upon it when working on #1272    
1301 ;  src/main/java/org/mockito/internal/invocation/DefaultInvocationFactory.java ; Extend MockitoSession(Builder) API to enable usage by testing frameworks ; The first commit in this PR fixes #1232. In the additional commits  I ve taken the liberty to implement my proposals from https://github.com/mockito/mockito/issues/445#issuecomment-358407562:  - Add  MockitoSessionBuilder.name(String)  to pass a name from the testing framework to the  MockitoSession  - Add  MockitoSessionBuilder.logger(MockitoSessionLogger)  to customize the logger used for hints/warnings produced when finishing mocking (useful for testing and to connect reporting capabilities provided by testing frameworks such as JUnit Jupiter) - Add  MockitoSession.finishMocking(Throwable)  to avoid potentially confusing warnings for failing tests - Add  MockitoSession.setStrictness(Strictness)  to change the strictness of the current session (there were two test cases requiring that)  Each of these changes is in a separate commit. Thus  it should be relatively easy to take only those changes that you think good  or just the first one to fix #1232.  To showcase that this new API is sufficient to implement an extension of a testing framework  I ve changed the  JUnitRule  implementation to use it.
1301 ;  src/main/java/org/mockito/internal/invocation/RealMethod.java ; Extend MockitoSession(Builder) API to enable usage by testing frameworks ; The first commit in this PR fixes #1232. In the additional commits  I ve taken the liberty to implement my proposals from https://github.com/mockito/mockito/issues/445#issuecomment-358407562:  - Add  MockitoSessionBuilder.name(String)  to pass a name from the testing framework to the  MockitoSession  - Add  MockitoSessionBuilder.logger(MockitoSessionLogger)  to customize the logger used for hints/warnings produced when finishing mocking (useful for testing and to connect reporting capabilities provided by testing frameworks such as JUnit Jupiter) - Add  MockitoSession.finishMocking(Throwable)  to avoid potentially confusing warnings for failing tests - Add  MockitoSession.setStrictness(Strictness)  to change the strictness of the current session (there were two test cases requiring that)  Each of these changes is in a separate commit. Thus  it should be relatively easy to take only those changes that you think good  or just the first one to fix #1232.  To showcase that this new API is sufficient to implement an extension of a testing framework  I ve changed the  JUnitRule  implementation to use it.
1301 ;  src/main/java/org/mockito/invocation/InvocationFactory.java ; Extend MockitoSession(Builder) API to enable usage by testing frameworks ; The first commit in this PR fixes #1232. In the additional commits  I ve taken the liberty to implement my proposals from https://github.com/mockito/mockito/issues/445#issuecomment-358407562:  - Add  MockitoSessionBuilder.name(String)  to pass a name from the testing framework to the  MockitoSession  - Add  MockitoSessionBuilder.logger(MockitoSessionLogger)  to customize the logger used for hints/warnings produced when finishing mocking (useful for testing and to connect reporting capabilities provided by testing frameworks such as JUnit Jupiter) - Add  MockitoSession.finishMocking(Throwable)  to avoid potentially confusing warnings for failing tests - Add  MockitoSession.setStrictness(Strictness)  to change the strictness of the current session (there were two test cases requiring that)  Each of these changes is in a separate commit. Thus  it should be relatively easy to take only those changes that you think good  or just the first one to fix #1232.  To showcase that this new API is sufficient to implement an extension of a testing framework  I ve changed the  JUnitRule  implementation to use it.
1301 ;  src/test/java/org/mockito/InvocationFactoryTest.java ; Extend MockitoSession(Builder) API to enable usage by testing frameworks ; The first commit in this PR fixes #1232. In the additional commits  I ve taken the liberty to implement my proposals from https://github.com/mockito/mockito/issues/445#issuecomment-358407562:  - Add  MockitoSessionBuilder.name(String)  to pass a name from the testing framework to the  MockitoSession  - Add  MockitoSessionBuilder.logger(MockitoSessionLogger)  to customize the logger used for hints/warnings produced when finishing mocking (useful for testing and to connect reporting capabilities provided by testing frameworks such as JUnit Jupiter) - Add  MockitoSession.finishMocking(Throwable)  to avoid potentially confusing warnings for failing tests - Add  MockitoSession.setStrictness(Strictness)  to change the strictness of the current session (there were two test cases requiring that)  Each of these changes is in a separate commit. Thus  it should be relatively easy to take only those changes that you think good  or just the first one to fix #1232.  To showcase that this new API is sufficient to implement an extension of a testing framework  I ve changed the  JUnitRule  implementation to use it.
1301 ;  src/test/java/org/mockito/StaticMockingExperimentTest.java ; Extend MockitoSession(Builder) API to enable usage by testing frameworks ; The first commit in this PR fixes #1232. In the additional commits  I ve taken the liberty to implement my proposals from https://github.com/mockito/mockito/issues/445#issuecomment-358407562:  - Add  MockitoSessionBuilder.name(String)  to pass a name from the testing framework to the  MockitoSession  - Add  MockitoSessionBuilder.logger(MockitoSessionLogger)  to customize the logger used for hints/warnings produced when finishing mocking (useful for testing and to connect reporting capabilities provided by testing frameworks such as JUnit Jupiter) - Add  MockitoSession.finishMocking(Throwable)  to avoid potentially confusing warnings for failing tests - Add  MockitoSession.setStrictness(Strictness)  to change the strictness of the current session (there were two test cases requiring that)  Each of these changes is in a separate commit. Thus  it should be relatively easy to take only those changes that you think good  or just the first one to fix #1232.  To showcase that this new API is sufficient to implement an extension of a testing framework  I ve changed the  JUnitRule  implementation to use it.
1307 ; src/test/java/org/mockito/InvocationFactoryTest.java ; Update public API of InvocationFactory needed for Android static mocking ; Fixes #1306  A real method might throw a Throwable  but the invocations produced by InvocationFactory call the real method via a Callable that can only throw a Exception.  Hence add a new method to InvocationFactory that allows to create invocations with a RealMethodBehavior == a Callable that throws a Throwable.
1310 ; src/main/java/org/mockito/internal/handler/MockHandlerImpl.java ; Ensure isolation of stubbings ; ### Bugfix compatibility  For certain corner cases  this bugfix may be incompatible. We believe that the exposure is minimal (corner cases only  possibly incorrect tests)  and the bugfix important. If your test fails after upgrading to Mockito version that contains this fix  please scrutinize the test - it is very likely that the test is incorrect. We apologize for any compatibility problems arising from this change. It is a hard decision to make when a bugfix changes the behavior in a way it may not be compatible with every Mockito test in the world.  ### Problem  When stubbing with answers that call different mocked methods:    java when(mock.foo()).thenAnswer(() -> { otherMock.bar() }     we need to ensure that    mock.foo()    and    otherMock.bar()    don t interfere. Prior to this bugfix  this scenario resulted in various problems like: stack overflow error  unexpected stubbings declared on different mock  unexpected invalid return type errors.  For more details  see #1279  ### Solution  The solution is based on great PR #1296 by @r-smirnov. **Huge thanks** to @r-smirnov for reporting the problem diligently  then digging into the bowels of Mockito to find a clean solution  providing excellent test cases that demonstrate the problem. When I initially saw the issue report  I thought that it s not fixable and we would close it as  documented Mockito syntax caveat . Thank you @r-smirnov for persistence and getting this fixed!
1319 ; src/test/java/org/mockito/internal/invocation/InvocationsFinderTest.java ; Fixes #1314 : Include all the invocation in mock verification error message ; Have changes the verify error message to include all the invocation instead of including just one undesired invocation. Previously we have message like:     Wanted 1 time: -> at ... But was 2 times. Undesired invocation: -> at ...     This PR changes it to      Wanted 1 time: -> at ... But was 2 times: -> at ... -> at ...     To make the error message consistent the similar changes was made for too little invocations case. The message:     Wanted 3 times: -> at ... But was 2 times: -> at ...     changed to:     Wanted 3 times: -> at ... But was 2 times: -> at ... -> at ...    
1320 ; src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodInterceptor.java ; Avoid bytebuddy import Issue to enable repackaging without bytebuddy ; This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112
1320 ;  src/main/java/org/mockito/internal/invocation/DefaultInvocationFactory.java ; Avoid bytebuddy import Issue to enable repackaging without bytebuddy ; This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112
1320 ;  src/main/java/org/mockito/internal/invocation/InterceptedInvocation.java ; Avoid bytebuddy import Issue to enable repackaging without bytebuddy ; This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112
1320 ;  src/test/java/org/mockito/internal/invocation/InvocationBuilder.java ; Avoid bytebuddy import Issue to enable repackaging without bytebuddy ; This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112
1320 ;  src/test/java/org/mockitoutil/TestBase.java ; Avoid bytebuddy import Issue to enable repackaging without bytebuddy ; This allows libs that use alternate mockmakers do cleanly exclude the bytebuddy subdirectory.  Test: grep -r -e  import org\.mockito\.internal\.creation\.bytebuddy\.[^\.]*$  src/main does not return anything  Offers workaround for #1112
1324 ; src/test/java/org/mockitousage/bugs/FillInStackTraceScenariosTest.java ; Improved stubbing internals and test coverage ; Some improvements in exception-stubbing code:  - Clarify intentions in BaseStubbing:   - Replace an obsolete TODO with a clarifying comment and add some tests covering related test cases.   - Extract the code aborting the ongoing stubbing in a separate method that always throws. Use return  abortNullExceptionType  so that static-analysis tools (e.g.  IDEA) yield no false-positives.  - Clarify that ThrowsException always returns the _same_ throwable. The previous  #answer  implementation might give an illusion that  Throwable#fillInStackTrace  produces a new throwable  but that is not correct — it always returns  this . - Also  replace a possible NPE with a descriptive IllegalStateException.
1327 ; src/main/java/org/mockito/internal/debugging/LocationImpl.java ; Fixes #1326 : Reduce the allocation rate for the typical use of Locat… ; …ionImpl  A trivial one  but should be very useful as I noticed this class being instantiated quite a lot.
1339 ; src/test/java/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java ; Enable errorprone build ; - fix up issues found - placate error prone warning where we know we do something funky - Ignore two tests as it is not immediately clear what is broken   - org.mockitousage.bugs.varargs.VarargsNotPlayingWithAnyObjectTest#shouldNotAllowUsingAnyObjectForVarArgs   - org.mockito.internal.util.PrimitivesTest#should_check_that_value_type_is_assignable_to_wrapper_reference  NOTE: Please carefully review the changes made to the code. I fixed them up as good as I could but a real mockito expert need to verify them.
1349 ; subprojects/junit-jupiter/src/main/java/org/mockito/junit/jupiter/MockitoExtension.java ; Fix #1346 - Different mocks are used for @Mock and @InjectMock in the same test class with JUnit 5 extension ; Fix #1346 - fix  MockitoExtension  which has init mocks with two identical test instances which cause the mock to be initialized and injected two times
1349 ;  subprojects/junit-jupiter/src/test/java/org/mockitousage/JunitJupiterTest.java ; Fix #1346 - Different mocks are used for @Mock and @InjectMock in the same test class with JUnit 5 extension ; Fix #1346 - fix  MockitoExtension  which has init mocks with two identical test instances which cause the mock to be initialized and injected two times
1350 ;  src/main/java/org/mockito/CheckReturnValue.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/MockSettings.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/Mockito.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/exceptions/misusing/PotentialStubbingProblem.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/exceptions/misusing/UnnecessaryStubbingException.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/MockitoCore.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/creation/MockSettingsImpl.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/creation/settings/CreationSettings.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/handler/MockHandlerImpl.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/junit/DefaultStubbingLookupListener.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/junit/UnusedStubbings.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/junit/UnusedStubbingsFinder.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/listeners/StubbingLookupListener.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/stubbing/DefaultLenientStubber.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/stubbing/DoAnswerStyleStubbing.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/stubbing/StrictnessSelector.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/stubbing/StubbedInvocationMatcher.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/stubbing/UnusedStubbingReporting.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/internal/util/DefaultMockingDetails.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/junit/MockitoJUnit.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/junit/MockitoRule.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/mock/MockCreationSettings.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/quality/MockitoHint.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/quality/Strictness.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/stubbing/BaseStubber.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/stubbing/LenientStubber.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/stubbing/Stubber.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/main/java/org/mockito/stubbing/Stubbing.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/test/java/org/mockito/internal/junit/UnusedStubbingsTest.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/test/java/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/test/java/org/mockito/internal/stubbing/InvocationContainerImplTest.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/test/java/org/mockitousage/internal/junit/UnusedStubbingsFinderTest.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/test/java/org/mockitousage/strictness/StrictnessPerMockTest.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/test/java/org/mockitousage/strictness/StrictnessPerStubbingTest.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/test/java/org/mockitousage/strictness/StrictnessPerStubbingWithRunnerTest.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/test/java/org/mockitousage/strictness/StrictnessWhenRuleStrictnessIsUpdatedTest.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/test/java/org/mockitousage/strictness/StrictnessWithRulesTest.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1350 ;  src/test/java/org/mockitoutil/TestBase.java ; Support local parameters in test methods with JUnit Jupiter ; Note that this implementation differs from the prototype implementation of the JUnitTeam (https://github.com/junit-team/junit5-samples/blob/7bf40178345d5ca837579c8ddb8c025401a98788/junit5-mockito-extension/src/main/java/com/example/mockito/MockitoExtension.java#L41-L73). Instead  it will do not do any parameter resolution between test methods.  Fixes #1348 
1355 ; src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; Use java.lang.MethodHandles.Lookup::defineClass  ; Use java.lang.MethodHandles.Lookup::defineClass if this mechanism is available on the current JVM. This might not work when interoperating with foreign modules  if those modules do not open and export their types  most prominently  the Java core modules where there are introduced issues with serialization.  This introduces a change in behavior for Mockito when using Java 9+. Unfortunately  I think that this is necessary for Mockito to continue to function after introduction of the JPMS. For now  it seems like this limitation only affects working with serializability in combination with platform types what is not too bad but there is a chance that we will discover issues once this new mechanism is picked up by the community.
1355 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassInjectionLoader.java ; Use java.lang.MethodHandles.Lookup::defineClass  ; Use java.lang.MethodHandles.Lookup::defineClass if this mechanism is available on the current JVM. This might not work when interoperating with foreign modules  if those modules do not open and export their types  most prominently  the Java core modules where there are introduced issues with serialization.  This introduces a change in behavior for Mockito when using Java 9+. Unfortunately  I think that this is necessary for Mockito to continue to function after introduction of the JPMS. For now  it seems like this limitation only affects working with serializability in combination with platform types what is not too bad but there is a chance that we will discover issues once this new mechanism is picked up by the community.
1355 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassLoader.java ; Use java.lang.MethodHandles.Lookup::defineClass  ; Use java.lang.MethodHandles.Lookup::defineClass if this mechanism is available on the current JVM. This might not work when interoperating with foreign modules  if those modules do not open and export their types  most prominently  the Java core modules where there are introduced issues with serialization.  This introduces a change in behavior for Mockito when using Java 9+. Unfortunately  I think that this is necessary for Mockito to continue to function after introduction of the JPMS. For now  it seems like this limitation only affects working with serializability in combination with platform types what is not too bad but there is a chance that we will discover issues once this new mechanism is picked up by the community.
1355 ;  subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidLoadingStrategy.java ; Use java.lang.MethodHandles.Lookup::defineClass  ; Use java.lang.MethodHandles.Lookup::defineClass if this mechanism is available on the current JVM. This might not work when interoperating with foreign modules  if those modules do not open and export their types  most prominently  the Java core modules where there are introduced issues with serialization.  This introduces a change in behavior for Mockito when using Java 9+. Unfortunately  I think that this is necessary for Mockito to continue to function after introduction of the JPMS. For now  it seems like this limitation only affects working with serializability in combination with platform types what is not too bad but there is a chance that we will discover issues once this new mechanism is picked up by the community.
1368 ; src/main/java/org/mockito/internal/creation/bytebuddy/SubclassInjectionLoader.java ; Resolve the correct protection domain for the codegen package when using reflection. ; Fixes #1367.
1369 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Performance improvements ; Use less expensive method graph compiler for inline mock maker. Update Byte Buddy for general performance improvements and bug fixes. Fixes #1364. Also fixes javadoc warning.
1369 ;  subprojects/junit-jupiter/src/main/java/org/mockito/junit/jupiter/MockitoExtension.java ; Performance improvements ; Use less expensive method graph compiler for inline mock maker. Update Byte Buddy for general performance improvements and bug fixes. Fixes #1364. Also fixes javadoc warning.
1377 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Update Byte Buddy and cache some expensive values ; This avoids the reallocation of certain objects that are expensive to compute. Also  Byte Buddy is updated.
1377 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; Update Byte Buddy and cache some expensive values ; This avoids the reallocation of certain objects that are expensive to compute. Also  Byte Buddy is updated.
1378 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Avoid circularity: avoid endless loop during mock creation ; If certain types a type for the first time during instrumentation while our mocking engine relies on the same types  this can cause a circularity as checking if an instance is a mock requires instances of the latter types what again returns to the latter mock checking routine what causes an endless loop. (Described in comment.) Fixes #1240.  It is a bit difficult to reproduce this issue in our tests. It mainly happens with classes generated by Kotlin or Scala and requires the inline mock maker and a JDK 9 or older. If we want to add such a test  we can copy the test from https://github.com/guenhter/mockito-final-class-kotlin-problem
1387 ; src/test/java/org/mockitousage/verification/AtMostXVerificationTest.java ; Fixes #1386: Adding atMostOnce()  rename ThreadVerifiesContinuoslyInteractingMockTest and one TODO ; Hi   I would like to make a quick contribution on this project.  I add atMostOnce()  it seem s not to be a big feature. I just want to highlight the fact you have the function atLeastOnce() but nothing for the atMostOnce case.  I rename the testClass ThreadVerifiesContinuoslyInteractingMockTest on ThreadVerifiesContinuouslyInteractingMockTest and the TODO on toString() from HamcrestArgumentMatcher.
1391 ;  subprojects/junitJupiterExtensionTest/src/test/java/org/mockitousage/NoExtendsTest.java ; Make MockitoExtension constructor public ; It is possible to register an extension for automatic use using Java s  ServiceLoader  mechanism.  https://junit.org/junit5/docs/current/user-guide/#extensions-registration-automatic  Some projects may want to provide their own  META-INF  file to avoid tediously adding  MockitoExtension  to tests since it is very common. However   ServiceLoader  requires the class to have a no-args *public* constructor  so the current extension cannot be used with the  ServiceLoader  mechanism.  Fixes #1390  check list   - [X] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [X] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [X] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [X] Avoid other runtime dependencies  - [X] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [X] The pull request follows coding style  - [X] Mention  Fixes #<issue number>  in the description _if relevant_  - [X] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1402 ; src/main/java/org/mockito/internal/hamcrest/HamcrestArgumentMatcher.java ; Fixes #1401 : Correctly handle VarargsMatcher check for HamcrestMatchers ; nan
1402 ;  src/main/java/org/mockito/internal/invocation/MatcherApplicationStrategy.java ; Fixes #1401 : Correctly handle VarargsMatcher check for HamcrestMatchers ; nan
1402 ;  src/test/java/org/mockito/internal/invocation/MatcherApplicationStrategyTest.java ; Fixes #1401 : Correctly handle VarargsMatcher check for HamcrestMatchers ; nan
1404 ; src/main/java/org/mockito/Mockito.java ; Fix wrong artifact name in javadoc  and link to proper javadoc page ; ## motivation  1. Current javadoc in  Mockito.java  uses wrong artifact name  org.mockito.junit-jupiter   but it should be [org.mockito:mockito-junit-jupiter](https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter). To avoid user s confusion  fix it with correct name. 2. The  MockitoExtension  isn t contained in  mockito-core   so we cannot use hyper link generated by  {@link ...} . Instead  we can use  <a>  tag to guide users to proper javadoc page.  ## check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_  Thanks for your great product that really helps our daily hacking :)
1407 ; src/main/java/org/mockito/Mockito.java ; removing redundent sentence ; There was a redundant sentence in the documentation (it was repeated 2 lines below it).
1425 ; src/main/java/org/mockito/Mockito.java ; Updated documentation of timeout() and after() ; While working on @ChristianSchwarz s PR  I found the current documentation confusing.  - made the documentation clear  especially about the differences between timeout() and after() - removed mentions of internal API (new Timeout() constructor)  Fixes #91
1426 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; mockito on Java 11-ea+21 ; Fixes #1419   Requires  -Dnet.bytebuddy.experimental=true  system property to be set to let bytebuddy use asm API version  ASM7_EXPERMIENTAL  and use the same one in  InlineBytecodeGenerator .
1429 ; src/test/java/org/mockitousage/verification/DelayedExecution.java ; Updated test coverage for async verification ; Updated tests with after() verification mode - Some existing tests for the feature did not work due to flaws in ReplyRule. Those tests (now ignored) consistently failed but succeeded only when used with reply rule. - Some existing tests had weak assertions that did not fully cover the feature. - Suggested simpler and cleaner way of implementing delayed execution via new  AsyncTesting  class  instead of  DelayedExecution . Dropping the reply rule may introduce instabilities to the CI builds  let s observe and measure before making an action.  Although we are considering deprecating  after()   we need good coverage for an existing feature even if it will be removed in the long run.
1429 ;  src/test/java/org/mockitousage/verification/VerificationAfterDelayTest.java ; Updated test coverage for async verification ; Updated tests with after() verification mode - Some existing tests for the feature did not work due to flaws in ReplyRule. Those tests (now ignored) consistently failed but succeeded only when used with reply rule. - Some existing tests had weak assertions that did not fully cover the feature. - Suggested simpler and cleaner way of implementing delayed execution via new  AsyncTesting  class  instead of  DelayedExecution . Dropping the reply rule may introduce instabilities to the CI builds  let s observe and measure before making an action.  Although we are considering deprecating  after()   we need good coverage for an existing feature even if it will be removed in the long run.
1429 ;  src/test/java/org/mockitousage/verification/VerificationWithAfterAndCaptorTest.java ; Updated test coverage for async verification ; Updated tests with after() verification mode - Some existing tests for the feature did not work due to flaws in ReplyRule. Those tests (now ignored) consistently failed but succeeded only when used with reply rule. - Some existing tests had weak assertions that did not fully cover the feature. - Suggested simpler and cleaner way of implementing delayed execution via new  AsyncTesting  class  instead of  DelayedExecution . Dropping the reply rule may introduce instabilities to the CI builds  let s observe and measure before making an action.  Although we are considering deprecating  after()   we need good coverage for an existing feature even if it will be removed in the long run.
1429 ;  src/test/java/org/mockitousage/verification/VerificationWithAfterTest.java ; Updated test coverage for async verification ; Updated tests with after() verification mode - Some existing tests for the feature did not work due to flaws in ReplyRule. Those tests (now ignored) consistently failed but succeeded only when used with reply rule. - Some existing tests had weak assertions that did not fully cover the feature. - Suggested simpler and cleaner way of implementing delayed execution via new  AsyncTesting  class  instead of  DelayedExecution . Dropping the reply rule may introduce instabilities to the CI builds  let s observe and measure before making an action.  Although we are considering deprecating  after()   we need good coverage for an existing feature even if it will be removed in the long run.
1429 ;  src/test/java/org/mockitoutil/async/AsyncTesting.java ; Updated test coverage for async verification ; Updated tests with after() verification mode - Some existing tests for the feature did not work due to flaws in ReplyRule. Those tests (now ignored) consistently failed but succeeded only when used with reply rule. - Some existing tests had weak assertions that did not fully cover the feature. - Suggested simpler and cleaner way of implementing delayed execution via new  AsyncTesting  class  instead of  DelayedExecution . Dropping the reply rule may introduce instabilities to the CI builds  let s observe and measure before making an action.  Although we are considering deprecating  after()   we need good coverage for an existing feature even if it will be removed in the long run.
1429 ;  src/test/java/org/mockitoutil/async/AsyncTestingTest.java ; Updated test coverage for async verification ; Updated tests with after() verification mode - Some existing tests for the feature did not work due to flaws in ReplyRule. Those tests (now ignored) consistently failed but succeeded only when used with reply rule. - Some existing tests had weak assertions that did not fully cover the feature. - Suggested simpler and cleaner way of implementing delayed execution via new  AsyncTesting  class  instead of  DelayedExecution . Dropping the reply rule may introduce instabilities to the CI builds  let s observe and measure before making an action.  Although we are considering deprecating  after()   we need good coverage for an existing feature even if it will be removed in the long run.
1430 ; src/main/java/org/mockito/internal/configuration/plugins/DefaultMockitoPlugins.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/internal/configuration/plugins/Plugins.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/internal/framework/DefaultMockitoSession.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/internal/junit/JUnitRule.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/internal/junit/MismatchReportingTestListener.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/internal/junit/StubbingArgMismatches.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/internal/junit/UniversalTestListener.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/internal/junit/UnusedStubbings.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/internal/runners/RunnerFactory.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/internal/session/DefaultMockitoSessionBuilder.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/internal/session/MockitoLoggerAdapter.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/internal/session/MockitoSessionLoggerAdapter.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/internal/util/ConsoleMockitoLogger.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/internal/util/MockitoLogger.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/junit/MockitoJUnit.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/plugins/MockitoLogger.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/main/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/test/java/org/mockito/internal/configuration/plugins/DefaultMockitoPluginsTest.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/test/java/org/mockito/internal/util/SimpleMockitoLogger.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/test/java/org/mockitousage/junitrule/LenientJUnitRuleTest.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  src/test/java/org/mockitousage/plugins/MockitoPluginsTest.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidByteBuddyMockMaker.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  subprojects/extTest/src/test/java/org/mockitousage/plugins/logger/MockitoLoggerTest.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  subprojects/extTest/src/test/java/org/mockitousage/plugins/logger/MyMockitoLogger.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/PluginSwitchTest.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1430 ;  subprojects/junit-jupiter/src/main/java/org/mockito/junit/jupiter/MockitoExtension.java ; Allow mockito-logger to be configurable as Mockito extension ; Hi  we have many of legacy tests that do over-mocking code base - lots of unused mocking there (we are cleaning it slowly). We have user  @MockitoSettings(strictness = Strictness.WARN)  switch to log and not fail in this situactions. By default all logs are printed out to console using  System.out.println  and this make us trouble because we have  silent  profile at CI server which is configured to silent Loggers / as you expect sith  .println  we are not trully silent in this case :] Thats why I have created this PR proposal and want to know what do you think. Thx  Ivos
1433 ; src/main/java/org/mockito/internal/matchers/Any.java ; Fixed Travis build ; We don t need private constructor on an  internal  class. Internal classes can be changed at any time based on our compatibility policy.
1434 ; src/main/java/org/mockito/Mockito.java ; Javadoc: Update broken code example ; It updates a broken code example in Javadoc. I just copied the example from [Answer.java](https://github.com/mockito/mockito/blob/release/2.x/src/main/java/org/mockito/stubbing/Answer.java#L16) to [Mockito.java](https://github.com/mockito/mockito/blob/release/2.x/src/main/java/org/mockito/Mockito.java#L525).
1436 ; src/main/java/org/mockito/Mockito.java ; Javadoc: Update code example (ignoreStubs) ; It updates the code example of  ignoreStubs  in Javadoc. - Correct wrong variable : From  mock  to  list  - Change call sequence : The existing one doesn t clearly describe the use of  ignoreStubs  with  inOrder .
1439 ; src/main/java/org/mockito/Mockito.java ; Javadoc: #1438 Update ignoreStubs to include strictness ; It updates  ignoreStubs()  docs to include  Strictness  information. (#1438)
1440 ; src/main/java/org/mockito/Mockito.java ; Javadoc: Correct wrong links and code examples ; Some wrong links and code examples are corrected.
1452 ; src/test/java/org/mockitousage/verification/VerificationWithAfterTest.java ; Comprehensive test coverage for timeout() and after() ; New coverage enables us to test @ChristianSchwarz s  within . I want to see all those tests working when we replace the internal implementation with  within .
1458 ; src/main/java/org/mockito/internal/listeners/StubbingLookupNotifier.java ; Add StubbingLookupEvent and Notifier (a part of #793) ; This PR adds  StubbingLookupEvent  and  StubbingLookupNotifier  as a part of the issue #793.
1463 ; src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java ; Prevent stubOnly() from being verified (#1460) ; This PR adds assertion to verification methods to prevent stub-only mock from being verified (#1460) -  verify()  -  verifyNoMoreInteractions()  -  inOrder() 
1465 ;  subprojects/testng/src/main/java/org/mockito/testng/MockitoAfterTestNGMethod.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/main/java/org/mockito/testng/MockitoBeforeTestNGMethod.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/main/java/org/mockito/testng/MockitoTestNGListener.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/AnnotatedFieldsShouldBeInitializedByMockitoTestNGListenerTest.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/CaptorAnnotatedFieldShouldBeClearedTest.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/ConfigurationMethodTest.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/DontResetMocksIfNoListenerTest.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/EnsureMocksAreInitializedBeforeBeforeClassMethodTest.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/InitializeChildTestWhenParentHasListenerTest.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/MockFieldsShouldBeResetBetweenTestMethodsTest.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/ParentTest.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/ResetMocksInParentTestClassTooTest.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/SomeType.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/TestWithoutListenerShouldNotInitializeAnnotatedFieldsTest.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/failuretests/FailingOnPurposeBecauseIncorrectAnnotationUsage.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/failuretests/FailingOnPurposeBecauseIncorrectStubbingSyntax.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/failuretests/FailingOnPurposeBecauseWrongStubbingSyntaxInConfigurationMethod.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/failuretests/TestNGShouldFailWhenMockitoListenerFailsTest.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1465 ;  subprojects/testng/src/test/java/org/mockitousage/testng/utils/FailureRecordingListener.java ; Moved TestNG from the main repo into separate mockito/mockito-testng repo ; New home for TestNG integration is: https://github.com/mockito/mockito-testng  For details and discussion  see: https://github.com/mockito/mockito/issues/962
1474 ; src/main/java/org/mockito/internal/verification/VerificationWrapperInOrderWrapper.java ; Comprehensive coverage for timeout + inOrder ; Preparing for merging major overhaul in the implementation of  timeout  and  after  APIs (#936).  We need coverage before we completely replace the existing implementation.
1474 ;  src/test/java/org/mockitousage/verification/VerificationInOrderWithTimeoutTest.java ; Comprehensive coverage for timeout + inOrder ; Preparing for merging major overhaul in the implementation of  timeout  and  after  APIs (#936).  We need coverage before we completely replace the existing implementation.
1474 ;  src/test/java/org/mockitoutil/async/AsyncTesting.java ; Comprehensive coverage for timeout + inOrder ; Preparing for merging major overhaul in the implementation of  timeout  and  after  APIs (#936).  We need coverage before we completely replace the existing implementation.
1475 ; src/main/java/org/mockito/internal/junit/UniversalTestListener.java ; MockitoSession API does not clean up listener when initMocks fails ; When initMocks() fails we did not clean up the session listener. This led to a confusing error message on the next attempt to create a session (next test method run). I stumbled upon this problem when attempting to configure TestNG to use strict stubbing (https://github.com/mockito/mockito-testng/issues/1).  In order to fix this cleanly I need to keep the existing functionality that protects the user from forgetting to use  finishMocking() . Hence  I still need to throw an exception if the user adds the same listener multiple times. However  in the event that the listener is dirty  I clean it up automatically instead of failing.
1475 ;  src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; MockitoSession API does not clean up listener when initMocks fails ; When initMocks() fails we did not clean up the session listener. This led to a confusing error message on the next attempt to create a session (next test method run). I stumbled upon this problem when attempting to configure TestNG to use strict stubbing (https://github.com/mockito/mockito-testng/issues/1).  In order to fix this cleanly I need to keep the existing functionality that protects the user from forgetting to use  finishMocking() . Hence  I still need to throw an exception if the user adds the same listener multiple times. However  in the event that the listener is dirty  I clean it up automatically instead of failing.
1484 ; src/main/java/org/mockito/ArgumentCaptor.java ; Fix some typos ; don t -> doesn t
1521 ; src/main/java/org/mockito/Mockito.java ; Minor improvements in the Javadoc of Mockito.java ; This PR fixes a type and adds a reference to the JUnit5 extension.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1523 ; src/main/java/org/mockito/Mock.java ; Added  lenient  annotation toggle ; This way we can conveniently configure an existing  lenient  setting via an annotation. See the unit test that describes the feature.     Java @Mock(lenient = true) SomeClass mock     
1526 ; src/main/java/org/mockito/internal/exceptions/Reporter.java ; typo fix in UnfinishedStubbingException ; A very simple typo fix.    check list   - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [ ] Avoid other runtime dependencies  - [ ] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [ ] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1536 ; src/test/java/org/mockito/internal/stubbing/defaultanswers/foopackage/ForwardsInvocationsTest.java ; Allow delegating to non-public methods for AdditionalAnswers#delegatesTo ; Fixes an issue where doing  delegatesTo(new AnonymousClass() {})  would cause an IllegalAccessException  and other access-related issues.  (See https://github.com/mockito/mockito/pull/1535 - Sorry  wasn t aware that you can t change the PR source branch.)
1536 ;  src/test/java/org/mockitousage/stubbing/StubbingWithDelegateTest.java ; Allow delegating to non-public methods for AdditionalAnswers#delegatesTo ; Fixes an issue where doing  delegatesTo(new AnonymousClass() {})  would cause an IllegalAccessException  and other access-related issues.  (See https://github.com/mockito/mockito/pull/1535 - Sorry  wasn t aware that you can t change the PR source branch.)
1539 ; src/main/java/org/mockito/invocation/Location.java ; Improved sensitivity of potential stubbing problem ; This change improves the developer experience with strict stubbing. It is now possible to stub the same method with different argument multiple times in the test. Previously  we threw PotentialStubbingProblem exception in this scenario:     java when(mock.foo(1)).thenReturn(1)  when(mock.foo(2)).thenReturn(2)  // <- no longer throws PotentialStubbingProblem (false negative)      This reduces the number of false negatives reported by strict stubbing.  Fixes #1522  #1496  partially #769  #720
1543 ; src/main/java/org/mockito/MockSettings.java ; Exposed new API - StubbingLookupListener ; Exposed new public API based on an internal API - StubbingLookupListener - #793.  As a rule of a thumb we try to expose the internal APIs that the top level features are built upon. Since StubbingLookupListener is useful for us to implement strictness  let s get the former exposed as public API. This way we build stronger framework with the concept of  onion skin API .  This PR replaces #1466 - very nice PR from @marchpig. Due to number of changes I needed to do  I decided to reimplement the feature  rather than use the original PR. @marchpig  thank you for understanding!
1543 ;  src/main/java/org/mockito/invocation/Location.java ; Exposed new API - StubbingLookupListener ; Exposed new public API based on an internal API - StubbingLookupListener - #793.  As a rule of a thumb we try to expose the internal APIs that the top level features are built upon. Since StubbingLookupListener is useful for us to implement strictness  let s get the former exposed as public API. This way we build stronger framework with the concept of  onion skin API .  This PR replaces #1466 - very nice PR from @marchpig. Due to number of changes I needed to do  I decided to reimplement the feature  rather than use the original PR. @marchpig  thank you for understanding!
1543 ;  src/main/java/org/mockito/listeners/StubbingLookupEvent.java ; Exposed new API - StubbingLookupListener ; Exposed new public API based on an internal API - StubbingLookupListener - #793.  As a rule of a thumb we try to expose the internal APIs that the top level features are built upon. Since StubbingLookupListener is useful for us to implement strictness  let s get the former exposed as public API. This way we build stronger framework with the concept of  onion skin API .  This PR replaces #1466 - very nice PR from @marchpig. Due to number of changes I needed to do  I decided to reimplement the feature  rather than use the original PR. @marchpig  thank you for understanding!
1543 ;  src/main/java/org/mockito/listeners/StubbingLookupListener.java ; Exposed new API - StubbingLookupListener ; Exposed new public API based on an internal API - StubbingLookupListener - #793.  As a rule of a thumb we try to expose the internal APIs that the top level features are built upon. Since StubbingLookupListener is useful for us to implement strictness  let s get the former exposed as public API. This way we build stronger framework with the concept of  onion skin API .  This PR replaces #1466 - very nice PR from @marchpig. Due to number of changes I needed to do  I decided to reimplement the feature  rather than use the original PR. @marchpig  thank you for understanding!
1543 ;  src/main/java/org/mockito/mock/MockCreationSettings.java ; Exposed new API - StubbingLookupListener ; Exposed new public API based on an internal API - StubbingLookupListener - #793.  As a rule of a thumb we try to expose the internal APIs that the top level features are built upon. Since StubbingLookupListener is useful for us to implement strictness  let s get the former exposed as public API. This way we build stronger framework with the concept of  onion skin API .  This PR replaces #1466 - very nice PR from @marchpig. Due to number of changes I needed to do  I decided to reimplement the feature  rather than use the original PR. @marchpig  thank you for understanding!
1544 ; src/main/java/org/mockito/internal/stubbing/BaseStubbing.java ; Fixes #1541: Prevent premature garbage collection of mock objects ; Fixes #1541.  If using  One-liner stubs  (https://static.javadoc.io/org.mockito/mockito-core/2.23.4/org/mockito/Mockito.html#one_liner_stub) the mock object may be premature cleaned up and returning the mock fails with an exception. This occurs because there is no strong reference to the mock itself.  Therefore we need to maintain a strong reference to the mock until we ve returned it  while making sure that the GC can still cleanup the mock correctly when needed.  Cause implementations of  BaseStubbing  are intended to be cleaned up after usage  we can store a strong ref to the mock there.  getMock  then uses the strong ref (instead of the weak ref provided by the invocation). After cleaning up the implementations of   BaseStubbing  there is no strong ref to the mock itself anymore (except the one in the test class).  I tried some alternative solutions but I believe this is the only way it works.  ----  Bind last mock creation to mockingProgress does not work because of this:     when(mock(TestClass2.class).getTestClass()).thenReturn(mock(TestClass.class)).getMock()       Bind mock of last invocation for stubbing to mockingProgress does not work because of this:     when(mock(TestClass.class).getStuff()).thenReturn( X ).thenReturn(     when(mock(TestClass.class).getStuff()).thenReturn( XXX ).<TestClass>getMock().getStuff() ).getMock()     
1544 ;  src/main/java/org/mockito/internal/stubbing/ConsecutiveStubbing.java ; Fixes #1541: Prevent premature garbage collection of mock objects ; Fixes #1541.  If using  One-liner stubs  (https://static.javadoc.io/org.mockito/mockito-core/2.23.4/org/mockito/Mockito.html#one_liner_stub) the mock object may be premature cleaned up and returning the mock fails with an exception. This occurs because there is no strong reference to the mock itself.  Therefore we need to maintain a strong reference to the mock until we ve returned it  while making sure that the GC can still cleanup the mock correctly when needed.  Cause implementations of  BaseStubbing  are intended to be cleaned up after usage  we can store a strong ref to the mock there.  getMock  then uses the strong ref (instead of the weak ref provided by the invocation). After cleaning up the implementations of   BaseStubbing  there is no strong ref to the mock itself anymore (except the one in the test class).  I tried some alternative solutions but I believe this is the only way it works.  ----  Bind last mock creation to mockingProgress does not work because of this:     when(mock(TestClass2.class).getTestClass()).thenReturn(mock(TestClass.class)).getMock()       Bind mock of last invocation for stubbing to mockingProgress does not work because of this:     when(mock(TestClass.class).getStuff()).thenReturn( X ).thenReturn(     when(mock(TestClass.class).getStuff()).thenReturn( XXX ).<TestClass>getMock().getStuff() ).getMock()     
1544 ;  src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java ; Fixes #1541: Prevent premature garbage collection of mock objects ; Fixes #1541.  If using  One-liner stubs  (https://static.javadoc.io/org.mockito/mockito-core/2.23.4/org/mockito/Mockito.html#one_liner_stub) the mock object may be premature cleaned up and returning the mock fails with an exception. This occurs because there is no strong reference to the mock itself.  Therefore we need to maintain a strong reference to the mock until we ve returned it  while making sure that the GC can still cleanup the mock correctly when needed.  Cause implementations of  BaseStubbing  are intended to be cleaned up after usage  we can store a strong ref to the mock there.  getMock  then uses the strong ref (instead of the weak ref provided by the invocation). After cleaning up the implementations of   BaseStubbing  there is no strong ref to the mock itself anymore (except the one in the test class).  I tried some alternative solutions but I believe this is the only way it works.  ----  Bind last mock creation to mockingProgress does not work because of this:     when(mock(TestClass2.class).getTestClass()).thenReturn(mock(TestClass.class)).getMock()       Bind mock of last invocation for stubbing to mockingProgress does not work because of this:     when(mock(TestClass.class).getStuff()).thenReturn( X ).thenReturn(     when(mock(TestClass.class).getStuff()).thenReturn( XXX ).<TestClass>getMock().getStuff() ).getMock()     
1549 ; src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; Fixed issue with leftover state when stubbing with bad throwables ; Fixed issue with leftover state when stubbing with bad throwables. Fixes #1514
1549 ;  src/test/java/org/mockitousage/stubbing/StubbingWithBadThrowablesTest.java ; Fixed issue with leftover state when stubbing with bad throwables ; Fixed issue with leftover state when stubbing with bad throwables. Fixes #1514
1549 ;  subprojects/junit-jupiter/src/test/java/org/mockitousage/UninstantiableThrowableTest.java ; Fixed issue with leftover state when stubbing with bad throwables ; Fixed issue with leftover state when stubbing with bad throwables. Fixes #1514
1552 ; src/test/java/org/mockitousage/stubbing/SmartNullsGenericBugTest.java ; Minimal test to repro generic issue with smart nulls ; Created a minimal test that reproduces bug with smart nulls and generics  see issue #1551
1554 ; src/main/java/org/mockito/internal/junit/ExceptionFactory.java ; Fixed VerifyError when JUnit 3 is in the classpath ; Mockito will throw VerifyError during its JUnit detection when JUnit 3 is in the classpath  because the code only supports JUnit 4 and later. This change will catch this error and pretend that JUnit is not there.  Issue: #1553
1565 ; src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java ; Prevent StackOverflowError when processing reversed generics ; When processing the reverse method  the type parameters are actually reversed compared to the type parameters in the class. This subsequently confuses GenericMetadataSupport  as it creates a cycle in  contextualActualTypeParameters . In that case A resolves to B  while B resolves to A.  The root cause is that we are processing type parameters of methods  while we already processed them in the class declaration. Therefore  ignore any type parameters if we already derived the appropriate contextual type parameter.
1565 ;  src/test/java/org/mockitousage/stubbing/DeepStubbingTest.java ; Prevent StackOverflowError when processing reversed generics ; When processing the reverse method  the type parameters are actually reversed compared to the type parameters in the class. This subsequently confuses GenericMetadataSupport  as it creates a cycle in  contextualActualTypeParameters . In that case A resolves to B  while B resolves to A.  The root cause is that we are processing type parameters of methods  while we already processed them in the class declaration. Therefore  ignore any type parameters if we already derived the appropriate contextual type parameter.
1567 ; src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Add warning to inline mock maker when running on a JRE ; I made a topic about this in the [mailing list](https://groups.google.com/forum/#!topic/mockito/vKhx3R4_doQ).  Long story short: the inline mock maker doesn t work when running on just a JRE  so I added a warning in the error message if that s that case. This would ve saved me a lot of headache  so I figured I d maybe help a poor soul that encounters this in the future.
1576 ; src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java ; Fix/bug 1551 cce on smart not null answers ; This PR intends to fix #1551. For fix it  the  ReturnsSmartNulls  answer use now some reflection to find the correct return type instead of the  java.util.Object .  When the return type can be found  it will start to retrieve empty values using the answer  ReturnsMoreEmptyValues  &  ReturnsEmptyValues  before creating a new mock instance.  As you may notice in tests  there is still one case where the return type cannot be found. In this case  the  Answer  will return a  null  instead of  Object  mock.  I think  it may be possible to improve this code. Any suggestion will be welcome !
1576 ;  src/test/java/org/mockitousage/stubbing/SmartNullsGenericBugTest.java ; Fix/bug 1551 cce on smart not null answers ; This PR intends to fix #1551. For fix it  the  ReturnsSmartNulls  answer use now some reflection to find the correct return type instead of the  java.util.Object .  When the return type can be found  it will start to retrieve empty values using the answer  ReturnsMoreEmptyValues  &  ReturnsEmptyValues  before creating a new mock instance.  As you may notice in tests  there is still one case where the return type cannot be found. In this case  the  Answer  will return a  null  instead of  Object  mock.  I think  it may be possible to improve this code. Any suggestion will be welcome !
1582 ; src/main/java/org/mockito/internal/junit/DefaultStubbingLookupListener.java ; Fix #1577: Refactoring naming rule for sealed packages to better work with the Java module system ; The Java module system consideres packages of all named modules to be sealed. This results in the naming strategy to rename classes such that they cannot subclass package-private types.
1583 ; subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidTempFileLocator.java ; Add support for android tests using androidx.test. ; See https://developer.android.com/jetpack/androidx/ for more details on androidx.  
1585 ; src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; Fix #1584 where MultipleParentClassLoader lacks of classloaders of superclasses ; The MultipleParentClassLoader is now composed also with classloaders of supertypes of the mockedType so in OSGi is able to load all declared types in the hierarchy.
1586 ; src/main/java/org/mockito/ArgumentMatchers.java ; Add some missing  @Deprecated  annotations ; ErrorProne caught this. We correctly had them on most of the deprecated methods  but not on all of them.
1588 ; src/main/java/org/mockito/internal/configuration/InjectingAnnotationEngine.java ; Fixes #1587 : Remove unnecessary loop from InjectingAnnotationEngine ; Removes InjectingAnnotationEngine::processInjectMocks method that does an unnecessary loop. Fixes https://github.com/mockito/mockito/issues/1587
1592 ;  src/main/java/org/mockito/internal/creation/bytebuddy/inject/package-info.java ; Module fix ; Allows to run Mockito as an automated module and adds additional tests.
1596 ; src/main/java/org/mockito/internal/junit/JUnitRule.java ; Fixes #1578: outer class mocks unavailable from inner class ; I opened issue #1578 a few weeks ago that went without an correspondence  so I apologize if submitting a PR isn t the ideal method of moving this issue forward.  However I am hoping I can get this fix incorporated into an official version without implementing temporary workarounds.  The PR should clearly show the issue I am trying to fix  but I had to introduce a testCompile snapshot dependency.  The dependent project has a fix required to demonstrate the issue within Mockito but it unfortunately has not been incorporated into an official release  and I can t think of another way to reproduce the issue.  I have contacted the owner of the dependent project but I haven t received a response from them either.  I am looking for guidance on next steps for what I believe to be regression (reported to be working in #353).  The only other solution I can think of is to merge this without a unit test but I highly doubt that is desirable.  _Git Commit Message_ - problem - JUnitRule detects an unfinished mocking session when an inner class is detected - fix - if a MockitoSession has been established for JUnitRule  then use that and init mocks of the inner class. - tests - within an inner class ... ensure mocks are accessible  override outer class values when desired  retain original values if not overwritten - demonstrated with de.bechte.junit:junit-hierarchicalcontextrunner:4.12.2-SNAPSHOT
1596 ;  src/test/java/org/mockitousage/junitrule/MockitoJUnitRuleTest.java ; Fixes #1578: outer class mocks unavailable from inner class ; I opened issue #1578 a few weeks ago that went without an correspondence  so I apologize if submitting a PR isn t the ideal method of moving this issue forward.  However I am hoping I can get this fix incorporated into an official version without implementing temporary workarounds.  The PR should clearly show the issue I am trying to fix  but I had to introduce a testCompile snapshot dependency.  The dependent project has a fix required to demonstrate the issue within Mockito but it unfortunately has not been incorporated into an official release  and I can t think of another way to reproduce the issue.  I have contacted the owner of the dependent project but I haven t received a response from them either.  I am looking for guidance on next steps for what I believe to be regression (reported to be working in #353).  The only other solution I can think of is to merge this without a unit test but I highly doubt that is desirable.  _Git Commit Message_ - problem - JUnitRule detects an unfinished mocking session when an inner class is detected - fix - if a MockitoSession has been established for JUnitRule  then use that and init mocks of the inner class. - tests - within an inner class ... ensure mocks are accessible  override outer class values when desired  retain original values if not overwritten - demonstrated with de.bechte.junit:junit-hierarchicalcontextrunner:4.12.2-SNAPSHOT
1608 ; src/main/java/org/mockito/internal/exceptions/Reporter.java ; typo? ...  thenReturn  instruction if completed -> ...  thenReturn  instruction is completed ;  if  ->  is ?  > Hey   >  > Thanks for the contribution  this is awesome. > As you may have read  project members have somehow an opinionated view on what and how should be > Mockito  e.g. we don t want mockito to be a feature bloat. > There may be a thorough review  with feedback -> code change loop. >  > Which branch :  > - On mockito 2.x  make your pull request target  release/2.x  > - On next mockito version make your pull request target  master  > > _This block can be removed_ > _Something wrong in the template fix it here  .github/PULL_REQUEST_TEMPLATE.md    check list   - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [ ] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [ ] Avoid other runtime dependencies  - [ ] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [ ] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1612 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java ; Return null instead of causing a CCE ; This solves a large number of edge-cases where  null  will actually remove the runtime ClassCastException. This essentially negates the whole MockitoCast ErrorProne check. We can still not support every use case  but causing a NPE instead of a CCE does not seem to make this worse.  I am still running internal tests within Google to see if there are any regressions  but I already saw that some of the test failures we had with ByteBuddy were resolved with this particular patch.  Note that this now fully closes #357. A previous PR resolved the same issue with ReturnsSmartNulls: #1576.  Fixes #357
1612 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java ; Return null instead of causing a CCE ; This solves a large number of edge-cases where  null  will actually remove the runtime ClassCastException. This essentially negates the whole MockitoCast ErrorProne check. We can still not support every use case  but causing a NPE instead of a CCE does not seem to make this worse.  I am still running internal tests within Google to see if there are any regressions  but I already saw that some of the test failures we had with ByteBuddy were resolved with this particular patch.  Note that this now fully closes #357. A previous PR resolved the same issue with ReturnsSmartNulls: #1576.  Fixes #357
1612 ;  src/test/java/org/mockitousage/serialization/DeepStubsSerializableTest.java ; Return null instead of causing a CCE ; This solves a large number of edge-cases where  null  will actually remove the runtime ClassCastException. This essentially negates the whole MockitoCast ErrorProne check. We can still not support every use case  but causing a NPE instead of a CCE does not seem to make this worse.  I am still running internal tests within Google to see if there are any regressions  but I already saw that some of the test failures we had with ByteBuddy were resolved with this particular patch.  Note that this now fully closes #357. A previous PR resolved the same issue with ReturnsSmartNulls: #1576.  Fixes #357
1617 ; src/test/java/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java ; Fix issue with mocking of java.util.* classes ; Fixes #1615  I hope the test is correct. At least it failed before and succeeds now...
1619 ;  src/main/java/org/mockito/MockSettings.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/Mockito.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/creation/MockSettingsImpl.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodInterceptor.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/creation/settings/CreationSettings.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/junit/DefaultStubbingLookupListener.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/junit/StrictStubsRunnerTestListener.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/junit/VerificationCollectorImpl.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/listeners/StubbingLookupListener.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/listeners/StubbingLookupNotifier.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/RetrieveGenericsForDefaultAnswers.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/invocation/Location.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/listeners/StubbingLookupEvent.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/listeners/StubbingLookupListener.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/main/java/org/mockito/mock/MockCreationSettings.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/test/java/org/mockito/internal/creation/MockSettingsImplTest.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/test/java/org/mockito/internal/listeners/StubbingLookupNotifierTest.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/test/java/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/test/java/org/mockitousage/debugging/StubbingLookupListenerCallbackTest.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/test/java/org/mockitousage/junitrule/VerificationCollectorImplTest.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/test/java/org/mockitousage/serialization/AcrossClassLoaderSerializationTest.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/test/java/org/mockitousage/serialization/DeepStubsSerializableTest.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/test/java/org/mockitousage/serialization/StrictStubsSerializableTest.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/test/java/org/mockitousage/stubbing/DeepStubbingTest.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  src/test/java/org/mockitousage/stubbing/SmartNullsStubbingTest.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1619 ;  subprojects/module-test/src/test/java/org/mockito/moduletest/ModuleHandlingTest.java ; New API to clean up all inline mocks after test ; In certain specific  rare scenarios (issue #1614) inline mocking causes memory leaks. There is no clean way to mitigate this problem completely. Hence  we introduced a new API to explicitly clear mock state (only make sense in inline mocking!):     java public class ExampleTest {       @After      public void clearMocks() {          Mockito.framework().clearInlineMocks()       }       @Test      public void someTest() {          //...      }  }      Due to the introduction of map from weak reference from mock instance to its invocation handler  Mockito became vulnerable to memory leaks as there are multiple situations where Mockito could unintentionally hold strong references to mock instances in the map record. The strong references could be through spiedInstance for spies  and arguments used to facilitate method stubbing.  Mockito could never know if the arguments passed in for method stubbing are also strongly referenced somewhere else or not  so Mockito needs to save a strong reference to these arguments to avoid premature GC. Therefore to solve cyclic strong references through arguments Mockito needs to explicitly know when mocks are out of their life  and clean up all internal strong references associated with them.    Fixes #1532 and #1533.
1620 ; src/main/java/org/mockito/internal/junit/DefaultStubbingLookupListener.java ; Fixes #1618 : Fix strict stubbing profile serialization support. ; When strict stubs profile is enabled  mock serialization doesn t work.  This PR fixes this problem.
1620 ;  src/test/java/org/mockitousage/serialization/StrictStubsSerializableTest.java ; Fixes #1618 : Fix strict stubbing profile serialization support. ; When strict stubs profile is enabled  mock serialization doesn t work.  This PR fixes this problem.
1624 ; src/main/java/org/mockito/Mockito.java ; Handle terminal type var with bounds ; This PR aim to fix the issue described in #1621  the issue being that terminal type variable arguments were not looked up for their bounds.  Fixes #1621 
1624 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java ; Handle terminal type var with bounds ; This PR aim to fix the issue described in #1621  the issue being that terminal type variable arguments were not looked up for their bounds.  Fixes #1621 
1624 ;  src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java ; Handle terminal type var with bounds ; This PR aim to fix the issue described in #1621  the issue being that terminal type variable arguments were not looked up for their bounds.  Fixes #1621 
1624 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java ; Handle terminal type var with bounds ; This PR aim to fix the issue described in #1621  the issue being that terminal type variable arguments were not looked up for their bounds.  Fixes #1621 
1624 ;  src/test/java/org/mockitousage/serialization/DeepStubsSerializableTest.java ; Handle terminal type var with bounds ; This PR aim to fix the issue described in #1621  the issue being that terminal type variable arguments were not looked up for their bounds.  Fixes #1621 
1635 ; src/main/java/org/mockito/internal/stubbing/defaultanswers/RetrieveGenericsForDefaultAnswers.java ; Fix handling of generics in ReturnsMocks ; ReturnsMocks was exhibiting the same problems as we previously had with ReturnsSmartNulls. Extract that common behavior into a separate class and thus fix the issues with ReturnsMocks.
1635 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java ; Fix handling of generics in ReturnsMocks ; ReturnsMocks was exhibiting the same problems as we previously had with ReturnsSmartNulls. Extract that common behavior into a separate class and thus fix the issues with ReturnsMocks.
1635 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java ; Fix handling of generics in ReturnsMocks ; ReturnsMocks was exhibiting the same problems as we previously had with ReturnsSmartNulls. Extract that common behavior into a separate class and thus fix the issues with ReturnsMocks.
1635 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java ; Fix handling of generics in ReturnsMocks ; ReturnsMocks was exhibiting the same problems as we previously had with ReturnsSmartNulls. Extract that common behavior into a separate class and thus fix the issues with ReturnsMocks.
1639 ; src/main/java/org/mockito/Mockito.java ; Removes inaccessible links from javadocs in Mockito.java ; The monkeyisland.pl domain is no longer available.  List of inaccessible articles: http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring http://monkeyisland.pl/2008/07/12/should-i-worry-about-the-unexpected http://monkeyisland.pl/2008/04/26/asking-and-telling http://monkeyisland.pl/2009/01/13/subclass-and-override-vs-partial-mocking-vs-refactoring
1641 ; src/main/java/org/mockito/internal/stubbing/defaultanswers/RetrieveGenericsForDefaultAnswers.java ; Fix returns mocks for final classes ; The guard for final mocking was incorrect. It should have passed it on to MockitoCore. Since we have the InlineMockMaker  we can actually mock  so this check was incorrect.
1641 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java ; Fix returns mocks for final classes ; The guard for final mocking was incorrect. It should have passed it on to MockitoCore. Since we have the InlineMockMaker  we can actually mock  so this check was incorrect.
1644 ; src/main/java/org/mockito/internal/junit/VerificationCollectorImpl.java ; VerificationCollector to handle non-matching args and other assertions ; This fix for #1642 widens the catch in  VerificationCollectorImpl  so that it will catch any  AssertionError   rather than just  MockitoAssertionError . In this way  any comparison failures (such as the built-in argument comparison when running under JUnit) will also be collected rather than propagating through to the test framework.  There are also two commits which are more cosmetic improvements to  VerificationCollectorImplTest :  * Rename  assertAtLeastOneFailure()  to  assertExactlyOneFailure()  (more accurate description of what it does). * Change  Assert.fail()  to AssertJ s  assertBecauseExceptionWasNotThrown()  (produces better diagnostics in the case of a failure).
1644 ;  src/test/java/org/mockitousage/junitrule/VerificationCollectorImplTest.java ; VerificationCollector to handle non-matching args and other assertions ; This fix for #1642 widens the catch in  VerificationCollectorImpl  so that it will catch any  AssertionError   rather than just  MockitoAssertionError . In this way  any comparison failures (such as the built-in argument comparison when running under JUnit) will also be collected rather than propagating through to the test framework.  There are also two commits which are more cosmetic improvements to  VerificationCollectorImplTest :  * Rename  assertAtLeastOneFailure()  to  assertExactlyOneFailure()  (more accurate description of what it does). * Change  Assert.fail()  to AssertJ s  assertBecauseExceptionWasNotThrown()  (produces better diagnostics in the case of a failure).
1646 ;  src/main/java/org/mockito/Mockito.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/main/java/org/mockito/MockitoFramework.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodInterceptor.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/main/java/org/mockito/internal/framework/DefaultMockitoFramework.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/RetrieveGenericsForDefaultAnswers.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/main/java/org/mockito/plugins/InlineMockMaker.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/test/java/org/mockito/internal/framework/DefaultMockitoFrameworkTest.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/test/java/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/test/java/org/mockitousage/serialization/DeepStubsSerializableTest.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/test/java/org/mockitousage/stubbing/DeepStubbingTest.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  src/test/java/org/mockitousage/stubbing/SmartNullsStubbingTest.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  subprojects/inline/src/test/java/org/mockitoinline/bugs/CyclicMockMethodArgumentMemoryLeakTest.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1646 ;  subprojects/inline/src/test/java/org/mockitoinline/bugs/SelfSpyReferenceMemoryLeakTest.java ; Add back getArgument(int  Class) to circumvent compilation issues ; Also add  @NotExtensible  to several of our interfaces to document they are not intended to be subclassed.  Fixes #1609
1648 ; src/main/java/org/mockito/internal/stubbing/defaultanswers/RetrieveGenericsForDefaultAnswers.java ; Prevent NPE in findTypeFromGenericInArguments ; There was only a single test failing on this. I think the issue was RETURNS_SMART_NULLS in combination with an ArgumentCaptor  but couldn t figure that part out. At least this fixes prevented the NPE.
1665 ; src/main/java/org/mockito/invocation/Invocation.java ; New public API: invocation.getArgumentsAsMatchers() ; - New public API: invocation.getArgumentsAsMatchers()  useful for advanced integrations  such as mockito-scala - Some internal refactorings that provide temporary help with mockito-scala integration  Fixes #1664
1667 ;  src/main/java/org/mockito/exceptions/verification/ArgumentsAreDifferent.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/main/java/org/mockito/exceptions/verification/junit/package-info.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/main/java/org/mockito/exceptions/verification/opentest4j/ArgumentsAreDifferent.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/main/java/org/mockito/exceptions/verification/opentest4j/package-info.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/main/java/org/mockito/internal/junit/ExceptionFactory.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockito/StaticMockingExperimentTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockito/internal/junit/ExceptionFactoryTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockito/internal/verification/VerificationOverTimeImplTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitointegration/NoJUnitDependenciesTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitousage/matchers/CustomMatcherDoesYieldCCETest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitousage/matchers/HamcrestMatchersTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitousage/matchers/MatchersTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitousage/matchers/MoreMatchersTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitousage/matchers/ReflectionMatchersTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitousage/matchers/VarargsTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitousage/stacktrace/ClickableStackTracesTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitousage/verification/BasicVerificationTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1667 ;  src/test/java/org/mockitousage/verification/VerificationUsingMatchersTest.java ; Improved IDE experience for JUnit5 - visual comparison failure ; When JUnit5+Mockito is used in modern IDE (IDEA  Eclipse) we now show  visual  comparison failure pop-up for certain Mockito exceptions (such as ArgumentsAreDifferent).  Fixes #1663.
1670 ; src/main/java/org/mockito/AdditionalAnswers.java ; Add support for Answer6 and VoidAnswer6 ; Regretfully  I ran into a case where I needed to mock a six-argument method. One can of course claim that such methods _ought not to exist_  but sadly  this is not always the reality and I think that some pragmatism is useful in tools like Mockito  so here is my attempt at adding support for it.  Of course  it s possible to use the plain  Answer  interface in this case  but adding a dedicated  Answer6  interface makes it more convenient on the user   Answer  is a quite raw interface.  (I m not sure if this should target the 2.x release or  master  also  but feel free to cherry-pick as needed after review/merge.)
1670 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java ; Add support for Answer6 and VoidAnswer6 ; Regretfully  I ran into a case where I needed to mock a six-argument method. One can of course claim that such methods _ought not to exist_  but sadly  this is not always the reality and I think that some pragmatism is useful in tools like Mockito  so here is my attempt at adding support for it.  Of course  it s possible to use the plain  Answer  interface in this case  but adding a dedicated  Answer6  interface makes it more convenient on the user   Answer  is a quite raw interface.  (I m not sure if this should target the 2.x release or  master  also  but feel free to cherry-pick as needed after review/merge.)
1670 ;  src/main/java/org/mockito/stubbing/Answer6.java ; Add support for Answer6 and VoidAnswer6 ; Regretfully  I ran into a case where I needed to mock a six-argument method. One can of course claim that such methods _ought not to exist_  but sadly  this is not always the reality and I think that some pragmatism is useful in tools like Mockito  so here is my attempt at adding support for it.  Of course  it s possible to use the plain  Answer  interface in this case  but adding a dedicated  Answer6  interface makes it more convenient on the user   Answer  is a quite raw interface.  (I m not sure if this should target the 2.x release or  master  also  but feel free to cherry-pick as needed after review/merge.)
1670 ;  src/main/java/org/mockito/stubbing/VoidAnswer6.java ; Add support for Answer6 and VoidAnswer6 ; Regretfully  I ran into a case where I needed to mock a six-argument method. One can of course claim that such methods _ought not to exist_  but sadly  this is not always the reality and I think that some pragmatism is useful in tools like Mockito  so here is my attempt at adding support for it.  Of course  it s possible to use the plain  Answer  interface in this case  but adding a dedicated  Answer6  interface makes it more convenient on the user   Answer  is a quite raw interface.  (I m not sure if this should target the 2.x release or  master  also  but feel free to cherry-pick as needed after review/merge.)
1670 ;  src/test/java/org/mockitousage/IMethods.java ; Add support for Answer6 and VoidAnswer6 ; Regretfully  I ran into a case where I needed to mock a six-argument method. One can of course claim that such methods _ought not to exist_  but sadly  this is not always the reality and I think that some pragmatism is useful in tools like Mockito  so here is my attempt at adding support for it.  Of course  it s possible to use the plain  Answer  interface in this case  but adding a dedicated  Answer6  interface makes it more convenient on the user   Answer  is a quite raw interface.  (I m not sure if this should target the 2.x release or  master  also  but feel free to cherry-pick as needed after review/merge.)
1670 ;  src/test/java/org/mockitousage/MethodsImpl.java ; Add support for Answer6 and VoidAnswer6 ; Regretfully  I ran into a case where I needed to mock a six-argument method. One can of course claim that such methods _ought not to exist_  but sadly  this is not always the reality and I think that some pragmatism is useful in tools like Mockito  so here is my attempt at adding support for it.  Of course  it s possible to use the plain  Answer  interface in this case  but adding a dedicated  Answer6  interface makes it more convenient on the user   Answer  is a quite raw interface.  (I m not sure if this should target the 2.x release or  master  also  but feel free to cherry-pick as needed after review/merge.)
1670 ;  src/test/java/org/mockitousage/stubbing/StubbingWithAdditionalAnswersTest.java ; Add support for Answer6 and VoidAnswer6 ; Regretfully  I ran into a case where I needed to mock a six-argument method. One can of course claim that such methods _ought not to exist_  but sadly  this is not always the reality and I think that some pragmatism is useful in tools like Mockito  so here is my attempt at adding support for it.  Of course  it s possible to use the plain  Answer  interface in this case  but adding a dedicated  Answer6  interface makes it more convenient on the user   Answer  is a quite raw interface.  (I m not sure if this should target the 2.x release or  master  also  but feel free to cherry-pick as needed after review/merge.)
1672 ; src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java ; Report initialization failures per test method ; Prior to this commit   DefaultInternalRunner  threw an exception when  MockitoAnnotations.initMocks()  failed from the overridden  withBefores  method. Instead  it now returns a  Statement  that is responsible for initializing. Potential exceptions are then handled by JUnit  regardless whether version 4.12 or 4.13-beta-2 is used. Instead of reporting a class-level error  JUnit will now report a failure for each test method in such test classes.  Related issue: junit-team/junit4#1599   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1672 ;  src/test/java/org/mockito/internal/runners/DefaultInternalRunnerTest.java ; Report initialization failures per test method ; Prior to this commit   DefaultInternalRunner  threw an exception when  MockitoAnnotations.initMocks()  failed from the overridden  withBefores  method. Instead  it now returns a  Statement  that is responsible for initializing. Potential exceptions are then handled by JUnit  regardless whether version 4.12 or 4.13-beta-2 is used. Instead of reporting a class-level error  JUnit will now report a failure for each test method in such test classes.  Related issue: junit-team/junit4#1599   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1680 ; src/main/java/org/mockito/internal/stubbing/answers/InvocationInfo.java ; Fix handling of generic Void type for doNothing() ; When the return type bound to a generic type resolved to Void   doNothing()  would still throw an exception. Update the  isVoid  implementation to also handle generic return types.
1680 ;  src/test/java/org/mockito/internal/stubbing/answers/DoesNothingTest.java ; Fix handling of generic Void type for doNothing() ; When the return type bound to a generic type resolved to Void   doNothing()  would still throw an exception. Update the  isVoid  implementation to also handle generic return types.
1690 ; subprojects/errorprone/src/main/java/org/mockito/errorprone/bugpatterns/MockitoInternalUsage.java ; Add ErrorProne MockitoInternalUsage checker ; This checker will warn on any usage of a Mockito internal symbol. Since we do not guarantee API stability on symbols in our internal packages  users should not rely on them. This checker can be used to enforce that they are unused.
1693 ;  subprojects/errorprone/src/main/java/org/mockito/errorprone/bugpatterns/MockitoNotExtensible.java ; Make  MockitoNotExtensible  service-loadable ; This way Error Prone can find the plugin when  mockito-errorprone  is added to the annotation processor classpath.  Fixes #1692.
1695 ; src/main/java/org/mockito/invocation/InvocationOnMock.java ; Fix javadoc typo and use HTML list ; The javadoc for  InvocationOnMock.getArgument(int index  Class<T> clazz)   had two typos: -  to directly **pas** the result  -  **clazz** to cast the argument to   Additionally I changed the list to be a proper HTML list  the current version just collapsed it into one text block: https://static.javadoc.io/org.mockito/mockito-core/2.27.0/org/mockito/invocation/InvocationOnMock.html#getArgument-int-java.lang.Class-  It might also be worth it adding the actual HTML paragraphs into the javadoc (for the other methods as well).
1698 ; src/test/java/org/mockitousage/stubbing/CloningParameterTest.java ; Fix ClonesArguments for null and arrays ; The ClonesArguments class works for many cases  but fails when trying to clone an argument that is an array  or is null. This PR fixes those edge cases. This does not directly resolve any open issue  but it is related to #1153  #1469  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
1701 ; src/main/java/org/mockito/internal/exceptions/Reporter.java ; Show multiple invocations on argumentsAreDifferent ; This is the reconciliation of #1556 with the tests fixed and implementation rebased on  release/2.x .  Fixes #1542 
1701 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java ; Show multiple invocations on argumentsAreDifferent ; This is the reconciliation of #1556 with the tests fixed and implementation rebased on  release/2.x .  Fixes #1542 
1701 ;  src/test/java/org/mockitousage/verification/VerifyPrintsAllInvocationsOnErrorTest.java ; Show multiple invocations on argumentsAreDifferent ; This is the reconciliation of #1556 with the tests fixed and implementation rebased on  release/2.x .  Fixes #1542 
1706 ; src/main/java/org/mockito/Mockito.java ; Fix a typo ; > Hey   >  > Thanks for the contribution  this is awesome. > As you may have read  project members have somehow an opinionated view on what and how should be > Mockito  e.g. we don t want mockito to be a feature bloat. > There may be a thorough review  with feedback -> code change loop. >  > Which branch :  > - On mockito 2.x  make your pull request target  release/2.x  > - On next mockito version make your pull request target  master    check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ; src/main/java/org/mockito/exceptions/verification/TooFewActualInvocations.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/main/java/org/mockito/exceptions/verification/TooLittleActualInvocations.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/test/java/org/mockito/internal/exceptions/ReporterTest.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/test/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsCheckerTest.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/test/java/org/mockitousage/junitrunner/SilentRunnerTest.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/test/java/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/test/java/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/test/java/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1708 ;  src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; Fixes #1623 : Rename TooLittleActualInvocations ; Rename the exception TooLittleActualInvocations to TooFewActualInvocations as this is more correct English. As this exception is public API  we rename by subclassing and deprecating the original. Rename all tests and internal methods that were referencing the old name by aligning with the new name.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/2.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1714 ; src/main/java/org/mockito/Mockito.java ; Fixes #1713: fix typo in Mockito.java javadoc ; I was confused and tried to look for  verifyNoMoreInvocations  when I came across this javadocs. Hopefully  this prevents further confusion.
1715 ; src/test/java/org/mockitointegration/NoByteCodeDependenciesTest.java ; Fixes #298: replaces Objenesis references from stubbing classes with plugin equivalents. ; This enables the iOS Mockito plugin (https://github.com/google/j2objc/tree/master/testing/mockito) to upgrade to v2.
1718 ; src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Fixes #1717 : configure the MethodVisitor for Java 11 compatibility ; I m looking into adding a unit test  if I can find how to use Byte Buddy to generate a class with a Conditional Dynamic instruction when running with Java 11.
1718 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Fixes #1717 : configure the MethodVisitor for Java 11 compatibility ; I m looking into adding a unit test  if I can find how to use Byte Buddy to generate a class with a Conditional Dynamic instruction when running with Java 11.
1720 ; src/main/java/org/mockito/MockitoAnnotations.java ; Add missing  be  in javadoc ; nan
1723 ; src/main/java/org/mockito/internal/junit/ExceptionFactory.java ; Change implementation of ExceptionFactory to explicitly test for dependent classes ; The original implementation of conditional OpenTest4J support (#1667) relied on some implicit behaviour of the Java classloader to generate and catch the exception at the right time. It seems that this behaviour is not always exactly replicated in all environments - for example  in #1716  where Mockito was being used in an instrumentation test that was being run on an Android emulator.  The new implementation is a bit more direct in how it tests for the dependent classes. The existing test cases still pass  and @matejdro confirmed that this fixed his problem.  Fixes #1716.
1733 ; src/main/java/org/mockito/BDDMockito.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/main/java/org/mockito/Mockito.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/main/java/org/mockito/internal/MockitoCore.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/main/java/org/mockito/internal/verification/NoInteractions.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/main/java/org/mockito/internal/verification/VerificationModeFactory.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/test/java/org/mockito/MockitoTest.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/test/java/org/mockito/internal/InvalidStateDetectionTest.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/test/java/org/mockito/internal/verification/NoInteractionsTest.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/test/java/org/mockitousage/basicapi/ResetTest.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/test/java/org/mockitousage/customization/BDDMockitoTest.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/test/java/org/mockitousage/misuse/InvalidUsageTest.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/test/java/org/mockitousage/stacktrace/StackTraceFilteringTest.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1733 ;  src/test/java/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java ;  verifyNoInteractions guarantees no interactions with mock ; With #995 I provided a fix to #977 and #989 However that PR targeted  master   which eventually became  old-3.x   and its code didn t make it into  release/3.x . #977 and #989 should be reopened.  I have back-ported that PR to target  release/3.x .  verifyZeroInteractions  is marked as  @Deprecated  and a new  verifyNoInteractions  is added. There are no breaking changes AFAIK  so this code is backwards compatible. Since I don t know if/when this code will ship  javadocs contain a placeholder  Since 3.x.x 
1739 ; src/main/java/org/mockito/internal/exceptions/Reporter.java ; Consistent punctuation in hints list for UnfinishedStubbingException ; Previously the numbered list had two periods and a colon after the three numbers.  After  it consistently uses dots like other suggestions  i.e. missingMethodInvocation
1745 ; src/main/java/org/mockito/Mockito.java ; Fixes #1743: Clarify default answer in 3.0.0 ; API changes postponed to 4.0.0. Default answer has not been changed in 3.0.0.
1760 ; src/main/java/org/mockito/Mockito.java ; Minor bug fixes ; Fixes #1747: removed typo Fixes #1513: Added missing tag to fix javadoc  Supersedes and closes #1748
1760 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Minor bug fixes ; Fixes #1747: removed typo Fixes #1513: Added missing tag to fix javadoc  Supersedes and closes #1748
1760 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Minor bug fixes ; Fixes #1747: removed typo Fixes #1513: Added missing tag to fix javadoc  Supersedes and closes #1748
1762 ; src/main/java/org/mockito/internal/util/reflection/GenericTypeExtractor.java ; Fixes #1758: Method GenericTypeExtractor#findGenericInterface always … ; …returns first interface
1762 ;  src/test/java/org/mockito/internal/util/reflection/GenericTypeExtractorTest.java ; Fixes #1758: Method GenericTypeExtractor#findGenericInterface always … ; …returns first interface
1773 ; src/main/java/org/mockito/quality/Strictness.java ; Fixes #1769: Clarify default strict stubbing behaviour in 3.0.0 ; Similar to https://github.com/mockito/mockito/pull/1745 as requested by @TimvdLippe in https://github.com/mockito/mockito/issues/1769  Closes #1769
1777 ; src/test/java/org/mockitoutil/Assertor.java ; Get rid of no longer used Assertor ; A minor one  remove no longer used Assertor.java.
1781 ; src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Fixes #1780: Close file handle to avoid a file-handle-leak ; Fix a small file-handle-leak which pops up when running tests with [file-leak-detector](https://file-leak-detector.kohsuke.org/)   Fixes #1780
1783 ; src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; Cleaned up state after stubbing misuse exception ; Fixes #1655
1783 ;  src/test/java/org/mockitousage/stubbing/MisusingStubbingTest.java ; Cleaned up state after stubbing misuse exception ; Fixes #1655
1787 ; src/main/java/org/mockito/Mockito.java ; Fixes #1786 : Clarify differences between  timeout  and  after  ; Tries to improve the JavaDoc for  timeout  to differentiate it from  after  directly in the first sentence.
1788 ;  subprojects/junit-jupiter/src/test/java/org/mockitousage/MultiLevelNestedTest.java ; Upgraded JUnit Jupiter 5.1.1 -> 5.4.2 ; We need higher version of JUnit Jupiter to reproduce and fix #1630  Added a test to enhance coverage
1789 ; subprojects/junit-jupiter/src/main/java/org/mockito/junit/jupiter/MockitoExtension.java ; Fixed JUnit Jupiter parallel issue ; Fixes #1630  This fix improves Mockito JUnit Jupiter extension. However  it does not completely resolve all kinds of parallel issues when nested test classes are used. I ll open a separate ticket for it.
1790 ;  src/main/java/org/mockito/AdditionalMatchers.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/InOrder.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/Incubating.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/MockitoAnnotations.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/base/MockitoAssertionError.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/base/MockitoException.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/base/MockitoInitializationException.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/base/MockitoSerializationIssue.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/misusing/CannotVerifyStubOnlyMock.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/misusing/FriendlyReminderException.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/misusing/InvalidUseOfMatchersException.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/misusing/MissingMethodInvocationException.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/misusing/NotAMockException.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/misusing/NullInsteadOfMockException.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/misusing/UnfinishedStubbingException.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/misusing/UnfinishedVerificationException.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/verification/ArgumentsAreDifferent.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/verification/MoreThanAllowedActualInvocations.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/verification/NeverWantedButInvoked.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/verification/NoInteractionsWanted.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/verification/TooLittleActualInvocations.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/verification/TooManyActualInvocations.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/verification/VerificationInOrderFailure.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/verification/WantedButNotInvoked.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/exceptions/verification/opentest4j/ArgumentsAreDifferent.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/InOrderImpl.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/configuration/injection/ConstructorInjection.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/configuration/injection/MockInjection.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/configuration/injection/MockInjectionStrategy.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/configuration/injection/SpyOnInjectedFieldsHandler.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/creation/MockSettingsImpl.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/debugging/VerboseMockInvocationLogger.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/exceptions/VerificationAwareInvocation.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilter.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/invocation/AbstractAwareMethod.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/invocation/InvocationMatcher.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/invocation/InvocationsFinder.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/invocation/MatchersBinder.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/invocation/finder/AllInvocationsFinder.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/invocation/finder/VerifiableInvocationsFinder.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/invocation/mockref/MockReference.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/invocation/mockref/MockStrongReference.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/invocation/mockref/MockWeakReference.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/And.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/Any.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/ArrayEquals.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/CompareEqual.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/CompareTo.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/Contains.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/EndsWith.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/Equals.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/EqualsWithDelta.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/Find.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/GreaterOrEqual.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/GreaterThan.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/InstanceOf.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/LessOrEqual.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/LessThan.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/Matches.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/Not.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/NotNull.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/Null.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/Or.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/Same.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/StartsWith.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/progress/MockingProgress.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/stubbing/BaseStubbing.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswersWithDelay.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/stubbing/answers/DefaultAnswerValidator.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/util/Checks.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/util/DefaultMockingDetails.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/util/collections/ListUtil.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/util/reflection/FieldInitializationReport.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/util/reflection/SuperTypesLastSorter.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/verification/AtLeast.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/verification/AtMost.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/verification/Calls.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/verification/DefaultRegisteredInvocations.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/verification/NoInteractions.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/verification/NoMoreInteractions.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/verification/RegisteredInvocations.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/verification/SingleRegisteredInvocation.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/verification/Times.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/verification/VerificationModeFactory.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/verification/checkers/MissingInvocationChecker.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/invocation/InvocationOnMock.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/mock/MockCreationSettings.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/plugins/InlineMockMaker.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/stubbing/ValidableAnswer.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/verification/VerificationAfterDelay.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/verification/VerificationMode.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/main/java/org/mockito/verification/VerificationWithTimeout.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/concurrentmockito/ThreadVerifiesContinuouslyInteractingMockTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/concurrentmockito/ThreadsShareAMockTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/InvocationFactoryTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/MockitoTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/StateMaster.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/exceptions/base/MockitoAssertionErrorTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/exceptions/base/MockitoExceptionTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/exceptions/base/MockitoSerializationIssueTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/exceptions/base/StackTraceBuilder.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/exceptions/base/TraceBuilder.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/AllInvocationsFinderTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/InvalidStateDetectionTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/configuration/MockInjectionTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/configuration/injection/ConstructorInjectionTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/configuration/injection/SimpleArgumentResolverTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/exceptions/ReporterTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/handler/MockHandlerImplTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/invocation/InvocationBuilder.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/invocation/InvocationsFinderTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/invocation/mockref/MockWeakReferenceTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/matchers/ComparableMatchersTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/matchers/EqualsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/matchers/MatchersToStringTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/progress/MockingProgressImplTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/progress/TimesTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/progress/VerificationModeBuilder.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/stubbing/answers/AnswersWithDelayTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/stubbing/answers/CallsRealMethodsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/util/ChecksTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/util/MockUtilTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/util/StringUtilTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/util/collections/ListUtilTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/util/reflection/AccessibilityChangerTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/verification/DefaultRegisteredInvocationsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationCheckerTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsInOrderCheckerTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/PlaygroundTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/PlaygroundWithDemoOfUnclonedParametersProblemTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/annotation/AnnotationsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationBasicTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/annotation/CaptorAnnotationUnhappyPathTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/annotation/DeprecatedAnnotationEngineApiTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorIssue421Test.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingConstructorTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/basicapi/MockingMultipleInterfacesTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/basicapi/MocksCreationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/basicapi/MocksSerializationForAnnotationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/basicapi/MocksSerializationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/basicapi/ObjectsSerializationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/basicapi/ReplacingObjectMethodsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/basicapi/UsingVarargsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/AIOOBExceptionWithAtLeastTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/ActualInvocationHasNullArgumentNPEBugTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/BridgeMethodsHitAgainTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/CaptorAnnotationAutoboxingTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/CovariantOverrideTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/MockitoRunnerBreaksWhenNoTestMethodsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/NPEOnAnyClassMatcherAutounboxTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/NPEWhenMockingThrowablesTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/ShouldMocksCompareToBeConsistentWithEqualsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/ShouldNotDeadlockAnswerExecutionTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/ShouldOnlyModeAllowCapturingArgumentsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/SpyShouldHaveNiceNameTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/StubbingMocksThatAreConfiguredToReturnMocksTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/VerifyingWithAnExtraCallToADifferentMockTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/creation/ShouldAllowInlineMockCreationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/injection/ShouldNotTryToInjectInFinalOrStaticFieldsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/varargs/VarargsAndAnyObjectPicksUpExtraInvocationsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/varargs/VarargsErrorWhenCallingRealMethodTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/bugs/varargs/VarargsNotPlayingWithAnyObjectTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/examples/use/Article.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/examples/use/ArticleCalculator.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/examples/use/ArticleDatabase.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/examples/use/ArticleManager.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/examples/use/ExampleTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/matchers/CapturingArgumentsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/matchers/CustomMatchersTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/matchers/GenericMatchersTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/matchers/HamcrestMatchersTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/matchers/InvalidUseOfMatchersTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/matchers/MatchersMixedWithRawArgumentsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/matchers/MatchersTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/matchers/MoreMatchersTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/matchers/ReflectionMatchersTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/matchers/VerificationAndStubbingUsingMatchersTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/misuse/DescriptiveMessagesOnMisuseTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/misuse/ExplicitFrameworkValidationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/misuse/InvalidUsageTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/misuse/RestrictedObjectMethodsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/packageprotected/MockingPackageProtectedTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/performance/LoadsOfMocksTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/puzzlers/BridgeMethodPuzzleTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/serialization/ParallelSerializationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/spies/PartialMockingWithSpiesTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/spies/SpyingOnInterfacesTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/spies/SpyingOnRealObjectsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stacktrace/ClickableStackTracesTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stacktrace/ClickableStackTracesWhenFrameworkMisusedTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stacktrace/ModellingDescriptiveMessagesTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationChunkInOrderTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationInOrderTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stacktrace/PointingStackTraceToActualInvocationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stacktrace/StackTraceFilteringTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/strictness/LenientMockAnnotationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/strictness/PotentialStubbingSensitivityTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/strictness/ProductionCode.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/strictness/StrictnessPerMockTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/strictness/StrictnessPerStubbingTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/strictness/StrictnessPerStubbingWithRunnerTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/strictness/StrictnessWhenRuleStrictnessIsUpdatedTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/strictness/StrictnessWithRulesTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stubbing/BasicStubbingTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stubbing/CloningParameterTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stubbing/ReturningDefaultValuesTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stubbing/SmartNullsStubbingTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stubbing/StubbingConsecutiveAnswersTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stubbing/StubbingUsingDoReturnTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stubbing/StubbingWithExtraAnswersTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/AtLeastXVerificationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/AtMostXVerificationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/BasicVerificationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesOnVerificationInOrderErrorsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenTimesXVerificationFailsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/DescriptiveMessagesWhenVerificationFailsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/ExactNumberOfTimesVerificationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/FindingRedundantInvocationsInOrderTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/NoMoreInteractionsVerificationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/OnlyVerificationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/OrdinaryVerificationPrintsAllInteractionsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/PrintingVerboseTypesWithArgumentsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/RelaxedVerificationInOrderTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/SelectedMocksInOrderVerificationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/VerificationExcludingStubsTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/VerificationInOrderMixedWithOrdiraryVerificationTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/VerificationInOrderTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/VerificationInOrderWithTimeoutTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/VerificationOnMultipleMocksUsingMatchersTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/VerificationUsingMatchersTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/VerificationWithAfterAndCaptorTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/VerificationWithAfterTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitoutil/Conditions.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  src/test/java/org/mockitoutil/TestBase.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  subprojects/deprecatedPluginsTest/src/test/java/org/mockitousage/plugins/DeprecatedInstantiatorProviderTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  subprojects/extTest/src/test/java/org/mockitousage/plugins/stacktrace/PluginStackTraceFilteringTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  subprojects/extTest/src/test/java/org/mockitousage/plugins/switcher/PluginSwitchTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  subprojects/inline/src/test/java/org/mockitoinline/bugs/CyclicMockMethodArgumentMemoryLeakTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1790 ;  subprojects/inline/src/test/java/org/mockitoinline/bugs/SelfSpyReferenceMemoryLeakTest.java ; Enable spotless to automatically format our source code ; Spotless [1] has been used by various popular open source projects  including JUnit [2]. While working on Mockito inside of Google  I discovered that our formatting is inconsistent. We can use Spotless to automatically take care of that.  To be able to format the source code  run  ./gradlew spotlessApply  This check runs on Travis to make sure code remains formatted. This should also reduce the amount of trouble with the CheckStyle linter  as Spotless will automatically resolve these issues.  On purpose  the spotless configuration is quite minimal. The current configuration is mostly a reflection on the current state of affairs. We can later discuss different configuration options and how we can integrate them.  [1]: https://github.com/diffplug/spotless/tree/master/plugin-gradle [2]: https://github.com/junit-team/junit5/blob/3f491f3148d2c745808fc75b0a802b60243e104e/build.gradle.kts#L124-L144
1792 ; src/main/java/org/mockito/InjectMocks.java ; Fix grammar ; Past tense of  to nest  is  nested . Also fix plenking.
1795 ; src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java ; Typos and upcoming warnings ; Fixed some typos which where found by a spell checker.  check list   - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [ ] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [ ] Avoid other runtime dependencies  - [ ] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [X] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1795 ;  src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java ; Typos and upcoming warnings ; Fixed some typos which where found by a spell checker.  check list   - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [ ] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [ ] Avoid other runtime dependencies  - [ ] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [X] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1795 ;  src/main/java/org/mockito/internal/util/reflection/InstanceField.java ; Typos and upcoming warnings ; Fixed some typos which where found by a spell checker.  check list   - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [ ] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [ ] Avoid other runtime dependencies  - [ ] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [X] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1795 ;  src/test/java/org/mockito/internal/util/StringUtilTest.java ; Typos and upcoming warnings ; Fixed some typos which where found by a spell checker.  check list   - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [ ] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [ ] Avoid other runtime dependencies  - [ ] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [X] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1795 ;  src/test/java/org/mockitousage/matchers/InvalidUseOfMatchersTest.java ; Typos and upcoming warnings ; Fixed some typos which where found by a spell checker.  check list   - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [ ] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [ ] Avoid other runtime dependencies  - [ ] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [X] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1795 ;  src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java ; Typos and upcoming warnings ; Fixed some typos which where found by a spell checker.  check list   - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [ ] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [ ] Avoid other runtime dependencies  - [ ] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [X] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1795 ;  subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidTempFileLocator.java ; Typos and upcoming warnings ; Fixed some typos which where found by a spell checker.  check list   - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [ ] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [ ] Avoid other runtime dependencies  - [ ] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [X] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1798 ; src/main/java/org/mockito/Mockito.java ; Fix typo in the wiki link ; Fixes #1791  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1799 ; src/main/java/org/mockito/BDDMockito.java ; Fixes placeholder  3.x.x  version in javadoc with correct  3.0.1  ; This is a small javadoc fix  When I contributed with #1733  I didn t know which version of mockito will have included it  so I left a placeholder  3.x.x  in the javadoc. I then forgot to update the code once  3.0.1  was tagged.
1799 ;  src/main/java/org/mockito/Mockito.java ; Fixes placeholder  3.x.x  version in javadoc with correct  3.0.1  ; This is a small javadoc fix  When I contributed with #1733  I didn t know which version of mockito will have included it  so I left a placeholder  3.x.x  in the javadoc. I then forgot to update the code once  3.0.1  was tagged.
1806 ; subprojects/junit-jupiter/src/main/java/org/mockito/junit/jupiter/MockitoExtension.java ; Fixed JUnit5 concurrency bug ; Fixed JUnit Jupiter MockitoExtension so that it behaves correctly in a parallel execution with nested tests. I found this issue recently when working on the extension. ThreadLocal here is OK but I m happy to use a different solution if someone has a better idea.  Added a new test that was failing prior to this change.
1806 ;  subprojects/junitJupiterParallelTest/src/test/java/org/mockito/NestedParallelTest.java ; Fixed JUnit5 concurrency bug ; Fixed JUnit Jupiter MockitoExtension so that it behaves correctly in a parallel execution with nested tests. I found this issue recently when working on the extension. ThreadLocal here is OK but I m happy to use a different solution if someone has a better idea.  Added a new test that was failing prior to this change.
1807 ; src/main/java/org/mockito/internal/verification/AtLeast.java ; Add default implementation for VerificationMode#description ; This method was added in Mockito 2 ([1]) and was implemented in all relevant subclasses. However  most subclasses do not implement a custom description.  Since we are now building on Java 8  we can ship this as a default method and remove all duplicate subclass implementations. As a side-effect  it allows users of Mockito 1 to migrate to Mockito 3 without additional breakages. (They could implement it  but VerificationModeFactory is internal and would require additional boilerplate)  [1]: https://github.com/mockito/mockito/pull/68
1807 ;  src/main/java/org/mockito/internal/verification/AtMost.java ; Add default implementation for VerificationMode#description ; This method was added in Mockito 2 ([1]) and was implemented in all relevant subclasses. However  most subclasses do not implement a custom description.  Since we are now building on Java 8  we can ship this as a default method and remove all duplicate subclass implementations. As a side-effect  it allows users of Mockito 1 to migrate to Mockito 3 without additional breakages. (They could implement it  but VerificationModeFactory is internal and would require additional boilerplate)  [1]: https://github.com/mockito/mockito/pull/68
1807 ;  src/main/java/org/mockito/internal/verification/Calls.java ; Add default implementation for VerificationMode#description ; This method was added in Mockito 2 ([1]) and was implemented in all relevant subclasses. However  most subclasses do not implement a custom description.  Since we are now building on Java 8  we can ship this as a default method and remove all duplicate subclass implementations. As a side-effect  it allows users of Mockito 1 to migrate to Mockito 3 without additional breakages. (They could implement it  but VerificationModeFactory is internal and would require additional boilerplate)  [1]: https://github.com/mockito/mockito/pull/68
1807 ;  src/main/java/org/mockito/internal/verification/Description.java ; Add default implementation for VerificationMode#description ; This method was added in Mockito 2 ([1]) and was implemented in all relevant subclasses. However  most subclasses do not implement a custom description.  Since we are now building on Java 8  we can ship this as a default method and remove all duplicate subclass implementations. As a side-effect  it allows users of Mockito 1 to migrate to Mockito 3 without additional breakages. (They could implement it  but VerificationModeFactory is internal and would require additional boilerplate)  [1]: https://github.com/mockito/mockito/pull/68
1807 ;  src/main/java/org/mockito/internal/verification/InOrderWrapper.java ; Add default implementation for VerificationMode#description ; This method was added in Mockito 2 ([1]) and was implemented in all relevant subclasses. However  most subclasses do not implement a custom description.  Since we are now building on Java 8  we can ship this as a default method and remove all duplicate subclass implementations. As a side-effect  it allows users of Mockito 1 to migrate to Mockito 3 without additional breakages. (They could implement it  but VerificationModeFactory is internal and would require additional boilerplate)  [1]: https://github.com/mockito/mockito/pull/68
1807 ;  src/main/java/org/mockito/internal/verification/MockAwareVerificationMode.java ; Add default implementation for VerificationMode#description ; This method was added in Mockito 2 ([1]) and was implemented in all relevant subclasses. However  most subclasses do not implement a custom description.  Since we are now building on Java 8  we can ship this as a default method and remove all duplicate subclass implementations. As a side-effect  it allows users of Mockito 1 to migrate to Mockito 3 without additional breakages. (They could implement it  but VerificationModeFactory is internal and would require additional boilerplate)  [1]: https://github.com/mockito/mockito/pull/68
1807 ;  src/main/java/org/mockito/internal/verification/NoInteractions.java ; Add default implementation for VerificationMode#description ; This method was added in Mockito 2 ([1]) and was implemented in all relevant subclasses. However  most subclasses do not implement a custom description.  Since we are now building on Java 8  we can ship this as a default method and remove all duplicate subclass implementations. As a side-effect  it allows users of Mockito 1 to migrate to Mockito 3 without additional breakages. (They could implement it  but VerificationModeFactory is internal and would require additional boilerplate)  [1]: https://github.com/mockito/mockito/pull/68
1807 ;  src/main/java/org/mockito/internal/verification/NoMoreInteractions.java ; Add default implementation for VerificationMode#description ; This method was added in Mockito 2 ([1]) and was implemented in all relevant subclasses. However  most subclasses do not implement a custom description.  Since we are now building on Java 8  we can ship this as a default method and remove all duplicate subclass implementations. As a side-effect  it allows users of Mockito 1 to migrate to Mockito 3 without additional breakages. (They could implement it  but VerificationModeFactory is internal and would require additional boilerplate)  [1]: https://github.com/mockito/mockito/pull/68
1807 ;  src/main/java/org/mockito/internal/verification/Only.java ; Add default implementation for VerificationMode#description ; This method was added in Mockito 2 ([1]) and was implemented in all relevant subclasses. However  most subclasses do not implement a custom description.  Since we are now building on Java 8  we can ship this as a default method and remove all duplicate subclass implementations. As a side-effect  it allows users of Mockito 1 to migrate to Mockito 3 without additional breakages. (They could implement it  but VerificationModeFactory is internal and would require additional boilerplate)  [1]: https://github.com/mockito/mockito/pull/68
1807 ;  src/main/java/org/mockito/internal/verification/VerificationOverTimeImpl.java ; Add default implementation for VerificationMode#description ; This method was added in Mockito 2 ([1]) and was implemented in all relevant subclasses. However  most subclasses do not implement a custom description.  Since we are now building on Java 8  we can ship this as a default method and remove all duplicate subclass implementations. As a side-effect  it allows users of Mockito 1 to migrate to Mockito 3 without additional breakages. (They could implement it  but VerificationModeFactory is internal and would require additional boilerplate)  [1]: https://github.com/mockito/mockito/pull/68
1807 ;  src/main/java/org/mockito/internal/verification/VerificationWrapperInOrderWrapper.java ; Add default implementation for VerificationMode#description ; This method was added in Mockito 2 ([1]) and was implemented in all relevant subclasses. However  most subclasses do not implement a custom description.  Since we are now building on Java 8  we can ship this as a default method and remove all duplicate subclass implementations. As a side-effect  it allows users of Mockito 1 to migrate to Mockito 3 without additional breakages. (They could implement it  but VerificationModeFactory is internal and would require additional boilerplate)  [1]: https://github.com/mockito/mockito/pull/68
1807 ;  src/main/java/org/mockito/verification/After.java ; Add default implementation for VerificationMode#description ; This method was added in Mockito 2 ([1]) and was implemented in all relevant subclasses. However  most subclasses do not implement a custom description.  Since we are now building on Java 8  we can ship this as a default method and remove all duplicate subclass implementations. As a side-effect  it allows users of Mockito 1 to migrate to Mockito 3 without additional breakages. (They could implement it  but VerificationModeFactory is internal and would require additional boilerplate)  [1]: https://github.com/mockito/mockito/pull/68
1807 ;  src/main/java/org/mockito/verification/Timeout.java ; Add default implementation for VerificationMode#description ; This method was added in Mockito 2 ([1]) and was implemented in all relevant subclasses. However  most subclasses do not implement a custom description.  Since we are now building on Java 8  we can ship this as a default method and remove all duplicate subclass implementations. As a side-effect  it allows users of Mockito 1 to migrate to Mockito 3 without additional breakages. (They could implement it  but VerificationModeFactory is internal and would require additional boilerplate)  [1]: https://github.com/mockito/mockito/pull/68
1807 ;  src/main/java/org/mockito/verification/VerificationMode.java ; Add default implementation for VerificationMode#description ; This method was added in Mockito 2 ([1]) and was implemented in all relevant subclasses. However  most subclasses do not implement a custom description.  Since we are now building on Java 8  we can ship this as a default method and remove all duplicate subclass implementations. As a side-effect  it allows users of Mockito 1 to migrate to Mockito 3 without additional breakages. (They could implement it  but VerificationModeFactory is internal and would require additional boilerplate)  [1]: https://github.com/mockito/mockito/pull/68
1809 ;  src/main/java/org/mockito/Mockito.java ; update javadoc.io link from /page/ to /doc/  which gives an extra nav… ; … bar on the top so that users can easily navigate to old versions  > Hey   >  > Thanks for the contribution  this is awesome. > As you may have read  project members have somehow an opinionated view on what and how should be > Mockito  e.g. we don t want mockito to be a feature bloat. > There may be a thorough review  with feedback -> code change loop. >  > Which branch :  > - On mockito 3.x  make your pull request target  release/3.x  > - On mockito 2.x  make your pull request target  release/2.x  (2.x is in maintenance mode) > > _This block can be removed_ > _Something wrong in the template fix it here  .github/PULL_REQUEST_TEMPLATE.md    check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1809 ;  src/main/java/org/mockito/junit/MockitoJUnit.java ; update javadoc.io link from /page/ to /doc/  which gives an extra nav… ; … bar on the top so that users can easily navigate to old versions  > Hey   >  > Thanks for the contribution  this is awesome. > As you may have read  project members have somehow an opinionated view on what and how should be > Mockito  e.g. we don t want mockito to be a feature bloat. > There may be a thorough review  with feedback -> code change loop. >  > Which branch :  > - On mockito 3.x  make your pull request target  release/3.x  > - On mockito 2.x  make your pull request target  release/2.x  (2.x is in maintenance mode) > > _This block can be removed_ > _Something wrong in the template fix it here  .github/PULL_REQUEST_TEMPLATE.md    check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1810 ; src/test/java/org/mockito/internal/configuration/InjectingAnnotationEngineTest.java ; Revert  Fixes #1587 : Remove unnecessary loop from InjectingAnnotationEngine  ; Reverts mockito/mockito#1588 Related to #1631   Here s a pseudo code to describe the issues around this issue.  # Before 2.23.15:	      while (clazz != Object.clazz) { 	val mocks = aggregateSpyOrMockFields(clazz.getMockFields())    val fields = aggregateInjectMocksFields(clazz)  	val ret = tryConstructorInjection(clazz  fields  mock)    if (! ret.fieldWasInitializedUsingConstructorInjection()) {     trySetterOrPropertyInjection(clazz  fields  mock)    } 	clazz = clazz.getSuperclass()  }     # After 2.23.15:     	val mocks = aggregateSpyOrMockFields(clazz.getMockFields())    val fields = aggregateInjectMocksFields(clazz)  	val ret = tryConstructorInjection(clazz  fields  mock)    if (! ret.fieldWasInitializedUsingConstructorInjection()) {     trySetterOrPropertyInjection(clazz  fields  mock)    }      # Details  Before 2.23.15  if the  @InjectMocks  field has a field that not listed in the constructor argument will fill by setter/property injection at the 2nd loop 😃 It may not the expected behaviors by Mockito authors  but some users  code depends on this behavior.  My suggestion is to revert the [Fixes #1587 : Remove unnecessary loop from InjectingAnnotationEngine by LihMeh · Pull Request #1588 · mockito/mockito · GitHub](https://github.com/mockito/mockito/pull/1588) at this time.
1811 ;  src/main/java/org/mockito/AdditionalAnswers.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/Answers.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/ArgumentMatchers.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/InjectMocks.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/Mock.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/MockSettings.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/MockingDetails.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/Spy.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/exceptions/base/MockitoSerializationIssue.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/hamcrest/MockitoHamcrest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/InOrderImpl.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/MockitoCore.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/CaptorAnnotationProcessor.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/GlobalConfiguration.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/IndependentAnnotationEngine.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/InjectingAnnotationEngine.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/MockAnnotationProcessor.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/injection/ConstructorInjection.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/injection/MockInjection.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/injection/SpyOnInjectedFieldsHandler.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/injection/filter/TerminalMockCandidateFilter.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/injection/scanner/InjectMocksScanner.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/injection/scanner/MockScanner.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/plugins/DefaultMockitoPlugins.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginFileReader.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginFinder.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginInitializer.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/configuration/plugins/Plugins.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/DelegatingMethod.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/MockSettingsImpl.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockFeatures.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodInterceptor.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ModuleHandler.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassInjectionLoader.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/creation/settings/CreationSettings.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/debugging/InvocationsPrinter.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/debugging/LocationImpl.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/debugging/LoggingListener.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/debugging/MockitoDebuggerImpl.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/debugging/VerboseMockInvocationLogger.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/debugging/WarningsCollector.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/debugging/WarningsFinder.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/debugging/WarningsPrinterImpl.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilter.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/framework/DefaultMockitoFramework.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/framework/DefaultMockitoSession.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractor.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/handler/MockHandlerImpl.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/handler/NotifiedMethodInvocationReport.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/handler/NullResultGuardian.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/invocation/ArgumentsProcessor.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/invocation/DefaultInvocationFactory.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/invocation/InterceptedInvocation.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/invocation/InvocationComparator.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/invocation/InvocationMarker.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/invocation/InvocationMatcher.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/invocation/RealMethod.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/invocation/SerializableMethod.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/invocation/StubInfoImpl.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/invocation/finder/AllInvocationsFinder.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/invocation/finder/VerifiableInvocationsFinder.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/junit/DefaultStubbingLookupListener.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/junit/JUnitRule.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/junit/MismatchReportingTestListener.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/junit/StubbingArgMismatches.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/junit/UniversalTestListener.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/junit/UnnecessaryStubbingsReporter.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/junit/UnusedStubbings.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/junit/UnusedStubbingsFinder.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/junit/util/JUnitFailureHacker.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/listeners/StubbingLookupNotifier.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/CapturingMatcher.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/CompareTo.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/Contains.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/Equals.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/EqualsWithDelta.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/InstanceOf.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/Matches.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/Not.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/NotNull.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/Null.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/Same.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/StartsWith.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/text/MatcherToString.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/text/MatchersPrinter.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/progress/ArgumentMatcherStorage.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/progress/MockingProgress.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/reporting/PrintSettings.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/reporting/SmartPrinter.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/runners/RunnerFactory.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/runners/util/RunnerProvider.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/runners/util/TestMethodsFinder.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/session/DefaultMockitoSessionBuilder.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/BaseStubbing.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/DoAnswerStyleStubbing.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/StubbedInvocationMatcher.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/StubbingComparator.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswersWithDelay.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/answers/CallsRealMethods.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/answers/ClonesArguments.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/answers/DefaultAnswerValidator.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/answers/DoesNothing.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/answers/InvocationInfo.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/answers/Returns.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsElementsOf.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/answers/ThrowsException.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/RetrieveGenericsForDefaultAnswers.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/TriesToReturnSelf.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/util/DefaultMockingDetails.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/util/JavaEightUtil.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/util/MockNameImpl.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/util/MockUtil.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/util/ObjectMethodsGuru.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/util/Platform.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSet.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/util/collections/Sets.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/util/io/IOUtil.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/util/reflection/FieldReader.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/util/reflection/Fields.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/util/reflection/InstanceField.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/AtMost.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/Calls.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/DefaultRegisteredInvocations.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/InOrderWrapper.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/MockAwareVerificationMode.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/NoInteractions.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/Only.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/RegisteredInvocations.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/SingleRegisteredInvocation.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/Times.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/VerificationDataImpl.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/api/VerificationData.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/invocation/Invocation.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/invocation/InvocationFactory.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/invocation/InvocationOnMock.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/invocation/MatchableInvocation.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/invocation/MockHandler.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/junit/MockitoJUnitRunner.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/junit/MockitoRule.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/listeners/StubbingLookupEvent.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/mock/MockCreationSettings.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/runners/MockitoJUnitRunner.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/main/java/org/mockito/runners/VerboseMockitoJUnitRunner.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/concurrentmockito/ThreadVerifiesContinuouslyInteractingMockTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/concurrentmockito/ThreadsShareAMockTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/AnnotationsAreCopiedFromMockedTypeTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/ArgumentCaptorTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/InvocationFactoryTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/MockitoTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/StateMaster.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/StaticMockingExperimentTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/exceptions/base/MockitoAssertionErrorTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/exceptions/base/MockitoExceptionTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/exceptions/base/MockitoSerializationIssueTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/exceptions/stacktrace/StackTraceCleanerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/AllInvocationsFinderTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/InOrderImplTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/InvalidStateDetectionTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/configuration/ClassPathLoaderTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/configuration/GlobalConfigurationTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/configuration/MockInjectionTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/configuration/injection/ConstructorInjectionTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/configuration/injection/SimpleArgumentResolverTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/configuration/plugins/DefaultMockitoPluginsTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/configuration/plugins/PluginFinderTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/configuration/plugins/PluginLoaderTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/creation/DelegatingMethodTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/creation/InterfaceOverrideTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/creation/MockSettingsImplTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/creation/bytebuddy/AbstractByteBuddyMockMakerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMakerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/creation/bytebuddy/TypeCachingMockBytecodeGeneratorTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/debugging/LoggingListenerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/debugging/WarningsFinderTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/exceptions/ReporterTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilterTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/exceptions/util/ScenarioPrinterTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/framework/DefaultMockitoFrameworkTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractorTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/handler/InvocationNotifierHandlerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/handler/MockHandlerFactoryTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/handler/MockHandlerImplTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/invocation/InvocationBuilder.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/invocation/InvocationMarkerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/invocation/InvocationMatcherTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/invocation/InvocationsFinderTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/invocation/MatcherApplicationStrategyTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/invocation/SerializableMethodTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/invocation/mockref/MockWeakReferenceTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/junit/ArgMismatchFinderTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/junit/JUnitRuleTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/junit/StubbingArgMismatchesTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/junit/UnusedStubbingsTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/junit/util/JUnitFailureHackerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/listeners/StubbingLookupNotifierTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/listeners/VerificationStartedNotifierTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/matchers/CapturingMatcherTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/matchers/ComparableMatchersTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/matchers/EqualityTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/matchers/EqualsTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/matchers/InstanceOfTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/matchers/MatchersPrinterTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/matchers/MatchersToStringTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/matchers/StringMatchersTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/matchers/apachecommons/EqualsBuilderTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/matchers/text/MatcherToStringTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/matchers/text/ValuePrinterTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/progress/AtLeastTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/progress/MockingProgressImplTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/progress/ThreadSafeMockingProgressTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/reporting/PluralizerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/runners/DefaultInternalRunnerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/runners/util/RunnerProviderTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/runners/util/TestMethodsFinderTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/session/DefaultMockitoSessionBuilderTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/InvocationContainerImplStubbingTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/InvocationContainerImplTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/answers/AnswersWithDelayTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/answers/CallsRealMethodsTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/answers/DefaultAnswerValidatorTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/answers/InvocationInfoTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAtTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/answers/ReturnsTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/answers/ThrowsExceptionTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocationsTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValuesTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsGenericDeepStubsTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocksTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValuesTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNullsTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/DefaultMockingDetailsTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/MockCreationValidatorTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/MockNameImplTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/MockSettingsTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/MockUtilTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/ObjectMethodsGuruTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/PlatformTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/PrimitivesTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/SimpleMockitoLoggerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/StringUtilTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/collections/IdentitySetTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/collections/ListUtilTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/io/IOUtilTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/reflection/AccessibilityChangerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/reflection/BeanPropertySetterTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/reflection/FieldInitializerTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/reflection/FieldReaderTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/reflection/FieldsTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/reflection/GenericArrayReturnTypeTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/reflection/GenericMasterTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/reflection/GenericTypeExtractorTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1811 ;  src/test/java/org/mockito/internal/util/reflection/SuperTypesLastSorterTest.java ; Apply consistent import ordering with spotless ; Spotless allows us to enforce a consistent import order. Configure it such that static imports are first and non-static imports afterwards. Within imports  java imports first  then javax  then all others.  This is consistent with the existing CONTRIBUTING.md guidelines  apart from the fact that static imports are first. (File has been updated). I would propose that makes more sense  but happy to discuss.  In any case  spotless already found inconsistent ordering within imports themselves  so that is already providing value for consistency.  I have also updated the CONTRIBUTING guidelines to explain how  ./gradlew spotlessApply  will fix a lot of issues without the developer having to worry about it. That should hopefully help newcomers make changes more confidently.  (The only 2 files that are interesting to you are the  build.gradle  and  .github/CONTRIBUTING.md . All other file changes were automatically performed after running  ./gradlew spotlessApply  locally.)
1813 ; src/test/java/org/mockitoutil/ClassLoaders.java ; Fixes #1771: Upgrade byte-buddy to 1.10.2 (from 1.9.10) ; Release notes: https://github.com/raphw/byte-buddy/releases/tag/byte-buddy-1.10.2 https://github.com/raphw/byte-buddy/releases/tag/byte-buddy-1.10.1 https://github.com/raphw/byte-buddy/releases/tag/byte-buddy-1.10.0 https://github.com/raphw/byte-buddy/releases/tag/byte-buddy-1.9.16 https://github.com/raphw/byte-buddy/releases/tag/byte-buddy-1.9.15 https://github.com/raphw/byte-buddy/releases/tag/byte-buddy-1.9.14 https://github.com/raphw/byte-buddy/releases/tag/byte-buddy-1.9.13 https://github.com/raphw/byte-buddy/releases/tag/byte-buddy-1.9.12 https://github.com/raphw/byte-buddy/releases/tag/byte-buddy-1.9.11  Relevant commits: raphw/byte-buddy@byte-buddy-1.9.10...byte-buddy-1.10.2
1816 ; src/main/java/org/mockito/Mockito.java ; fix document error ;  list.contains(any())  return a  boolean  value  not a  String  value.
1818 ; src/main/java/org/mockito/Mockito.java ; Add Duration overloads. Fixes #1815 ; Add new  java.time.Duration -based public APIs to  Mockito    After   and  Timeout  and deprecate the corresponding  long -based public APIs. Plumb those  Duration  instances through the internals of Mockito.
1818 ;  src/main/java/org/mockito/internal/util/Timer.java ; Add Duration overloads. Fixes #1815 ; Add new  java.time.Duration -based public APIs to  Mockito    After   and  Timeout  and deprecate the corresponding  long -based public APIs. Plumb those  Duration  instances through the internals of Mockito.
1818 ;  src/main/java/org/mockito/verification/After.java ; Add Duration overloads. Fixes #1815 ; Add new  java.time.Duration -based public APIs to  Mockito    After   and  Timeout  and deprecate the corresponding  long -based public APIs. Plumb those  Duration  instances through the internals of Mockito.
1818 ;  src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; Add Duration overloads. Fixes #1815 ; Add new  java.time.Duration -based public APIs to  Mockito    After   and  Timeout  and deprecate the corresponding  long -based public APIs. Plumb those  Duration  instances through the internals of Mockito.
1819 ; src/main/java/org/mockito/hamcrest/MockitoHamcrest.java ; Deprecate MockitoHamcrest ; This class was used during the migration period from Mockito 1 and Mockito 2  but is no longer necessary. To be able to remove our dependency on Hamcrest  we should remove MockitoHamcrest.  In response to #1817
1820 ;  src/main/java/org/mockito/internal/configuration/injection/SpyOnInjectedFieldsHandler.java ; Indent with spaces using spotless ; Discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces)  spotless did not fix the formatting.  indentWithSpaces(4)  does just that and it actually found other formatting issues.
1820 ;  src/main/java/org/mockito/internal/junit/JUnitRule.java ; Indent with spaces using spotless ; Discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces)  spotless did not fix the formatting.  indentWithSpaces(4)  does just that and it actually found other formatting issues.
1820 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java ; Indent with spaces using spotless ; Discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces)  spotless did not fix the formatting.  indentWithSpaces(4)  does just that and it actually found other formatting issues.
1820 ;  src/main/java/org/mockito/internal/util/MockUtil.java ; Indent with spaces using spotless ; Discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces)  spotless did not fix the formatting.  indentWithSpaces(4)  does just that and it actually found other formatting issues.
1820 ;  src/test/java/org/mockito/ArgumentCaptorTest.java ; Indent with spaces using spotless ; Discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces)  spotless did not fix the formatting.  indentWithSpaces(4)  does just that and it actually found other formatting issues.
1820 ;  src/test/java/org/mockito/internal/InvalidStateDetectionTest.java ; Indent with spaces using spotless ; Discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces)  spotless did not fix the formatting.  indentWithSpaces(4)  does just that and it actually found other formatting issues.
1820 ;  src/test/java/org/mockito/internal/handler/MockHandlerFactoryTest.java ; Indent with spaces using spotless ; Discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces)  spotless did not fix the formatting.  indentWithSpaces(4)  does just that and it actually found other formatting issues.
1820 ;  src/test/java/org/mockito/internal/matchers/StringMatchersTest.java ; Indent with spaces using spotless ; Discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces)  spotless did not fix the formatting.  indentWithSpaces(4)  does just that and it actually found other formatting issues.
1820 ;  src/test/java/org/mockito/internal/progress/TimesTest.java ; Indent with spaces using spotless ; Discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces)  spotless did not fix the formatting.  indentWithSpaces(4)  does just that and it actually found other formatting issues.
1820 ;  src/test/java/org/mockito/internal/verification/checkers/MissingInvocationInOrderCheckerTest.java ; Indent with spaces using spotless ; Discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces)  spotless did not fix the formatting.  indentWithSpaces(4)  does just that and it actually found other formatting issues.
1820 ;  src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java ; Indent with spaces using spotless ; Discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces)  spotless did not fix the formatting.  indentWithSpaces(4)  does just that and it actually found other formatting issues.
1820 ;  src/test/java/org/mockitousage/junitrule/RuleTestWithParameterConstructorTest.java ; Indent with spaces using spotless ; Discovered in #1818 that (if new contributors are unaware of our indentation with 4 spaces)  spotless did not fix the formatting.  indentWithSpaces(4)  does just that and it actually found other formatting issues.
1821 ; src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java ; Guard against multiple evaluations of before statement ; Some rules evaluate the base statement multiple times  e.g. to execute tests repeatedly. The changes made in #1672 led to an exception in such cases because the  MockitoListener  was registered multiple times. Now  we only add the listener the first time the statement is evaluated in order to restore the old behavior.  Fixes #1767.
1823 ; src/main/java/org/mockito/InjectMocks.java ; fix a word mistake ; nan
1832 ; subprojects/errorprone/src/main/java/org/mockito/errorprone/bugpatterns/AbstractMockitoAnyForPrimitiveType.java ; Add matchers for incompatible type matchers ; We discovered that users run into issues with using the wrong Mockito matcher for arguments. Examples include  any(Integer.class)  instead of  anyInt()  and  anyInt()  instead of  anyFloat() . Users then run into cryptic run-time errors that are difficult to understand.  These ErrorProne checkers make these a compile warning  to warn the user before hand. They also provide the appropriate fixes that can be directly applied.
1832 ;  subprojects/errorprone/src/main/java/org/mockito/errorprone/bugpatterns/MockitoAnyClassWithPrimitiveType.java ; Add matchers for incompatible type matchers ; We discovered that users run into issues with using the wrong Mockito matcher for arguments. Examples include  any(Integer.class)  instead of  anyInt()  and  anyInt()  instead of  anyFloat() . Users then run into cryptic run-time errors that are difficult to understand.  These ErrorProne checkers make these a compile warning  to warn the user before hand. They also provide the appropriate fixes that can be directly applied.
1832 ;  subprojects/errorprone/src/main/java/org/mockito/errorprone/bugpatterns/MockitoAnyIncorrectPrimitiveType.java ; Add matchers for incompatible type matchers ; We discovered that users run into issues with using the wrong Mockito matcher for arguments. Examples include  any(Integer.class)  instead of  anyInt()  and  anyInt()  instead of  anyFloat() . Users then run into cryptic run-time errors that are difficult to understand.  These ErrorProne checkers make these a compile warning  to warn the user before hand. They also provide the appropriate fixes that can be directly applied.
1832 ;  subprojects/errorprone/src/test/java/org/mockito/errorprone/bugpatterns/MockitoAnyClassWithPrimitiveTypeTest.java ; Add matchers for incompatible type matchers ; We discovered that users run into issues with using the wrong Mockito matcher for arguments. Examples include  any(Integer.class)  instead of  anyInt()  and  anyInt()  instead of  anyFloat() . Users then run into cryptic run-time errors that are difficult to understand.  These ErrorProne checkers make these a compile warning  to warn the user before hand. They also provide the appropriate fixes that can be directly applied.
1832 ;  subprojects/errorprone/src/test/java/org/mockito/errorprone/bugpatterns/MockitoAnyIncorrectPrimitiveTypeTest.java ; Add matchers for incompatible type matchers ; We discovered that users run into issues with using the wrong Mockito matcher for arguments. Examples include  any(Integer.class)  instead of  anyInt()  and  anyInt()  instead of  anyFloat() . Users then run into cryptic run-time errors that are difficult to understand.  These ErrorProne checkers make these a compile warning  to warn the user before hand. They also provide the appropriate fixes that can be directly applied.
1845 ; src/main/java/org/mockito/Mockito.java ; Revert  Add Duration overloads. Fixes #1815  ; Reverts mockito/mockito#1818  Fixes #1843
1845 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Revert  Add Duration overloads. Fixes #1815  ; Reverts mockito/mockito#1818  Fixes #1843
1845 ;  src/main/java/org/mockito/internal/util/Timer.java ; Revert  Add Duration overloads. Fixes #1815  ; Reverts mockito/mockito#1818  Fixes #1843
1845 ;  src/main/java/org/mockito/internal/verification/VerificationOverTimeImpl.java ; Revert  Add Duration overloads. Fixes #1815  ; Reverts mockito/mockito#1818  Fixes #1843
1845 ;  src/main/java/org/mockito/internal/verification/VerificationWrapperInOrderWrapper.java ; Revert  Add Duration overloads. Fixes #1815  ; Reverts mockito/mockito#1818  Fixes #1843
1845 ;  src/main/java/org/mockito/verification/After.java ; Revert  Add Duration overloads. Fixes #1815  ; Reverts mockito/mockito#1818  Fixes #1843
1845 ;  src/main/java/org/mockito/verification/Timeout.java ; Revert  Add Duration overloads. Fixes #1815  ; Reverts mockito/mockito#1818  Fixes #1843
1845 ;  src/test/java/org/mockito/internal/util/TimerTest.java ; Revert  Add Duration overloads. Fixes #1815  ; Reverts mockito/mockito#1818  Fixes #1843
1845 ;  src/test/java/org/mockito/internal/verification/VerificationOverTimeImplTest.java ; Revert  Add Duration overloads. Fixes #1815  ; Reverts mockito/mockito#1818  Fixes #1843
1845 ;  src/test/java/org/mockito/verification/TimeoutTest.java ; Revert  Add Duration overloads. Fixes #1815  ; Reverts mockito/mockito#1818  Fixes #1843
1845 ;  src/test/java/org/mockitousage/verification/VerificationWithTimeoutTest.java ; Revert  Add Duration overloads. Fixes #1815  ; Reverts mockito/mockito#1818  Fixes #1843
1847 ; src/main/java/org/mockito/internal/exceptions/Reporter.java ; Fixed undetected unused stubbing when matching previous stubbed call ; Fixes #1846 
1847 ;  src/main/java/org/mockito/internal/reporting/Pluralizer.java ; Fixed undetected unused stubbing when matching previous stubbed call ; Fixes #1846 
1847 ;  src/test/java/org/mockito/internal/reporting/PluralizerTest.java ; Fixed undetected unused stubbing when matching previous stubbed call ; Fixes #1846 
1847 ;  src/test/java/org/mockitousage/junitrule/StrictJUnitRuleTest.java ; Fixed undetected unused stubbing when matching previous stubbed call ; Fixes #1846 
1847 ;  src/test/java/org/mockitousage/junitrunner/UnusedStubsExceptionMessageTest.java ; Fixed undetected unused stubbing when matching previous stubbed call ; Fixes #1846 
1847 ;  src/test/java/org/mockitousage/stubbing/StrictStubbingEndToEndTest.java ; Fixed undetected unused stubbing when matching previous stubbed call ; Fixes #1846 
1847 ;  src/test/java/org/mockitousage/stubbing/StrictStubbingTest.java ; Fixed undetected unused stubbing when matching previous stubbed call ; Fixes #1846 
1849 ; src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java ; Performance optimization by using Method.getParameterCount() where possible ; Hi   as described in #1848 we could make use of  Method.getParameterCount()  in order to save some overhead from unnecessary cloning caused by  Method.getParameterTypes() .  As this is my first contribution to Mockito  let me know if I can do something to help.  Let me know what you think. Cheers  Christoph
1849 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Performance optimization by using Method.getParameterCount() where possible ; Hi   as described in #1848 we could make use of  Method.getParameterCount()  in order to save some overhead from unnecessary cloning caused by  Method.getParameterTypes() .  As this is my first contribution to Mockito  let me know if I can do something to help.  Let me know what you think. Cheers  Christoph
1849 ;  src/main/java/org/mockito/internal/invocation/InvocationMatcher.java ; Performance optimization by using Method.getParameterCount() where possible ; Hi   as described in #1848 we could make use of  Method.getParameterCount()  in order to save some overhead from unnecessary cloning caused by  Method.getParameterTypes() .  As this is my first contribution to Mockito  let me know if I can do something to help.  Let me know what you think. Cheers  Christoph
1849 ;  src/main/java/org/mockito/internal/invocation/TypeSafeMatching.java ; Performance optimization by using Method.getParameterCount() where possible ; Hi   as described in #1848 we could make use of  Method.getParameterCount()  in order to save some overhead from unnecessary cloning caused by  Method.getParameterTypes() .  As this is my first contribution to Mockito  let me know if I can do something to help.  Let me know what you think. Cheers  Christoph
1849 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java ; Performance optimization by using Method.getParameterCount() where possible ; Hi   as described in #1848 we could make use of  Method.getParameterCount()  in order to save some overhead from unnecessary cloning caused by  Method.getParameterTypes() .  As this is my first contribution to Mockito  let me know if I can do something to help.  Let me know what you think. Cheers  Christoph
1849 ;  src/main/java/org/mockito/internal/util/ObjectMethodsGuru.java ; Performance optimization by using Method.getParameterCount() where possible ; Hi   as described in #1848 we could make use of  Method.getParameterCount()  in order to save some overhead from unnecessary cloning caused by  Method.getParameterTypes() .  As this is my first contribution to Mockito  let me know if I can do something to help.  Let me know what you think. Cheers  Christoph
1849 ;  src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java ; Performance optimization by using Method.getParameterCount() where possible ; Hi   as described in #1848 we could make use of  Method.getParameterCount()  in order to save some overhead from unnecessary cloning caused by  Method.getParameterTypes() .  As this is my first contribution to Mockito  let me know if I can do something to help.  Let me know what you think. Cheers  Christoph
1850 ;  subprojects/osgi-test/src/test/java/org/mockito/osgitest/OsgiTest.java ; Fixes  #522 : Basic test suite for OSGi framework ; This is a proposal for a basic test project to ensure that the Mockito artifacts can be consumed from an OSGi environment. For example  reverting the fix for #678 is caught with the following exception:      java.lang.IllegalStateException: Failed to install bundle: mockito-core-3.2.3.jar 	at org.mockito.osgitest.OsgiTest.setUp(OsgiTest.java:55) 	... (snipped) Caused by: org.osgi.framework.BundleException: Error occurred installing a bundle. 	at org.eclipse.osgi.storage.Storage.install(Storage.java:739) 	at org.eclipse.osgi.internal.framework.BundleContextImpl.installBundle(BundleContextImpl.java:187) 	at org.eclipse.osgi.internal.framework.BundleContextImpl.installBundle(BundleContextImpl.java:179) 	at org.mockito.osgitest.OsgiTest.setUp(OsgiTest.java:53) 	... 40 more Caused by: java.lang.IllegalArgumentException: invalid range  [1.6.0 : invalid format 	at org.osgi.framework.VersionRange.<init>(VersionRange.java:173) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.addPackageImports(OSGiManifestBuilderFactory.java:373) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.getPackageImports(OSGiManifestBuilderFactory.java:352) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.createBuilder(OSGiManifestBuilderFactory.java:111) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.createBuilder(OSGiManifestBuilderFactory.java:78) 	at org.eclipse.osgi.storage.Storage.getBuilder(Storage.java:784) 	at org.eclipse.osgi.storage.Storage.getBuilder(Storage.java:766) 	at org.eclipse.osgi.storage.Storage.install(Storage.java:706) 	... 43 more Caused by: java.util.NoSuchElementException 	at java.util.StringTokenizer.nextToken(StringTokenizer.java:349) 	at org.osgi.framework.VersionRange.<init>(VersionRange.java:157) 	... 50 more      The OSGi test project consists of three source sets:  1. A regular JUnit4  test  source set with a single class OsgiTest. Starts an OSGi framework  installs mockito-core  byte-buddy and objenesis bundles as well as two test bundles  and executes some simple Mockito test cases inside the OSGi framework. 2. A source set  testBundle  that s built to an OSGi bundle using the  Bundle  task from the Bnd Gradle Plugin. Contains the test classes that run the Mockito test cases and thus depends on the Mockito bundle. 3. A source set  otherBundle  that s also built to an OSGi bundle but with no other dependencies. Used for testing mocking of classes from other bundles.  Some further technical details:  - The  test  source set only has compile dependencies on the OSGi APIs and JUnit4  i.e. not on Mockito. The OSGi framework is created using the standard Framework API. At runtime Equinox is added as a dependency to supply an actual framework implementation  but the intention is that any framework implementation could be used. - The test cases are run by loading classes from the test bundle that all implement  Runnable . This is to provide a simple bridge using a common JDK class. The reason for setting up such a bridge is that I want to drive the tests using a test runner that Gradle supports  for example to get good test reports  but the test bundles don t know anything about JUnit4 inside the OSGi framework. I didn t want to explore adding an OSGified version of JUnit into the mix at this point since that would also entail solving test discovery inside an OSGi framework. - The OSGi bundles are built using the [Bnd Gradle Plugin](https://github.com/bndtools/bnd/blob/master/biz.aQute.bnd.gradle/README.md#gradle-plugin-for-workspace-builds) instead of the deprecated  osgi  plugin in Gradle. The reason is both future proofing  to not impede a migration to Gradle 6.0 in this new sub project  and that I believe it better mirrors how other projects would consume the Mockito artifacts. Further it paves the way for replacing the usage of the deprecated plugin for the creating the OSGi manifests in the root project.  Since this is my first contribution I ll be happy to fix anything that goes against the grains.
1850 ;  subprojects/osgi-test/src/testBundle/java/org/mockito/osgitest/testbundle/MockClassInOtherBundleTest.java ; Fixes  #522 : Basic test suite for OSGi framework ; This is a proposal for a basic test project to ensure that the Mockito artifacts can be consumed from an OSGi environment. For example  reverting the fix for #678 is caught with the following exception:      java.lang.IllegalStateException: Failed to install bundle: mockito-core-3.2.3.jar 	at org.mockito.osgitest.OsgiTest.setUp(OsgiTest.java:55) 	... (snipped) Caused by: org.osgi.framework.BundleException: Error occurred installing a bundle. 	at org.eclipse.osgi.storage.Storage.install(Storage.java:739) 	at org.eclipse.osgi.internal.framework.BundleContextImpl.installBundle(BundleContextImpl.java:187) 	at org.eclipse.osgi.internal.framework.BundleContextImpl.installBundle(BundleContextImpl.java:179) 	at org.mockito.osgitest.OsgiTest.setUp(OsgiTest.java:53) 	... 40 more Caused by: java.lang.IllegalArgumentException: invalid range  [1.6.0 : invalid format 	at org.osgi.framework.VersionRange.<init>(VersionRange.java:173) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.addPackageImports(OSGiManifestBuilderFactory.java:373) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.getPackageImports(OSGiManifestBuilderFactory.java:352) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.createBuilder(OSGiManifestBuilderFactory.java:111) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.createBuilder(OSGiManifestBuilderFactory.java:78) 	at org.eclipse.osgi.storage.Storage.getBuilder(Storage.java:784) 	at org.eclipse.osgi.storage.Storage.getBuilder(Storage.java:766) 	at org.eclipse.osgi.storage.Storage.install(Storage.java:706) 	... 43 more Caused by: java.util.NoSuchElementException 	at java.util.StringTokenizer.nextToken(StringTokenizer.java:349) 	at org.osgi.framework.VersionRange.<init>(VersionRange.java:157) 	... 50 more      The OSGi test project consists of three source sets:  1. A regular JUnit4  test  source set with a single class OsgiTest. Starts an OSGi framework  installs mockito-core  byte-buddy and objenesis bundles as well as two test bundles  and executes some simple Mockito test cases inside the OSGi framework. 2. A source set  testBundle  that s built to an OSGi bundle using the  Bundle  task from the Bnd Gradle Plugin. Contains the test classes that run the Mockito test cases and thus depends on the Mockito bundle. 3. A source set  otherBundle  that s also built to an OSGi bundle but with no other dependencies. Used for testing mocking of classes from other bundles.  Some further technical details:  - The  test  source set only has compile dependencies on the OSGi APIs and JUnit4  i.e. not on Mockito. The OSGi framework is created using the standard Framework API. At runtime Equinox is added as a dependency to supply an actual framework implementation  but the intention is that any framework implementation could be used. - The test cases are run by loading classes from the test bundle that all implement  Runnable . This is to provide a simple bridge using a common JDK class. The reason for setting up such a bridge is that I want to drive the tests using a test runner that Gradle supports  for example to get good test reports  but the test bundles don t know anything about JUnit4 inside the OSGi framework. I didn t want to explore adding an OSGified version of JUnit into the mix at this point since that would also entail solving test discovery inside an OSGi framework. - The OSGi bundles are built using the [Bnd Gradle Plugin](https://github.com/bndtools/bnd/blob/master/biz.aQute.bnd.gradle/README.md#gradle-plugin-for-workspace-builds) instead of the deprecated  osgi  plugin in Gradle. The reason is both future proofing  to not impede a migration to Gradle 6.0 in this new sub project  and that I believe it better mirrors how other projects would consume the Mockito artifacts. Further it paves the way for replacing the usage of the deprecated plugin for the creating the OSGi manifests in the root project.  Since this is my first contribution I ll be happy to fix anything that goes against the grains.
1850 ;  subprojects/osgi-test/src/testBundle/java/org/mockito/osgitest/testbundle/MockNonPublicClassFailsTest.java ; Fixes  #522 : Basic test suite for OSGi framework ; This is a proposal for a basic test project to ensure that the Mockito artifacts can be consumed from an OSGi environment. For example  reverting the fix for #678 is caught with the following exception:      java.lang.IllegalStateException: Failed to install bundle: mockito-core-3.2.3.jar 	at org.mockito.osgitest.OsgiTest.setUp(OsgiTest.java:55) 	... (snipped) Caused by: org.osgi.framework.BundleException: Error occurred installing a bundle. 	at org.eclipse.osgi.storage.Storage.install(Storage.java:739) 	at org.eclipse.osgi.internal.framework.BundleContextImpl.installBundle(BundleContextImpl.java:187) 	at org.eclipse.osgi.internal.framework.BundleContextImpl.installBundle(BundleContextImpl.java:179) 	at org.mockito.osgitest.OsgiTest.setUp(OsgiTest.java:53) 	... 40 more Caused by: java.lang.IllegalArgumentException: invalid range  [1.6.0 : invalid format 	at org.osgi.framework.VersionRange.<init>(VersionRange.java:173) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.addPackageImports(OSGiManifestBuilderFactory.java:373) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.getPackageImports(OSGiManifestBuilderFactory.java:352) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.createBuilder(OSGiManifestBuilderFactory.java:111) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.createBuilder(OSGiManifestBuilderFactory.java:78) 	at org.eclipse.osgi.storage.Storage.getBuilder(Storage.java:784) 	at org.eclipse.osgi.storage.Storage.getBuilder(Storage.java:766) 	at org.eclipse.osgi.storage.Storage.install(Storage.java:706) 	... 43 more Caused by: java.util.NoSuchElementException 	at java.util.StringTokenizer.nextToken(StringTokenizer.java:349) 	at org.osgi.framework.VersionRange.<init>(VersionRange.java:157) 	... 50 more      The OSGi test project consists of three source sets:  1. A regular JUnit4  test  source set with a single class OsgiTest. Starts an OSGi framework  installs mockito-core  byte-buddy and objenesis bundles as well as two test bundles  and executes some simple Mockito test cases inside the OSGi framework. 2. A source set  testBundle  that s built to an OSGi bundle using the  Bundle  task from the Bnd Gradle Plugin. Contains the test classes that run the Mockito test cases and thus depends on the Mockito bundle. 3. A source set  otherBundle  that s also built to an OSGi bundle but with no other dependencies. Used for testing mocking of classes from other bundles.  Some further technical details:  - The  test  source set only has compile dependencies on the OSGi APIs and JUnit4  i.e. not on Mockito. The OSGi framework is created using the standard Framework API. At runtime Equinox is added as a dependency to supply an actual framework implementation  but the intention is that any framework implementation could be used. - The test cases are run by loading classes from the test bundle that all implement  Runnable . This is to provide a simple bridge using a common JDK class. The reason for setting up such a bridge is that I want to drive the tests using a test runner that Gradle supports  for example to get good test reports  but the test bundles don t know anything about JUnit4 inside the OSGi framework. I didn t want to explore adding an OSGified version of JUnit into the mix at this point since that would also entail solving test discovery inside an OSGi framework. - The OSGi bundles are built using the [Bnd Gradle Plugin](https://github.com/bndtools/bnd/blob/master/biz.aQute.bnd.gradle/README.md#gradle-plugin-for-workspace-builds) instead of the deprecated  osgi  plugin in Gradle. The reason is both future proofing  to not impede a migration to Gradle 6.0 in this new sub project  and that I believe it better mirrors how other projects would consume the Mockito artifacts. Further it paves the way for replacing the usage of the deprecated plugin for the creating the OSGi manifests in the root project.  Since this is my first contribution I ll be happy to fix anything that goes against the grains.
1850 ;  subprojects/osgi-test/src/testBundle/java/org/mockito/osgitest/testbundle/SimpleMockTest.java ; Fixes  #522 : Basic test suite for OSGi framework ; This is a proposal for a basic test project to ensure that the Mockito artifacts can be consumed from an OSGi environment. For example  reverting the fix for #678 is caught with the following exception:      java.lang.IllegalStateException: Failed to install bundle: mockito-core-3.2.3.jar 	at org.mockito.osgitest.OsgiTest.setUp(OsgiTest.java:55) 	... (snipped) Caused by: org.osgi.framework.BundleException: Error occurred installing a bundle. 	at org.eclipse.osgi.storage.Storage.install(Storage.java:739) 	at org.eclipse.osgi.internal.framework.BundleContextImpl.installBundle(BundleContextImpl.java:187) 	at org.eclipse.osgi.internal.framework.BundleContextImpl.installBundle(BundleContextImpl.java:179) 	at org.mockito.osgitest.OsgiTest.setUp(OsgiTest.java:53) 	... 40 more Caused by: java.lang.IllegalArgumentException: invalid range  [1.6.0 : invalid format 	at org.osgi.framework.VersionRange.<init>(VersionRange.java:173) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.addPackageImports(OSGiManifestBuilderFactory.java:373) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.getPackageImports(OSGiManifestBuilderFactory.java:352) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.createBuilder(OSGiManifestBuilderFactory.java:111) 	at org.eclipse.osgi.container.builders.OSGiManifestBuilderFactory.createBuilder(OSGiManifestBuilderFactory.java:78) 	at org.eclipse.osgi.storage.Storage.getBuilder(Storage.java:784) 	at org.eclipse.osgi.storage.Storage.getBuilder(Storage.java:766) 	at org.eclipse.osgi.storage.Storage.install(Storage.java:706) 	... 43 more Caused by: java.util.NoSuchElementException 	at java.util.StringTokenizer.nextToken(StringTokenizer.java:349) 	at org.osgi.framework.VersionRange.<init>(VersionRange.java:157) 	... 50 more      The OSGi test project consists of three source sets:  1. A regular JUnit4  test  source set with a single class OsgiTest. Starts an OSGi framework  installs mockito-core  byte-buddy and objenesis bundles as well as two test bundles  and executes some simple Mockito test cases inside the OSGi framework. 2. A source set  testBundle  that s built to an OSGi bundle using the  Bundle  task from the Bnd Gradle Plugin. Contains the test classes that run the Mockito test cases and thus depends on the Mockito bundle. 3. A source set  otherBundle  that s also built to an OSGi bundle but with no other dependencies. Used for testing mocking of classes from other bundles.  Some further technical details:  - The  test  source set only has compile dependencies on the OSGi APIs and JUnit4  i.e. not on Mockito. The OSGi framework is created using the standard Framework API. At runtime Equinox is added as a dependency to supply an actual framework implementation  but the intention is that any framework implementation could be used. - The test cases are run by loading classes from the test bundle that all implement  Runnable . This is to provide a simple bridge using a common JDK class. The reason for setting up such a bridge is that I want to drive the tests using a test runner that Gradle supports  for example to get good test reports  but the test bundles don t know anything about JUnit4 inside the OSGi framework. I didn t want to explore adding an OSGified version of JUnit into the mix at this point since that would also entail solving test discovery inside an OSGi framework. - The OSGi bundles are built using the [Bnd Gradle Plugin](https://github.com/bndtools/bnd/blob/master/biz.aQute.bnd.gradle/README.md#gradle-plugin-for-workspace-builds) instead of the deprecated  osgi  plugin in Gradle. The reason is both future proofing  to not impede a migration to Gradle 6.0 in this new sub project  and that I believe it better mirrors how other projects would consume the Mockito artifacts. Further it paves the way for replacing the usage of the deprecated plugin for the creating the OSGi manifests in the root project.  Since this is my first contribution I ll be happy to fix anything that goes against the grains.
1854 ; subprojects/junit-jupiter/src/main/java/org/mockito/junit/jupiter/MockitoSettings.java ; Fixes #1853: Allow @MockitoSettings to be inherited ;  - [X] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [X] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [X] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [X] Avoid other runtime dependencies  - [X] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [X] The pull request follows coding style  - [X] Mention  Fixes #<issue number>  in the description _if relevant_  - [X] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1854 ;  subprojects/junit-jupiter/src/test/java/org/mockitousage/StrictnessTest.java ; Fixes #1853: Allow @MockitoSettings to be inherited ;  - [X] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [X] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [X] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [X] Avoid other runtime dependencies  - [X] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [X] The pull request follows coding style  - [X] Mention  Fixes #<issue number>  in the description _if relevant_  - [X] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1858 ; src/main/java/org/mockito/internal/junit/JUnitRule.java ; Add TestRule to MockitoJUnit ; JUnit has two types of test rules: MethodRule and TestRule. The existing MockitoJUnit rule returns a MockitoRule which extends MethodRule. However  since this is not a TestRule  some features of JUnit do not nicely integrate with Mockito. For example  the RuleChain feature of JUnit only works on TestRules.  Therefore  add a separate entrypoint to MockitoJUnit which returns a TestRule that can be integrated with RuleChain. It introduces a separate interface to make this distinction clear. If we would change the existing MockitoRule to also extend TestRule  the JUnit logic would no longer run the MethodRule [1] and would thus break existing users.  [1]: https://github.com/junit-team/junit4/blob/2df7e0882128d551565f87f688bbe745d85aacba/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java#L402
1858 ;  src/main/java/org/mockito/internal/junit/JUnitSessionStore.java ; Add TestRule to MockitoJUnit ; JUnit has two types of test rules: MethodRule and TestRule. The existing MockitoJUnit rule returns a MockitoRule which extends MethodRule. However  since this is not a TestRule  some features of JUnit do not nicely integrate with Mockito. For example  the RuleChain feature of JUnit only works on TestRules.  Therefore  add a separate entrypoint to MockitoJUnit which returns a TestRule that can be integrated with RuleChain. It introduces a separate interface to make this distinction clear. If we would change the existing MockitoRule to also extend TestRule  the JUnit logic would no longer run the MethodRule [1] and would thus break existing users.  [1]: https://github.com/junit-team/junit4/blob/2df7e0882128d551565f87f688bbe745d85aacba/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java#L402
1858 ;  src/main/java/org/mockito/internal/junit/JUnitTestRule.java ; Add TestRule to MockitoJUnit ; JUnit has two types of test rules: MethodRule and TestRule. The existing MockitoJUnit rule returns a MockitoRule which extends MethodRule. However  since this is not a TestRule  some features of JUnit do not nicely integrate with Mockito. For example  the RuleChain feature of JUnit only works on TestRules.  Therefore  add a separate entrypoint to MockitoJUnit which returns a TestRule that can be integrated with RuleChain. It introduces a separate interface to make this distinction clear. If we would change the existing MockitoRule to also extend TestRule  the JUnit logic would no longer run the MethodRule [1] and would thus break existing users.  [1]: https://github.com/junit-team/junit4/blob/2df7e0882128d551565f87f688bbe745d85aacba/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java#L402
1858 ;  src/main/java/org/mockito/junit/MockitoJUnit.java ; Add TestRule to MockitoJUnit ; JUnit has two types of test rules: MethodRule and TestRule. The existing MockitoJUnit rule returns a MockitoRule which extends MethodRule. However  since this is not a TestRule  some features of JUnit do not nicely integrate with Mockito. For example  the RuleChain feature of JUnit only works on TestRules.  Therefore  add a separate entrypoint to MockitoJUnit which returns a TestRule that can be integrated with RuleChain. It introduces a separate interface to make this distinction clear. If we would change the existing MockitoRule to also extend TestRule  the JUnit logic would no longer run the MethodRule [1] and would thus break existing users.  [1]: https://github.com/junit-team/junit4/blob/2df7e0882128d551565f87f688bbe745d85aacba/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java#L402
1858 ;  src/main/java/org/mockito/junit/MockitoTestRule.java ; Add TestRule to MockitoJUnit ; JUnit has two types of test rules: MethodRule and TestRule. The existing MockitoJUnit rule returns a MockitoRule which extends MethodRule. However  since this is not a TestRule  some features of JUnit do not nicely integrate with Mockito. For example  the RuleChain feature of JUnit only works on TestRules.  Therefore  add a separate entrypoint to MockitoJUnit which returns a TestRule that can be integrated with RuleChain. It introduces a separate interface to make this distinction clear. If we would change the existing MockitoRule to also extend TestRule  the JUnit logic would no longer run the MethodRule [1] and would thus break existing users.  [1]: https://github.com/junit-team/junit4/blob/2df7e0882128d551565f87f688bbe745d85aacba/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java#L402
1858 ;  src/test/java/org/mockitousage/junitrule/JUnitTestRuleIntegratesWithRuleChainTest.java ; Add TestRule to MockitoJUnit ; JUnit has two types of test rules: MethodRule and TestRule. The existing MockitoJUnit rule returns a MockitoRule which extends MethodRule. However  since this is not a TestRule  some features of JUnit do not nicely integrate with Mockito. For example  the RuleChain feature of JUnit only works on TestRules.  Therefore  add a separate entrypoint to MockitoJUnit which returns a TestRule that can be integrated with RuleChain. It introduces a separate interface to make this distinction clear. If we would change the existing MockitoRule to also extend TestRule  the JUnit logic would no longer run the MethodRule [1] and would thus break existing users.  [1]: https://github.com/junit-team/junit4/blob/2df7e0882128d551565f87f688bbe745d85aacba/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java#L402
1858 ;  src/test/java/org/mockitousage/junitrule/MockitoJUnitTestRuleTest.java ; Add TestRule to MockitoJUnit ; JUnit has two types of test rules: MethodRule and TestRule. The existing MockitoJUnit rule returns a MockitoRule which extends MethodRule. However  since this is not a TestRule  some features of JUnit do not nicely integrate with Mockito. For example  the RuleChain feature of JUnit only works on TestRules.  Therefore  add a separate entrypoint to MockitoJUnit which returns a TestRule that can be integrated with RuleChain. It introduces a separate interface to make this distinction clear. If we would change the existing MockitoRule to also extend TestRule  the JUnit logic would no longer run the MethodRule [1] and would thus break existing users.  [1]: https://github.com/junit-team/junit4/blob/2df7e0882128d551565f87f688bbe745d85aacba/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java#L402
1858 ;  src/test/java/org/mockitousage/junitrule/MutableStrictJUnitTestRuleTest.java ; Add TestRule to MockitoJUnit ; JUnit has two types of test rules: MethodRule and TestRule. The existing MockitoJUnit rule returns a MockitoRule which extends MethodRule. However  since this is not a TestRule  some features of JUnit do not nicely integrate with Mockito. For example  the RuleChain feature of JUnit only works on TestRules.  Therefore  add a separate entrypoint to MockitoJUnit which returns a TestRule that can be integrated with RuleChain. It introduces a separate interface to make this distinction clear. If we would change the existing MockitoRule to also extend TestRule  the JUnit logic would no longer run the MethodRule [1] and would thus break existing users.  [1]: https://github.com/junit-team/junit4/blob/2df7e0882128d551565f87f688bbe745d85aacba/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java#L402
1859 ; src/main/java/org/mockito/stubbing/OngoingStubbing.java ; Add NotExtensible to OngoingStubbing ; This interface is not intended to be subclassed and should therefore be marked as such.
1862 ; src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java ; Revert  Performance optimization by using Method.getParameterCount() where possible  ; Reverts mockito/mockito#1849  It breaks all downstream Android applications  see https://github.com/mockito/mockito/pull/1849#issuecomment-577139089
1862 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Revert  Performance optimization by using Method.getParameterCount() where possible  ; Reverts mockito/mockito#1849  It breaks all downstream Android applications  see https://github.com/mockito/mockito/pull/1849#issuecomment-577139089
1862 ;  src/main/java/org/mockito/internal/invocation/InvocationMatcher.java ; Revert  Performance optimization by using Method.getParameterCount() where possible  ; Reverts mockito/mockito#1849  It breaks all downstream Android applications  see https://github.com/mockito/mockito/pull/1849#issuecomment-577139089
1862 ;  src/main/java/org/mockito/internal/invocation/TypeSafeMatching.java ; Revert  Performance optimization by using Method.getParameterCount() where possible  ; Reverts mockito/mockito#1849  It breaks all downstream Android applications  see https://github.com/mockito/mockito/pull/1849#issuecomment-577139089
1862 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java ; Revert  Performance optimization by using Method.getParameterCount() where possible  ; Reverts mockito/mockito#1849  It breaks all downstream Android applications  see https://github.com/mockito/mockito/pull/1849#issuecomment-577139089
1862 ;  src/main/java/org/mockito/internal/util/ObjectMethodsGuru.java ; Revert  Performance optimization by using Method.getParameterCount() where possible  ; Reverts mockito/mockito#1849  It breaks all downstream Android applications  see https://github.com/mockito/mockito/pull/1849#issuecomment-577139089
1862 ;  src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java ; Revert  Performance optimization by using Method.getParameterCount() where possible  ; Reverts mockito/mockito#1849  It breaks all downstream Android applications  see https://github.com/mockito/mockito/pull/1849#issuecomment-577139089
1868 ; src/main/java/org/mockito/internal/InternalMockHandler.java ; Update Mockito version number for deletion of deprecated classes ; nan
1868 ;  src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java ; Update Mockito version number for deletion of deprecated classes ; nan
1868 ;  src/main/java/org/mockito/runners/MockitoJUnitRunner.java ; Update Mockito version number for deletion of deprecated classes ; nan
1878 ; src/main/java/org/mockito/internal/exceptions/Reporter.java ; Revert  Fixed undetected unused stubbing when matching previous stubbed call  ; Reverts mockito/mockito#1847  Fixes #1877  Based on feedback in #1846
1878 ;  src/main/java/org/mockito/internal/reporting/Pluralizer.java ; Revert  Fixed undetected unused stubbing when matching previous stubbed call  ; Reverts mockito/mockito#1847  Fixes #1877  Based on feedback in #1846
1878 ;  src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java ; Revert  Fixed undetected unused stubbing when matching previous stubbed call  ; Reverts mockito/mockito#1847  Fixes #1877  Based on feedback in #1846
1878 ;  src/main/java/org/mockito/internal/stubbing/StubbedInvocationMatcher.java ; Revert  Fixed undetected unused stubbing when matching previous stubbed call  ; Reverts mockito/mockito#1847  Fixes #1877  Based on feedback in #1846
1878 ;  src/main/java/org/mockito/invocation/Invocation.java ; Revert  Fixed undetected unused stubbing when matching previous stubbed call  ; Reverts mockito/mockito#1847  Fixes #1877  Based on feedback in #1846
1878 ;  src/test/java/org/mockito/internal/reporting/PluralizerTest.java ; Revert  Fixed undetected unused stubbing when matching previous stubbed call  ; Reverts mockito/mockito#1847  Fixes #1877  Based on feedback in #1846
1878 ;  src/test/java/org/mockitousage/junitrule/StrictJUnitRuleTest.java ; Revert  Fixed undetected unused stubbing when matching previous stubbed call  ; Reverts mockito/mockito#1847  Fixes #1877  Based on feedback in #1846
1878 ;  src/test/java/org/mockitousage/junitrunner/UnusedStubsExceptionMessageTest.java ; Revert  Fixed undetected unused stubbing when matching previous stubbed call  ; Reverts mockito/mockito#1847  Fixes #1877  Based on feedback in #1846
1878 ;  src/test/java/org/mockitousage/stubbing/StrictStubbingTest.java ; Revert  Fixed undetected unused stubbing when matching previous stubbed call  ; Reverts mockito/mockito#1847  Fixes #1877  Based on feedback in #1846
1881 ; src/main/java/org/mockito/exceptions/misusing/UnnecessaryStubbingException.java ; Fix UnnecessaryStubbingException javadoc ; Fix #1880 
1890 ; src/main/java/org/mockito/internal/stubbing/BaseStubbing.java ; Fix mocks throwing same instance with throwable class ; Fixes mocks throwing the same Throwable instance consecutively after specifying the mock behaviour with  doThrow(Class)  or  thenThrow(Class) .  This is achieved by moving the instantiation of the Throwable into a new Answer called ThrowsExceptionClass - much like ThrowsException. Then  thenThrow(Class)  calls  thenAnswer(Answer)  with a new instance of ThrowsExceptionClass rather than  thenThrow(Throwable) . Similar for  doThrow(Class)    doThrow(Throwable)  and  doAnswer(Answer) .  Fixes #1875   @TimvdLippe Just have a quick inquiry: The test in UninstantiableThrowableTest is failing because it expects an InstantiationError to be thrown in the middle of stubbing (check PR #1549). The new code doesn t instantiate in the middle of stubbing anymore. How do I ignore the test? Or do I just delete the test file? I m used to using an annotation to ignore tests. The PR should be ready after that s sorted and any other suggested changes.
1890 ;  src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; Fix mocks throwing same instance with throwable class ; Fixes mocks throwing the same Throwable instance consecutively after specifying the mock behaviour with  doThrow(Class)  or  thenThrow(Class) .  This is achieved by moving the instantiation of the Throwable into a new Answer called ThrowsExceptionClass - much like ThrowsException. Then  thenThrow(Class)  calls  thenAnswer(Answer)  with a new instance of ThrowsExceptionClass rather than  thenThrow(Throwable) . Similar for  doThrow(Class)    doThrow(Throwable)  and  doAnswer(Answer) .  Fixes #1875   @TimvdLippe Just have a quick inquiry: The test in UninstantiableThrowableTest is failing because it expects an InstantiationError to be thrown in the middle of stubbing (check PR #1549). The new code doesn t instantiate in the middle of stubbing anymore. How do I ignore the test? Or do I just delete the test file? I m used to using an annotation to ignore tests. The PR should be ready after that s sorted and any other suggested changes.
1890 ;  src/main/java/org/mockito/internal/stubbing/answers/AbstractThrowsException.java ; Fix mocks throwing same instance with throwable class ; Fixes mocks throwing the same Throwable instance consecutively after specifying the mock behaviour with  doThrow(Class)  or  thenThrow(Class) .  This is achieved by moving the instantiation of the Throwable into a new Answer called ThrowsExceptionClass - much like ThrowsException. Then  thenThrow(Class)  calls  thenAnswer(Answer)  with a new instance of ThrowsExceptionClass rather than  thenThrow(Throwable) . Similar for  doThrow(Class)    doThrow(Throwable)  and  doAnswer(Answer) .  Fixes #1875   @TimvdLippe Just have a quick inquiry: The test in UninstantiableThrowableTest is failing because it expects an InstantiationError to be thrown in the middle of stubbing (check PR #1549). The new code doesn t instantiate in the middle of stubbing anymore. How do I ignore the test? Or do I just delete the test file? I m used to using an annotation to ignore tests. The PR should be ready after that s sorted and any other suggested changes.
1890 ;  src/main/java/org/mockito/internal/stubbing/answers/ThrowsException.java ; Fix mocks throwing same instance with throwable class ; Fixes mocks throwing the same Throwable instance consecutively after specifying the mock behaviour with  doThrow(Class)  or  thenThrow(Class) .  This is achieved by moving the instantiation of the Throwable into a new Answer called ThrowsExceptionClass - much like ThrowsException. Then  thenThrow(Class)  calls  thenAnswer(Answer)  with a new instance of ThrowsExceptionClass rather than  thenThrow(Throwable) . Similar for  doThrow(Class)    doThrow(Throwable)  and  doAnswer(Answer) .  Fixes #1875   @TimvdLippe Just have a quick inquiry: The test in UninstantiableThrowableTest is failing because it expects an InstantiationError to be thrown in the middle of stubbing (check PR #1549). The new code doesn t instantiate in the middle of stubbing anymore. How do I ignore the test? Or do I just delete the test file? I m used to using an annotation to ignore tests. The PR should be ready after that s sorted and any other suggested changes.
1890 ;  src/main/java/org/mockito/internal/stubbing/answers/ThrowsExceptionForClassType.java ; Fix mocks throwing same instance with throwable class ; Fixes mocks throwing the same Throwable instance consecutively after specifying the mock behaviour with  doThrow(Class)  or  thenThrow(Class) .  This is achieved by moving the instantiation of the Throwable into a new Answer called ThrowsExceptionClass - much like ThrowsException. Then  thenThrow(Class)  calls  thenAnswer(Answer)  with a new instance of ThrowsExceptionClass rather than  thenThrow(Throwable) . Similar for  doThrow(Class)    doThrow(Throwable)  and  doAnswer(Answer) .  Fixes #1875   @TimvdLippe Just have a quick inquiry: The test in UninstantiableThrowableTest is failing because it expects an InstantiationError to be thrown in the middle of stubbing (check PR #1549). The new code doesn t instantiate in the middle of stubbing anymore. How do I ignore the test? Or do I just delete the test file? I m used to using an annotation to ignore tests. The PR should be ready after that s sorted and any other suggested changes.
1890 ;  src/test/java/org/mockito/internal/stubbing/answers/AbstractThrowsExceptionTest.java ; Fix mocks throwing same instance with throwable class ; Fixes mocks throwing the same Throwable instance consecutively after specifying the mock behaviour with  doThrow(Class)  or  thenThrow(Class) .  This is achieved by moving the instantiation of the Throwable into a new Answer called ThrowsExceptionClass - much like ThrowsException. Then  thenThrow(Class)  calls  thenAnswer(Answer)  with a new instance of ThrowsExceptionClass rather than  thenThrow(Throwable) . Similar for  doThrow(Class)    doThrow(Throwable)  and  doAnswer(Answer) .  Fixes #1875   @TimvdLippe Just have a quick inquiry: The test in UninstantiableThrowableTest is failing because it expects an InstantiationError to be thrown in the middle of stubbing (check PR #1549). The new code doesn t instantiate in the middle of stubbing anymore. How do I ignore the test? Or do I just delete the test file? I m used to using an annotation to ignore tests. The PR should be ready after that s sorted and any other suggested changes.
1890 ;  src/test/java/org/mockito/internal/stubbing/answers/ThrowsExceptionForClassTypeTest.java ; Fix mocks throwing same instance with throwable class ; Fixes mocks throwing the same Throwable instance consecutively after specifying the mock behaviour with  doThrow(Class)  or  thenThrow(Class) .  This is achieved by moving the instantiation of the Throwable into a new Answer called ThrowsExceptionClass - much like ThrowsException. Then  thenThrow(Class)  calls  thenAnswer(Answer)  with a new instance of ThrowsExceptionClass rather than  thenThrow(Throwable) . Similar for  doThrow(Class)    doThrow(Throwable)  and  doAnswer(Answer) .  Fixes #1875   @TimvdLippe Just have a quick inquiry: The test in UninstantiableThrowableTest is failing because it expects an InstantiationError to be thrown in the middle of stubbing (check PR #1549). The new code doesn t instantiate in the middle of stubbing anymore. How do I ignore the test? Or do I just delete the test file? I m used to using an annotation to ignore tests. The PR should be ready after that s sorted and any other suggested changes.
1890 ;  src/test/java/org/mockito/internal/stubbing/answers/ThrowsExceptionTest.java ; Fix mocks throwing same instance with throwable class ; Fixes mocks throwing the same Throwable instance consecutively after specifying the mock behaviour with  doThrow(Class)  or  thenThrow(Class) .  This is achieved by moving the instantiation of the Throwable into a new Answer called ThrowsExceptionClass - much like ThrowsException. Then  thenThrow(Class)  calls  thenAnswer(Answer)  with a new instance of ThrowsExceptionClass rather than  thenThrow(Throwable) . Similar for  doThrow(Class)    doThrow(Throwable)  and  doAnswer(Answer) .  Fixes #1875   @TimvdLippe Just have a quick inquiry: The test in UninstantiableThrowableTest is failing because it expects an InstantiationError to be thrown in the middle of stubbing (check PR #1549). The new code doesn t instantiate in the middle of stubbing anymore. How do I ignore the test? Or do I just delete the test file? I m used to using an annotation to ignore tests. The PR should be ready after that s sorted and any other suggested changes.
1890 ;  src/test/java/org/mockitousage/stubbing/StubbingWithThrowablesTest.java ; Fix mocks throwing same instance with throwable class ; Fixes mocks throwing the same Throwable instance consecutively after specifying the mock behaviour with  doThrow(Class)  or  thenThrow(Class) .  This is achieved by moving the instantiation of the Throwable into a new Answer called ThrowsExceptionClass - much like ThrowsException. Then  thenThrow(Class)  calls  thenAnswer(Answer)  with a new instance of ThrowsExceptionClass rather than  thenThrow(Throwable) . Similar for  doThrow(Class)    doThrow(Throwable)  and  doAnswer(Answer) .  Fixes #1875   @TimvdLippe Just have a quick inquiry: The test in UninstantiableThrowableTest is failing because it expects an InstantiationError to be thrown in the middle of stubbing (check PR #1549). The new code doesn t instantiate in the middle of stubbing anymore. How do I ignore the test? Or do I just delete the test file? I m used to using an annotation to ignore tests. The PR should be ready after that s sorted and any other suggested changes.
1890 ;  subprojects/junit-jupiter/src/test/java/org/mockitousage/UninstantiableThrowableTest.java ; Fix mocks throwing same instance with throwable class ; Fixes mocks throwing the same Throwable instance consecutively after specifying the mock behaviour with  doThrow(Class)  or  thenThrow(Class) .  This is achieved by moving the instantiation of the Throwable into a new Answer called ThrowsExceptionClass - much like ThrowsException. Then  thenThrow(Class)  calls  thenAnswer(Answer)  with a new instance of ThrowsExceptionClass rather than  thenThrow(Throwable) . Similar for  doThrow(Class)    doThrow(Throwable)  and  doAnswer(Answer) .  Fixes #1875   @TimvdLippe Just have a quick inquiry: The test in UninstantiableThrowableTest is failing because it expects an InstantiationError to be thrown in the middle of stubbing (check PR #1549). The new code doesn t instantiate in the middle of stubbing anymore. How do I ignore the test? Or do I just delete the test file? I m used to using an annotation to ignore tests. The PR should be ready after that s sorted and any other suggested changes.
1893 ; src/main/java/org/mockito/Mockito.java ; Fixes #id : 1888 ; PR to fix the typo in the documentation
1895 ;  src/test/java/org/mockitousage/matchers/MatchersTest.java ; Fixes #1894 checkstyle error on windows ; windows has some issues with relative paths in checkstyle config files  additionally it failed with an Euro sign in code.  please verify if it also works on unix env
1896 ; src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java ; Feature/returns empty java8 time ; Im not sure why I see the commit [https://github.com/mockito/mockito/commit/428713153a9fc38e0e2547b255b40e62e9dc8479](url) that was already merged in changes  but: when creating this PR I had in mind that I would merge with branch 2.x (I didnt know back then that v2.x is maintenance only) hence the reflection-based methods (also to keep the coding style of the ReturnsEmptyValues class)
1896 ;  src/main/java/org/mockito/internal/util/JavaEightUtil.java ; Feature/returns empty java8 time ; Im not sure why I see the commit [https://github.com/mockito/mockito/commit/428713153a9fc38e0e2547b255b40e62e9dc8479](url) that was already merged in changes  but: when creating this PR I had in mind that I would merge with branch 2.x (I didnt know back then that v2.x is maintenance only) hence the reflection-based methods (also to keep the coding style of the ReturnsEmptyValues class)
1906 ; src/main/java/org/mockito/ArgumentMatchers.java ; [documentation] change deprecated warnings from 3.x -> 4.x ; Problem  With the release of mockito 3.x as a purely java language version change most of the comments referencing 3.x are wrong  Solution  Migrate the references to 3.x that I could find to 4.x  [ci skip-release]  - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
1906 ;  src/main/java/org/mockito/BDDMockito.java ; [documentation] change deprecated warnings from 3.x -> 4.x ; Problem  With the release of mockito 3.x as a purely java language version change most of the comments referencing 3.x are wrong  Solution  Migrate the references to 3.x that I could find to 4.x  [ci skip-release]  - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
1906 ;  src/main/java/org/mockito/Matchers.java ; [documentation] change deprecated warnings from 3.x -> 4.x ; Problem  With the release of mockito 3.x as a purely java language version change most of the comments referencing 3.x are wrong  Solution  Migrate the references to 3.x that I could find to 4.x  [ci skip-release]  - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
1906 ;  src/main/java/org/mockito/configuration/AnnotationEngine.java ; [documentation] change deprecated warnings from 3.x -> 4.x ; Problem  With the release of mockito 3.x as a purely java language version change most of the comments referencing 3.x are wrong  Solution  Migrate the references to 3.x that I could find to 4.x  [ci skip-release]  - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
1906 ;  src/main/java/org/mockito/configuration/IMockitoConfiguration.java ; [documentation] change deprecated warnings from 3.x -> 4.x ; Problem  With the release of mockito 3.x as a purely java language version change most of the comments referencing 3.x are wrong  Solution  Migrate the references to 3.x that I could find to 4.x  [ci skip-release]  - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
1906 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java ; [documentation] change deprecated warnings from 3.x -> 4.x ; Problem  With the release of mockito 3.x as a purely java language version change most of the comments referencing 3.x are wrong  Solution  Migrate the references to 3.x that I could find to 4.x  [ci skip-release]  - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
1906 ;  src/main/java/org/mockito/runners/MockitoJUnitRunner.java ; [documentation] change deprecated warnings from 3.x -> 4.x ; Problem  With the release of mockito 3.x as a purely java language version change most of the comments referencing 3.x are wrong  Solution  Migrate the references to 3.x that I could find to 4.x  [ci skip-release]  - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
1907 ; src/test/java/org/mockito/internal/util/reflection/ParameterizedConstructorInstantiatorTest.java ; [tests] use ArgumentMatchers over Matchers ; Problem Matchers are considered deprecated but our own tests still use them.  Solution Stop using using them. Replace with ArgumentMatchers  [ci skip-release]  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [/] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
1911 ; src/main/java/org/mockito/ArgumentMatchers.java ; Fixes #1910: update description of ArgumentMatcher javadoc ; For any()  the doc says that  any() is an alias of: anyObject() and any(java.lang.Class).  But in the note  it says that  Since mockito 2.1.0 any(Class) is not anymore an alias of this method.  This is confusing  so the alias in the doc should exclude any(java.lang.Class) to simply be  any() is an alias of: anyObject()  Also update the same issue of anyObject().  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1914 ; src/main/java/org/mockito/internal/matchers/Matches.java ; Fix Pattern matcher not matching to subregion ; Issue #1905 talked about a particular pattern using Java s Pattern class that causes Mockito to not properly match the argument (provided with an invocation) to the expected answer.  It was later discovered that the Pattern matcher matches to the entire region  not some subregion  by using Java s  Matcher.match()  (see [comment](https://github.com/mockito/mockito/issues/1905#issuecomment-615295546) in #1905). This commit fixes that by using  Matcher.find() .  Fixes #1905
1914 ;  src/test/java/org/mockitousage/matchers/MatchersTest.java ; Fix Pattern matcher not matching to subregion ; Issue #1905 talked about a particular pattern using Java s Pattern class that causes Mockito to not properly match the argument (provided with an invocation) to the expected answer.  It was later discovered that the Pattern matcher matches to the entire region  not some subregion  by using Java s  Matcher.match()  (see [comment](https://github.com/mockito/mockito/issues/1905#issuecomment-615295546) in #1905). This commit fixes that by using  Matcher.find() .  Fixes #1905
1928 ; subprojects/junit-jupiter/src/test/java/org/mockitousage/StrictnessTest.java ; JUnit 5 strict stubs check should not suppress the regular test failure ; If the test fails  MockitoExtension should not check for strict stubs at the end of the test  because the possible UnnecessaryStubbingException will end up as a suppressed exception on the test s initial failure.
1931 ; src/main/java/org/mockito/internal/exceptions/Reporter.java ; Update report message to use any() instead of anyObject() ; Because  anyObject()  has already been deprecated  it would be better to push to use  any()  instead.  > Hey   >  > Thanks for the contribution  this is awesome. > As you may have read  project members have somehow an opinionated view on what and how should be > Mockito  e.g. we don t want mockito to be a feature bloat. > There may be a thorough review  with feedback -> code change loop. >  > Which branch :  > - On mockito 3.x  make your pull request target  release/3.x  > - On mockito 2.x  make your pull request target  release/2.x  (2.x is in maintenance mode) > > _This block can be removed_ > _Something wrong in the template fix it here  .github/PULL_REQUEST_TEMPLATE.md    check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
1934 ;  src/test/java/org/mockitousage/internal/junit/UnusedStubbingsFinderTest.java ; Use google-java-format in spotless ; Google-java-format is an open source formatter [1]. It automatically formats source code based on the Google Java Style.  The Mockito source code to a very large extent already adheres to this style guide. While this PR in itself is large  many of the changes are related to string formatting and nested method calls. Most notably  google-java-format is an improvement over the current formatting strategy in that:  1. It handles comment formatting (e.g. spacing between comments) 2. It handles nested method calls. You can see the difference in our usage of the ByteBuddy API  which is now more consistent 3. It enforces the max-line length.  It essentially automates all of the styling rules we list in https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md#alignment As such  for new contributors it should be a lot easier (and less scary) to contribute to Mockito  as they no longer have to be concerned about formatting. Hopefully  this once again lowers the bar for external contributors who want to help the project  but would otherwise feel overwhelmed by the rules we have to adhere to. (If we wouldn t have these rules  it would be a lot harder for us to maintain a consistent and maintainable codebase).  The only interesting changes in this PR are those in  build.gradle . All other changes were auto-generated by running  ./gradlew spotlessApply .  Note that I disabled the formatting of Javadoc  as I think we should keep formatting that ourselves. We normally put a lot of time and effort in our Javadoc and changing that all at once seems like the wrong decision at this point in time.  [1]: https://github.com/google/google-java-format
1938 ; src/main/java/org/mockito/AdditionalAnswers.java ; Update javadoc - remove deprecated class ; The javadoc is misleading - pointing to the deprecated class ReturnsElementsOf that should later be internal or moved
1942 ; src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java ; Fixes #1898 : Return mock name from toString method for deep stub mocks ; Return mock name from toString for deep stub mocks. It was previously returning null.  Fixes #1898
1942 ;  src/test/java/org/mockitousage/stubbing/DeepStubbingTest.java ; Fixes #1898 : Return mock name from toString method for deep stub mocks ; Return mock name from toString for deep stub mocks. It was previously returning null.  Fixes #1898
1945 ;  src/test/java/org/mockito/internal/matchers/EqualityTest.java ; [Travis] Replace JDK 9/10 with 14 ; 9/10 are EOL since September 2018. 14 is the currently supported Java version.
1945 ;  src/test/java/org/mockito/internal/util/collections/IdentitySetTest.java ; [Travis] Replace JDK 9/10 with 14 ; 9/10 are EOL since September 2018. 14 is the currently supported Java version.
1945 ;  src/test/java/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java ; [Travis] Replace JDK 9/10 with 14 ; 9/10 are EOL since September 2018. 14 is the currently supported Java version.
1945 ;  src/test/java/org/mockitousage/matchers/MatchersTest.java ; [Travis] Replace JDK 9/10 with 14 ; 9/10 are EOL since September 2018. 14 is the currently supported Java version.
1949 ; src/test/java/org/mockito/DescriptionTest.java ; Fixes #1712 : prepend description to AssertionError thrown in verification ;  Extended MockitoAssertionError to wrap instance of AssertionError in addition to MockitoAssertionError  so that the various possible exceptions thrown for non-matching arguments have description prepended to the message.
1951 ;  src/test/java/org/mockito/internal/matchers/EqualityTest.java ; Use errorprone 2.4.0 ; in order to get java14 ready. see https://github.com/google/error-prone/releases/tag/v2.4.0 for details.  
1951 ;  src/test/java/org/mockito/internal/util/collections/IdentitySetTest.java ; Use errorprone 2.4.0 ; in order to get java14 ready. see https://github.com/google/error-prone/releases/tag/v2.4.0 for details.  
1951 ;  src/test/java/org/mockito/internal/util/reflection/GenericMetadataSupportTest.java ; Use errorprone 2.4.0 ; in order to get java14 ready. see https://github.com/google/error-prone/releases/tag/v2.4.0 for details.  
1951 ;  src/test/java/org/mockitousage/matchers/MatchersTest.java ; Use errorprone 2.4.0 ; in order to get java14 ready. see https://github.com/google/error-prone/releases/tag/v2.4.0 for details.  
1953 ;  src/main/java/org/mockito/Answers.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/ArgumentCaptor.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/ArgumentMatchers.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/BDDMockito.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/CheckReturnValue.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/InOrder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/Incubating.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/Matchers.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/Mockito.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/MockitoAnnotations.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/MockitoDebugger.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/NotExtensible.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/Spy.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/configuration/AnnotationEngine.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/configuration/DefaultMockitoConfiguration.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/creation/instance/Instantiator.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/exceptions/base/MockitoException.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/exceptions/verification/junit/ArgumentsAreDifferent.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/exceptions/verification/opentest4j/ArgumentsAreDifferent.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/hamcrest/MockitoHamcrest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/InOrderImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/MockitoCore.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/CaptorAnnotationProcessor.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/ClassPathLoader.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/DefaultInjectionEngine.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/GlobalConfiguration.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/IndependentAnnotationEngine.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/InjectingAnnotationEngine.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/MockAnnotationProcessor.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/injection/ConstructorInjection.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/injection/MockInjectionStrategy.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/injection/SpyOnInjectedFieldsHandler.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/injection/filter/MockCandidateFilter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/injection/filter/OngoingInjector.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/injection/filter/TerminalMockCandidateFilter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/injection/scanner/InjectMocksScanner.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/injection/scanner/MockScanner.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/plugins/DefaultMockitoPlugins.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginFileReader.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginFinder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginInitializer.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/configuration/plugins/Plugins.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/MockSettingsImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/SuspendMethod.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockFeatures.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodInterceptor.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ModuleHandler.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassInjectionLoader.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassLoader.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/bytebuddy/inject/MockMethodDispatcher.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/instance/DefaultInstantiatorProvider.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/instance/Instantiator.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/instance/ObjenesisInstantiator.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/settings/CreationSettings.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/creation/util/MockitoMethodProxy.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/debugging/InvocationsPrinter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/debugging/Localized.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/debugging/LocationImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/debugging/LoggingListener.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/debugging/MockitoDebuggerImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/debugging/VerboseMockInvocationLogger.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/debugging/WarningsFinder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/debugging/WarningsPrinterImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/exceptions/VerificationAwareInvocation.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleaner.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/exceptions/util/ScenarioPrinter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/framework/DefaultMockitoSession.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/hamcrest/HamcrestArgumentMatcher.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractor.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/handler/MockHandlerImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/handler/NotifiedMethodInvocationReport.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/handler/NullResultGuardian.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/ArgumentsProcessor.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/DefaultInvocationFactory.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/InterceptedInvocation.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/InvocationMarker.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/InvocationMatcher.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/InvocationsFinder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/MatcherApplicationStrategy.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/MatchersBinder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/RealMethod.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/SerializableMethod.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/TypeSafeMatching.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/finder/AllInvocationsFinder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/finder/VerifiableInvocationsFinder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/invocation/mockref/MockWeakReference.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/ArgMismatchFinder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/DefaultStubbingLookupListener.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/DefaultTestFinishedEvent.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/ExceptionFactory.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/JUnitRule.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/JUnitSessionStore.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/MismatchReportingTestListener.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/StrictStubsRunnerTestListener.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/StubbingArgMismatches.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/StubbingHint.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/TestFinishedEvent.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/UniversalTestListener.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/UnnecessaryStubbingsReporter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/UnusedStubbingsFinder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/VerificationCollectorImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/junit/util/JUnitFailureHacker.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/listeners/StubbingLookupNotifier.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/And.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/ArrayEquals.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/CapturesArguments.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/CapturingMatcher.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/CompareTo.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/Contains.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/Equality.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/Equals.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/EqualsWithDelta.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/InstanceOf.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/Not.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/NotNull.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/Null.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/Or.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/VarargMatcher.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/text/MatcherToString.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/text/MatchersPrinter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/progress/ArgumentMatcherStorage.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/progress/ThreadSafeMockingProgress.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/reporting/PrintSettings.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/reporting/SmartPrinter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/runners/InternalRunner.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/runners/RunnerFactory.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/runners/StrictRunner.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/runners/util/RunnerProvider.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/runners/util/TestMethodsFinder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/session/DefaultMockitoSessionBuilder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/BaseStubbing.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/ConsecutiveStubbing.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/DefaultLenientStubber.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/OngoingStubbingImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/StrictnessSelector.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/StubbedInvocationMatcher.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/answers/AbstractThrowsException.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/answers/ClonesArguments.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/answers/DefaultAnswerValidator.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/answers/DoesNothing.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/answers/InvocationInfo.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/answers/Returns.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsElementsOf.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/answers/ThrowsException.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/RetrieveGenericsForDefaultAnswers.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMocks.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/TriesToReturnSelf.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/Checks.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/DefaultMockingDetails.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/JavaEightUtil.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/MockCreationValidator.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/MockNameImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/MockUtil.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/ObjectMethodsGuru.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/Platform.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/Primitives.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/StringUtil.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/collections/HashCodeAndEqualsMockWrapper.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSet.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/collections/IdentitySet.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/collections/Iterables.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/collections/ListUtil.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/collections/Sets.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/concurrent/DetachedThreadLocal.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentSet.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/io/IOUtil.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/reflection/AccessibilityChanger.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/reflection/BeanPropertySetter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/reflection/FieldInitializationReport.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/reflection/FieldReader.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/reflection/FieldSetter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/reflection/Fields.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/reflection/GenericMaster.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/reflection/GenericTypeExtractor.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/reflection/InstanceField.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/reflection/LenientCopyTool.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/util/reflection/SuperTypesLastSorter.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/AtLeast.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/Calls.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/DefaultRegisteredInvocations.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/InOrderWrapper.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/MockAwareVerificationMode.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/NoInteractions.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/Only.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/RegisteredInvocations.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/Times.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/VerificationEventImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/VerificationModeFactory.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/VerificationOverTimeImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/VerificationWrapper.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/VerificationWrapperInOrderWrapper.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/api/InOrderContext.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/api/VerificationDataInOrder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/api/VerificationDataInOrderImpl.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/checkers/MissingInvocationChecker.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/internal/verification/checkers/NumberOfInvocationsChecker.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/invocation/DescribedInvocation.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/invocation/InvocationFactory.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/junit/MockitoJUnitRunner.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/junit/MockitoTestRule.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/listeners/MockitoListener.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/plugins/InlineMockMaker.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/plugins/MockMaker.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/quality/MockitoHint.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/runners/MockitoJUnitRunner.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/runners/VerboseMockitoJUnitRunner.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/session/MockitoSessionLogger.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/stubbing/Answer6.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/stubbing/BaseStubber.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/stubbing/OngoingStubbing.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/stubbing/ValidableAnswer.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/stubbing/VoidAnswer5.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/stubbing/VoidAnswer6.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/verification/After.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/verification/Timeout.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/main/java/org/mockito/verification/VerificationAfterDelay.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/concurrentmockito/ThreadVerifiesContinuouslyInteractingMockTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/concurrentmockito/ThreadsRunAllTestsHalfManualTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/concurrentmockito/ThreadsShareAMockTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/concurrentmockito/ThreadsShareGenerouslyStubbedMockTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/concurrentmockito/VerificationInOrderFromMultipleThreadsTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/AnnotationsAreCopiedFromMockedTypeTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/ArgumentCaptorTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/InvocationFactoryTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/MockitoTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/StaticMockingExperimentTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/configuration/MockitoConfiguration.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/exceptions/base/MockitoAssertionErrorTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/exceptions/base/MockitoSerializationIssueTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/exceptions/base/StackTraceBuilder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/exceptions/base/TraceBuilder.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/exceptions/stacktrace/StackTraceCleanerTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/AllInvocationsFinderTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/InOrderImplTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/InvalidStateDetectionTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/configuration/ClassPathLoaderTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/configuration/GlobalConfigurationTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/configuration/InjectingAnnotationEngineTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/configuration/MockInjectionTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/configuration/injection/SimpleArgumentResolverTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/configuration/plugins/DefaultMockitoPluginsTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/configuration/plugins/PluginFileReaderTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/configuration/plugins/PluginFinderTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/configuration/plugins/PluginLoaderTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/creation/MockSettingsImplTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/creation/bytebuddy/AbstractByteBuddyMockMakerTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMakerTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/creation/bytebuddy/TypeCachingMockBytecodeGeneratorTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/creation/instance/ConstructorInstantiatorTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/debugging/LoggingListenerTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/debugging/VerboseMockInvocationLoggerTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/debugging/WarningsFinderTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/exceptions/ReporterTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/exceptions/stacktrace/ConditionalStackTraceFilterTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilterTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/exceptions/util/ScenarioPrinterTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/framework/DefaultMockitoFrameworkTest.java ; Fix a confusing typo in subclassing error message ; nan
1953 ;  src/test/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractorTest.java ; Fix a confusing typo in subclassing error message ; nan
1955 ; src/main/java/org/mockito/Captor.java ; Mockito #1013: Defines and implements API for static mocking. ; Fixes #1013 - allows for static method mocking in Mockito.
1961 ; src/main/java/org/mockito/Mockito.java ; Document using  @Mock  with method parameters ; Although we ve called it out in the [JUnit extension]  we should also make sure it s clear in the core documentation to make it more visible.  We can fully-quality the  @Test  annotation to make clear that it has to be with JUnit 5.  Closes #1960.  [JUnit extension]: https://javadoc.io/doc/org.mockito/mockito-junit-jupiter/latest/org/mockito/junit/jupiter/MockitoExtension.html
1968 ;  src/main/java/org/mockito/MockedStatic.java ; Fixes #1967: Correctly handle mocks with limited life-cycle in listeners. ; Due to the limited lifetime of static mocks  they cannot be validated within a Mockito session since they might have expired when the validation is applied. This patch excludes static mocks from all validation. To support static mocks in the regular session validation  we would rather need to trigger the validation upon release of any static mock. 
1968 ;  src/main/java/org/mockito/Mockito.java ; Fixes #1967: Correctly handle mocks with limited life-cycle in listeners. ; Due to the limited lifetime of static mocks  they cannot be validated within a Mockito session since they might have expired when the validation is applied. This patch excludes static mocks from all validation. To support static mocks in the regular session validation  we would rather need to trigger the validation upon release of any static mock. 
1968 ;  src/main/java/org/mockito/internal/MockedStaticImpl.java ; Fixes #1967: Correctly handle mocks with limited life-cycle in listeners. ; Due to the limited lifetime of static mocks  they cannot be validated within a Mockito session since they might have expired when the validation is applied. This patch excludes static mocks from all validation. To support static mocks in the regular session validation  we would rather need to trigger the validation upon release of any static mock. 
1968 ;  src/main/java/org/mockito/internal/configuration/MockAnnotationProcessor.java ; Fixes #1967: Correctly handle mocks with limited life-cycle in listeners. ; Due to the limited lifetime of static mocks  they cannot be validated within a Mockito session since they might have expired when the validation is applied. This patch excludes static mocks from all validation. To support static mocks in the regular session validation  we would rather need to trigger the validation upon release of any static mock. 
1968 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Fixes #1967: Correctly handle mocks with limited life-cycle in listeners. ; Due to the limited lifetime of static mocks  they cannot be validated within a Mockito session since they might have expired when the validation is applied. This patch excludes static mocks from all validation. To support static mocks in the regular session validation  we would rather need to trigger the validation upon release of any static mock. 
1968 ;  src/main/java/org/mockito/internal/framework/DefaultMockitoSession.java ; Fixes #1967: Correctly handle mocks with limited life-cycle in listeners. ; Due to the limited lifetime of static mocks  they cannot be validated within a Mockito session since they might have expired when the validation is applied. This patch excludes static mocks from all validation. To support static mocks in the regular session validation  we would rather need to trigger the validation upon release of any static mock. 
1968 ;  src/main/java/org/mockito/internal/invocation/finder/AllInvocationsFinder.java ; Fixes #1967: Correctly handle mocks with limited life-cycle in listeners. ; Due to the limited lifetime of static mocks  they cannot be validated within a Mockito session since they might have expired when the validation is applied. This patch excludes static mocks from all validation. To support static mocks in the regular session validation  we would rather need to trigger the validation upon release of any static mock. 
1968 ;  src/test/java/org/mockito/internal/configuration/MockAnnotationProcessorTest.java ; Fixes #1967: Correctly handle mocks with limited life-cycle in listeners. ; Due to the limited lifetime of static mocks  they cannot be validated within a Mockito session since they might have expired when the validation is applied. This patch excludes static mocks from all validation. To support static mocks in the regular session validation  we would rather need to trigger the validation upon release of any static mock. 
1968 ;  subprojects/inline/src/test/java/org/mockitoinline/StaticMockTest.java ; Fixes #1967: Correctly handle mocks with limited life-cycle in listeners. ; Due to the limited lifetime of static mocks  they cannot be validated within a Mockito session since they might have expired when the validation is applied. This patch excludes static mocks from all validation. To support static mocks in the regular session validation  we would rather need to trigger the validation upon release of any static mock. 
1968 ;  subprojects/junitJupiterInlineMockMakerExtensionTest/src/test/java/org/mockitousage/NoExtendsTest.java ; Fixes #1967: Correctly handle mocks with limited life-cycle in listeners. ; Due to the limited lifetime of static mocks  they cannot be validated within a Mockito session since they might have expired when the validation is applied. This patch excludes static mocks from all validation. To support static mocks in the regular session validation  we would rather need to trigger the validation upon release of any static mock. 
1971 ; src/main/java/org/mockito/creation/instance/InstantiationException.java ; Add support for creating constructors without using Objenesis (and unsafe API) ; This PR adds code to constructors to allow short-wiring a constructor without avoiding to call it  thus making the use of Objenesis obsolete. This is desired since Objenesis relies on Unsafe API which is deprecated and will be removed in a future release.  The idea is as follows: Any constructor for a class:     java class Foo extends Bar {   Foo() {     super(somethingWithSideeffect())    } }      is rewritten as follows:     java class Foo {   Foo() {     if (MockDispatcher.isMockedConstruction()) {       super(null)        return      }     super(somethingWithSideeffect())    } }      The mock dispatcher then applies a thead-local check to see if the current construction is supposed to be short-wired and suppresses the original construction in such a case. The check is repeated along the super class hierarchy until reaching the  Object  constructor which is by definition side-effect free. As a result  a mock was created without triggering any user code and without relying on Unsafe API.
1971 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Add support for creating constructors without using Objenesis (and unsafe API) ; This PR adds code to constructors to allow short-wiring a constructor without avoiding to call it  thus making the use of Objenesis obsolete. This is desired since Objenesis relies on Unsafe API which is deprecated and will be removed in a future release.  The idea is as follows: Any constructor for a class:     java class Foo extends Bar {   Foo() {     super(somethingWithSideeffect())    } }      is rewritten as follows:     java class Foo {   Foo() {     if (MockDispatcher.isMockedConstruction()) {       super(null)        return      }     super(somethingWithSideeffect())    } }      The mock dispatcher then applies a thead-local check to see if the current construction is supposed to be short-wired and suppresses the original construction in such a case. The check is repeated along the super class hierarchy until reaching the  Object  constructor which is by definition side-effect free. As a result  a mock was created without triggering any user code and without relying on Unsafe API.
1971 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Add support for creating constructors without using Objenesis (and unsafe API) ; This PR adds code to constructors to allow short-wiring a constructor without avoiding to call it  thus making the use of Objenesis obsolete. This is desired since Objenesis relies on Unsafe API which is deprecated and will be removed in a future release.  The idea is as follows: Any constructor for a class:     java class Foo extends Bar {   Foo() {     super(somethingWithSideeffect())    } }      is rewritten as follows:     java class Foo {   Foo() {     if (MockDispatcher.isMockedConstruction()) {       super(null)        return      }     super(somethingWithSideeffect())    } }      The mock dispatcher then applies a thead-local check to see if the current construction is supposed to be short-wired and suppresses the original construction in such a case. The check is repeated along the super class hierarchy until reaching the  Object  constructor which is by definition side-effect free. As a result  a mock was created without triggering any user code and without relying on Unsafe API.
1971 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Add support for creating constructors without using Objenesis (and unsafe API) ; This PR adds code to constructors to allow short-wiring a constructor without avoiding to call it  thus making the use of Objenesis obsolete. This is desired since Objenesis relies on Unsafe API which is deprecated and will be removed in a future release.  The idea is as follows: Any constructor for a class:     java class Foo extends Bar {   Foo() {     super(somethingWithSideeffect())    } }      is rewritten as follows:     java class Foo {   Foo() {     if (MockDispatcher.isMockedConstruction()) {       super(null)        return      }     super(somethingWithSideeffect())    } }      The mock dispatcher then applies a thead-local check to see if the current construction is supposed to be short-wired and suppresses the original construction in such a case. The check is repeated along the super class hierarchy until reaching the  Object  constructor which is by definition side-effect free. As a result  a mock was created without triggering any user code and without relying on Unsafe API.
1971 ;  src/main/java/org/mockito/internal/creation/bytebuddy/inject/MockMethodDispatcher.java ; Add support for creating constructors without using Objenesis (and unsafe API) ; This PR adds code to constructors to allow short-wiring a constructor without avoiding to call it  thus making the use of Objenesis obsolete. This is desired since Objenesis relies on Unsafe API which is deprecated and will be removed in a future release.  The idea is as follows: Any constructor for a class:     java class Foo extends Bar {   Foo() {     super(somethingWithSideeffect())    } }      is rewritten as follows:     java class Foo {   Foo() {     if (MockDispatcher.isMockedConstruction()) {       super(null)        return      }     super(somethingWithSideeffect())    } }      The mock dispatcher then applies a thead-local check to see if the current construction is supposed to be short-wired and suppresses the original construction in such a case. The check is repeated along the super class hierarchy until reaching the  Object  constructor which is by definition side-effect free. As a result  a mock was created without triggering any user code and without relying on Unsafe API.
1971 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Add support for creating constructors without using Objenesis (and unsafe API) ; This PR adds code to constructors to allow short-wiring a constructor without avoiding to call it  thus making the use of Objenesis obsolete. This is desired since Objenesis relies on Unsafe API which is deprecated and will be removed in a future release.  The idea is as follows: Any constructor for a class:     java class Foo extends Bar {   Foo() {     super(somethingWithSideeffect())    } }      is rewritten as follows:     java class Foo {   Foo() {     if (MockDispatcher.isMockedConstruction()) {       super(null)        return      }     super(somethingWithSideeffect())    } }      The mock dispatcher then applies a thead-local check to see if the current construction is supposed to be short-wired and suppresses the original construction in such a case. The check is repeated along the super class hierarchy until reaching the  Object  constructor which is by definition side-effect free. As a result  a mock was created without triggering any user code and without relying on Unsafe API.
1974 ; src/main/java/org/mockito/internal/configuration/InjectingAnnotationEngine.java ; Fixes #1855 and #939: improve error message when the inline mock maker cannot be used. ; Improves the error message and does not create a hard dependency on the compiler module. It also points out that Byte Buddy can now emulate the attachment API using JNA if it s added to the class path.
1974 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Fixes #1855 and #939: improve error message when the inline mock maker cannot be used. ; Improves the error message and does not create a hard dependency on the compiler module. It also points out that Byte Buddy can now emulate the attachment API using JNA if it s added to the class path.
1978 ; src/main/java/org/mockito/Mockito.java ; Fix Javadoc invalid syntax ; Escape @ character to html entity.  Fixes https://github.com/mockito/mockito/issues/1977 
1984 ; src/main/java/org/mockito/AdditionalAnswers.java ; Fix typo ; This PR fixes a typo.
1989 ; src/main/java/org/mockito/internal/invocation/InterceptedInvocation.java ; Do not pass static mocks to regular listener callback. ; Does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks. Fixes #1988.  We have passed  Class  objects to the listener to indicate a static mock. The class object is of course itself not a regular mock and it s cleaner to create a callback method of it s own. This way  existing listeners remain logically backwards compatible  including our own listener that is used within the JUnit runner (we have only tested the rule  I added a test for the runner  too).
1989 ;  src/main/java/org/mockito/internal/progress/MockingProgress.java ; Do not pass static mocks to regular listener callback. ; Does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks. Fixes #1988.  We have passed  Class  objects to the listener to indicate a static mock. The class object is of course itself not a regular mock and it s cleaner to create a callback method of it s own. This way  existing listeners remain logically backwards compatible  including our own listener that is used within the JUnit runner (we have only tested the rule  I added a test for the runner  too).
1989 ;  src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; Do not pass static mocks to regular listener callback. ; Does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks. Fixes #1988.  We have passed  Class  objects to the listener to indicate a static mock. The class object is of course itself not a regular mock and it s cleaner to create a callback method of it s own. This way  existing listeners remain logically backwards compatible  including our own listener that is used within the JUnit runner (we have only tested the rule  I added a test for the runner  too).
1989 ;  src/main/java/org/mockito/listeners/MockCreationListener.java ; Do not pass static mocks to regular listener callback. ; Does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks. Fixes #1988.  We have passed  Class  objects to the listener to indicate a static mock. The class object is of course itself not a regular mock and it s cleaner to create a callback method of it s own. This way  existing listeners remain logically backwards compatible  including our own listener that is used within the JUnit runner (we have only tested the rule  I added a test for the runner  too).
1989 ;  subprojects/inline/src/test/java/org/mockitoinline/StaticMockTest.java ; Do not pass static mocks to regular listener callback. ; Does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks. Fixes #1988.  We have passed  Class  objects to the listener to indicate a static mock. The class object is of course itself not a regular mock and it s cleaner to create a callback method of it s own. This way  existing listeners remain logically backwards compatible  including our own listener that is used within the JUnit runner (we have only tested the rule  I added a test for the runner  too).
1989 ;  subprojects/inline/src/test/java/org/mockitoinline/StaticRuleTest.java ; Do not pass static mocks to regular listener callback. ; Does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks. Fixes #1988.  We have passed  Class  objects to the listener to indicate a static mock. The class object is of course itself not a regular mock and it s cleaner to create a callback method of it s own. This way  existing listeners remain logically backwards compatible  including our own listener that is used within the JUnit runner (we have only tested the rule  I added a test for the runner  too).
1989 ;  subprojects/inline/src/test/java/org/mockitoinline/StaticRunnerTest.java ; Do not pass static mocks to regular listener callback. ; Does not include static mocks in regular listener logic as it might distort existing mock collectors that do not expect scoped mocks. Fixes #1988.  We have passed  Class  objects to the listener to indicate a static mock. The class object is of course itself not a regular mock and it s cleaner to create a callback method of it s own. This way  existing listeners remain logically backwards compatible  including our own listener that is used within the JUnit runner (we have only tested the rule  I added a test for the runner  too).
1991 ; src/main/java/org/mockito/Mockito.java ; Mockito.verify(): fix typo in Javadoc ; I noted this while reading the Javadocs in my IDE  they were referring to a  get(0)  reference which isn t quite easy to grasp in this context. :see_no_evil: After looking at this class a bit more  I think it s just a copy-paste mistake from this line in the class-level Javadocs: https://github.com/mockito/mockito/blob/release/3.x/src/main/java/org/mockito/Mockito.java#L212
1994 ; src/main/java/org/mockito/internal/configuration/injection/SpyOnInjectedFieldsHandler.java ; Fix typo in CONTRIBUTING.md and SpyOnInjectedFieldsHandler ; Fix typo in CONTRIBUTING.md and SpyOnInjectedFieldsHandler.java
1996 ; src/main/java/org/mockito/internal/configuration/IndependentAnnotationEngine.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/configuration/injection/SpyOnInjectedFieldsHandler.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/configuration/injection/filter/TerminalMockCandidateFilter.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/configuration/plugins/DefaultMockitoPlugins.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/configuration/plugins/Plugins.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/junit/util/JUnitFailureHacker.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/util/JavaEightUtil.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/util/reflection/AccessibilityChanger.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/util/reflection/BeanPropertySetter.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/util/reflection/FieldCopier.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/util/reflection/FieldReader.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/util/reflection/FieldSetter.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/util/reflection/InstanceField.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/util/reflection/InstrumentationMemberAccessor.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/util/reflection/LenientCopyTool.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/util/reflection/ModuleMemberAccessor.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/internal/util/reflection/ReflectionMemberAccessor.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/plugins/MemberAccessor.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/main/java/org/mockito/plugins/MockMaker.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/test/java/org/mockito/internal/util/reflection/AccessibilityChangerTest.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/test/java/org/mockito/internal/util/reflection/MemberAccessorTest.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/test/java/org/mockitointegration/NoByteCodeDependenciesTest.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/test/java/org/mockitousage/annotation/MockInjectionUsingSetterOrPropertyTest.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  src/test/java/org/mockitoutil/ClassLoaders.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  subprojects/module-test/src/test/java/org/mockito/moduletest/ModuleAccessTest.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  subprojects/module-test/src/test/java/org/mockito/moduletest/ModuleHandlingTest.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  subprojects/module-test/src/test/java/org/mockito/moduletest/ModuleUtil.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
1996 ;  subprojects/module-test/src/test/java/org/mockito/moduletest/ReplicatingClassLoader.java ; Add invoker API to allow for alternative invocation modes to better support the module system. ; Adds a  MemberAccessor  abstraction for accessing fields  methods and constructors where the default implementation  ReflectionMemberAccessor  implements the current behavior of using reflection and  setAccessible .   Also  this PR adds a new implementation  ModuleMemberAccessor  where the instrumentation API is leveraged to open modules to Mockito before using method handles to access any such member. This way  module boundaries are no longer stopping Mockito from functioning on Java 9 and onwards. Since the instrumentation API is already used by the inline-mock-maker  it is enabled for this mock maker by default.
2003 ; src/main/java/org/mockito/internal/configuration/ClassPathLoader.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2003 ;  src/main/java/org/mockito/internal/configuration/plugins/DefaultMockitoPlugins.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2003 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginInitializer.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2003 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2003 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2003 ;  src/test/java/org/mockito/internal/creation/bytebuddy/AbstractByteBuddyMockMakerTest.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2003 ;  src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2003 ;  src/test/java/org/mockitousage/spies/SpyingOnInterfacesTest.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2004 ; src/main/java/org/mockito/internal/configuration/ClassPathLoader.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2004 ;  src/main/java/org/mockito/internal/configuration/plugins/DefaultMockitoPlugins.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2004 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginInitializer.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2004 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2004 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2004 ;  src/test/java/org/mockito/internal/creation/bytebuddy/AbstractByteBuddyMockMakerTest.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2004 ;  src/test/java/org/mockito/internal/util/reflection/LenientCopyToolTest.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2004 ;  src/test/java/org/mockitousage/spies/SpyingOnInterfacesTest.java ; Pre release 3.5.0 ; Merged several pull requests into a branch prior to release.
2006 ; src/main/java/org/mockito/internal/SuppressSignatureCheck.java ; Introduce animal sniffer ; Introduces animal sniffer with exclusion of inline-mock-maker classes which would never be present on Android. Avoids calling invoke/invokeExact methods of handles directly but rather puts the invocations into generated code to avoid breaking Android builds.
2006 ;  src/main/java/org/mockito/internal/util/reflection/InstrumentationMemberAccessor.java ; Introduce animal sniffer ; Introduces animal sniffer with exclusion of inline-mock-maker classes which would never be present on Android. Avoids calling invoke/invokeExact methods of handles directly but rather puts the invocations into generated code to avoid breaking Android builds.
2013 ; src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; [ci maven-central-release] Constructor dispatch ; Use constructor instantiation if explicitly specified.
2017 ; src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Only enable mocking of types right before instantiation to avoid circular interception of constructor creation. ; Fixes #2015.
2017 ;  src/main/java/org/mockito/internal/util/reflection/InstrumentationMemberAccessor.java ; Only enable mocking of types right before instantiation to avoid circular interception of constructor creation. ; Fixes #2015.
2017 ;  src/main/java/org/mockito/internal/util/reflection/ModuleMemberAccessor.java ; Only enable mocking of types right before instantiation to avoid circular interception of constructor creation. ; Fixes #2015.
2017 ;  src/main/java/org/mockito/internal/util/reflection/ReflectionMemberAccessor.java ; Only enable mocking of types right before instantiation to avoid circular interception of constructor creation. ; Fixes #2015.
2017 ;  src/main/java/org/mockito/plugins/MemberAccessor.java ; Only enable mocking of types right before instantiation to avoid circular interception of constructor creation. ; Fixes #2015.
2018 ; src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Only enable mocking of types right before instantiation to avoid circular interception of constructor creation. ; Fixes #2015.
2018 ;  src/main/java/org/mockito/internal/util/reflection/InstrumentationMemberAccessor.java ; Only enable mocking of types right before instantiation to avoid circular interception of constructor creation. ; Fixes #2015.
2018 ;  src/main/java/org/mockito/internal/util/reflection/ModuleMemberAccessor.java ; Only enable mocking of types right before instantiation to avoid circular interception of constructor creation. ; Fixes #2015.
2018 ;  src/main/java/org/mockito/internal/util/reflection/ReflectionMemberAccessor.java ; Only enable mocking of types right before instantiation to avoid circular interception of constructor creation. ; Fixes #2015.
2018 ;  src/main/java/org/mockito/plugins/MemberAccessor.java ; Only enable mocking of types right before instantiation to avoid circular interception of constructor creation. ; Fixes #2015.
2020 ; src/main/java/org/mockito/internal/creation/bytebuddy/inject/MockMethodDispatcher.java ; Constructor dispatch ; Adds error message to class loader setups that do not work with the inline mock maker.
2021 ; src/main/java/org/mockito/internal/util/reflection/InstrumentationMemberAccessor.java ; Constructor dispatch ; Fixes recursive constructor invocation. Avoids reflective access warning when using instrumentation-based member accessor.
2023 ; src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Initializes classes prior to instrumentation to avoid uncontrolled code execution. ; Fixes #2011 - triggeres initializers explicitly.
2023 ;  subprojects/inline/src/test/java/org/mockitoinline/InitializationTest.java ; Initializes classes prior to instrumentation to avoid uncontrolled code execution. ; Fixes #2011 - triggeres initializers explicitly.
2023 ;  subprojects/inline/src/test/java/org/mockitoinline/PluginTest.java ; Initializes classes prior to instrumentation to avoid uncontrolled code execution. ; Fixes #2011 - triggeres initializers explicitly.
2034 ; src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodInterceptor.java ; Escape mock during method dispatch on mock to avoid premature garbage collection. ; Under heavy optimization mocks might get garbage collected during the dispatching of a mocked method if the mock instance is not used after this method dispatch. To avoid this  we escape the mock instance during the dispatch to make sure that the GC cannot collect the object.  Fixes #1802.
2034 ;  src/test/java/org/mockito/PrematureGarbageCollectionTest.java ; Escape mock during method dispatch on mock to avoid premature garbage collection. ; Under heavy optimization mocks might get garbage collected during the dispatching of a mocked method if the mock instance is not used after this method dispatch. To avoid this  we escape the mock instance during the dispatch to make sure that the GC cannot collect the object.  Fixes #1802.
2042 ; src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Mock resolver plugin ; Adds a plugin to allow for adding one or multiple mock resolvers. This way  instances that are provided to Mockito s DSL do no longer require to be the actual mocks but can also be proxies of mocks what is something already being applied by frameworks such as Spring.  This works today with the subclass mock maker by accident as we read the mock state from the mock instance via a method which gets proxied. If we ever find a more private appraoch this would however break Spring s Mockito use and it is already broken with the inline mock maker.  By this SPI  Spring could add an unproxy resolver to its Mockito build-up and make it s proxied mocks compatible with Mockito. Other frameworks could use the same approach if desired as this SPI is generic.  Closes #1980
2042 ;  src/main/java/org/mockito/internal/util/MockUtil.java ; Mock resolver plugin ; Adds a plugin to allow for adding one or multiple mock resolvers. This way  instances that are provided to Mockito s DSL do no longer require to be the actual mocks but can also be proxies of mocks what is something already being applied by frameworks such as Spring.  This works today with the subclass mock maker by accident as we read the mock state from the mock instance via a method which gets proxied. If we ever find a more private appraoch this would however break Spring s Mockito use and it is already broken with the inline mock maker.  By this SPI  Spring could add an unproxy resolver to its Mockito build-up and make it s proxied mocks compatible with Mockito. Other frameworks could use the same approach if desired as this SPI is generic.  Closes #1980
2046 ; src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Do not exclude synthetic constructors from instrumentation. Fixes #2040. ; Byte Buddy does exclude synthetic members by default as they normally provide necessary infrastructure outside of business logic (e.g. bridge methods). For constructor instrumentation  it is however crucial that no code is called during mock creation and that fields are copied during spy creation.
2046 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Do not exclude synthetic constructors from instrumentation. Fixes #2040. ; Byte Buddy does exclude synthetic members by default as they normally provide necessary infrastructure outside of business logic (e.g. bridge methods). For constructor instrumentation  it is however crucial that no code is called during mock creation and that fields are copied during spy creation.
2051 ;  src/test/java/org/mockitousage/serialization/DeepStubsSerializableTest.java ; Update to OpenJDK 15. ; Use Java 15 in builds for most recent Java version.
2051 ;  src/test/java/org/mockitousage/stubbing/StubbingWithDelegateTest.java ; Update to OpenJDK 15. ; Use Java 15 in builds for most recent Java version.
2071 ; src/main/java/org/mockito/internal/matchers/text/MatcherToString.java ; Fixes #2061: ArgumentMatcher error messages use lambda class names ; Fixes #2061
2071 ;  src/main/java/org/mockito/internal/util/StringUtil.java ; Fixes #2061: ArgumentMatcher error messages use lambda class names ; Fixes #2061
2071 ;  src/test/java/org/mockito/internal/matchers/text/MatcherToStringTest.java ; Fixes #2061: ArgumentMatcher error messages use lambda class names ; Fixes #2061
2071 ;  src/test/java/org/mockito/internal/util/StringUtilTest.java ; Fixes #2061: ArgumentMatcher error messages use lambda class names ; Fixes #2061
2098 ; src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Improve error message if initializer fails. ; Non-initializable classes can never be mocked  an error message should help guide on these issues.
2135 ; subprojects/inline/src/test/java/org/mockitoinline/StaticMockTest.java ; Add void static method mocking example ; Signed-off-by: Gábor Lipták <gliptak@gmail.com>  https://github.com/mockito/mockito/issues/2027
2140 ; src/main/java/org/mockito/Mockito.java ; Endorsed MockitoTestNGListener in the documentation ; After the latest changes in MockitoTestNGListener I sure that can be used without worry.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
2140 ;  src/main/java/org/mockito/MockitoSession.java ; Endorsed MockitoTestNGListener in the documentation ; After the latest changes in MockitoTestNGListener I sure that can be used without worry.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
2140 ;  src/main/java/org/mockito/junit/MockitoJUnitRunner.java ; Endorsed MockitoTestNGListener in the documentation ; After the latest changes in MockitoTestNGListener I sure that can be used without worry.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
2140 ;  src/main/java/org/mockito/junit/MockitoRule.java ; Endorsed MockitoTestNGListener in the documentation ; After the latest changes in MockitoTestNGListener I sure that can be used without worry.  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
2145 ; src/main/java/org/mockito/Mockito.java ; Fix in the doc for  Mocking object construction  ; This is a suggestion for changing the documentation for  Mocking object construction .  Previously  the documentation has suggested that  MockedConstruction  can define mock behavior and to verify static method invocations.  However  it is meant for defining mock behavior and verifying non-static method invocations.   - [X] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [X] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [ ] Avoid other runtime dependencies  - [X] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [X] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
2158 ; src/main/java/org/mockito/Mock.java ; Add field type in @Mock example ; javadoc-only change <sup>(IMO not worth separate issue nor RN mentioning.)</sup>
2175 ; src/main/java/org/mockito/ArgumentMatchers.java ; ArgumentMatches: fix Javadoc typo/grammar ; I started out with noticing the  safer that it was  part which felt like a typo. Then I realized there were perhaps more errors in this sentence (which was duplicated in multiple places in this file). Please verify that I understood the intent of this comment correctly  but my hope is that this is now the more correct way to express this.  Again  thanks for a great framework! :bow: 
2176 ; src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java ; Bump versions.errorprone from 2.4.0 to 2.5.1 ; Bumps  versions.errorprone  from 2.4.0 to 2.5.1. Updates  error_prone_core  from 2.4.0 to 2.5.1 <details> <summary>Release notes</summary> <p><em>Sourced from <a href= https://github.com/google/error-prone/releases >error_prone_core s releases</a>.</em></p> <blockquote> <h2>Error Prone 2.5.1</h2> <p>Changes</p> <p>NoSuchMethodError:  com.sun.tools.javac.util.List com.sun.tools.javac.code.Symbol$TypeSymbol.getEnclosedElements</p> <ul> <li>Fixed <code>NoSuchMethodError</code> crash in <code>HidingField</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2092 >#2092</a>)</li> <li>Fixed <code>NoSuchElementException</code> crash in <code>RestrictedApiChecker</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2099 >#2099</a>)</li> <li>False positive in <code>DifferentNameButSame</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2094 >#2094</a>)</li> <li>False positive in <code>UnnecessaryOptionalGet</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2101 >#2101</a>)</li> <li>False positive in <code>UnnecessaryMethodReference</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2102 >#2102</a>)</li> <li>Fixed a regression in JDK 16-EA support (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2105 >#2105</a>)</li> </ul> <h2>Error Prone 2.5.0</h2> <p>New checks:</p> <ul> <li><a href= http://errorprone.info/bugpattern/BanSerializableRead >BanSerializableRead</a></li> <li><a href= http://errorprone.info/bugpattern/CatchingUnchecked >CatchingUnchecked</a></li> <li><a href= http://errorprone.info/bugpattern/ComputeIfAbsentAmbiguousReference >ComputeIfAbsentAmbiguousReference</a></li> <li><a href= http://errorprone.info/bugpattern/DangerousLiteralNull >DangerousLiteralNull</a></li> <li><a href= http://errorprone.info/bugpattern/DateChecker >DateChecker</a></li> <li><a href= http://errorprone.info/bugpattern/DifferentNameButSame >DifferentNameButSame</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotCallSuggester >DoNotCallSuggester</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotClaimAnnotations >DoNotClaimAnnotations</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotMockAutoValue >DoNotMockAutoValue</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerFormatString >FloggerFormatString</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerLogVarargs >FloggerLogVarargs</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerLogWithCause >FloggerLogWithCause</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerMessageFormat >FloggerMessageFormat</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerPassedAround >FloggerPassedAround</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerRedundantIsEnabled >FloggerRedundantIsEnabled</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerRequiredModifiers >FloggerRequiredModifiers</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerSplitLogStatement >FloggerSplitLogStatement</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerWithCause >FloggerWithCause</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerWithoutCause >FloggerWithoutCause</a></li> <li><a href= http://errorprone.info/bugpattern/HashCodeToString >HashCodeToString</a></li> <li><a href= http://errorprone.info/bugpattern/IdentityHashMapUsage >IdentityHashMapUsage</a></li> <li><a href= http://errorprone.info/bugpattern/ImmutableMemberCollection >ImmutableMemberCollection</a></li> <li><a href= http://errorprone.info/bugpattern/ImmutableSetForContains >ImmutableSetForContains</a></li> <li><a href= http://errorprone.info/bugpattern/InitializeInline >InitializeInline</a></li> <li><a href= http://errorprone.info/bugpattern/InvalidThrowsLink >InvalidThrowsLink</a></li> <li><a href= http://errorprone.info/bugpattern/IsInstanceIncompatibleType >IsInstanceIncompatibleType</a></li> <li><a href= http://errorprone.info/bugpattern/JavaUtilDate >JavaUtilDate</a></li> <li><a href= http://errorprone.info/bugpattern/JodaConstructors >JodaConstructors</a></li> <li><a href= http://errorprone.info/bugpattern/JodaDateTimeConstants >JodaDateTimeConstants</a></li> <li><a href= http://errorprone.info/bugpattern/LongFloatConversion >LongFloatConversion</a></li> <li><a href= http://errorprone.info/bugpattern/MemberName >MemberName</a></li> <li><a href= http://errorprone.info/bugpattern/MisplacedScopeAnnotations >MisplacedScopeAnnotations</a></li> <li><a href= http://errorprone.info/bugpattern/ObjectEqualsForPrimitives >ObjectEqualsForPrimitives</a></li> <li><a href= http://errorprone.info/bugpattern/OptionalMapUnusedValue >OptionalMapUnusedValue</a></li> <li><a href= http://errorprone.info/bugpattern/ReturnsNullCollection >ReturnsNullCollection</a></li> </ul> <!-- raw HTML omitted --> </blockquote> <p>... (truncated)</p> </details> <details> <summary>Commits</summary> <ul> <li><a href= https://github.com/google/error-prone/commit/5e733ac0210893496c2e1eb7cb9e27b69ef3ae75 ><code>5e733ac</code></a> Release Error Prone 2.5.1</li> <li><a href= https://github.com/google/error-prone/commit/4f69766fb4693baf089963c3221590c0705f960e ><code>4f69766</code></a> Support pre-JDK-8044853 early-desugaring of <code>JCNewClass</code></li> <li><a href= https://github.com/google/error-prone/commit/68614030bb176ecd3855bd5e1cb642c2a1df95d1 ><code>6861403</code></a> Don t set checks as <code>disableable = false</code> in external</li> <li><a href= https://github.com/google/error-prone/commit/a7f3413fe9c510dd434432cd616c1b8a81c53b0a ><code>a7f3413</code></a> Handle classes with explicit enclosing instances in <code>DifferentNameButSame</code></li> <li><a href= https://github.com/google/error-prone/commit/7a651175436a0cf9a522a297ad252b3e85bc7111 ><code>7a65117</code></a> <code>Symbol.isLocal</code> was renamed in JDK 16</li> <li><a href= https://github.com/google/error-prone/commit/fb6d0492afb4827904772097c40b2c8e40033d7d ><code>fb6d049</code></a> Don t suggest private constructors for abstract classes</li> <li><a href= https://github.com/google/error-prone/commit/7d93df418e7fd59d68931a19acb6bc913dba0e40 ><code>7d93df4</code></a> Fix handling of <code>super::</code> method references in <code>UnnecessaryMethodReference</code></li> <li><a href= https://github.com/google/error-prone/commit/b1eaa17a7d29d40d8a0a3d00196bf7fbab414d06 ><code>b1eaa17</code></a> Only report <code>UnnecessaryOptionalGet</code> findings if the receivers are identical</li> <li><a href= https://github.com/google/error-prone/commit/144c76057fe170d12269a4f5e44d34ab24c9e8b3 ><code>144c760</code></a> Address a <code>VisibleForTestingUsed</code> finding</li> <li><a href= https://github.com/google/error-prone/commit/0951985c7d55e5041f2f1a363c587644a9a66175 ><code>0951985</code></a> Generate Javadoc in CI pipeline</li> <li>Additional commits viewable in <a href= https://github.com/google/error-prone/compare/v2.4.0...v2.5.1 >compare view</a></li> </ul> </details> <br />  Updates  error_prone_test_helpers  from 2.4.0 to 2.5.1 <details> <summary>Release notes</summary> <p><em>Sourced from <a href= https://github.com/google/error-prone/releases >error_prone_test_helpers s releases</a>.</em></p> <blockquote> <h2>Error Prone 2.5.1</h2> <p>Changes</p> <p>NoSuchMethodError:  com.sun.tools.javac.util.List com.sun.tools.javac.code.Symbol$TypeSymbol.getEnclosedElements</p> <ul> <li>Fixed <code>NoSuchMethodError</code> crash in <code>HidingField</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2092 >#2092</a>)</li> <li>Fixed <code>NoSuchElementException</code> crash in <code>RestrictedApiChecker</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2099 >#2099</a>)</li> <li>False positive in <code>DifferentNameButSame</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2094 >#2094</a>)</li> <li>False positive in <code>UnnecessaryOptionalGet</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2101 >#2101</a>)</li> <li>False positive in <code>UnnecessaryMethodReference</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2102 >#2102</a>)</li> <li>Fixed a regression in JDK 16-EA support (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2105 >#2105</a>)</li> </ul> <h2>Error Prone 2.5.0</h2> <p>New checks:</p> <ul> <li><a href= http://errorprone.info/bugpattern/BanSerializableRead >BanSerializableRead</a></li> <li><a href= http://errorprone.info/bugpattern/CatchingUnchecked >CatchingUnchecked</a></li> <li><a href= http://errorprone.info/bugpattern/ComputeIfAbsentAmbiguousReference >ComputeIfAbsentAmbiguousReference</a></li> <li><a href= http://errorprone.info/bugpattern/DangerousLiteralNull >DangerousLiteralNull</a></li> <li><a href= http://errorprone.info/bugpattern/DateChecker >DateChecker</a></li> <li><a href= http://errorprone.info/bugpattern/DifferentNameButSame >DifferentNameButSame</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotCallSuggester >DoNotCallSuggester</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotClaimAnnotations >DoNotClaimAnnotations</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotMockAutoValue >DoNotMockAutoValue</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerFormatString >FloggerFormatString</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerLogVarargs >FloggerLogVarargs</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerLogWithCause >FloggerLogWithCause</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerMessageFormat >FloggerMessageFormat</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerPassedAround >FloggerPassedAround</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerRedundantIsEnabled >FloggerRedundantIsEnabled</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerRequiredModifiers >FloggerRequiredModifiers</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerSplitLogStatement >FloggerSplitLogStatement</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerWithCause >FloggerWithCause</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerWithoutCause >FloggerWithoutCause</a></li> <li><a href= http://errorprone.info/bugpattern/HashCodeToString >HashCodeToString</a></li> <li><a href= http://errorprone.info/bugpattern/IdentityHashMapUsage >IdentityHashMapUsage</a></li> <li><a href= http://errorprone.info/bugpattern/ImmutableMemberCollection >ImmutableMemberCollection</a></li> <li><a href= http://errorprone.info/bugpattern/ImmutableSetForContains >ImmutableSetForContains</a></li> <li><a href= http://errorprone.info/bugpattern/InitializeInline >InitializeInline</a></li> <li><a href= http://errorprone.info/bugpattern/InvalidThrowsLink >InvalidThrowsLink</a></li> <li><a href= http://errorprone.info/bugpattern/IsInstanceIncompatibleType >IsInstanceIncompatibleType</a></li> <li><a href= http://errorprone.info/bugpattern/JavaUtilDate >JavaUtilDate</a></li> <li><a href= http://errorprone.info/bugpattern/JodaConstructors >JodaConstructors</a></li> <li><a href= http://errorprone.info/bugpattern/JodaDateTimeConstants >JodaDateTimeConstants</a></li> <li><a href= http://errorprone.info/bugpattern/LongFloatConversion >LongFloatConversion</a></li> <li><a href= http://errorprone.info/bugpattern/MemberName >MemberName</a></li> <li><a href= http://errorprone.info/bugpattern/MisplacedScopeAnnotations >MisplacedScopeAnnotations</a></li> <li><a href= http://errorprone.info/bugpattern/ObjectEqualsForPrimitives >ObjectEqualsForPrimitives</a></li> <li><a href= http://errorprone.info/bugpattern/OptionalMapUnusedValue >OptionalMapUnusedValue</a></li> <li><a href= http://errorprone.info/bugpattern/ReturnsNullCollection >ReturnsNullCollection</a></li> </ul> <!-- raw HTML omitted --> </blockquote> <p>... (truncated)</p> </details> <details> <summary>Commits</summary> <ul> <li><a href= https://github.com/google/error-prone/commit/5e733ac0210893496c2e1eb7cb9e27b69ef3ae75 ><code>5e733ac</code></a> Release Error Prone 2.5.1</li> <li><a href= https://github.com/google/error-prone/commit/4f69766fb4693baf089963c3221590c0705f960e ><code>4f69766</code></a> Support pre-JDK-8044853 early-desugaring of <code>JCNewClass</code></li> <li><a href= https://github.com/google/error-prone/commit/68614030bb176ecd3855bd5e1cb642c2a1df95d1 ><code>6861403</code></a> Don t set checks as <code>disableable = false</code> in external</li> <li><a href= https://github.com/google/error-prone/commit/a7f3413fe9c510dd434432cd616c1b8a81c53b0a ><code>a7f3413</code></a> Handle classes with explicit enclosing instances in <code>DifferentNameButSame</code></li> <li><a href= https://github.com/google/error-prone/commit/7a651175436a0cf9a522a297ad252b3e85bc7111 ><code>7a65117</code></a> <code>Symbol.isLocal</code> was renamed in JDK 16</li> <li><a href= https://github.com/google/error-prone/commit/fb6d0492afb4827904772097c40b2c8e40033d7d ><code>fb6d049</code></a> Don t suggest private constructors for abstract classes</li> <li><a href= https://github.com/google/error-prone/commit/7d93df418e7fd59d68931a19acb6bc913dba0e40 ><code>7d93df4</code></a> Fix handling of <code>super::</code> method references in <code>UnnecessaryMethodReference</code></li> <li><a href= https://github.com/google/error-prone/commit/b1eaa17a7d29d40d8a0a3d00196bf7fbab414d06 ><code>b1eaa17</code></a> Only report <code>UnnecessaryOptionalGet</code> findings if the receivers are identical</li> <li><a href= https://github.com/google/error-prone/commit/144c76057fe170d12269a4f5e44d34ab24c9e8b3 ><code>144c760</code></a> Address a <code>VisibleForTestingUsed</code> finding</li> <li><a href= https://github.com/google/error-prone/commit/0951985c7d55e5041f2f1a363c587644a9a66175 ><code>0951985</code></a> Generate Javadoc in CI pipeline</li> <li>Additional commits viewable in <a href= https://github.com/google/error-prone/compare/v2.4.0...v2.5.1 >compare view</a></li> </ul> </details> <br />   Dependabot will resolve any conflicts with this PR as long as you don t alter it yourself. You can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---  <details> <summary>Dependabot commands and options</summary> <br />  You can trigger Dependabot actions by commenting on this PR: -  @dependabot rebase  will rebase this PR -  @dependabot recreate  will recreate this PR  overwriting any edits that have been made to it -  @dependabot merge  will merge this PR after your CI passes on it -  @dependabot squash and merge  will squash and merge this PR after your CI passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this PR if it is closed -  @dependabot close  will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) -  @dependabot ignore this minor version  will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) -  @dependabot ignore this dependency  will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)   </details>
2176 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Bump versions.errorprone from 2.4.0 to 2.5.1 ; Bumps  versions.errorprone  from 2.4.0 to 2.5.1. Updates  error_prone_core  from 2.4.0 to 2.5.1 <details> <summary>Release notes</summary> <p><em>Sourced from <a href= https://github.com/google/error-prone/releases >error_prone_core s releases</a>.</em></p> <blockquote> <h2>Error Prone 2.5.1</h2> <p>Changes</p> <p>NoSuchMethodError:  com.sun.tools.javac.util.List com.sun.tools.javac.code.Symbol$TypeSymbol.getEnclosedElements</p> <ul> <li>Fixed <code>NoSuchMethodError</code> crash in <code>HidingField</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2092 >#2092</a>)</li> <li>Fixed <code>NoSuchElementException</code> crash in <code>RestrictedApiChecker</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2099 >#2099</a>)</li> <li>False positive in <code>DifferentNameButSame</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2094 >#2094</a>)</li> <li>False positive in <code>UnnecessaryOptionalGet</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2101 >#2101</a>)</li> <li>False positive in <code>UnnecessaryMethodReference</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2102 >#2102</a>)</li> <li>Fixed a regression in JDK 16-EA support (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2105 >#2105</a>)</li> </ul> <h2>Error Prone 2.5.0</h2> <p>New checks:</p> <ul> <li><a href= http://errorprone.info/bugpattern/BanSerializableRead >BanSerializableRead</a></li> <li><a href= http://errorprone.info/bugpattern/CatchingUnchecked >CatchingUnchecked</a></li> <li><a href= http://errorprone.info/bugpattern/ComputeIfAbsentAmbiguousReference >ComputeIfAbsentAmbiguousReference</a></li> <li><a href= http://errorprone.info/bugpattern/DangerousLiteralNull >DangerousLiteralNull</a></li> <li><a href= http://errorprone.info/bugpattern/DateChecker >DateChecker</a></li> <li><a href= http://errorprone.info/bugpattern/DifferentNameButSame >DifferentNameButSame</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotCallSuggester >DoNotCallSuggester</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotClaimAnnotations >DoNotClaimAnnotations</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotMockAutoValue >DoNotMockAutoValue</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerFormatString >FloggerFormatString</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerLogVarargs >FloggerLogVarargs</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerLogWithCause >FloggerLogWithCause</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerMessageFormat >FloggerMessageFormat</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerPassedAround >FloggerPassedAround</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerRedundantIsEnabled >FloggerRedundantIsEnabled</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerRequiredModifiers >FloggerRequiredModifiers</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerSplitLogStatement >FloggerSplitLogStatement</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerWithCause >FloggerWithCause</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerWithoutCause >FloggerWithoutCause</a></li> <li><a href= http://errorprone.info/bugpattern/HashCodeToString >HashCodeToString</a></li> <li><a href= http://errorprone.info/bugpattern/IdentityHashMapUsage >IdentityHashMapUsage</a></li> <li><a href= http://errorprone.info/bugpattern/ImmutableMemberCollection >ImmutableMemberCollection</a></li> <li><a href= http://errorprone.info/bugpattern/ImmutableSetForContains >ImmutableSetForContains</a></li> <li><a href= http://errorprone.info/bugpattern/InitializeInline >InitializeInline</a></li> <li><a href= http://errorprone.info/bugpattern/InvalidThrowsLink >InvalidThrowsLink</a></li> <li><a href= http://errorprone.info/bugpattern/IsInstanceIncompatibleType >IsInstanceIncompatibleType</a></li> <li><a href= http://errorprone.info/bugpattern/JavaUtilDate >JavaUtilDate</a></li> <li><a href= http://errorprone.info/bugpattern/JodaConstructors >JodaConstructors</a></li> <li><a href= http://errorprone.info/bugpattern/JodaDateTimeConstants >JodaDateTimeConstants</a></li> <li><a href= http://errorprone.info/bugpattern/LongFloatConversion >LongFloatConversion</a></li> <li><a href= http://errorprone.info/bugpattern/MemberName >MemberName</a></li> <li><a href= http://errorprone.info/bugpattern/MisplacedScopeAnnotations >MisplacedScopeAnnotations</a></li> <li><a href= http://errorprone.info/bugpattern/ObjectEqualsForPrimitives >ObjectEqualsForPrimitives</a></li> <li><a href= http://errorprone.info/bugpattern/OptionalMapUnusedValue >OptionalMapUnusedValue</a></li> <li><a href= http://errorprone.info/bugpattern/ReturnsNullCollection >ReturnsNullCollection</a></li> </ul> <!-- raw HTML omitted --> </blockquote> <p>... (truncated)</p> </details> <details> <summary>Commits</summary> <ul> <li><a href= https://github.com/google/error-prone/commit/5e733ac0210893496c2e1eb7cb9e27b69ef3ae75 ><code>5e733ac</code></a> Release Error Prone 2.5.1</li> <li><a href= https://github.com/google/error-prone/commit/4f69766fb4693baf089963c3221590c0705f960e ><code>4f69766</code></a> Support pre-JDK-8044853 early-desugaring of <code>JCNewClass</code></li> <li><a href= https://github.com/google/error-prone/commit/68614030bb176ecd3855bd5e1cb642c2a1df95d1 ><code>6861403</code></a> Don t set checks as <code>disableable = false</code> in external</li> <li><a href= https://github.com/google/error-prone/commit/a7f3413fe9c510dd434432cd616c1b8a81c53b0a ><code>a7f3413</code></a> Handle classes with explicit enclosing instances in <code>DifferentNameButSame</code></li> <li><a href= https://github.com/google/error-prone/commit/7a651175436a0cf9a522a297ad252b3e85bc7111 ><code>7a65117</code></a> <code>Symbol.isLocal</code> was renamed in JDK 16</li> <li><a href= https://github.com/google/error-prone/commit/fb6d0492afb4827904772097c40b2c8e40033d7d ><code>fb6d049</code></a> Don t suggest private constructors for abstract classes</li> <li><a href= https://github.com/google/error-prone/commit/7d93df418e7fd59d68931a19acb6bc913dba0e40 ><code>7d93df4</code></a> Fix handling of <code>super::</code> method references in <code>UnnecessaryMethodReference</code></li> <li><a href= https://github.com/google/error-prone/commit/b1eaa17a7d29d40d8a0a3d00196bf7fbab414d06 ><code>b1eaa17</code></a> Only report <code>UnnecessaryOptionalGet</code> findings if the receivers are identical</li> <li><a href= https://github.com/google/error-prone/commit/144c76057fe170d12269a4f5e44d34ab24c9e8b3 ><code>144c760</code></a> Address a <code>VisibleForTestingUsed</code> finding</li> <li><a href= https://github.com/google/error-prone/commit/0951985c7d55e5041f2f1a363c587644a9a66175 ><code>0951985</code></a> Generate Javadoc in CI pipeline</li> <li>Additional commits viewable in <a href= https://github.com/google/error-prone/compare/v2.4.0...v2.5.1 >compare view</a></li> </ul> </details> <br />  Updates  error_prone_test_helpers  from 2.4.0 to 2.5.1 <details> <summary>Release notes</summary> <p><em>Sourced from <a href= https://github.com/google/error-prone/releases >error_prone_test_helpers s releases</a>.</em></p> <blockquote> <h2>Error Prone 2.5.1</h2> <p>Changes</p> <p>NoSuchMethodError:  com.sun.tools.javac.util.List com.sun.tools.javac.code.Symbol$TypeSymbol.getEnclosedElements</p> <ul> <li>Fixed <code>NoSuchMethodError</code> crash in <code>HidingField</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2092 >#2092</a>)</li> <li>Fixed <code>NoSuchElementException</code> crash in <code>RestrictedApiChecker</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2099 >#2099</a>)</li> <li>False positive in <code>DifferentNameButSame</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2094 >#2094</a>)</li> <li>False positive in <code>UnnecessaryOptionalGet</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2101 >#2101</a>)</li> <li>False positive in <code>UnnecessaryMethodReference</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2102 >#2102</a>)</li> <li>Fixed a regression in JDK 16-EA support (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2105 >#2105</a>)</li> </ul> <h2>Error Prone 2.5.0</h2> <p>New checks:</p> <ul> <li><a href= http://errorprone.info/bugpattern/BanSerializableRead >BanSerializableRead</a></li> <li><a href= http://errorprone.info/bugpattern/CatchingUnchecked >CatchingUnchecked</a></li> <li><a href= http://errorprone.info/bugpattern/ComputeIfAbsentAmbiguousReference >ComputeIfAbsentAmbiguousReference</a></li> <li><a href= http://errorprone.info/bugpattern/DangerousLiteralNull >DangerousLiteralNull</a></li> <li><a href= http://errorprone.info/bugpattern/DateChecker >DateChecker</a></li> <li><a href= http://errorprone.info/bugpattern/DifferentNameButSame >DifferentNameButSame</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotCallSuggester >DoNotCallSuggester</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotClaimAnnotations >DoNotClaimAnnotations</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotMockAutoValue >DoNotMockAutoValue</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerFormatString >FloggerFormatString</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerLogVarargs >FloggerLogVarargs</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerLogWithCause >FloggerLogWithCause</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerMessageFormat >FloggerMessageFormat</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerPassedAround >FloggerPassedAround</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerRedundantIsEnabled >FloggerRedundantIsEnabled</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerRequiredModifiers >FloggerRequiredModifiers</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerSplitLogStatement >FloggerSplitLogStatement</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerWithCause >FloggerWithCause</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerWithoutCause >FloggerWithoutCause</a></li> <li><a href= http://errorprone.info/bugpattern/HashCodeToString >HashCodeToString</a></li> <li><a href= http://errorprone.info/bugpattern/IdentityHashMapUsage >IdentityHashMapUsage</a></li> <li><a href= http://errorprone.info/bugpattern/ImmutableMemberCollection >ImmutableMemberCollection</a></li> <li><a href= http://errorprone.info/bugpattern/ImmutableSetForContains >ImmutableSetForContains</a></li> <li><a href= http://errorprone.info/bugpattern/InitializeInline >InitializeInline</a></li> <li><a href= http://errorprone.info/bugpattern/InvalidThrowsLink >InvalidThrowsLink</a></li> <li><a href= http://errorprone.info/bugpattern/IsInstanceIncompatibleType >IsInstanceIncompatibleType</a></li> <li><a href= http://errorprone.info/bugpattern/JavaUtilDate >JavaUtilDate</a></li> <li><a href= http://errorprone.info/bugpattern/JodaConstructors >JodaConstructors</a></li> <li><a href= http://errorprone.info/bugpattern/JodaDateTimeConstants >JodaDateTimeConstants</a></li> <li><a href= http://errorprone.info/bugpattern/LongFloatConversion >LongFloatConversion</a></li> <li><a href= http://errorprone.info/bugpattern/MemberName >MemberName</a></li> <li><a href= http://errorprone.info/bugpattern/MisplacedScopeAnnotations >MisplacedScopeAnnotations</a></li> <li><a href= http://errorprone.info/bugpattern/ObjectEqualsForPrimitives >ObjectEqualsForPrimitives</a></li> <li><a href= http://errorprone.info/bugpattern/OptionalMapUnusedValue >OptionalMapUnusedValue</a></li> <li><a href= http://errorprone.info/bugpattern/ReturnsNullCollection >ReturnsNullCollection</a></li> </ul> <!-- raw HTML omitted --> </blockquote> <p>... (truncated)</p> </details> <details> <summary>Commits</summary> <ul> <li><a href= https://github.com/google/error-prone/commit/5e733ac0210893496c2e1eb7cb9e27b69ef3ae75 ><code>5e733ac</code></a> Release Error Prone 2.5.1</li> <li><a href= https://github.com/google/error-prone/commit/4f69766fb4693baf089963c3221590c0705f960e ><code>4f69766</code></a> Support pre-JDK-8044853 early-desugaring of <code>JCNewClass</code></li> <li><a href= https://github.com/google/error-prone/commit/68614030bb176ecd3855bd5e1cb642c2a1df95d1 ><code>6861403</code></a> Don t set checks as <code>disableable = false</code> in external</li> <li><a href= https://github.com/google/error-prone/commit/a7f3413fe9c510dd434432cd616c1b8a81c53b0a ><code>a7f3413</code></a> Handle classes with explicit enclosing instances in <code>DifferentNameButSame</code></li> <li><a href= https://github.com/google/error-prone/commit/7a651175436a0cf9a522a297ad252b3e85bc7111 ><code>7a65117</code></a> <code>Symbol.isLocal</code> was renamed in JDK 16</li> <li><a href= https://github.com/google/error-prone/commit/fb6d0492afb4827904772097c40b2c8e40033d7d ><code>fb6d049</code></a> Don t suggest private constructors for abstract classes</li> <li><a href= https://github.com/google/error-prone/commit/7d93df418e7fd59d68931a19acb6bc913dba0e40 ><code>7d93df4</code></a> Fix handling of <code>super::</code> method references in <code>UnnecessaryMethodReference</code></li> <li><a href= https://github.com/google/error-prone/commit/b1eaa17a7d29d40d8a0a3d00196bf7fbab414d06 ><code>b1eaa17</code></a> Only report <code>UnnecessaryOptionalGet</code> findings if the receivers are identical</li> <li><a href= https://github.com/google/error-prone/commit/144c76057fe170d12269a4f5e44d34ab24c9e8b3 ><code>144c760</code></a> Address a <code>VisibleForTestingUsed</code> finding</li> <li><a href= https://github.com/google/error-prone/commit/0951985c7d55e5041f2f1a363c587644a9a66175 ><code>0951985</code></a> Generate Javadoc in CI pipeline</li> <li>Additional commits viewable in <a href= https://github.com/google/error-prone/compare/v2.4.0...v2.5.1 >compare view</a></li> </ul> </details> <br />   Dependabot will resolve any conflicts with this PR as long as you don t alter it yourself. You can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---  <details> <summary>Dependabot commands and options</summary> <br />  You can trigger Dependabot actions by commenting on this PR: -  @dependabot rebase  will rebase this PR -  @dependabot recreate  will recreate this PR  overwriting any edits that have been made to it -  @dependabot merge  will merge this PR after your CI passes on it -  @dependabot squash and merge  will squash and merge this PR after your CI passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this PR if it is closed -  @dependabot close  will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) -  @dependabot ignore this minor version  will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) -  @dependabot ignore this dependency  will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)   </details>
2176 ;  subprojects/errorprone/src/main/java/org/mockito/errorprone/bugpatterns/AbstractMockitoAnyForPrimitiveType.java ; Bump versions.errorprone from 2.4.0 to 2.5.1 ; Bumps  versions.errorprone  from 2.4.0 to 2.5.1. Updates  error_prone_core  from 2.4.0 to 2.5.1 <details> <summary>Release notes</summary> <p><em>Sourced from <a href= https://github.com/google/error-prone/releases >error_prone_core s releases</a>.</em></p> <blockquote> <h2>Error Prone 2.5.1</h2> <p>Changes</p> <p>NoSuchMethodError:  com.sun.tools.javac.util.List com.sun.tools.javac.code.Symbol$TypeSymbol.getEnclosedElements</p> <ul> <li>Fixed <code>NoSuchMethodError</code> crash in <code>HidingField</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2092 >#2092</a>)</li> <li>Fixed <code>NoSuchElementException</code> crash in <code>RestrictedApiChecker</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2099 >#2099</a>)</li> <li>False positive in <code>DifferentNameButSame</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2094 >#2094</a>)</li> <li>False positive in <code>UnnecessaryOptionalGet</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2101 >#2101</a>)</li> <li>False positive in <code>UnnecessaryMethodReference</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2102 >#2102</a>)</li> <li>Fixed a regression in JDK 16-EA support (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2105 >#2105</a>)</li> </ul> <h2>Error Prone 2.5.0</h2> <p>New checks:</p> <ul> <li><a href= http://errorprone.info/bugpattern/BanSerializableRead >BanSerializableRead</a></li> <li><a href= http://errorprone.info/bugpattern/CatchingUnchecked >CatchingUnchecked</a></li> <li><a href= http://errorprone.info/bugpattern/ComputeIfAbsentAmbiguousReference >ComputeIfAbsentAmbiguousReference</a></li> <li><a href= http://errorprone.info/bugpattern/DangerousLiteralNull >DangerousLiteralNull</a></li> <li><a href= http://errorprone.info/bugpattern/DateChecker >DateChecker</a></li> <li><a href= http://errorprone.info/bugpattern/DifferentNameButSame >DifferentNameButSame</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotCallSuggester >DoNotCallSuggester</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotClaimAnnotations >DoNotClaimAnnotations</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotMockAutoValue >DoNotMockAutoValue</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerFormatString >FloggerFormatString</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerLogVarargs >FloggerLogVarargs</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerLogWithCause >FloggerLogWithCause</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerMessageFormat >FloggerMessageFormat</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerPassedAround >FloggerPassedAround</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerRedundantIsEnabled >FloggerRedundantIsEnabled</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerRequiredModifiers >FloggerRequiredModifiers</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerSplitLogStatement >FloggerSplitLogStatement</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerWithCause >FloggerWithCause</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerWithoutCause >FloggerWithoutCause</a></li> <li><a href= http://errorprone.info/bugpattern/HashCodeToString >HashCodeToString</a></li> <li><a href= http://errorprone.info/bugpattern/IdentityHashMapUsage >IdentityHashMapUsage</a></li> <li><a href= http://errorprone.info/bugpattern/ImmutableMemberCollection >ImmutableMemberCollection</a></li> <li><a href= http://errorprone.info/bugpattern/ImmutableSetForContains >ImmutableSetForContains</a></li> <li><a href= http://errorprone.info/bugpattern/InitializeInline >InitializeInline</a></li> <li><a href= http://errorprone.info/bugpattern/InvalidThrowsLink >InvalidThrowsLink</a></li> <li><a href= http://errorprone.info/bugpattern/IsInstanceIncompatibleType >IsInstanceIncompatibleType</a></li> <li><a href= http://errorprone.info/bugpattern/JavaUtilDate >JavaUtilDate</a></li> <li><a href= http://errorprone.info/bugpattern/JodaConstructors >JodaConstructors</a></li> <li><a href= http://errorprone.info/bugpattern/JodaDateTimeConstants >JodaDateTimeConstants</a></li> <li><a href= http://errorprone.info/bugpattern/LongFloatConversion >LongFloatConversion</a></li> <li><a href= http://errorprone.info/bugpattern/MemberName >MemberName</a></li> <li><a href= http://errorprone.info/bugpattern/MisplacedScopeAnnotations >MisplacedScopeAnnotations</a></li> <li><a href= http://errorprone.info/bugpattern/ObjectEqualsForPrimitives >ObjectEqualsForPrimitives</a></li> <li><a href= http://errorprone.info/bugpattern/OptionalMapUnusedValue >OptionalMapUnusedValue</a></li> <li><a href= http://errorprone.info/bugpattern/ReturnsNullCollection >ReturnsNullCollection</a></li> </ul> <!-- raw HTML omitted --> </blockquote> <p>... (truncated)</p> </details> <details> <summary>Commits</summary> <ul> <li><a href= https://github.com/google/error-prone/commit/5e733ac0210893496c2e1eb7cb9e27b69ef3ae75 ><code>5e733ac</code></a> Release Error Prone 2.5.1</li> <li><a href= https://github.com/google/error-prone/commit/4f69766fb4693baf089963c3221590c0705f960e ><code>4f69766</code></a> Support pre-JDK-8044853 early-desugaring of <code>JCNewClass</code></li> <li><a href= https://github.com/google/error-prone/commit/68614030bb176ecd3855bd5e1cb642c2a1df95d1 ><code>6861403</code></a> Don t set checks as <code>disableable = false</code> in external</li> <li><a href= https://github.com/google/error-prone/commit/a7f3413fe9c510dd434432cd616c1b8a81c53b0a ><code>a7f3413</code></a> Handle classes with explicit enclosing instances in <code>DifferentNameButSame</code></li> <li><a href= https://github.com/google/error-prone/commit/7a651175436a0cf9a522a297ad252b3e85bc7111 ><code>7a65117</code></a> <code>Symbol.isLocal</code> was renamed in JDK 16</li> <li><a href= https://github.com/google/error-prone/commit/fb6d0492afb4827904772097c40b2c8e40033d7d ><code>fb6d049</code></a> Don t suggest private constructors for abstract classes</li> <li><a href= https://github.com/google/error-prone/commit/7d93df418e7fd59d68931a19acb6bc913dba0e40 ><code>7d93df4</code></a> Fix handling of <code>super::</code> method references in <code>UnnecessaryMethodReference</code></li> <li><a href= https://github.com/google/error-prone/commit/b1eaa17a7d29d40d8a0a3d00196bf7fbab414d06 ><code>b1eaa17</code></a> Only report <code>UnnecessaryOptionalGet</code> findings if the receivers are identical</li> <li><a href= https://github.com/google/error-prone/commit/144c76057fe170d12269a4f5e44d34ab24c9e8b3 ><code>144c760</code></a> Address a <code>VisibleForTestingUsed</code> finding</li> <li><a href= https://github.com/google/error-prone/commit/0951985c7d55e5041f2f1a363c587644a9a66175 ><code>0951985</code></a> Generate Javadoc in CI pipeline</li> <li>Additional commits viewable in <a href= https://github.com/google/error-prone/compare/v2.4.0...v2.5.1 >compare view</a></li> </ul> </details> <br />  Updates  error_prone_test_helpers  from 2.4.0 to 2.5.1 <details> <summary>Release notes</summary> <p><em>Sourced from <a href= https://github.com/google/error-prone/releases >error_prone_test_helpers s releases</a>.</em></p> <blockquote> <h2>Error Prone 2.5.1</h2> <p>Changes</p> <p>NoSuchMethodError:  com.sun.tools.javac.util.List com.sun.tools.javac.code.Symbol$TypeSymbol.getEnclosedElements</p> <ul> <li>Fixed <code>NoSuchMethodError</code> crash in <code>HidingField</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2092 >#2092</a>)</li> <li>Fixed <code>NoSuchElementException</code> crash in <code>RestrictedApiChecker</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2099 >#2099</a>)</li> <li>False positive in <code>DifferentNameButSame</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2094 >#2094</a>)</li> <li>False positive in <code>UnnecessaryOptionalGet</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2101 >#2101</a>)</li> <li>False positive in <code>UnnecessaryMethodReference</code> (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2102 >#2102</a>)</li> <li>Fixed a regression in JDK 16-EA support (<a href= https://github-redirect.dependabot.com/google/error-prone/issues/2105 >#2105</a>)</li> </ul> <h2>Error Prone 2.5.0</h2> <p>New checks:</p> <ul> <li><a href= http://errorprone.info/bugpattern/BanSerializableRead >BanSerializableRead</a></li> <li><a href= http://errorprone.info/bugpattern/CatchingUnchecked >CatchingUnchecked</a></li> <li><a href= http://errorprone.info/bugpattern/ComputeIfAbsentAmbiguousReference >ComputeIfAbsentAmbiguousReference</a></li> <li><a href= http://errorprone.info/bugpattern/DangerousLiteralNull >DangerousLiteralNull</a></li> <li><a href= http://errorprone.info/bugpattern/DateChecker >DateChecker</a></li> <li><a href= http://errorprone.info/bugpattern/DifferentNameButSame >DifferentNameButSame</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotCallSuggester >DoNotCallSuggester</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotClaimAnnotations >DoNotClaimAnnotations</a></li> <li><a href= http://errorprone.info/bugpattern/DoNotMockAutoValue >DoNotMockAutoValue</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerFormatString >FloggerFormatString</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerLogVarargs >FloggerLogVarargs</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerLogWithCause >FloggerLogWithCause</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerMessageFormat >FloggerMessageFormat</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerPassedAround >FloggerPassedAround</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerRedundantIsEnabled >FloggerRedundantIsEnabled</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerRequiredModifiers >FloggerRequiredModifiers</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerSplitLogStatement >FloggerSplitLogStatement</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerWithCause >FloggerWithCause</a></li> <li><a href= http://errorprone.info/bugpattern/FloggerWithoutCause >FloggerWithoutCause</a></li> <li><a href= http://errorprone.info/bugpattern/HashCodeToString >HashCodeToString</a></li> <li><a href= http://errorprone.info/bugpattern/IdentityHashMapUsage >IdentityHashMapUsage</a></li> <li><a href= http://errorprone.info/bugpattern/ImmutableMemberCollection >ImmutableMemberCollection</a></li> <li><a href= http://errorprone.info/bugpattern/ImmutableSetForContains >ImmutableSetForContains</a></li> <li><a href= http://errorprone.info/bugpattern/InitializeInline >InitializeInline</a></li> <li><a href= http://errorprone.info/bugpattern/InvalidThrowsLink >InvalidThrowsLink</a></li> <li><a href= http://errorprone.info/bugpattern/IsInstanceIncompatibleType >IsInstanceIncompatibleType</a></li> <li><a href= http://errorprone.info/bugpattern/JavaUtilDate >JavaUtilDate</a></li> <li><a href= http://errorprone.info/bugpattern/JodaConstructors >JodaConstructors</a></li> <li><a href= http://errorprone.info/bugpattern/JodaDateTimeConstants >JodaDateTimeConstants</a></li> <li><a href= http://errorprone.info/bugpattern/LongFloatConversion >LongFloatConversion</a></li> <li><a href= http://errorprone.info/bugpattern/MemberName >MemberName</a></li> <li><a href= http://errorprone.info/bugpattern/MisplacedScopeAnnotations >MisplacedScopeAnnotations</a></li> <li><a href= http://errorprone.info/bugpattern/ObjectEqualsForPrimitives >ObjectEqualsForPrimitives</a></li> <li><a href= http://errorprone.info/bugpattern/OptionalMapUnusedValue >OptionalMapUnusedValue</a></li> <li><a href= http://errorprone.info/bugpattern/ReturnsNullCollection >ReturnsNullCollection</a></li> </ul> <!-- raw HTML omitted --> </blockquote> <p>... (truncated)</p> </details> <details> <summary>Commits</summary> <ul> <li><a href= https://github.com/google/error-prone/commit/5e733ac0210893496c2e1eb7cb9e27b69ef3ae75 ><code>5e733ac</code></a> Release Error Prone 2.5.1</li> <li><a href= https://github.com/google/error-prone/commit/4f69766fb4693baf089963c3221590c0705f960e ><code>4f69766</code></a> Support pre-JDK-8044853 early-desugaring of <code>JCNewClass</code></li> <li><a href= https://github.com/google/error-prone/commit/68614030bb176ecd3855bd5e1cb642c2a1df95d1 ><code>6861403</code></a> Don t set checks as <code>disableable = false</code> in external</li> <li><a href= https://github.com/google/error-prone/commit/a7f3413fe9c510dd434432cd616c1b8a81c53b0a ><code>a7f3413</code></a> Handle classes with explicit enclosing instances in <code>DifferentNameButSame</code></li> <li><a href= https://github.com/google/error-prone/commit/7a651175436a0cf9a522a297ad252b3e85bc7111 ><code>7a65117</code></a> <code>Symbol.isLocal</code> was renamed in JDK 16</li> <li><a href= https://github.com/google/error-prone/commit/fb6d0492afb4827904772097c40b2c8e40033d7d ><code>fb6d049</code></a> Don t suggest private constructors for abstract classes</li> <li><a href= https://github.com/google/error-prone/commit/7d93df418e7fd59d68931a19acb6bc913dba0e40 ><code>7d93df4</code></a> Fix handling of <code>super::</code> method references in <code>UnnecessaryMethodReference</code></li> <li><a href= https://github.com/google/error-prone/commit/b1eaa17a7d29d40d8a0a3d00196bf7fbab414d06 ><code>b1eaa17</code></a> Only report <code>UnnecessaryOptionalGet</code> findings if the receivers are identical</li> <li><a href= https://github.com/google/error-prone/commit/144c76057fe170d12269a4f5e44d34ab24c9e8b3 ><code>144c760</code></a> Address a <code>VisibleForTestingUsed</code> finding</li> <li><a href= https://github.com/google/error-prone/commit/0951985c7d55e5041f2f1a363c587644a9a66175 ><code>0951985</code></a> Generate Javadoc in CI pipeline</li> <li>Additional commits viewable in <a href= https://github.com/google/error-prone/compare/v2.4.0...v2.5.1 >compare view</a></li> </ul> </details> <br />   Dependabot will resolve any conflicts with this PR as long as you don t alter it yourself. You can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---  <details> <summary>Dependabot commands and options</summary> <br />  You can trigger Dependabot actions by commenting on this PR: -  @dependabot rebase  will rebase this PR -  @dependabot recreate  will recreate this PR  overwriting any edits that have been made to it -  @dependabot merge  will merge this PR after your CI passes on it -  @dependabot squash and merge  will squash and merge this PR after your CI passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this PR if it is closed -  @dependabot close  will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) -  @dependabot ignore this minor version  will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) -  @dependabot ignore this dependency  will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)   </details>
2179 ; src/main/java/org/mockito/MockedStatic.java ; Fix reversed order of verify parameters ; For consistency the parameters of the method MockedStatic.verify(VerificationMode  Verification) have been swapped to MockedStatic.verify(Verification  VerificationMode) as this order is already used in Mockito.verify(T  VerificationMode)  Fixes: #2173  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
2179 ;  src/main/java/org/mockito/internal/MockedStaticImpl.java ; Fix reversed order of verify parameters ; For consistency the parameters of the method MockedStatic.verify(VerificationMode  Verification) have been swapped to MockedStatic.verify(Verification  VerificationMode) as this order is already used in Mockito.verify(T  VerificationMode)  Fixes: #2173  check list   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_
2180 ; src/main/java/org/mockito/Mockito.java ; Fix typo in Javadocs of MockedConstruction ; Hi 🖐  I noted this while reading the Javadocs of MockedConstruction.  They were referring to static method and out of scope variable. It isn t quite easy to grasp in this context.   I think it s just a copy-paste mistake. 
2193 ; src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Fixes #2154 : java.lang.Object is now instrumented again ; Seems like       // The object type does not ever need instrumentation. targets.remove(Object.class)       in  org.mockito.internal.creation.bytebuddy.InlineBytecodeGenerator.triggerRetransformation(Set<Class<?>>  boolean)  was a bit over the top  i. e. it does seem to break mocking of  toString  when inherited from  java.lang.Object .  I added a test for this which should have been there in the first place. Due to this  I am still not sure if removing the line is safe  even if the whole test suite is green. Please review carefully. 
2194 ; src/main/java/org/mockito/Mockito.java ; Add API for clearing mocks. ; By clearing mocks  caches are emptied and instrumentations are reversed.
2194 ;  src/main/java/org/mockito/internal/MockitoCore.java ; Add API for clearing mocks. ; By clearing mocks  caches are emptied and instrumentations are reversed.
2194 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java ; Add API for clearing mocks. ; By clearing mocks  caches are emptied and instrumentations are reversed.
2194 ;  src/main/java/org/mockito/internal/creation/bytebuddy/BytecodeGenerator.java ; Add API for clearing mocks. ; By clearing mocks  caches are emptied and instrumentations are reversed.
2194 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Add API for clearing mocks. ; By clearing mocks  caches are emptied and instrumentations are reversed.
2194 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineBytecodeGenerator.java ; Add API for clearing mocks. ; By clearing mocks  caches are emptied and instrumentations are reversed.
2194 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassByteBuddyMockMaker.java ; Add API for clearing mocks. ; By clearing mocks  caches are emptied and instrumentations are reversed.
2194 ;  src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java ; Add API for clearing mocks. ; By clearing mocks  caches are emptied and instrumentations are reversed.
2194 ;  src/main/java/org/mockito/internal/util/MockUtil.java ; Add API for clearing mocks. ; By clearing mocks  caches are emptied and instrumentations are reversed.
2194 ;  src/main/java/org/mockito/plugins/MockMaker.java ; Add API for clearing mocks. ; By clearing mocks  caches are emptied and instrumentations are reversed.
2194 ;  src/test/java/org/mockito/MockitoClearTest.java ; Add API for clearing mocks. ; By clearing mocks  caches are emptied and instrumentations are reversed.
2194 ;  subprojects/android/src/main/java/org/mockito/android/internal/creation/AndroidByteBuddyMockMaker.java ; Add API for clearing mocks. ; By clearing mocks  caches are emptied and instrumentations are reversed.
2227 ; src/main/java/org/mockito/MockedStatic.java ; Add missing Deprecated annotation ; Discovered while trying to sync Mockito internally at Google.
2236 ; src/main/java/org/mockito/internal/handler/MockHandlerImpl.java ; Bugfix/2235 verify on a wrapped mock fails ; PR for #2235: verify() on a wrapped mock fails with UnfinishedVerificationException
2236 ;  src/main/java/org/mockito/internal/util/MockUtil.java ; Bugfix/2235 verify on a wrapped mock fails ; PR for #2235: verify() on a wrapped mock fails with UnfinishedVerificationException
2241 ; src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodAdvice.java ; Fixes #2238: Do not omit stack frames of causing class ; This PR will fix this problems described in #2238.   The main cause wasn t the  hideRecursiveCall  method but  tryInvoke  method. In  tryInvoke  the original stacktrace will be passed through the configured filter after it has been modified by  hideRecursiveCall .  When calling  hideRecursiveCall  the second argument ( current ) is set the the length of the stack trace of the causing exception. This will omit too much stack frames  ultimately skipping the lines containing of the root exception cause.  In this patch   tryInvoke  will try to find a better starting frame when an exception is caught. It will do this by investigating the created stack trace and look for the first entry matching the class name of the  instance  object given to  tryInvoke . This offset will then be given to  hideRecursiveCall  as  current  argument instead of using the stack trace length. If there is no  instance  object ( null )  the length of the stack trace is used (like before). 
2241 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Fixes #2238: Do not omit stack frames of causing class ; This PR will fix this problems described in #2238.   The main cause wasn t the  hideRecursiveCall  method but  tryInvoke  method. In  tryInvoke  the original stacktrace will be passed through the configured filter after it has been modified by  hideRecursiveCall .  When calling  hideRecursiveCall  the second argument ( current ) is set the the length of the stack trace of the causing exception. This will omit too much stack frames  ultimately skipping the lines containing of the root exception cause.  In this patch   tryInvoke  will try to find a better starting frame when an exception is caught. It will do this by investigating the created stack trace and look for the first entry matching the class name of the  instance  object given to  tryInvoke . This offset will then be given to  hideRecursiveCall  as  current  argument instead of using the stack trace length. If there is no  instance  object ( null )  the length of the stack trace is used (like before). 
2248 ; src/main/java/org/mockito/internal/stubbing/StubbedInvocationMatcher.java ; Fix thread race condition ; Discovered internally at Google. The culprit was a thread race condition around the usage of usedAt  which could race between setting the field and retrieving it.
2250 ; src/test/java/org/mockito/internal/configuration/plugins/PluginFinderTest.java ; Bump versions.errorprone from 2.5.1 to 2.6.0 ; Bumps  versions.errorprone  from 2.5.1 to 2.6.0. Updates  error_prone_core  from 2.5.1 to 2.6.0 <details> <summary>Commits</summary> <ul> <li><a href= https://github.com/google/error-prone/commit/86f8e239fca1db4e966369902f7a6b9e63580d1b ><code>86f8e23</code></a> Add <code>TimeUnit</code> APIs to <code>ReturnValueIgnored</code>.</li> <li><a href= https://github.com/google/error-prone/commit/c5e1687485bad49606a288187334a48fea284861 ><code>c5e1687</code></a> Disable <code>BanSerializableRead</code> by default</li> <li><a href= https://github.com/google/error-prone/commit/3d642502c29d56d396ad119e45a44b1051f3abff ><code>3d64250</code></a> Improve <code>ConstantPatternCompile</code> fixes</li> <li><a href= https://github.com/google/error-prone/commit/553603f97b001d97ea0abdbab2288581c7b76de9 ><code>553603f</code></a> Add a missing <code>@Nullable</code> annotation.</li> <li><a href= https://github.com/google/error-prone/commit/3e14f54f8e3951e337bc5cf65ee49927c9c6d18f ><code>3e14f54</code></a> Generalize <code>ConstantPatternCompile</code></li> <li><a href= https://github.com/google/error-prone/commit/456dcf00d733aef4f296cfdcc13f7e3bb5f931c0 ><code>456dcf0</code></a> Rename <code>isNull</code> and <code>isNonNull</code> matchers to make it</li> <li><a href= https://github.com/google/error-prone/commit/ed55201419464bf1f0ea9463323348a81b996294 ><code>ed55201</code></a> Inet4Address and Inet6Address are immutable</li> <li><a href= https://github.com/google/error-prone/commit/91951e3911f9ad7578b1d9f296188cf5a12d0511 ><code>91951e3</code></a> Remove deprecated attributes from <code>@RestrictedApi</code></li> <li><a href= https://github.com/google/error-prone/commit/2b105754603997b69bf8c4274c783011b6a00dd2 ><code>2b10575</code></a> Rethrow ReflectiveOperationException as LinkageError instead of AssertionError.</li> <li><a href= https://github.com/google/error-prone/commit/fc7cca8034eb15ad9b3de51f20a3b81c19442e7e ><code>fc7cca8</code></a> Expand ImmutableMemberCollection to convert <code>private final</code> member collection...</li> <li>Additional commits viewable in <a href= https://github.com/google/error-prone/compare/v2.5.1...v2.6.0 >compare view</a></li> </ul> </details> <br />  Updates  error_prone_test_helpers  from 2.5.1 to 2.6.0 <details> <summary>Commits</summary> <ul> <li><a href= https://github.com/google/error-prone/commit/86f8e239fca1db4e966369902f7a6b9e63580d1b ><code>86f8e23</code></a> Add <code>TimeUnit</code> APIs to <code>ReturnValueIgnored</code>.</li> <li><a href= https://github.com/google/error-prone/commit/c5e1687485bad49606a288187334a48fea284861 ><code>c5e1687</code></a> Disable <code>BanSerializableRead</code> by default</li> <li><a href= https://github.com/google/error-prone/commit/3d642502c29d56d396ad119e45a44b1051f3abff ><code>3d64250</code></a> Improve <code>ConstantPatternCompile</code> fixes</li> <li><a href= https://github.com/google/error-prone/commit/553603f97b001d97ea0abdbab2288581c7b76de9 ><code>553603f</code></a> Add a missing <code>@Nullable</code> annotation.</li> <li><a href= https://github.com/google/error-prone/commit/3e14f54f8e3951e337bc5cf65ee49927c9c6d18f ><code>3e14f54</code></a> Generalize <code>ConstantPatternCompile</code></li> <li><a href= https://github.com/google/error-prone/commit/456dcf00d733aef4f296cfdcc13f7e3bb5f931c0 ><code>456dcf0</code></a> Rename <code>isNull</code> and <code>isNonNull</code> matchers to make it</li> <li><a href= https://github.com/google/error-prone/commit/ed55201419464bf1f0ea9463323348a81b996294 ><code>ed55201</code></a> Inet4Address and Inet6Address are immutable</li> <li><a href= https://github.com/google/error-prone/commit/91951e3911f9ad7578b1d9f296188cf5a12d0511 ><code>91951e3</code></a> Remove deprecated attributes from <code>@RestrictedApi</code></li> <li><a href= https://github.com/google/error-prone/commit/2b105754603997b69bf8c4274c783011b6a00dd2 ><code>2b10575</code></a> Rethrow ReflectiveOperationException as LinkageError instead of AssertionError.</li> <li><a href= https://github.com/google/error-prone/commit/fc7cca8034eb15ad9b3de51f20a3b81c19442e7e ><code>fc7cca8</code></a> Expand ImmutableMemberCollection to convert <code>private final</code> member collection...</li> <li>Additional commits viewable in <a href= https://github.com/google/error-prone/compare/v2.5.1...v2.6.0 >compare view</a></li> </ul> </details> <br />   Dependabot will resolve any conflicts with this PR as long as you don t alter it yourself. You can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---  <details> <summary>Dependabot commands and options</summary> <br />  You can trigger Dependabot actions by commenting on this PR: -  @dependabot rebase  will rebase this PR -  @dependabot recreate  will recreate this PR  overwriting any edits that have been made to it -  @dependabot merge  will merge this PR after your CI passes on it -  @dependabot squash and merge  will squash and merge this PR after your CI passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this PR if it is closed -  @dependabot close  will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) -  @dependabot ignore this minor version  will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) -  @dependabot ignore this dependency  will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)   </details>
2250 ;  subprojects/errorprone/src/main/java/org/mockito/errorprone/bugpatterns/MockitoInternalUsage.java ; Bump versions.errorprone from 2.5.1 to 2.6.0 ; Bumps  versions.errorprone  from 2.5.1 to 2.6.0. Updates  error_prone_core  from 2.5.1 to 2.6.0 <details> <summary>Commits</summary> <ul> <li><a href= https://github.com/google/error-prone/commit/86f8e239fca1db4e966369902f7a6b9e63580d1b ><code>86f8e23</code></a> Add <code>TimeUnit</code> APIs to <code>ReturnValueIgnored</code>.</li> <li><a href= https://github.com/google/error-prone/commit/c5e1687485bad49606a288187334a48fea284861 ><code>c5e1687</code></a> Disable <code>BanSerializableRead</code> by default</li> <li><a href= https://github.com/google/error-prone/commit/3d642502c29d56d396ad119e45a44b1051f3abff ><code>3d64250</code></a> Improve <code>ConstantPatternCompile</code> fixes</li> <li><a href= https://github.com/google/error-prone/commit/553603f97b001d97ea0abdbab2288581c7b76de9 ><code>553603f</code></a> Add a missing <code>@Nullable</code> annotation.</li> <li><a href= https://github.com/google/error-prone/commit/3e14f54f8e3951e337bc5cf65ee49927c9c6d18f ><code>3e14f54</code></a> Generalize <code>ConstantPatternCompile</code></li> <li><a href= https://github.com/google/error-prone/commit/456dcf00d733aef4f296cfdcc13f7e3bb5f931c0 ><code>456dcf0</code></a> Rename <code>isNull</code> and <code>isNonNull</code> matchers to make it</li> <li><a href= https://github.com/google/error-prone/commit/ed55201419464bf1f0ea9463323348a81b996294 ><code>ed55201</code></a> Inet4Address and Inet6Address are immutable</li> <li><a href= https://github.com/google/error-prone/commit/91951e3911f9ad7578b1d9f296188cf5a12d0511 ><code>91951e3</code></a> Remove deprecated attributes from <code>@RestrictedApi</code></li> <li><a href= https://github.com/google/error-prone/commit/2b105754603997b69bf8c4274c783011b6a00dd2 ><code>2b10575</code></a> Rethrow ReflectiveOperationException as LinkageError instead of AssertionError.</li> <li><a href= https://github.com/google/error-prone/commit/fc7cca8034eb15ad9b3de51f20a3b81c19442e7e ><code>fc7cca8</code></a> Expand ImmutableMemberCollection to convert <code>private final</code> member collection...</li> <li>Additional commits viewable in <a href= https://github.com/google/error-prone/compare/v2.5.1...v2.6.0 >compare view</a></li> </ul> </details> <br />  Updates  error_prone_test_helpers  from 2.5.1 to 2.6.0 <details> <summary>Commits</summary> <ul> <li><a href= https://github.com/google/error-prone/commit/86f8e239fca1db4e966369902f7a6b9e63580d1b ><code>86f8e23</code></a> Add <code>TimeUnit</code> APIs to <code>ReturnValueIgnored</code>.</li> <li><a href= https://github.com/google/error-prone/commit/c5e1687485bad49606a288187334a48fea284861 ><code>c5e1687</code></a> Disable <code>BanSerializableRead</code> by default</li> <li><a href= https://github.com/google/error-prone/commit/3d642502c29d56d396ad119e45a44b1051f3abff ><code>3d64250</code></a> Improve <code>ConstantPatternCompile</code> fixes</li> <li><a href= https://github.com/google/error-prone/commit/553603f97b001d97ea0abdbab2288581c7b76de9 ><code>553603f</code></a> Add a missing <code>@Nullable</code> annotation.</li> <li><a href= https://github.com/google/error-prone/commit/3e14f54f8e3951e337bc5cf65ee49927c9c6d18f ><code>3e14f54</code></a> Generalize <code>ConstantPatternCompile</code></li> <li><a href= https://github.com/google/error-prone/commit/456dcf00d733aef4f296cfdcc13f7e3bb5f931c0 ><code>456dcf0</code></a> Rename <code>isNull</code> and <code>isNonNull</code> matchers to make it</li> <li><a href= https://github.com/google/error-prone/commit/ed55201419464bf1f0ea9463323348a81b996294 ><code>ed55201</code></a> Inet4Address and Inet6Address are immutable</li> <li><a href= https://github.com/google/error-prone/commit/91951e3911f9ad7578b1d9f296188cf5a12d0511 ><code>91951e3</code></a> Remove deprecated attributes from <code>@RestrictedApi</code></li> <li><a href= https://github.com/google/error-prone/commit/2b105754603997b69bf8c4274c783011b6a00dd2 ><code>2b10575</code></a> Rethrow ReflectiveOperationException as LinkageError instead of AssertionError.</li> <li><a href= https://github.com/google/error-prone/commit/fc7cca8034eb15ad9b3de51f20a3b81c19442e7e ><code>fc7cca8</code></a> Expand ImmutableMemberCollection to convert <code>private final</code> member collection...</li> <li>Additional commits viewable in <a href= https://github.com/google/error-prone/compare/v2.5.1...v2.6.0 >compare view</a></li> </ul> </details> <br />   Dependabot will resolve any conflicts with this PR as long as you don t alter it yourself. You can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) [//]: # (dependabot-automerge-end)  ---  <details> <summary>Dependabot commands and options</summary> <br />  You can trigger Dependabot actions by commenting on this PR: -  @dependabot rebase  will rebase this PR -  @dependabot recreate  will recreate this PR  overwriting any edits that have been made to it -  @dependabot merge  will merge this PR after your CI passes on it -  @dependabot squash and merge  will squash and merge this PR after your CI passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this PR if it is closed -  @dependabot close  will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) -  @dependabot ignore this minor version  will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) -  @dependabot ignore this dependency  will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)   </details>
2259 ; src/main/java/org/mockito/internal/exceptions/Reporter.java ;  But invoked here  lists the invocation parameters ; Supersedes and closes #2188
2259 ;  src/test/java/org/mockito/internal/verification/checkers/NumberOfInvocationsCheckerTest.java ;  But invoked here  lists the invocation parameters ; Supersedes and closes #2188
2263 ; src/test/java/org/mockitousage/verification/BasicVerificationInOrderTest.java ; Fixes #2242 : Make exceptions for Inorder.verify more standard / spec… ; …ific  *Adds NullInsteadOfMockException and NotAMockException checks to Inorder.verify() *before* checking if mocks were passed in during creation of Inorder  See https://github.com/mockito/mockito/issues/2242 for a description of the issue.  Inorder.verify(mock) now first checks if the passed argument is null  and if the mock is in fact a mock  and gives appropriate Exception messages  before checking if the passed in argument was passed during creation of Inorder object  and therefore giving a less specific error message.  <!-- Hey   Thanks for the contribution  this is awesome. As you may have read  project members have somehow an opinionated view on what and how should be Mockito  e.g. we don t want mockito to be a feature bloat. There may be a thorough review  with feedback -> code change loop. --> <!-- Which branch :  - On mockito 3.x  make your pull request target  release/3.x  - On mockito 2.x  make your pull request target  release/2.x  (2.x is in maintenance mode) --> <!-- If you have a suggestion for this template you can fix it in the .github/PULL_REQUEST_TEMPLATE.md file --> ## Checklist   - [x ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [ x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x ] Avoid other runtime dependencies  - [x ] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x ] The pull request follows coding style  - [ x] Mention  Fixes #<issue number>  in the description _if relevant_  - [ x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
2267 ; src/main/java/org/mockito/internal/util/reflection/FieldReader.java ; Include cause when FieldReader fails to access field ; Fixes #2266  Simply passes the exception cause to the thrown MockitoException
2267 ;  subprojects/module-test/src/test/java/org/mockito/moduletest/ModuleAccessTest.java ; Include cause when FieldReader fails to access field ; Fixes #2266  Simply passes the exception cause to the thrown MockitoException
2267 ;  subprojects/module-test/src/test/java/org/mockito/moduletest/ModuleUtil.java ; Include cause when FieldReader fails to access field ; Fixes #2266  Simply passes the exception cause to the thrown MockitoException
2274 ; src/main/java/org/mockito/ArgumentMatcher.java ; Fixes #2273 : Add missing parenthesis to javadoc example ; Adds the missing parenthesis to the ArgumentMatcher javadoc example  ## Checklist   - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [x] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [x] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [x] Mention  Fixes #<issue number>  in the description _if relevant_  - [x] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
2277 ; src/main/java/org/mockito/AdditionalAnswers.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/AdditionalMatchers.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/Answers.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/ArgumentMatchers.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/Captor.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/MockedStatic.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/Mockito.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/MockitoAnnotations.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/configuration/DefaultMockitoConfiguration.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/creation/instance/Instantiator.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/exceptions/verification/ArgumentsAreDifferent.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/hamcrest/MockitoHamcrest.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/InOrderImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/MockedConstructionImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/MockedStaticImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/MockitoCore.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/SuppressSignatureCheck.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/CaptorAnnotationProcessor.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/GlobalConfiguration.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/IndependentAnnotationEngine.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/InjectingAnnotationEngine.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/SpyAnnotationEngine.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/injection/ConstructorInjection.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/injection/MockInjection.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/injection/MockInjectionStrategy.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/injection/PropertyAndSetterInjection.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/injection/filter/NameBasedCandidateFilter.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/injection/filter/OngoingInjector.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/injection/filter/TerminalMockCandidateFilter.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/injection/filter/TypeBasedCandidateFilter.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/injection/scanner/InjectMocksScanner.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/plugins/DefaultMockitoPlugins.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/plugins/DefaultPluginSwitch.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginLoader.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/plugins/PluginRegistry.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/configuration/plugins/Plugins.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/DelegatingMethod.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/MockSettingsImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/SuspendMethod.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyCrossClassLoaderSerializationSupport.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/bytebuddy/MockMethodInterceptor.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/bytebuddy/TypeCachingBytecodeGenerator.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/bytebuddy/inject/MockMethodDispatcher.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/instance/ConstructorInstantiator.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/instance/DefaultInstantiatorProvider.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/instance/Instantiator.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/instance/InstantiatorProvider2Adapter.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/instance/InstantiatorProviderAdapter.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/instance/ObjenesisInstantiator.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/creation/settings/CreationSettings.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/debugging/InvocationsPrinter.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/debugging/LocationImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/debugging/LoggingListener.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/debugging/MockitoDebuggerImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/debugging/VerboseMockInvocationLogger.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/debugging/WarningsCollector.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/debugging/WarningsFinder.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/DefaultStackTraceCleanerProvider.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/exceptions/stacktrace/StackTraceFilter.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/framework/DefaultMockitoFramework.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/hamcrest/HamcrestArgumentMatcher.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/hamcrest/MatcherGenericTypeExtractor.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/handler/InvocationNotifierHandler.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/handler/MockHandlerFactory.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/handler/MockHandlerImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/handler/NotifiedMethodInvocationReport.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/invocation/ArgumentsProcessor.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/invocation/DefaultInvocationFactory.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/invocation/InterceptedInvocation.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/invocation/InvocationComparator.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/invocation/InvocationMatcher.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/invocation/InvocationsFinder.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/invocation/MatcherApplicationStrategy.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/invocation/MatchersBinder.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/invocation/SerializableMethod.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/invocation/StubInfoImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/invocation/TypeSafeMatching.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/invocation/UnusedStubsFinder.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/invocation/finder/AllInvocationsFinder.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/invocation/finder/VerifiableInvocationsFinder.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/junit/DefaultStubbingLookupListener.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/junit/JUnitRule.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/junit/JUnitSessionStore.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/junit/JUnitTestRule.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/junit/MismatchReportingTestListener.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/junit/NoOpTestListener.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/junit/StubbingArgMismatches.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/junit/StubbingHint.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/junit/UniversalTestListener.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/junit/UnnecessaryStubbingsReporter.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/junit/UnusedStubbings.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/junit/UnusedStubbingsFinder.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/junit/VerificationCollectorImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/listeners/StubbingLookupNotifier.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/listeners/VerificationStartedNotifier.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/And.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/Any.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/ArrayEquals.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/CapturingMatcher.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/Contains.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/EndsWith.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/Equality.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/Equals.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/EqualsWithDelta.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/Find.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/InstanceOf.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/Matches.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/Not.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/NotNull.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/Null.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/Or.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/Same.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/StartsWith.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/apachecommons/EqualsBuilder.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/apachecommons/ReflectionEquals.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/text/MatcherToString.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/text/MatchersPrinter.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/matchers/text/ValuePrinter.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/progress/ArgumentMatcherStorageImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/progress/MockingProgressImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/progress/SequenceNumber.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/reporting/Pluralizer.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/reporting/PrintSettings.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/reporting/SmartPrinter.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/runners/DefaultInternalRunner.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/runners/RunnerFactory.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/runners/StrictRunner.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/session/DefaultMockitoSessionBuilder.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/ConsecutiveStubbing.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/DoAnswerStyleStubbing.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/InvocationContainerImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/StrictnessSelector.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/StubbedInvocationMatcher.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/StubberImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/StubbingComparator.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/UnusedStubbingReporting.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/answers/AbstractThrowsException.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswerFunctionalInterfaces.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/answers/AnswersWithDelay.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/answers/CallsRealMethods.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/answers/ClonesArguments.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/answers/Returns.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsArgumentAt.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/answers/ReturnsElementsOf.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ForwardsInvocations.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/GloballyConfiguredAnswer.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/RetrieveGenericsForDefaultAnswers.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsDeepStubs.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsEmptyValues.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsMoreEmptyValues.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/ReturnsSmartNulls.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/stubbing/defaultanswers/TriesToReturnSelf.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/Checks.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/ConsoleMockitoLogger.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/MockNameImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/Primitives.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/collections/HashCodeAndEqualsMockWrapper.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/collections/HashCodeAndEqualsSafeSet.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/collections/Iterables.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/collections/ListUtil.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/concurrent/DetachedThreadLocal.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentMap.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/concurrent/WeakConcurrentSet.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/io/IOUtil.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/reflection/BeanPropertySetter.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/reflection/FieldInitializer.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/reflection/Fields.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/reflection/GenericMetadataSupport.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/reflection/GenericTypeExtractor.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/reflection/InstanceField.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/reflection/InstrumentationMemberAccessor.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/reflection/ReflectionMemberAccessor.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/util/reflection/SuperTypesLastSorter.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/AtMost.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/DefaultRegisteredInvocations.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/Description.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/InOrderContextImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/InOrderWrapper.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/MockAwareVerificationMode.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/NoInteractions.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/NoMoreInteractions.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/Only.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/SingleRegisteredInvocation.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/VerificationEventImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/VerificationModeFactory.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/VerificationOverTimeImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/VerificationWrapper.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/api/VerificationDataInOrderImpl.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/argumentmatching/ArgumentMatchingTool.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/internal/verification/checkers/AtLeastXNumberOfInvocationsChecker.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/invocation/DescribedInvocation.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/invocation/Invocation.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/invocation/Location.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/junit/MockitoJUnit.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/junit/MockitoJUnitRunner.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/mock/MockName.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/runners/ConsoleSpammingMockitoJUnitRunner.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/runners/MockitoJUnitRunner.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/runners/VerboseMockitoJUnitRunner.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2277 ;  src/main/java/org/mockito/verification/Timeout.java ; Apply automated ErrorProne fixes ; This is the result of running ErrorProne on the codebase. Most notably  it adds missing override annotations  adds private constructors for classes that should not be subclassed  removes redundant generic type specified and fixes handling of casts/instance checks.
2279 ;  src/test/java/org/mockitoutil/SimpleClassGenerator.java ; Remove ASM dependency ; Mockito depends on byte-buddy to make most of its bytecode fiddling but ASM is still needed for the tests. We can remove this dependency by relying on the already shaded version included on ASM  that we we won t get unaligned between both dependencies and we will remove the need for the explicit ASM library.  R: @raphw  <!-- Hey   Thanks for the contribution  this is awesome. As you may have read  project members have somehow an opinionated view on what and how should be Mockito  e.g. we don t want mockito to be a feature bloat. There may be a thorough review  with feedback -> code change loop. --> <!-- Which branch :  - On mockito 3.x  make your pull request target  release/3.x  - On mockito 2.x  make your pull request target  release/2.x  (2.x is in maintenance mode) --> <!-- If you have a suggestion for this template you can fix it in the .github/PULL_REQUEST_TEMPLATE.md file --> ## Checklist   - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [x] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [ ] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [x] Avoid other runtime dependencies  - [ ] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [x] The pull request follows coding style  - [ ] Mention  Fixes #<issue number>  in the description _if relevant_  - [ ] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
2280 ; src/main/java/org/mockito/internal/exceptions/Reporter.java ; Support mocking of function with Kotlin inline classes ; Despite functions with inline class parameters being already supported  there were not tests for it. Thus  add them.  The other part is functions  returning inline classes. There can be several kinds of inline classes - with primitive underlying type (nullable or not-null) and reference types (nullable or not-null). Also  a function can return either nullable of not-null inline class. If a function returns nullable inline class  we do not do anything special - the function s signature contains inline class. However  if the function returns not-null inline class  its signature contains underlying type  thus  we need to unbox the inline class (i.e. get underlying type s value) to mock the return value.  For example  if we have the following inline class    inline class IC(val i: Int)  and we want to mock return value of a function  returning the inline class    fun returnsIC(): IC  like     when (mock.returnsIC()).thenReturn(IC(1))  then if we do not unbox the argument of  thenReturn  function  we get error about incompatible types.  The only issue  however  is that we cannot check  whether the function indeed returns  IC   unless we use kotlin.reflect. So  the following code will work.    fun returnsInt(): Int     when (mock.returnsInt()).thenReturn(IC(1))  Fixes issue #1930  <!-- Hey   Thanks for the contribution  this is awesome. As you may have read  project members have somehow an opinionated view on what and how should be Mockito  e.g. we don t want mockito to be a feature bloat. There may be a thorough review  with feedback -> code change loop. --> <!-- Which branch :  - On mockito 3.x  make your pull request target  release/3.x  - On mockito 2.x  make your pull request target  release/2.x  (2.x is in maintenance mode) --> <!-- If you have a suggestion for this template you can fix it in the .github/PULL_REQUEST_TEMPLATE.md file --> ## Checklist   - [X] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [X] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [X] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [X] Avoid other runtime dependencies  - [X] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [X] The pull request follows coding style  - [X] Mention  Fixes #<issue number>  in the description _if relevant_  - [X] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
2280 ;  src/main/java/org/mockito/internal/util/KotlinInlineClassUtil.java ; Support mocking of function with Kotlin inline classes ; Despite functions with inline class parameters being already supported  there were not tests for it. Thus  add them.  The other part is functions  returning inline classes. There can be several kinds of inline classes - with primitive underlying type (nullable or not-null) and reference types (nullable or not-null). Also  a function can return either nullable of not-null inline class. If a function returns nullable inline class  we do not do anything special - the function s signature contains inline class. However  if the function returns not-null inline class  its signature contains underlying type  thus  we need to unbox the inline class (i.e. get underlying type s value) to mock the return value.  For example  if we have the following inline class    inline class IC(val i: Int)  and we want to mock return value of a function  returning the inline class    fun returnsIC(): IC  like     when (mock.returnsIC()).thenReturn(IC(1))  then if we do not unbox the argument of  thenReturn  function  we get error about incompatible types.  The only issue  however  is that we cannot check  whether the function indeed returns  IC   unless we use kotlin.reflect. So  the following code will work.    fun returnsInt(): Int     when (mock.returnsInt()).thenReturn(IC(1))  Fixes issue #1930  <!-- Hey   Thanks for the contribution  this is awesome. As you may have read  project members have somehow an opinionated view on what and how should be Mockito  e.g. we don t want mockito to be a feature bloat. There may be a thorough review  with feedback -> code change loop. --> <!-- Which branch :  - On mockito 3.x  make your pull request target  release/3.x  - On mockito 2.x  make your pull request target  release/2.x  (2.x is in maintenance mode) --> <!-- If you have a suggestion for this template you can fix it in the .github/PULL_REQUEST_TEMPLATE.md file --> ## Checklist   - [X] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)  - [X] PR should be motivated  i.e. what does it fix  why  and if relevant how  - [X] If possible / relevant include an example in the description  that could help all readers        including project members to get a better picture of the change  - [X] Avoid other runtime dependencies  - [X] Meaningful commit history   intention is important please rebase your commit history so that each        commit is meaningful and help the people that will explore a change in 2 years  - [X] The pull request follows coding style  - [X] Mention  Fixes #<issue number>  in the description _if relevant_  - [X] At least one commit should mention  Fixes #<issue number>  _if relevant_ 
2283 ; src/main/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMaker.java ; Improve error messages in case of missing dependency on Byte Buddy and avoid hard dependency on Byte Buddy in member accessor. ; This improves error messages in case the dependency is not set up correctly. This should rarely happen but especially with the module system gaining traction  this might trigger a few bugs that we can better explain this way.
2283 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMaker.java ; Improve error messages in case of missing dependency on Byte Buddy and avoid hard dependency on Byte Buddy in member accessor. ; This improves error messages in case the dependency is not set up correctly. This should rarely happen but especially with the module system gaining traction  this might trigger a few bugs that we can better explain this way.
2283 ;  src/main/java/org/mockito/internal/creation/bytebuddy/InlineDelegateByteBuddyMockMaker.java ; Improve error messages in case of missing dependency on Byte Buddy and avoid hard dependency on Byte Buddy in member accessor. ; This improves error messages in case the dependency is not set up correctly. This should rarely happen but especially with the module system gaining traction  this might trigger a few bugs that we can better explain this way.
2283 ;  src/main/java/org/mockito/internal/exceptions/Reporter.java ; Improve error messages in case of missing dependency on Byte Buddy and avoid hard dependency on Byte Buddy in member accessor. ; This improves error messages in case the dependency is not set up correctly. This should rarely happen but especially with the module system gaining traction  this might trigger a few bugs that we can better explain this way.
2283 ;  src/main/java/org/mockito/internal/util/reflection/ModuleMemberAccessor.java ; Improve error messages in case of missing dependency on Byte Buddy and avoid hard dependency on Byte Buddy in member accessor. ; This improves error messages in case the dependency is not set up correctly. This should rarely happen but especially with the module system gaining traction  this might trigger a few bugs that we can better explain this way.
2283 ;  src/test/java/org/mockito/internal/creation/bytebuddy/ByteBuddyMockMakerTest.java ; Improve error messages in case of missing dependency on Byte Buddy and avoid hard dependency on Byte Buddy in member accessor. ; This improves error messages in case the dependency is not set up correctly. This should rarely happen but especially with the module system gaining traction  this might trigger a few bugs that we can better explain this way.
2283 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineByteBuddyMockMakerTest.java ; Improve error messages in case of missing dependency on Byte Buddy and avoid hard dependency on Byte Buddy in member accessor. ; This improves error messages in case the dependency is not set up correctly. This should rarely happen but especially with the module system gaining traction  this might trigger a few bugs that we can better explain this way.
2283 ;  src/test/java/org/mockito/internal/creation/bytebuddy/InlineDelegateByteBuddyMockMakerTest.java ; Improve error messages in case of missing dependency on Byte Buddy and avoid hard dependency on Byte Buddy in member accessor. ; This improves error messages in case the dependency is not set up correctly. This should rarely happen but especially with the module system gaining traction  this might trigger a few bugs that we can better explain this way.
2283 ;  src/test/java/org/mockitointegration/NoJUnitDependenciesTest.java ; Improve error messages in case of missing dependency on Byte Buddy and avoid hard dependency on Byte Buddy in member accessor. ; This improves error messages in case the dependency is not set up correctly. This should rarely happen but especially with the module system gaining traction  this might trigger a few bugs that we can better explain this way.
2292 ; src/main/java/org/mockito/exceptions/verification/ArgumentsAreDifferent.java ; Fix stackoverflow in ArgumentsAreDifferent reporting ; When using Mockito without opentest4j  reporting an ArgumentsAreDifferent exception would throw a StackOverflowError when attempting to obtain the message from the exception.  The root problem was that super.toString() would call its own getMessage(). Instead  we should obtain the message from the super  to avoid the circular call.
2298 ; src/test/java/org/mockitousage/bugs/InheritedGenericsPolimorphicCallTest.java ; Bump versions.errorprone from 2.6.0 to 2.7.1 ; Bumps  versions.errorprone  from 2.6.0 to 2.7.1. Updates  error_prone_core  from 2.6.0 to 2.7.1 <details> <summary>Release notes</summary> <p><em>Sourced from <a href= https://github.com/google/error-prone/releases >error_prone_core s releases</a>.</em></p> <blockquote> <h2>Error Prone 2.7.1</h2> <p>Everything in <a href= https://github.com/google/error-prone/releases/tag/v2.7.0 >Error Prone 2.7.0</a>  plus an <a href= https://github.com/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab >additional fix for JDK 17</a>.</p> <h2>Error Prone 2.7.0</h2> <p>Changes</p> <ul> <li>Initial support for running on JDK 17 EA builds. Supports for Java 17 languages features is incomplete  <a href= https://github.com/google/error-prone/issues >bug reports</a> for issues with Java 17 are welcome.</li> <li><a href= https://github.com/InlineMe ><code>@​InlineMe</code></a>  is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href= http://errorprone.info/docs/inlineme >http://errorprone.info/docs/inlineme</a></li> </ul> <p>New checks:</p> <ul> <li><a href= http://errorprone.info/bugpattern/EqualsNull >EqualsNull</a></li> <li><a href= http://errorprone.info/bugpattern/MissingBraces >MissingBraces</a></li> <li><a href= http://errorprone.info/bugpattern/NullablePrimitiveArray >NullablePrimitiveArray</a></li> <li><a href= http://errorprone.info/bugpattern/OptionalMapUnusedValue >OptionalMapUnusedValue</a></li> <li><a href= http://errorprone.info/bugpattern/TestParametersNotInitialized >TestParametersNotInitialized</a></li> </ul> <p>Closed issues: <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2257 >#2257</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2260 >#2260</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2282 >#2282</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2301 >#2301</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2322 >#2322</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2323 >#2323</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2324 >#2324</a></p> </blockquote> </details> <details> <summary>Commits</summary> <ul> <li><a href= https://github.com/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3 ><code>09262b8</code></a> Release Error Prone 2.7.1</li> <li><a href= https://github.com/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab ><code>ff07935</code></a> Improve JDK 17 support</li> <li><a href= https://github.com/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c ><code>65a75c9</code></a> Enable <code>ReturnValueIgnored</code>-checking of <code>Collection</code>  <code>Iterable</code>  and  Iterat...</li> <li><a href= https://github.com/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a ><code>0c6a76d</code></a> Fix a JDK 17 incompatibility</li> <li><a href= https://github.com/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579 ><code>1846d94</code></a> Add tests for method invocation bug with the <code>Inliner</code>.</li> <li><a href= https://github.com/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925 ><code>8c6f73c</code></a> Fix a JDK 16-only test</li> <li><a href= https://github.com/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433 ><code>62d1bf7</code></a> Internal refactoring.</li> <li><a href= https://github.com/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9 ><code>5913d86</code></a> Update Error Prone CI to use JDK 16 as latest  and add 17-ea</li> <li><a href= https://github.com/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f ><code>f6761ee</code></a> Fix a JDK 16 incompatibility</li> <li><a href= https://github.com/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc ><code>51b5c4d</code></a> Fix some crashes involving records</li> <li>Additional commits viewable in <a href= https://github.com/google/error-prone/compare/v2.6.0...v2.7.1 >compare view</a></li> </ul> </details> <br />  Updates  error_prone_test_helpers  from 2.6.0 to 2.7.1 <details> <summary>Release notes</summary> <p><em>Sourced from <a href= https://github.com/google/error-prone/releases >error_prone_test_helpers s releases</a>.</em></p> <blockquote> <h2>Error Prone 2.7.1</h2> <p>Everything in <a href= https://github.com/google/error-prone/releases/tag/v2.7.0 >Error Prone 2.7.0</a>  plus an <a href= https://github.com/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab >additional fix for JDK 17</a>.</p> <h2>Error Prone 2.7.0</h2> <p>Changes</p> <ul> <li>Initial support for running on JDK 17 EA builds. Supports for Java 17 languages features is incomplete  <a href= https://github.com/google/error-prone/issues >bug reports</a> for issues with Java 17 are welcome.</li> <li><a href= https://github.com/InlineMe ><code>@​InlineMe</code></a>  is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href= http://errorprone.info/docs/inlineme >http://errorprone.info/docs/inlineme</a></li> </ul> <p>New checks:</p> <ul> <li><a href= http://errorprone.info/bugpattern/EqualsNull >EqualsNull</a></li> <li><a href= http://errorprone.info/bugpattern/MissingBraces >MissingBraces</a></li> <li><a href= http://errorprone.info/bugpattern/NullablePrimitiveArray >NullablePrimitiveArray</a></li> <li><a href= http://errorprone.info/bugpattern/OptionalMapUnusedValue >OptionalMapUnusedValue</a></li> <li><a href= http://errorprone.info/bugpattern/TestParametersNotInitialized >TestParametersNotInitialized</a></li> </ul> <p>Closed issues: <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2257 >#2257</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2260 >#2260</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2282 >#2282</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2301 >#2301</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2322 >#2322</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2323 >#2323</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2324 >#2324</a></p> </blockquote> </details> <details> <summary>Commits</summary> <ul> <li><a href= https://github.com/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3 ><code>09262b8</code></a> Release Error Prone 2.7.1</li> <li><a href= https://github.com/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab ><code>ff07935</code></a> Improve JDK 17 support</li> <li><a href= https://github.com/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c ><code>65a75c9</code></a> Enable <code>ReturnValueIgnored</code>-checking of <code>Collection</code>  <code>Iterable</code>  and  Iterat...</li> <li><a href= https://github.com/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a ><code>0c6a76d</code></a> Fix a JDK 17 incompatibility</li> <li><a href= https://github.com/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579 ><code>1846d94</code></a> Add tests for method invocation bug with the <code>Inliner</code>.</li> <li><a href= https://github.com/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925 ><code>8c6f73c</code></a> Fix a JDK 16-only test</li> <li><a href= https://github.com/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433 ><code>62d1bf7</code></a> Internal refactoring.</li> <li><a href= https://github.com/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9 ><code>5913d86</code></a> Update Error Prone CI to use JDK 16 as latest  and add 17-ea</li> <li><a href= https://github.com/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f ><code>f6761ee</code></a> Fix a JDK 16 incompatibility</li> <li><a href= https://github.com/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc ><code>51b5c4d</code></a> Fix some crashes involving records</li> <li>Additional commits viewable in <a href= https://github.com/google/error-prone/compare/v2.6.0...v2.7.1 >compare view</a></li> </ul> </details> <br />   Dependabot will resolve any conflicts with this PR as long as you don t alter it yourself. You can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) Dependabot will merge this PR once CI passes on it  as requested by @TimvdLippe.  [//]: # (dependabot-automerge-end)  ---  <details> <summary>Dependabot commands and options</summary> <br />  You can trigger Dependabot actions by commenting on this PR: -  @dependabot rebase  will rebase this PR -  @dependabot recreate  will recreate this PR  overwriting any edits that have been made to it -  @dependabot merge  will merge this PR after your CI passes on it -  @dependabot squash and merge  will squash and merge this PR after your CI passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this PR if it is closed -  @dependabot close  will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) -  @dependabot ignore this minor version  will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) -  @dependabot ignore this dependency  will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)   </details>
2298 ;  src/test/java/org/mockitousage/stubbing/StubbingWithCustomAnswerTest.java ; Bump versions.errorprone from 2.6.0 to 2.7.1 ; Bumps  versions.errorprone  from 2.6.0 to 2.7.1. Updates  error_prone_core  from 2.6.0 to 2.7.1 <details> <summary>Release notes</summary> <p><em>Sourced from <a href= https://github.com/google/error-prone/releases >error_prone_core s releases</a>.</em></p> <blockquote> <h2>Error Prone 2.7.1</h2> <p>Everything in <a href= https://github.com/google/error-prone/releases/tag/v2.7.0 >Error Prone 2.7.0</a>  plus an <a href= https://github.com/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab >additional fix for JDK 17</a>.</p> <h2>Error Prone 2.7.0</h2> <p>Changes</p> <ul> <li>Initial support for running on JDK 17 EA builds. Supports for Java 17 languages features is incomplete  <a href= https://github.com/google/error-prone/issues >bug reports</a> for issues with Java 17 are welcome.</li> <li><a href= https://github.com/InlineMe ><code>@​InlineMe</code></a>  is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href= http://errorprone.info/docs/inlineme >http://errorprone.info/docs/inlineme</a></li> </ul> <p>New checks:</p> <ul> <li><a href= http://errorprone.info/bugpattern/EqualsNull >EqualsNull</a></li> <li><a href= http://errorprone.info/bugpattern/MissingBraces >MissingBraces</a></li> <li><a href= http://errorprone.info/bugpattern/NullablePrimitiveArray >NullablePrimitiveArray</a></li> <li><a href= http://errorprone.info/bugpattern/OptionalMapUnusedValue >OptionalMapUnusedValue</a></li> <li><a href= http://errorprone.info/bugpattern/TestParametersNotInitialized >TestParametersNotInitialized</a></li> </ul> <p>Closed issues: <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2257 >#2257</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2260 >#2260</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2282 >#2282</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2301 >#2301</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2322 >#2322</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2323 >#2323</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2324 >#2324</a></p> </blockquote> </details> <details> <summary>Commits</summary> <ul> <li><a href= https://github.com/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3 ><code>09262b8</code></a> Release Error Prone 2.7.1</li> <li><a href= https://github.com/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab ><code>ff07935</code></a> Improve JDK 17 support</li> <li><a href= https://github.com/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c ><code>65a75c9</code></a> Enable <code>ReturnValueIgnored</code>-checking of <code>Collection</code>  <code>Iterable</code>  and  Iterat...</li> <li><a href= https://github.com/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a ><code>0c6a76d</code></a> Fix a JDK 17 incompatibility</li> <li><a href= https://github.com/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579 ><code>1846d94</code></a> Add tests for method invocation bug with the <code>Inliner</code>.</li> <li><a href= https://github.com/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925 ><code>8c6f73c</code></a> Fix a JDK 16-only test</li> <li><a href= https://github.com/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433 ><code>62d1bf7</code></a> Internal refactoring.</li> <li><a href= https://github.com/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9 ><code>5913d86</code></a> Update Error Prone CI to use JDK 16 as latest  and add 17-ea</li> <li><a href= https://github.com/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f ><code>f6761ee</code></a> Fix a JDK 16 incompatibility</li> <li><a href= https://github.com/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc ><code>51b5c4d</code></a> Fix some crashes involving records</li> <li>Additional commits viewable in <a href= https://github.com/google/error-prone/compare/v2.6.0...v2.7.1 >compare view</a></li> </ul> </details> <br />  Updates  error_prone_test_helpers  from 2.6.0 to 2.7.1 <details> <summary>Release notes</summary> <p><em>Sourced from <a href= https://github.com/google/error-prone/releases >error_prone_test_helpers s releases</a>.</em></p> <blockquote> <h2>Error Prone 2.7.1</h2> <p>Everything in <a href= https://github.com/google/error-prone/releases/tag/v2.7.0 >Error Prone 2.7.0</a>  plus an <a href= https://github.com/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab >additional fix for JDK 17</a>.</p> <h2>Error Prone 2.7.0</h2> <p>Changes</p> <ul> <li>Initial support for running on JDK 17 EA builds. Supports for Java 17 languages features is incomplete  <a href= https://github.com/google/error-prone/issues >bug reports</a> for issues with Java 17 are welcome.</li> <li><a href= https://github.com/InlineMe ><code>@​InlineMe</code></a>  is a deprecation mechanism that allows automated tools to cleanup existing callers: <a href= http://errorprone.info/docs/inlineme >http://errorprone.info/docs/inlineme</a></li> </ul> <p>New checks:</p> <ul> <li><a href= http://errorprone.info/bugpattern/EqualsNull >EqualsNull</a></li> <li><a href= http://errorprone.info/bugpattern/MissingBraces >MissingBraces</a></li> <li><a href= http://errorprone.info/bugpattern/NullablePrimitiveArray >NullablePrimitiveArray</a></li> <li><a href= http://errorprone.info/bugpattern/OptionalMapUnusedValue >OptionalMapUnusedValue</a></li> <li><a href= http://errorprone.info/bugpattern/TestParametersNotInitialized >TestParametersNotInitialized</a></li> </ul> <p>Closed issues: <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2257 >#2257</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2260 >#2260</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2282 >#2282</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2301 >#2301</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2322 >#2322</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2323 >#2323</a>  <a href= https://github-redirect.dependabot.com/google/error-prone/issues/2324 >#2324</a></p> </blockquote> </details> <details> <summary>Commits</summary> <ul> <li><a href= https://github.com/google/error-prone/commit/09262b80cbc736ab7e27635de5be811a39371ff3 ><code>09262b8</code></a> Release Error Prone 2.7.1</li> <li><a href= https://github.com/google/error-prone/commit/ff07935205757a2eb8b6ef52af1751948752b6ab ><code>ff07935</code></a> Improve JDK 17 support</li> <li><a href= https://github.com/google/error-prone/commit/65a75c90dbd602719cc3b204d7e0421f0479e93c ><code>65a75c9</code></a> Enable <code>ReturnValueIgnored</code>-checking of <code>Collection</code>  <code>Iterable</code>  and  Iterat...</li> <li><a href= https://github.com/google/error-prone/commit/0c6a76d4265e7806aec61e5d4391f88533a9058a ><code>0c6a76d</code></a> Fix a JDK 17 incompatibility</li> <li><a href= https://github.com/google/error-prone/commit/1846d94843a90fec44452b2dae4c889783d4d579 ><code>1846d94</code></a> Add tests for method invocation bug with the <code>Inliner</code>.</li> <li><a href= https://github.com/google/error-prone/commit/8c6f73c125509b6c44aab82278630a03a30fb925 ><code>8c6f73c</code></a> Fix a JDK 16-only test</li> <li><a href= https://github.com/google/error-prone/commit/62d1bf7aeb02fa75c4e2b2dfbb7f04817638f433 ><code>62d1bf7</code></a> Internal refactoring.</li> <li><a href= https://github.com/google/error-prone/commit/5913d86975ed9a35fc673efb07df68efb38351b9 ><code>5913d86</code></a> Update Error Prone CI to use JDK 16 as latest  and add 17-ea</li> <li><a href= https://github.com/google/error-prone/commit/f6761ee812b903ce61a3dd7f48327ae2da05d98f ><code>f6761ee</code></a> Fix a JDK 16 incompatibility</li> <li><a href= https://github.com/google/error-prone/commit/51b5c4d9f2e5917f6e2a877aeb77b5fe8d94d7bc ><code>51b5c4d</code></a> Fix some crashes involving records</li> <li>Additional commits viewable in <a href= https://github.com/google/error-prone/compare/v2.6.0...v2.7.1 >compare view</a></li> </ul> </details> <br />   Dependabot will resolve any conflicts with this PR as long as you don t alter it yourself. You can also trigger a rebase manually by commenting  @dependabot rebase .  [//]: # (dependabot-automerge-start) Dependabot will merge this PR once CI passes on it  as requested by @TimvdLippe.  [//]: # (dependabot-automerge-end)  ---  <details> <summary>Dependabot commands and options</summary> <br />  You can trigger Dependabot actions by commenting on this PR: -  @dependabot rebase  will rebase this PR -  @dependabot recreate  will recreate this PR  overwriting any edits that have been made to it -  @dependabot merge  will merge this PR after your CI passes on it -  @dependabot squash and merge  will squash and merge this PR after your CI passes on it -  @dependabot cancel merge  will cancel a previously requested merge and block automerging -  @dependabot reopen  will reopen this PR if it is closed -  @dependabot close  will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually -  @dependabot ignore this major version  will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself) -  @dependabot ignore this minor version  will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself) -  @dependabot ignore this dependency  will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)   </details>
2306 ; src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; Use the parent classloader if the context classloader is a child of it. ; This should only affect cases that previously would have thrown an exception. Fixes #2303
2312 ; src/test/java/org/mockitousage/bugs/creation/PackagePrivateWithContextClassLoaderTest.java ; Undo parent for MultipleParentsClassLoader ; 66998ea7f81c6adf49983cea081586e19760b7a0 inadvertently undid a change from 9bc9be6d0fb1809346dcd02b22ced477816e0fc1  which breaks behavior under some classloaders that special-case mockito classes. Use of an explicit parent with  MultipleParentsClassLoader  appears to be discouraged in the documentation also.  Followup for #2303
2318 ; src/main/java/org/mockito/internal/creation/bytebuddy/SubclassBytecodeGenerator.java ; Check package-privacy of method params ; This patch handles methods where an interface uses a package-private type as a param or return value - without it  the generated mock class will produce AbstractMethodError  since its methods do not actually override the methods of the interfaces.  Followup on #2303 
