1 ; src/main/java/com/facebook/presto/CsvFileScanner.java ; Add simple HashAggregation ; nan
1 ;  src/main/java/com/facebook/presto/PairsIterator.java ; Add simple HashAggregation ; nan
1 ;  src/test/java/com/facebook/presto/CsvFileScannerTest.java ; Add simple HashAggregation ; nan
2 ; src/main/java/com/facebook/presto/AggregationFunction.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/BasicSliceOutput.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/BlockBuilder.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/CsvFileScanner.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/DataScan1.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/DataScan2.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/DynamicSliceOutput.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/EmptyValueBlock.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/GroupBy.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/HashAggregation.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/Merge.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/Pair.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/PairsIterator.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/PipelinedAggregation.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/RunLengthEncodedBlock.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/SizeOf.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/Slice.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/SliceInput.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/SliceOutput.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/Slices.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/SumAggregation.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/Tuple.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/TupleInfo.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/UncompressedValueBlock.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/ValueBlock.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/main/java/com/facebook/presto/VariableLengthQuantity.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/test/java/com/facebook/presto/CsvFileScannerTest.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/test/java/com/facebook/presto/TestCsvFileScanner.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/test/java/com/facebook/presto/TestExample.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
2 ;  src/test/java/com/facebook/presto/TestSumAggregation.java ; Add byte[] backed tuple and block implementations ; The code only supportes fixed with columns   and has some hacks to get width information into the operators  but it does generally show the direction.
4 ; src/main/java/com/facebook/presto/BlockBuilder.java ; add support for variable length fields ; nan
4 ;  src/main/java/com/facebook/presto/TupleInfo.java ; add support for variable length fields ; nan
4 ;  src/test/java/com/facebook/presto/TestCsvFileScanner.java ; add support for variable length fields ; nan
4 ;  src/test/java/com/facebook/presto/TestSumAggregation.java ; add support for variable length fields ; nan
4 ;  src/test/java/com/facebook/presto/TestTupleInfo.java ; add support for variable length fields ; nan
5 ; src/main/java/com/facebook/presto/BlockBuilder.java ; add tuple builder ; nan
5 ;  src/main/java/com/facebook/presto/TupleInfo.java ; add tuple builder ; nan
5 ;  src/test/java/com/facebook/presto/TestCsvFileScanner.java ; add tuple builder ; nan
5 ;  src/test/java/com/facebook/presto/TestSumAggregation.java ; add tuple builder ; nan
5 ;  src/test/java/com/facebook/presto/TestTupleInfo.java ; add tuple builder ; nan
6 ; src/main/java/com/facebook/presto/ByteArraySlice.java ; Extract Slice interface ; nan
6 ;  src/main/java/com/facebook/presto/DynamicSliceOutput.java ; Extract Slice interface ; nan
6 ;  src/main/java/com/facebook/presto/Slice.java ; Extract Slice interface ; nan
6 ;  src/main/java/com/facebook/presto/SliceInput.java ; Extract Slice interface ; nan
6 ;  src/main/java/com/facebook/presto/Slices.java ; Extract Slice interface ; nan
7 ; src/main/java/com/facebook/presto/TupleInfo.java ; remove redundant field ; nan
8 ; src/test/java/com/facebook/presto/TestAggregations.java ; minor fixes ; nan
9 ; src/main/java/com/facebook/presto/EmptyPositionBlock.java ; Add MaskedValueBlock ; Block filters now simply returns a masked value block Add filter to position block
9 ;  src/main/java/com/facebook/presto/EmptyValueBlock.java ; Add MaskedValueBlock ; Block filters now simply returns a masked value block Add filter to position block
9 ;  src/main/java/com/facebook/presto/MaskedValueBlock.java ; Add MaskedValueBlock ; Block filters now simply returns a masked value block Add filter to position block
9 ;  src/main/java/com/facebook/presto/PositionBlock.java ; Add MaskedValueBlock ; Block filters now simply returns a masked value block Add filter to position block
9 ;  src/main/java/com/facebook/presto/RangePositionBlock.java ; Add MaskedValueBlock ; Block filters now simply returns a masked value block Add filter to position block
9 ;  src/main/java/com/facebook/presto/RunLengthEncodedBlock.java ; Add MaskedValueBlock ; Block filters now simply returns a masked value block Add filter to position block
9 ;  src/main/java/com/facebook/presto/UncompressedPositionBlock.java ; Add MaskedValueBlock ; Block filters now simply returns a masked value block Add filter to position block
9 ;  src/main/java/com/facebook/presto/UncompressedValueBlock.java ; Add MaskedValueBlock ; Block filters now simply returns a masked value block Add filter to position block
9 ;  src/main/java/com/facebook/presto/ValueBlock.java ; Add MaskedValueBlock ; Block filters now simply returns a masked value block Add filter to position block
9 ;  src/test/java/com/facebook/presto/TestMaskedValueBlock.java ; Add MaskedValueBlock ; Block filters now simply returns a masked value block Add filter to position block
10 ; src/main/java/com/facebook/presto/DictionarySerde.java ; First cut of Dictionary encoder (serde) ; Summary: The surrounding API is still a little rough and can probably be abstracted some more  but the core functionality should be completely there.  It also includes a simple packed long serde to help with the encoding.
10 ;  src/main/java/com/facebook/presto/PackedLongSerde.java ; First cut of Dictionary encoder (serde) ; Summary: The surrounding API is still a little rough and can probably be abstracted some more  but the core functionality should be completely there.  It also includes a simple packed long serde to help with the encoding.
10 ;  src/test/java/com/facebook/presto/TestDictionarySerde.java ; First cut of Dictionary encoder (serde) ; Summary: The surrounding API is still a little rough and can probably be abstracted some more  but the core functionality should be completely there.  It also includes a simple packed long serde to help with the encoding.
10 ;  src/test/java/com/facebook/presto/TestPackedLongSerde.java ; First cut of Dictionary encoder (serde) ; Summary: The surrounding API is still a little rough and can probably be abstracted some more  but the core functionality should be completely there.  It also includes a simple packed long serde to help with the encoding.
11 ; src/main/java/com/facebook/presto/Slices.java ; Add ByteBuffer slices ; nan
11 ;  src/test/java/com/facebook/presto/TestSlice.java ; Add ByteBuffer slices ; nan
15 ; src/main/java/com/facebook/presto/Block.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/BlockBuilder.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/DataScan1.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/DataScan2.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/DataScan3.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/EmptyPositionBlock.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/EmptyValueBlock.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/MaskedValueBlock.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/PositionBlock.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/RangePositionBlock.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/RunLengthEncodedBlock.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/UncompressedPositionBlock.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/UncompressedValueBlock.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/ValueBlock.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/aggregations/AverageAggregation.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/main/java/com/facebook/presto/aggregations/SumAggregation.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
15 ;  src/test/java/com/facebook/presto/TestMaskedValueBlock.java ; Get rid of empty blocks ; Filter methods now return Optional<> instead. Operators never produce an empty block.
17 ; src/main/java/com/facebook/presto/DictionarySerde.java ; Fix up some of the earlier review comments ; nan
17 ;  src/main/java/com/facebook/presto/PackedLongSerde.java ; Fix up some of the earlier review comments ; nan
18 ; src/main/java/com/facebook/presto/Main.java ; standalone jar and  \u0001  style column delimiter  ; nan
20 ; src/main/java/com/facebook/presto/ConsolePrinter.java ; Add simple console printer ; nan
20 ;  src/main/java/com/facebook/presto/Tuple.java ; Add simple console printer ; nan
20 ;  src/test/java/com/facebook/presto/TestConsolePrinter.java ; Add simple console printer ; nan
22 ; src/main/java/com/facebook/presto/BasicSliceOutput.java ; Use Guava Objects.toStringHelper ; nan
22 ;  src/main/java/com/facebook/presto/DynamicSliceOutput.java ; Use Guava Objects.toStringHelper ; nan
22 ;  src/main/java/com/facebook/presto/SliceInput.java ; Use Guava Objects.toStringHelper ; nan
22 ;  src/main/java/com/facebook/presto/Tuple.java ; Use Guava Objects.toStringHelper ; nan
22 ;  src/main/java/com/facebook/presto/TupleInfo.java ; Use Guava Objects.toStringHelper ; nan
22 ;  src/main/java/com/facebook/presto/UncompressedValueBlock.java ; Use Guava Objects.toStringHelper ; nan
23 ; src/main/java/com/facebook/presto/BasicSliceOutput.java ; Added OutputStreamSliceOutput ; - Also consolidated writeZero(int length) generic impl into base class - Removed duplicate of readSlice from SliceInput
23 ;  src/main/java/com/facebook/presto/DynamicSliceOutput.java ; Added OutputStreamSliceOutput ; - Also consolidated writeZero(int length) generic impl into base class - Removed duplicate of readSlice from SliceInput
23 ;  src/main/java/com/facebook/presto/OutputStreamSliceOutput.java ; Added OutputStreamSliceOutput ; - Also consolidated writeZero(int length) generic impl into base class - Removed duplicate of readSlice from SliceInput
23 ;  src/main/java/com/facebook/presto/RuntimeIOException.java ; Added OutputStreamSliceOutput ; - Also consolidated writeZero(int length) generic impl into base class - Removed duplicate of readSlice from SliceInput
23 ;  src/main/java/com/facebook/presto/SliceInput.java ; Added OutputStreamSliceOutput ; - Also consolidated writeZero(int length) generic impl into base class - Removed duplicate of readSlice from SliceInput
23 ;  src/main/java/com/facebook/presto/SliceOutput.java ; Added OutputStreamSliceOutput ; - Also consolidated writeZero(int length) generic impl into base class - Removed duplicate of readSlice from SliceInput
23 ;  src/main/java/com/facebook/presto/Slices.java ; Added OutputStreamSliceOutput ; - Also consolidated writeZero(int length) generic impl into base class - Removed duplicate of readSlice from SliceInput
24 ; src/main/java/com/facebook/presto/BlockBuilder.java ; Implement Cursor and BlockStream ; nan
24 ;  src/main/java/com/facebook/presto/BlockStream.java ; Implement Cursor and BlockStream ; nan
24 ;  src/main/java/com/facebook/presto/Cursor.java ; Implement Cursor and BlockStream ; nan
24 ;  src/main/java/com/facebook/presto/TupleInfo.java ; Implement Cursor and BlockStream ; nan
24 ;  src/main/java/com/facebook/presto/UncompressedBlockStream.java ; Implement Cursor and BlockStream ; nan
24 ;  src/main/java/com/facebook/presto/UncompressedCursor.java ; Implement Cursor and BlockStream ; nan
24 ;  src/test/java/com/facebook/presto/Blocks.java ; Implement Cursor and BlockStream ; nan
24 ;  src/test/java/com/facebook/presto/TestCursor.java ; Implement Cursor and BlockStream ; nan
25 ; src/main/java/com/facebook/presto/operators/GroupByBlockStream.java ; More cursor-based stuff ; nan
27 ; src/main/java/com/facebook/presto/UncompressedLongCursor.java ; Add BlockStream aggregation implementations and benchmarks ; nan
27 ;  src/main/java/com/facebook/presto/UncompressedSliceCursor.java ; Add BlockStream aggregation implementations and benchmarks ; nan
27 ;  src/main/java/com/facebook/presto/aggregations/AverageAggregation.java ; Add BlockStream aggregation implementations and benchmarks ; nan
27 ;  src/main/java/com/facebook/presto/aggregations/CountAggregation.java ; Add BlockStream aggregation implementations and benchmarks ; nan
27 ;  src/main/java/com/facebook/presto/aggregations/SumAggregation.java ; Add BlockStream aggregation implementations and benchmarks ; nan
27 ;  src/main/java/com/facebook/presto/operators/HashAggregationBlockStream.java ; Add BlockStream aggregation implementations and benchmarks ; nan
27 ;  src/main/java/com/facebook/presto/operators/PipelinedAggregationBlockStream.java ; Add BlockStream aggregation implementations and benchmarks ; nan
27 ;  src/test/java/com/facebook/presto/BenchmarkGroupBy.java ; Add BlockStream aggregation implementations and benchmarks ; nan
27 ;  src/test/java/com/facebook/presto/BenchmarkHashAggregation.java ; Add BlockStream aggregation implementations and benchmarks ; nan
27 ;  src/test/java/com/facebook/presto/BenchmarkPipelineAggregation.java ; Add BlockStream aggregation implementations and benchmarks ; nan
28 ; src/main/java/com/facebook/presto/operators/ConsolePrinter.java ; Move some classes to new packages ; nan
28 ;  src/main/java/com/facebook/presto/operators/DataScan1.java ; Move some classes to new packages ; nan
28 ;  src/main/java/com/facebook/presto/operators/DataScan2.java ; Move some classes to new packages ; nan
28 ;  src/main/java/com/facebook/presto/operators/DataScan3.java ; Move some classes to new packages ; nan
28 ;  src/main/java/com/facebook/presto/operators/GroupBy.java ; Move some classes to new packages ; nan
28 ;  src/main/java/com/facebook/presto/operators/HashAggregation.java ; Move some classes to new packages ; nan
28 ;  src/main/java/com/facebook/presto/operators/Merge.java ; Move some classes to new packages ; nan
28 ;  src/main/java/com/facebook/presto/operators/PipelinedAggregation.java ; Move some classes to new packages ; nan
28 ;  src/test/java/com/facebook/presto/TestAggregations.java ; Move some classes to new packages ; nan
28 ;  src/test/java/com/facebook/presto/TestConsolePrinter.java ; Move some classes to new packages ; nan
28 ;  src/test/java/com/facebook/presto/TestExample.java ; Move some classes to new packages ; nan
29 ; src/main/java/com/facebook/presto/AggregationUtil.java ; Remove old GroupBy and Aggregation code ; nan
29 ;  src/main/java/com/facebook/presto/UncompressedBlockStream.java ; Remove old GroupBy and Aggregation code ; nan
29 ;  src/main/java/com/facebook/presto/aggregations/AggregationFunction.java ; Remove old GroupBy and Aggregation code ; nan
29 ;  src/main/java/com/facebook/presto/aggregations/AverageAggregation.java ; Remove old GroupBy and Aggregation code ; nan
29 ;  src/main/java/com/facebook/presto/aggregations/CountAggregation.java ; Remove old GroupBy and Aggregation code ; nan
29 ;  src/main/java/com/facebook/presto/aggregations/SumAggregation.java ; Remove old GroupBy and Aggregation code ; nan
29 ;  src/main/java/com/facebook/presto/operators/GroupBy.java ; Remove old GroupBy and Aggregation code ; nan
29 ;  src/main/java/com/facebook/presto/operators/GroupByBlockStream.java ; Remove old GroupBy and Aggregation code ; nan
29 ;  src/main/java/com/facebook/presto/operators/HashAggregation.java ; Remove old GroupBy and Aggregation code ; nan
29 ;  src/main/java/com/facebook/presto/operators/PipelinedAggregation.java ; Remove old GroupBy and Aggregation code ; nan
29 ;  src/main/java/com/facebook/presto/slice/ByteArraySlice.java ; Remove old GroupBy and Aggregation code ; nan
29 ;  src/test/java/com/facebook/presto/Blocks.java ; Remove old GroupBy and Aggregation code ; nan
29 ;  src/test/java/com/facebook/presto/TestAggregations.java ; Remove old GroupBy and Aggregation code ; nan
29 ;  src/test/java/com/facebook/presto/TestCountAggregation.java ; Remove old GroupBy and Aggregation code ; nan
29 ;  src/test/java/com/facebook/presto/TestGroupBy.java ; Remove old GroupBy and Aggregation code ; nan
31 ; src/test/java/com/facebook/presto/TestRunLengthEncodedCursor.java ; Add more tests for RLE and uncompressed cursors ; nan
31 ;  src/test/java/com/facebook/presto/TestUncompressedCursor.java ; Add more tests for RLE and uncompressed cursors ; nan
32 ; src/main/java/com/facebook/presto/UncompressedCursor.java ; Simplify group by and aggregation by adding nextValueEquals ; nan
32 ;  src/main/java/com/facebook/presto/UncompressedLongCursor.java ; Simplify group by and aggregation by adding nextValueEquals ; nan
32 ;  src/main/java/com/facebook/presto/UncompressedSliceCursor.java ; Simplify group by and aggregation by adding nextValueEquals ; nan
32 ;  src/main/java/com/facebook/presto/operators/GroupByBlockStream.java ; Simplify group by and aggregation by adding nextValueEquals ; nan
32 ;  src/test/java/com/facebook/presto/AbstractTestCursor.java ; Simplify group by and aggregation by adding nextValueEquals ; nan
32 ;  src/test/java/com/facebook/presto/AbstractTestUncompressedSliceCursor.java ; Simplify group by and aggregation by adding nextValueEquals ; nan
32 ;  src/test/java/com/facebook/presto/TestUncompressedLongCursor.java ; Simplify group by and aggregation by adding nextValueEquals ; nan
33 ; src/main/java/com/facebook/presto/operators/GroupByBlockStream.java ; Implement advanceToPosition and getCurrentValueEndPosition ; nan
35 ; src/test/java/com/facebook/presto/BenchmarkGroupBy.java ; Fix benchmark timing code ; nan
35 ;  src/test/java/com/facebook/presto/BenchmarkHashAggregation.java ; Fix benchmark timing code ; nan
35 ;  src/test/java/com/facebook/presto/BenchmarkPipelineAggregation.java ; Fix benchmark timing code ; nan
36 ; src/main/java/com/facebook/presto/AbstractColumnProcessor.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/main/java/com/facebook/presto/BlockBuilder.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/main/java/com/facebook/presto/Column.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/main/java/com/facebook/presto/ColumnProcessor.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/main/java/com/facebook/presto/ColumnProcessors.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/main/java/com/facebook/presto/Csv.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/main/java/com/facebook/presto/CsvReader.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/main/java/com/facebook/presto/Main.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/main/java/com/facebook/presto/RowSource.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/main/java/com/facebook/presto/RowSourceBuilder.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/main/java/com/facebook/presto/TupleInfo.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/main/java/com/facebook/presto/UncompressedBlockSerde.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/main/java/com/facebook/presto/UncompressedColumnWriter.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/test/java/com/facebook/presto/CollectingColumnProcessor.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/test/java/com/facebook/presto/TestCsvFileScanner.java ; Rewrite ColumnProcessor and data import ; nan
36 ;  src/test/java/com/facebook/presto/TestUncompressedBlockReader.java ; Rewrite ColumnProcessor and data import ; nan
37 ; src/main/java/com/facebook/presto/operators/DataScan1.java ; Simplify cursors  ; nan
37 ;  src/main/java/com/facebook/presto/operators/DataScan2.java ; Simplify cursors  ; nan
37 ;  src/main/java/com/facebook/presto/operators/FilteredValueCursor.java ; Simplify cursors  ; nan
37 ;  src/test/java/com/facebook/presto/BenchmarkFilter.java ; Simplify cursors  ; nan
38 ; src/main/java/com/facebook/presto/DictionaryEncodedBlock.java ; Cursor redesign ; nan
38 ;  src/main/java/com/facebook/presto/DictionaryEncodedCursor.java ; Cursor redesign ; nan
38 ;  src/main/java/com/facebook/presto/MaskedValueBlock.java ; Cursor redesign ; nan
38 ;  src/main/java/com/facebook/presto/PositionsBlock.java ; Cursor redesign ; nan
38 ;  src/main/java/com/facebook/presto/RunLengthEncodedBlock.java ; Cursor redesign ; nan
38 ;  src/main/java/com/facebook/presto/RunLengthEncodedCursor.java ; Cursor redesign ; nan
38 ;  src/main/java/com/facebook/presto/UncompressedBlockSerde.java ; Cursor redesign ; nan
38 ;  src/main/java/com/facebook/presto/UncompressedSliceCursor.java ; Cursor redesign ; nan
38 ;  src/main/java/com/facebook/presto/operators/DataScan1.java ; Cursor redesign ; nan
38 ;  src/test/java/com/facebook/presto/AbstractTestUncompressedSliceCursor.java ; Cursor redesign ; nan
38 ;  src/test/java/com/facebook/presto/BenchmarkHashAggregation.java ; Cursor redesign ; nan
38 ;  src/test/java/com/facebook/presto/TestMaskedValueBlock.java ; Cursor redesign ; nan
38 ;  src/test/java/com/facebook/presto/TestPositionsBlock.java ; Cursor redesign ; nan
38 ;  src/test/java/com/facebook/presto/TestRunLengthEncodedCursor.java ; Cursor redesign ; nan
38 ;  src/test/java/com/facebook/presto/block/cursor/AbstractTestUncompressedLongBlockCursor.java ; Cursor redesign ; nan
38 ;  src/test/java/com/facebook/presto/block/cursor/AbstractTestUncompressedSliceBlockCursor.java ; Cursor redesign ; nan
39 ;  src/test/java/com/facebook/presto/TestQueries.java ; Add query testing framework ; nan
41 ; src/main/java/com/facebook/presto/TupleInfo.java ; Add double data type ; nan
41 ;  src/main/java/com/facebook/presto/slice/BasicSliceOutput.java ; Add double data type ; nan
41 ;  src/main/java/com/facebook/presto/slice/DynamicSliceOutput.java ; Add double data type ; nan
41 ;  src/main/java/com/facebook/presto/slice/SliceInput.java ; Add double data type ; nan
41 ;  src/main/java/com/facebook/presto/slice/UnsafeSlice.java ; Add double data type ; nan
42 ; src/main/java/com/facebook/presto/operators/AggregationOperator.java ; Implement aggregation operator without group by ; nan
42 ;  src/test/java/com/facebook/presto/BenchmarkAggregation.java ; Implement aggregation operator without group by ; nan
42 ;  src/test/java/com/facebook/presto/TestQueries.java ; Implement aggregation operator without group by ; nan
43 ; src/main/java/com/facebook/presto/operators/Merge.java ; Update Merge operator to BlockStream api ; nan
43 ;  src/test/java/com/facebook/presto/TestExample.java ; Update Merge operator to BlockStream api ; nan
43 ;  src/test/java/com/facebook/presto/operators/TestMerge.java ; Update Merge operator to BlockStream api ; nan
44 ; src/main/java/com/facebook/presto/ForwardingSeekableIterator.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/Main.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/RowSource.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/SeekableIterator.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/aggregation/AggregationFunction.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/aggregation/AverageAggregation.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/aggregation/CountAggregation.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/aggregation/SumAggregation.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/Block.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/BlockBuilder.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/BlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/BlockStream.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/BlockStreamSerde.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/Cursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/ForwardingCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/MaskedValueBlock.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/ValueBlock.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/ValueBlockStream.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedBlock.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedBlockStream.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/dictionary/DictionarySerde.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/position/PositionBlock.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/position/PositionsBlock.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/position/RangePositionBlock.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/position/UncompressedPositionBlock.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/rle/PackedLongSerde.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/rle/RunLengthEncodedBlock.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/rle/RunLengthEncodedCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedBlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedBlockSerde.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedBlockStream.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedColumnWriter.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedDoubleBlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedDoubleCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedLongBlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedLongCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedSliceBlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedSliceCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedTupleInfoSerde.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedValueBlock.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/ingest/AbstractColumnProcessor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/ingest/ColumnProcessor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/ingest/ColumnProcessors.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/ingest/CsvReader.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/ingest/RowSource.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/ingest/RowSourceBuilder.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/ingest/RuntimeIOException.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/operator/AggregationOperator.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/operator/ConsolePrinter.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/operator/DataScan1.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/operator/DataScan2.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/operator/DataScan3.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/operator/FilteredValueCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/operator/GroupByBlockStream.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/operator/HashAggregationBlockStream.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/operator/Merge.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/operator/PipelinedAggregationBlockStream.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/operator/ValueCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/main/java/com/facebook/presto/slice/OutputStreamSliceOutput.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/TestConsolePrinter.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/TestExample.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/TestForwardingSeekableIterator.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/TestQueries.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/aggregation/TestAggregations.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/aggregation/TestCountAggregation.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/benchmark/Benchmark.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/benchmark/BenchmarkAggregation.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/benchmark/BenchmarkFilter.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/benchmark/BenchmarkGroupBy.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/benchmark/BenchmarkHashAggregation.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/benchmark/BenchmarkLong.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/benchmark/BenchmarkPipelineAggregation.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/AbstractTestCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/AbstractTestUncompressedBlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/AbstractTestUncompressedDoubleBlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/AbstractTestUncompressedLongBlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/AbstractTestUncompressedSliceBlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/AbstractTestUncompressedSliceCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/BlockCursorAssertions.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/Blocks.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/CursorAssertions.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/Cursors.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/TestCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/TestMaskedValueBlock.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/cursor/AbstractTestUncompressedDoubleBlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/cursor/AbstractTestUncompressedLongBlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/cursor/AbstractTestUncompressedSliceBlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/dictionary/TestDictionarySerde.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/dictionary/TestPackedLongSerde.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/position/TestPositionsBlock.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/rle/TestRunLengthEncodedCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedBlockCursorDouble.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedBlockCursorLong.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedBlockCursorSlice.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedBlockReader.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedDoubleBlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedDoubleCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedLongBlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedLongCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedSliceBlockCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedSliceCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/ingest/CollectingColumnProcessor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/ingest/TestCsv.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/ingest/TestCsvFileScanner.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/operator/TestDataScan3.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/operator/TestGroupBy.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/operator/TestMerge.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/operator/TestValueCursor.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
44 ;  src/test/java/com/facebook/presto/slice/TestSlice.java ; Reorganize code ; Move all block related code to blocks with sub package for each encoding type Move cvs import code to inject package Move benchmark code to a benchmark package in tests
45 ; src/main/java/com/facebook/presto/block/rle/RunLengthEncodedCursor.java ; Test isFinished and fix bug in RLE cursor ; nan
45 ;  src/test/java/com/facebook/presto/block/AbstractTestUncompressedSliceCursor.java ; Test isFinished and fix bug in RLE cursor ; nan
45 ;  src/test/java/com/facebook/presto/block/rle/TestRunLengthEncodedCursor.java ; Test isFinished and fix bug in RLE cursor ; nan
45 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedDoubleCursor.java ; Test isFinished and fix bug in RLE cursor ; nan
45 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedLongCursor.java ; Test isFinished and fix bug in RLE cursor ; nan
46 ; src/test/java/com/facebook/presto/TestQueries.java ; Add lineitem table for testing ; nan
49 ; src/main/java/com/facebook/presto/operator/HashAggregationBlockStream.java ; Cleanup ; nan
49 ;  src/main/java/com/facebook/presto/operator/PipelinedAggregationBlockStream.java ; Cleanup ; nan
50 ; src/main/java/com/facebook/presto/aggregation/AverageAggregation.java ; Additions to TestQueries and other minor fixes ; nan
50 ;  src/test/java/com/facebook/presto/TestQueries.java ; Additions to TestQueries and other minor fixes ; nan
51 ; src/main/java/com/facebook/presto/Main.java ; Fix double parsing ; nan
51 ;  src/main/java/com/facebook/presto/ingest/CsvReader.java ; Fix double parsing ; nan
53 ; src/main/java/com/facebook/presto/operator/ApplyPredicateOperator.java ; Binary and comparison operators  tests and bug fixes ; Initial take on binary and comparison operators. For now  they can only operate on specific types. We need to figure out how to generalize them later.
53 ;  src/main/java/com/facebook/presto/operator/FilterOperator.java ; Binary and comparison operators  tests and bug fixes ; Initial take on binary and comparison operators. For now  they can only operate on specific types. We need to figure out how to generalize them later.
53 ;  src/test/java/com/facebook/presto/TestExample.java ; Binary and comparison operators  tests and bug fixes ; Initial take on binary and comparison operators. For now  they can only operate on specific types. We need to figure out how to generalize them later.
53 ;  src/test/java/com/facebook/presto/TestQueries.java ; Binary and comparison operators  tests and bug fixes ; Initial take on binary and comparison operators. For now  they can only operate on specific types. We need to figure out how to generalize them later.
53 ;  src/test/java/com/facebook/presto/benchmark/BenchmarkFilter.java ; Binary and comparison operators  tests and bug fixes ; Initial take on binary and comparison operators. For now  they can only operate on specific types. We need to figure out how to generalize them later.
53 ;  src/test/java/com/facebook/presto/operator/TestDataScan3.java ; Binary and comparison operators  tests and bug fixes ; Initial take on binary and comparison operators. For now  they can only operate on specific types. We need to figure out how to generalize them later.
54 ; src/main/java/com/facebook/presto/block/MaskedBlock.java ; Merge Block and BlockStream apis ; nan
54 ;  src/main/java/com/facebook/presto/block/position/UncompressedPositionBlock.java ; Merge Block and BlockStream apis ; nan
54 ;  src/test/java/com/facebook/presto/block/position/TestUncompressedPositionBlock.java ; Merge Block and BlockStream apis ; nan
55 ; src/main/java/com/facebook/presto/block/Cursor.java ; Update Cursor API comments ; nan
56 ; src/main/java/com/facebook/presto/block/Cursor.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/ForwardingCursor.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/MaskedBlock.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedBlock.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedCursor.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/position/PositionsBlock.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/position/RangePositionBlock.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/position/UncompressedPositionBlock.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/rle/RunLengthEncodedBlock.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/rle/RunLengthEncodedCursor.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedBlockCursor.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedCursor.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedDoubleBlockCursor.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedDoubleCursor.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedLongBlockCursor.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedLongCursor.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedSliceBlockCursor.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedSliceCursor.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/operator/FilteredCursor.java ; Add isValid method cursor ; nan
56 ;  src/main/java/com/facebook/presto/operator/GenericCursor.java ; Add isValid method cursor ; nan
56 ;  src/test/java/com/facebook/presto/block/AbstractTestCursor.java ; Add isValid method cursor ; nan
56 ;  src/test/java/com/facebook/presto/block/AbstractTestUncompressedBlockCursor.java ; Add isValid method cursor ; nan
57 ; src/main/java/com/facebook/presto/Ranges.java ; Implement And operator ; nan
57 ;  src/main/java/com/facebook/presto/block/BlockBuilder.java ; Implement And operator ; nan
57 ;  src/main/java/com/facebook/presto/block/Cursors.java ; Implement And operator ; nan
57 ;  src/main/java/com/facebook/presto/block/TupleStreams.java ; Implement And operator ; nan
57 ;  src/main/java/com/facebook/presto/operator/AndOperator.java ; Implement And operator ; nan
57 ;  src/main/java/com/facebook/presto/operator/GenericCursor.java ; Implement And operator ; nan
57 ;  src/test/java/com/facebook/presto/TestQueries.java ; Implement And operator ; nan
57 ;  src/test/java/com/facebook/presto/operator/TestAndOperator.java ; Implement And operator ; nan
58 ; src/main/java/com/facebook/presto/block/uncompressed/UncompressedBlockCursor.java ; Fix build failures ; nan
58 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedDoubleBlockCursor.java ; Fix build failures ; nan
58 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedLongBlockCursor.java ; Fix build failures ; nan
58 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedSliceBlockCursor.java ; Fix build failures ; nan
59 ; src/main/java/com/facebook/presto/operator/OrOperator.java ; Bind Serdes to Main + TupleStreamWriter ; The main goal of this is to bind the Serdes to main to allow conversion of the data files. Along the way  added TupleStreamWriter paradigm which we can extend in the future to make data ingestion more efficient. Right now  each column is extracted one at a time (same as before).
59 ;  src/test/java/com/facebook/presto/operator/TestOrOperator.java ; Bind Serdes to Main + TupleStreamWriter ; The main goal of this is to bind the Serdes to main to allow conversion of the data files. Along the way  added TupleStreamWriter paradigm which we can extend in the future to make data ingestion more efficient. Right now  each column is extracted one at a time (same as before).
60 ; src/main/java/com/facebook/presto/Range.java ; Implement Or operator + other minor fixes ; nan
60 ;  src/main/java/com/facebook/presto/Ranges.java ; Implement Or operator + other minor fixes ; nan
60 ;  src/main/java/com/facebook/presto/block/Cursors.java ; Implement Or operator + other minor fixes ; nan
60 ;  src/main/java/com/facebook/presto/operator/OrOperator.java ; Implement Or operator + other minor fixes ; nan
60 ;  src/test/java/com/facebook/presto/TestQueries.java ; Implement Or operator + other minor fixes ; nan
60 ;  src/test/java/com/facebook/presto/operator/TestOrOperator.java ; Implement Or operator + other minor fixes ; nan
61 ; src/main/java/com/facebook/presto/block/position/PositionsBlock.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/main/java/com/facebook/presto/block/position/RangePositionBlock.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/main/java/com/facebook/presto/block/rle/RunLengthEncodedBlock.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/main/java/com/facebook/presto/block/rle/RunLengthEncodedCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/Tuples.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/AbstractTestContiguousCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/AbstractTestCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/AbstractTestNonContiguousCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/AbstractTestUncompressedBlockCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/AbstractTestUncompressedDoubleBlockCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/AbstractTestUncompressedLongBlockCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/AbstractTestUncompressedSliceBlockCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/AbstractTestUncompressedSliceCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/BlockCursorAssertions.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/CursorAssertions.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/TestGenericCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/TestMaskedBlock.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/position/TestUncompressedPositionBlock.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/rle/TestRunLengthEncodedCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedBlockCursorDouble.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedBlockCursorLong.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedBlockCursorSlice.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedDoubleBlockCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedDoubleCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedLongBlockCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedLongCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedSliceBlockCursor.java ; Cleanup and consolidate cursor test code ; nan
61 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedSliceCursor.java ; Cleanup and consolidate cursor test code ; nan
62 ; src/main/java/com/facebook/presto/Main.java ; Make changes requested in pull #59 ; - Both DictionarySerde and RunLengthEncodedSerdes now work with multi column tuples + tests - Some bug fixes - Add TupleStreamSerdes - Make TupleStreamWriters extend Closeable
62 ;  src/main/java/com/facebook/presto/block/TupleStreamSerde.java ; Make changes requested in pull #59 ; - Both DictionarySerde and RunLengthEncodedSerdes now work with multi column tuples + tests - Some bug fixes - Add TupleStreamSerdes - Make TupleStreamWriters extend Closeable
62 ;  src/main/java/com/facebook/presto/block/TupleStreamSerdes.java ; Make changes requested in pull #59 ; - Both DictionarySerde and RunLengthEncodedSerdes now work with multi column tuples + tests - Some bug fixes - Add TupleStreamSerdes - Make TupleStreamWriters extend Closeable
62 ;  src/main/java/com/facebook/presto/block/TupleStreamWriter.java ; Make changes requested in pull #59 ; - Both DictionarySerde and RunLengthEncodedSerdes now work with multi column tuples + tests - Some bug fixes - Add TupleStreamSerdes - Make TupleStreamWriters extend Closeable
62 ;  src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedBlock.java ; Make changes requested in pull #59 ; - Both DictionarySerde and RunLengthEncodedSerdes now work with multi column tuples + tests - Some bug fixes - Add TupleStreamSerdes - Make TupleStreamWriters extend Closeable
62 ;  src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedCursor.java ; Make changes requested in pull #59 ; - Both DictionarySerde and RunLengthEncodedSerdes now work with multi column tuples + tests - Some bug fixes - Add TupleStreamSerdes - Make TupleStreamWriters extend Closeable
62 ;  src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedTupleStream.java ; Make changes requested in pull #59 ; - Both DictionarySerde and RunLengthEncodedSerdes now work with multi column tuples + tests - Some bug fixes - Add TupleStreamSerdes - Make TupleStreamWriters extend Closeable
62 ;  src/main/java/com/facebook/presto/block/dictionary/DictionarySerde.java ; Make changes requested in pull #59 ; - Both DictionarySerde and RunLengthEncodedSerdes now work with multi column tuples + tests - Some bug fixes - Add TupleStreamSerdes - Make TupleStreamWriters extend Closeable
62 ;  src/main/java/com/facebook/presto/block/rle/RunLengthEncodedSerde.java ; Make changes requested in pull #59 ; - Both DictionarySerde and RunLengthEncodedSerdes now work with multi column tuples + tests - Some bug fixes - Add TupleStreamSerdes - Make TupleStreamWriters extend Closeable
62 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedSerde.java ; Make changes requested in pull #59 ; - Both DictionarySerde and RunLengthEncodedSerdes now work with multi column tuples + tests - Some bug fixes - Add TupleStreamSerdes - Make TupleStreamWriters extend Closeable
62 ;  src/test/java/com/facebook/presto/block/dictionary/TestDictionarySerde.java ; Make changes requested in pull #59 ; - Both DictionarySerde and RunLengthEncodedSerdes now work with multi column tuples + tests - Some bug fixes - Add TupleStreamSerdes - Make TupleStreamWriters extend Closeable
62 ;  src/test/java/com/facebook/presto/block/rle/TestRunLengthEncodedSerde.java ; Make changes requested in pull #59 ; - Both DictionarySerde and RunLengthEncodedSerdes now work with multi column tuples + tests - Some bug fixes - Add TupleStreamSerdes - Make TupleStreamWriters extend Closeable
62 ;  src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedBlockReader.java ; Make changes requested in pull #59 ; - Both DictionarySerde and RunLengthEncodedSerdes now work with multi column tuples + tests - Some bug fixes - Add TupleStreamSerdes - Make TupleStreamWriters extend Closeable
63 ; src/main/java/com/facebook/presto/Main.java ; Add RangeBoundedCursor to support Main data conversions ; - Added RangeBoundedCursor + TupleStreamChunker - Update UncompressedSerde with some position information - This should run now:   pv data/000000_0.gz | gzcat | head -10001 |  target/presto-0.1-SNAPSHOT-standalone.jar convert csv -o data/foo -d  \u0001  -t long_raw -t string_raw -t string_raw -t fmillis_raw -t fmillis_raw -t string_raw -t string_raw
63 ;  src/main/java/com/facebook/presto/block/RangeBoundedCursor.java ; Add RangeBoundedCursor to support Main data conversions ; - Added RangeBoundedCursor + TupleStreamChunker - Update UncompressedSerde with some position information - This should run now:   pv data/000000_0.gz | gzcat | head -10001 |  target/presto-0.1-SNAPSHOT-standalone.jar convert csv -o data/foo -d  \u0001  -t long_raw -t string_raw -t string_raw -t fmillis_raw -t fmillis_raw -t string_raw -t string_raw
63 ;  src/main/java/com/facebook/presto/block/TupleStreamChunker.java ; Add RangeBoundedCursor to support Main data conversions ; - Added RangeBoundedCursor + TupleStreamChunker - Update UncompressedSerde with some position information - This should run now:   pv data/000000_0.gz | gzcat | head -10001 |  target/presto-0.1-SNAPSHOT-standalone.jar convert csv -o data/foo -d  \u0001  -t long_raw -t string_raw -t string_raw -t fmillis_raw -t fmillis_raw -t string_raw -t string_raw
63 ;  src/test/java/com/facebook/presto/block/Blocks.java ; Add RangeBoundedCursor to support Main data conversions ; - Added RangeBoundedCursor + TupleStreamChunker - Update UncompressedSerde with some position information - This should run now:   pv data/000000_0.gz | gzcat | head -10001 |  target/presto-0.1-SNAPSHOT-standalone.jar convert csv -o data/foo -d  \u0001  -t long_raw -t string_raw -t string_raw -t fmillis_raw -t fmillis_raw -t string_raw -t string_raw
63 ;  src/test/java/com/facebook/presto/block/TestRangeBoundedCursor.java ; Add RangeBoundedCursor to support Main data conversions ; - Added RangeBoundedCursor + TupleStreamChunker - Update UncompressedSerde with some position information - This should run now:   pv data/000000_0.gz | gzcat | head -10001 |  target/presto-0.1-SNAPSHOT-standalone.jar convert csv -o data/foo -d  \u0001  -t long_raw -t string_raw -t string_raw -t fmillis_raw -t fmillis_raw -t string_raw -t string_raw
63 ;  src/test/java/com/facebook/presto/block/TestTupleStreamChunker.java ; Add RangeBoundedCursor to support Main data conversions ; - Added RangeBoundedCursor + TupleStreamChunker - Update UncompressedSerde with some position information - This should run now:   pv data/000000_0.gz | gzcat | head -10001 |  target/presto-0.1-SNAPSHOT-standalone.jar convert csv -o data/foo -d  \u0001  -t long_raw -t string_raw -t string_raw -t fmillis_raw -t fmillis_raw -t string_raw -t string_raw
65 ;  src/main/java/com/facebook/presto/Main.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
65 ;  src/main/java/com/facebook/presto/TupleInfo.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
65 ;  src/main/java/com/facebook/presto/block/TupleStreamSerdes.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
65 ;  src/main/java/com/facebook/presto/block/TupleStreamWriter.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
65 ;  src/main/java/com/facebook/presto/block/dictionary/DictionarySerde.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
65 ;  src/main/java/com/facebook/presto/block/rle/RunLengthEncodedSerde.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
65 ;  src/main/java/com/facebook/presto/block/uncompressed/UncompressedSerde.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
65 ;  src/main/java/com/facebook/presto/ingest/BlockDataImporter.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
65 ;  src/main/java/com/facebook/presto/ingest/DelimitedBlockExtractor.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
65 ;  src/test/java/com/facebook/presto/TestQueries.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
65 ;  src/test/java/com/facebook/presto/block/dictionary/TestDictionarySerde.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
65 ;  src/test/java/com/facebook/presto/block/rle/TestRunLengthEncodedSerde.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
65 ;  src/test/java/com/facebook/presto/ingest/TestCsv.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
65 ;  src/test/java/com/facebook/presto/ingest/TestDelimitedBlockExtractor.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
65 ;  src/test/java/com/facebook/presto/tpch/TpchDataProvider.java ; Early benchmark framework ; - Benchmarks will need to extend AbstractBenchmark class - This version hardcodes dropping data as csv and jmeter output files - jmeter *.jtl files can be picked up by Jenkins performance plugin for build perf history - csv files will be used to submit data with post processing command to ODS  All of the benchmarks can be run with: mvn clean install exec:java
66 ;  src/main/java/com/facebook/presto/sql/parser/CaseInsensitiveStream.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/parser/SqlParser.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/ArithmeticExpression.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/BetweenPredicate.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/CoalesceExpression.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/ComparisonExpression.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/DateLiteral.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/DoubleLiteral.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/ExistsPredicate.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/Expression.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/FunctionCall.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/InListExpression.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/InPredicate.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/IntervalLiteral.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/IsNotNullPredicate.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/IsNullPredicate.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/JoinedTable.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/LikePredicate.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/LogicalBinaryExpression.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/LongLiteral.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/NamedTable.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/NegativeExpression.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/NotExpression.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/NullIfExpression.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/NullLiteral.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/QualifiedName.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/QualifiedNameReference.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/Query.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/SearchedCaseExpression.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/Select.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/SelectItem.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/SelectItemAllColumns.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/SelectItemExpression.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/SimpleCaseExpression.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/SortItem.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/Statement.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/StringLiteral.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/SubqueryExpression.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/SubqueryTable.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/TableCorrelation.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/TableJoin.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/TablePrimary.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/TableReference.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/TimeLiteral.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/TimestampLiteral.java ; Add SQL parser ; nan
66 ;  src/main/java/com/facebook/presto/sql/tree/WhenClause.java ; Add SQL parser ; nan
66 ;  src/test/java/com/facebook/presto/sql/parser/PrintQuery.java ; Add SQL parser ; nan
66 ;  src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Add SQL parser ; nan
66 ;  src/test/java/com/facebook/presto/sql/parser/TreePrinter.java ; Add SQL parser ; nan
67 ;  src/main/java/com/facebook/presto/sql/tree/AliasedRelation.java ; Add joins to AST ; nan
67 ;  src/main/java/com/facebook/presto/sql/tree/Join.java ; Add joins to AST ; nan
67 ;  src/main/java/com/facebook/presto/sql/tree/JoinCriteria.java ; Add joins to AST ; nan
67 ;  src/main/java/com/facebook/presto/sql/tree/JoinOn.java ; Add joins to AST ; nan
67 ;  src/main/java/com/facebook/presto/sql/tree/JoinUsing.java ; Add joins to AST ; nan
67 ;  src/main/java/com/facebook/presto/sql/tree/JoinedTable.java ; Add joins to AST ; nan
67 ;  src/main/java/com/facebook/presto/sql/tree/NaturalJoin.java ; Add joins to AST ; nan
67 ;  src/main/java/com/facebook/presto/sql/tree/Query.java ; Add joins to AST ; nan
67 ;  src/main/java/com/facebook/presto/sql/tree/Relation.java ; Add joins to AST ; nan
67 ;  src/main/java/com/facebook/presto/sql/tree/Subquery.java ; Add joins to AST ; nan
67 ;  src/main/java/com/facebook/presto/sql/tree/Table.java ; Add joins to AST ; nan
67 ;  src/main/java/com/facebook/presto/sql/tree/TableCorrelation.java ; Add joins to AST ; nan
67 ;  src/main/java/com/facebook/presto/sql/tree/TableJoin.java ; Add joins to AST ; nan
67 ;  src/main/java/com/facebook/presto/sql/tree/TablePrimary.java ; Add joins to AST ; nan
67 ;  src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Add joins to AST ; nan
68 ; src/main/java/com/facebook/presto/server/FailedQueryException.java ; Add basic support for distributed tuple streams  ; nan
68 ;  src/main/java/com/facebook/presto/server/HttpQuery.java ; Add basic support for distributed tuple streams  ; nan
68 ;  src/main/java/com/facebook/presto/server/QueryDriversTupleStream.java ; Add basic support for distributed tuple streams  ; nan
68 ;  src/main/java/com/facebook/presto/server/QueryResource.java ; Add basic support for distributed tuple streams  ; nan
68 ;  src/main/java/com/facebook/presto/server/QueryState.java ; Add basic support for distributed tuple streams  ; nan
68 ;  src/main/java/com/facebook/presto/server/UncompressedBlockMapper.java ; Add basic support for distributed tuple streams  ; nan
68 ;  src/main/java/com/facebook/presto/server/UncompressedBlocksMapper.java ; Add basic support for distributed tuple streams  ; nan
68 ;  src/main/java/com/facebook/presto/slice/UnsafeSlice.java ; Add basic support for distributed tuple streams  ; nan
68 ;  src/test/java/com/facebook/presto/server/SimpleQueryManager.java ; Add basic support for distributed tuple streams  ; nan
68 ;  src/test/java/com/facebook/presto/server/TestHttpTupleStream.java ; Add basic support for distributed tuple streams  ; nan
68 ;  src/test/java/com/facebook/presto/server/TestQueryDriversTupleStream.java ; Add basic support for distributed tuple streams  ; nan
68 ;  src/test/java/com/facebook/presto/server/TestQueryResourceServer.java ; Add basic support for distributed tuple streams  ; nan
68 ;  src/test/java/com/facebook/presto/server/TestQueryState.java ; Add basic support for distributed tuple streams  ; nan
69 ; src/main/java/com/facebook/presto/sql/tree/TreePrinter.java ; AST Visitor framework and basic semantic analysis ; nan
70 ; src/test/java/com/facebook/presto/TestQueries.java ; Add all columns to test data set ; nan
70 ;  src/test/java/com/facebook/presto/tpch/TpchSchema.java ; Add all columns to test data set ; nan
71 ; src/main/java/com/facebook/presto/aggregation/AggregationFunction.java ; Yield support ; nan
71 ;  src/main/java/com/facebook/presto/aggregation/AverageAggregation.java ; Yield support ; nan
71 ;  src/main/java/com/facebook/presto/aggregation/CountAggregation.java ; Yield support ; nan
71 ;  src/main/java/com/facebook/presto/aggregation/DoubleSumAggregation.java ; Yield support ; nan
71 ;  src/main/java/com/facebook/presto/aggregation/SumAggregation.java ; Yield support ; nan
72 ; src/main/java/com/facebook/presto/aggregation/AverageAggregation.java ; Fix issue where aggregations advance past end position and add tests ; nan
72 ;  src/main/java/com/facebook/presto/aggregation/CountAggregation.java ; Fix issue where aggregations advance past end position and add tests ; nan
72 ;  src/main/java/com/facebook/presto/aggregation/SumAggregation.java ; Fix issue where aggregations advance past end position and add tests ; nan
72 ;  src/test/java/com/facebook/presto/aggregation/DoubleSequenceCursor.java ; Fix issue where aggregations advance past end position and add tests ; nan
72 ;  src/test/java/com/facebook/presto/aggregation/LongSequenceCursor.java ; Fix issue where aggregations advance past end position and add tests ; nan
72 ;  src/test/java/com/facebook/presto/aggregation/TestAggregationFunction.java ; Fix issue where aggregations advance past end position and add tests ; nan
72 ;  src/test/java/com/facebook/presto/aggregation/TestAverage.java ; Fix issue where aggregations advance past end position and add tests ; nan
72 ;  src/test/java/com/facebook/presto/aggregation/TestCount.java ; Fix issue where aggregations advance past end position and add tests ; nan
72 ;  src/test/java/com/facebook/presto/aggregation/TestSum.java ; Fix issue where aggregations advance past end position and add tests ; nan
73 ; src/main/java/com/facebook/presto/block/StatsCollectingTupleStreamSerde.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
73 ;  src/main/java/com/facebook/presto/operator/inlined/FullInlinedOperatorTupleStream.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
73 ;  src/main/java/com/facebook/presto/operator/inlined/InlinedOperator.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
73 ;  src/main/java/com/facebook/presto/operator/inlined/InlinedOperatorReader.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
73 ;  src/main/java/com/facebook/presto/operator/inlined/InlinedOperatorWriter.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
73 ;  src/main/java/com/facebook/presto/operator/inlined/PartialInlinedOperatorTupleStream.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
73 ;  src/main/java/com/facebook/presto/operator/tap/StatsTupleValueSink.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
73 ;  src/main/java/com/facebook/presto/operator/tap/Tap.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
73 ;  src/main/java/com/facebook/presto/operator/tap/TupleValueSink.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
73 ;  src/test/java/com/facebook/presto/benchmark/AbstractTupleStreamBenchmark.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
73 ;  src/test/java/com/facebook/presto/block/TestStatsCollectingTupleStreamSerde.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
73 ;  src/test/java/com/facebook/presto/operator/inlined/TestFullInlinedOperatorTupleStream.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
73 ;  src/test/java/com/facebook/presto/operator/inlined/TestInlinedOperatorHook.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
73 ;  src/test/java/com/facebook/presto/operator/tap/TestStatsTupleValueSink.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
73 ;  src/test/java/com/facebook/presto/operator/tap/TestTapTupleStream.java ; Build out more Benchmark framework + porting over existing benchmarks ; - Abstracted TupleStreamBenchmark framework + converted benchmarks - Add default serdes to TupleStreamSerdes - Add StatsCollectingTupleStreamSerde - Added SelfIdTupleStreamSerde + some other fixes - Improve BlockBuilder resizing behavior
74 ; src/main/java/com/facebook/presto/sql/AstFunctions.java ; AST rewrites  SQL printer and some other minor fixes ; nan
74 ;  src/main/java/com/facebook/presto/sql/compiler/transforms/RemoveRedundantProjections.java ; AST rewrites  SQL printer and some other minor fixes ; nan
74 ;  src/test/java/com/facebook/presto/sql/compiler/transforms/TestRemoveRedundantProjections.java ; AST rewrites  SQL printer and some other minor fixes ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/Main.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/Range.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/Ranges.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/SizeOf.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/Tuple.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/TupleInfo.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/aggregation/AggregationFunction.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/aggregation/AverageAggregation.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/aggregation/CountAggregation.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/aggregation/DoubleSumAggregation.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/aggregation/SumAggregation.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/AbstractYieldingIterator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/BlockBuilder.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/ColumnMappingTupleStream.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/Cursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/Cursors.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/ForwardingCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/GenericTupleStream.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/MaskedBlock.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/QuerySession.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/RangeBoundedCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/RangeBoundedTupleStream.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/SelfDescriptiveSerde.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/StatsCollectingTupleStreamSerde.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/TupleStream.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/TupleStreamChunker.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/TupleStreamDeserializer.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/TupleStreamPosition.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/TupleStreamSerde.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/TupleStreamSerdes.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/TupleStreamSerializer.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/TupleStreamWriter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/TupleStreams.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/YieldingIterable.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/YieldingIterator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/YieldingIterators.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/dictionary/Dictionary.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedTupleStream.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/dictionary/DictionarySerde.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/position/PositionsBlock.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/position/RangePositionBlock.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/position/UncompressedPositionBlock.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/rle/PackedLongSerde.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/rle/RunLengthEncodedBlock.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/rle/RunLengthEncodedCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/rle/RunLengthEncodedSerde.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/rle/RunLengthEncodedTupleStream.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedBlock.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedBlockCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedDoubleBlockCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedDoubleCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedLongBlockCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedLongCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedSerde.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedSliceBlockCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedSliceCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedTupleInfoSerde.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/ingest/BlockDataImporter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/ingest/BlockExtractor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/ingest/DelimitedBlockExtractor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/ingest/DoubleFieldValueConverter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/ingest/DoubleStringValueConverter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/ingest/FieldValueConverter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/ingest/LineReaderIterator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/ingest/LongFieldValueConverter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/ingest/LongStringValueConverter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/ingest/RuntimeIOException.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/ingest/StringValueConverter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/ingest/VarBinaryStringValueConverter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/metadata/ColumnMetadata.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionInfo.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/metadata/Metadata.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/metadata/TableMetadata.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operation/BinaryOperation.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operation/ComparisonOperation.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operation/DoubleLessThanComparison.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operation/LongLessThanComparison.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operation/SubtractionOperation.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/AggregationOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/AndOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/ApplyPredicateOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/ComparisonOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/ConsolePrinter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/DataScan1.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/DictionaryAggregationOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/FilterOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/FilteredCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/GenericCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/GroupByOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/MergeOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/OrOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/PipelinedAggregationOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/RunLengthBinaryOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/Splitter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/UncompressedBinaryOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/tap/StatsTupleValueSink.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/tap/Tap.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/operator/tap/TupleValueSink.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/server/FailedQueryException.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/server/HttpQuery.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/server/HttpQueryProvider.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/server/PrestoMediaTypes.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/server/QueryDriver.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/server/QueryDriverProvider.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/server/QueryDriversTupleStream.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/server/QueryManager.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/server/QueryResource.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/server/QueryState.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/server/UncompressedBlockMapper.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/server/UncompressedBlocksMapper.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/slice/AbstractSlice.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/slice/BasicSliceOutput.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/slice/ByteArraySlice.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/slice/ByteBufferSlice.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/slice/DynamicSliceOutput.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/slice/OutputStreamSliceOutput.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/slice/Slice.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/slice/SliceInput.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/slice/SliceOutput.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/slice/Slices.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/slice/UnsafeSlice.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/slice/VariableLengthQuantity.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/AstFunctions.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/SqlFormatter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/AnalysisResult.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/Field.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/IterableTransformer.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/IterableUtils.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/MoreFunctions.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/NameGenerator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/NestedQueryExtractor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/NodeRewriter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/ReferenceResolver.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/Schema.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/SchemaExtractor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/SemanticAnalyzer.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/SemanticException.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/SymbolTable.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/TreeRewriter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/transforms/ExpandAllColumnsWildcard.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/transforms/ExtractAggregates.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/transforms/ExtractScalarExpressions.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/transforms/MaterializeImplicitAliases.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/transforms/QualifyNames.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/transforms/RemoveRedundantProjections.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/transforms/ReplaceWithAttributeReference.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/parser/CaseInsensitiveStream.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/parser/SqlParser.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/AliasedExpression.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/AliasedRelation.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/AllColumns.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/ArithmeticExpression.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/BetweenPredicate.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/CoalesceExpression.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/ComparisonExpression.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/DateLiteral.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/DefaultTraversalVisitor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/DoubleLiteral.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/ExistsPredicate.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/Expression.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/FunctionCall.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/InListExpression.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/InPredicate.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/IntervalLiteral.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/IsNotNullPredicate.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/IsNullPredicate.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/Join.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/JoinCriteria.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/JoinOn.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/JoinUsing.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/LikePredicate.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/Literal.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/LogicalBinaryExpression.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/LongLiteral.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/NaturalJoin.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/NegativeExpression.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/Node.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/NotExpression.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/NullIfExpression.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/NullLiteral.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/QualifiedName.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/QualifiedNameReference.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/Query.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/Relation.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/SearchedCaseExpression.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/Select.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/SimpleCaseExpression.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/SortItem.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/Statement.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/StringLiteral.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/Subquery.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/SubqueryExpression.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/Table.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/TimeLiteral.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/TimestampLiteral.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/TreePrinter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/WhenClause.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/JMeterOutputWriter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/TestConsolePrinter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/TestExample.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/TestRange.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/TestTupleInfo.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/Tuples.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/aggregation/DoubleSequenceCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/aggregation/LongSequenceCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/aggregation/TestAggregationFunction.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/aggregation/TestAggregations.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/aggregation/TestAverage.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/aggregation/TestCount.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/aggregation/TestCountAggregation.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/aggregation/TestSum.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractBenchmark.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractTupleStreamBenchmark.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkResultHook.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BinaryOperatorBenchmark.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountAggregationBenchmark.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/DicRleGroupByBenchmark.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/DictionaryAggregationBenchmark.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/JMeterBenchmarkResultWriter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/JsonBenchmarkResultWriter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/PredicateFilterBenchmark.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/RawStreamingBenchmark.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/RleHashAggregationBenchmark.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/RlePipelinedAggregationBenchmark.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SimpleLineBenchmarkResultWriter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/AbstractTestContiguousCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/AbstractTestCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/AbstractTestNonContiguousCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/Blocks.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/CursorAssertions.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/TestColumnMappingTupleStream.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/TestCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/TestGenericCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/TestMaskedBlock.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/TestRangeBoundedCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/TestSelfIdTupleStreamSerde.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/TestStatsCollectingTupleStreamSerde.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/TestTupleStreamChunker.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/dictionary/TestDictionarySerde.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/dictionary/TestPackedLongSerde.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/position/TestPositionsBlock.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/position/TestUncompressedPositionBlock.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/rle/TestRunLengthEncodedCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/rle/TestRunLengthEncodedSerde.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedBlockCursorDouble.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedBlockCursorLong.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedBlockCursorSlice.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedBlockReader.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedDoubleBlockCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedDoubleCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedLongBlockCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedLongCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedSliceBlockCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedSliceCursor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/ingest/TestCsv.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/ingest/TestDelimitedBlockExtractor.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/operator/TestAndOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/operator/TestComparisonOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/operator/TestFilterOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/operator/TestGroupByOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/operator/TestMergeOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/operator/TestOrOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/operator/TestRunLengthBinaryOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/operator/TestUncompressedBinaryOperator.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/operator/tap/TestStatsTupleValueSink.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/operator/tap/TestTapTupleStream.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/server/SimpleQueryManager.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/server/TestHttpTupleStream.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/server/TestQueryDriversTupleStream.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/server/TestQueryResourceServer.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/server/TestQueryState.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/slice/TestSlice.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/sql/compiler/TestSemanticAnalyzer.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/sql/compiler/transforms/TestExpandAllColumnsWildcard.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/sql/compiler/transforms/TestExtractAggregates.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/sql/compiler/transforms/TestExtractScalarExpressions.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/sql/compiler/transforms/TestMaterializeImplicitAliases.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/sql/compiler/transforms/TestQualifyNames.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/sql/compiler/transforms/TestRemoveRedundantProjections.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/sql/compiler/transforms/TestRewriter.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/sql/parser/PrintQuery.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Setup multi-module project structure ; nan
75 ;  presto-main/src/test/java/com/facebook/presto/sql/parser/TreePrinter.java ; Setup multi-module project structure ; nan
76 ; presto-main/src/test/java/com/facebook/presto/benchmark/AbstractBenchmark.java ; Create dedicated ODS output file generator to improve ODS export speed & add benchmark warmups ; - Also adjust the iterations for the benchmarks to run a little faster
76 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Create dedicated ODS output file generator to improve ODS export speed & add benchmark warmups ; - Also adjust the iterations for the benchmarks to run a little faster
76 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BinaryOperatorBenchmark.java ; Create dedicated ODS output file generator to improve ODS export speed & add benchmark warmups ; - Also adjust the iterations for the benchmarks to run a little faster
76 ;  presto-main/src/test/java/com/facebook/presto/benchmark/DicRleGroupByBenchmark.java ; Create dedicated ODS output file generator to improve ODS export speed & add benchmark warmups ; - Also adjust the iterations for the benchmarks to run a little faster
76 ;  presto-main/src/test/java/com/facebook/presto/benchmark/DictionaryAggregationBenchmark.java ; Create dedicated ODS output file generator to improve ODS export speed & add benchmark warmups ; - Also adjust the iterations for the benchmarks to run a little faster
76 ;  presto-main/src/test/java/com/facebook/presto/benchmark/OdsBenchmarkResultWriter.java ; Create dedicated ODS output file generator to improve ODS export speed & add benchmark warmups ; - Also adjust the iterations for the benchmarks to run a little faster
76 ;  presto-main/src/test/java/com/facebook/presto/benchmark/PredicateFilterBenchmark.java ; Create dedicated ODS output file generator to improve ODS export speed & add benchmark warmups ; - Also adjust the iterations for the benchmarks to run a little faster
77 ; presto-main/src/main/java/com/facebook/presto/block/BlockBuilder.java ; Add basic Presto TupleStream operators that will be needed for imports or just generally useful ; - Add DelimitedTupleStream - Add MaterializingTupleStream - Migrate all cursors to calling: Cursors.checkReadablePosition(this) to validate read access availability
78 ; presto-main/src/main/java/com/facebook/presto/ingest/HiveTupleStream.java ; Add framework for importing from Hive ; nan
79 ; presto-main/src/main/java/com/facebook/presto/operator/GenericCursor.java ; Minor fixes ; nan
80 ; presto-main/src/main/java/com/facebook/presto/block/MaskedBlock.java ; Fix FilterOperator ; nan
80 ;  presto-main/src/test/java/com/facebook/presto/block/TestMaskedBlock.java ; Fix FilterOperator ; nan
80 ;  presto-main/src/test/java/com/facebook/presto/block/TestTupleStreamChunker.java ; Fix FilterOperator ; nan
81 ; presto-main/src/main/java/com/facebook/presto/metadata/ColumnMetadata.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/main/java/com/facebook/presto/metadata/Metadata.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/main/java/com/facebook/presto/metadata/TableMetadata.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/main/java/com/facebook/presto/sql/AstFunctions.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/SchemaExtractor.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/SemanticAnalyzer.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/SessionMetadata.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/transforms/ExpandAllColumnsWildcard.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/transforms/ExtractAggregates.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/transforms/ExtractScalarExpressions.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestingMetadata.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/test/java/com/facebook/presto/sql/compiler/TestSemanticAnalyzer.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/test/java/com/facebook/presto/sql/compiler/transforms/TestExpandAllColumnsWildcard.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/test/java/com/facebook/presto/sql/compiler/transforms/TestExtractAggregates.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/test/java/com/facebook/presto/sql/compiler/transforms/TestExtractScalarExpressions.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/test/java/com/facebook/presto/sql/compiler/transforms/TestQualifyNames.java ; Refactor Metadata interfaces ; nan
81 ;  presto-main/src/test/java/com/facebook/presto/sql/compiler/transforms/TestRewriter.java ; Refactor Metadata interfaces ; nan
82 ; presto-main/src/main/java/com/facebook/presto/Main.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/main/java/com/facebook/presto/RetryDriver.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/main/java/com/facebook/presto/block/ProjectionCursor.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/main/java/com/facebook/presto/block/ProjectionTupleStream.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/main/java/com/facebook/presto/block/StaticTupleAppendingTupleStream.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/main/java/com/facebook/presto/ingest/TupleStreamImporter.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseStorageManager.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/main/java/com/facebook/presto/metadata/HiveImportManager.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/main/java/com/facebook/presto/metadata/StorageManager.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/main/java/com/facebook/presto/operator/MergeCursor.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/main/java/com/facebook/presto/operator/tap/StatsTupleValueSink.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/test/java/com/facebook/presto/TestExample.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/test/java/com/facebook/presto/block/TestColumnMappingTupleStream.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
82 ;  presto-main/src/test/java/com/facebook/presto/ingest/TestStreamWriterTupleValueSink.java ; Hive importer + bug fixes + performance optimizations ; Still a little rough around the edges  but does what we need for the demo.
84 ; presto-main/src/main/java/com/facebook/presto/TupleInfo.java ; Fix bug in Benchmark data generation ; Summary: So I finally tracked down why so many of our benchmarks seemed to have taken such a huge performance hit. It turns out there is was a bug in the data import code that caused the wrong column to be used which had different performance characteristic. This change returns it back to the correct and previous behavior. Local tests have shown that this is was the cause of the seeming perf degredation in our benchmark suite.
84 ;  presto-main/src/test/java/com/facebook/presto/tpch/GeneratingTpchDataProvider.java ; Fix bug in Benchmark data generation ; Summary: So I finally tracked down why so many of our benchmarks seemed to have taken such a huge performance hit. It turns out there is was a bug in the data import code that caused the wrong column to be used which had different performance characteristic. This change returns it back to the correct and previous behavior. Local tests have shown that this is was the cause of the seeming perf degredation in our benchmark suite.
84 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchSchema.java ; Fix bug in Benchmark data generation ; Summary: So I finally tracked down why so many of our benchmarks seemed to have taken such a huge performance hit. It turns out there is was a bug in the data import code that caused the wrong column to be used which had different performance characteristic. This change returns it back to the correct and previous behavior. Local tests have shown that this is was the cause of the seeming perf degredation in our benchmark suite.
85 ; presto-main/src/main/java/com/facebook/presto/block/Cursors.java ; Correctly produce increasing positions for stored tuple streams ; - Add RepositioningTupleStream which compacts and reindexes the positions of an underlying stream - This is used to give consecutive files the right positioning
85 ;  presto-main/src/main/java/com/facebook/presto/block/RepositioningTupleStream.java ; Correctly produce increasing positions for stored tuple streams ; - Add RepositioningTupleStream which compacts and reindexes the positions of an underlying stream - This is used to give consecutive files the right positioning
85 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseStorageManager.java ; Correctly produce increasing positions for stored tuple streams ; - Add RepositioningTupleStream which compacts and reindexes the positions of an underlying stream - This is used to give consecutive files the right positioning
85 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Correctly produce increasing positions for stored tuple streams ; - Add RepositioningTupleStream which compacts and reindexes the positions of an underlying stream - This is used to give consecutive files the right positioning
85 ;  presto-main/src/test/java/com/facebook/presto/block/TestRepositioningTupleStream.java ; Correctly produce increasing positions for stored tuple streams ; - Add RepositioningTupleStream which compacts and reindexes the positions of an underlying stream - This is used to give consecutive files the right positioning
86 ; presto-main/src/main/java/com/facebook/presto/ingest/HiveSchemaUtil.java ; Integrate Metadata with HiveImportManager ; nan
86 ;  presto-main/src/main/java/com/facebook/presto/ingest/HiveTupleStream.java ; Integrate Metadata with HiveImportManager ; nan
86 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseMetadata.java ; Integrate Metadata with HiveImportManager ; nan
86 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseStorageManager.java ; Integrate Metadata with HiveImportManager ; nan
86 ;  presto-main/src/main/java/com/facebook/presto/metadata/ForMetadata.java ; Integrate Metadata with HiveImportManager ; nan
86 ;  presto-main/src/main/java/com/facebook/presto/metadata/ForStorageManager.java ; Integrate Metadata with HiveImportManager ; nan
86 ;  presto-main/src/main/java/com/facebook/presto/metadata/HiveImportManager.java ; Integrate Metadata with HiveImportManager ; nan
86 ;  presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Integrate Metadata with HiveImportManager ; nan
87 ; presto-main/src/main/java/com/facebook/presto/block/StaticTupleAppendingTupleStream.java ; Don t import partition name as column ; nan
87 ;  presto-main/src/main/java/com/facebook/presto/metadata/HiveImportManager.java ; Don t import partition name as column ; nan
87 ;  presto-main/src/test/java/com/facebook/presto/block/TestStaticTupleAppendingTupleStream.java ; Don t import partition name as column ; nan
88 ; presto-main/src/main/java/com/facebook/presto/slice/ByteArraySlice.java ; Fix slice compare and equals ; nan
89 ;  presto-main/src/main/java/com/facebook/presto/Main.java ; Add basic interactive console ; nan
89 ;  presto-main/src/main/java/com/facebook/presto/cli/Console.java ; Add basic interactive console ; nan
90 ; presto-main/src/main/java/com/facebook/presto/metadata/ColumnMetadataMapper.java ; Add table and column handles ; nan
90 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseMetadata.java ; Add table and column handles ; nan
90 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataDao.java ; Add table and column handles ; nan
90 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeColumnHandle.java ; Add table and column handles ; nan
90 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeTableHandle.java ; Add table and column handles ; nan
90 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestDatabaseMetadata.java ; Add table and column handles ; nan
93 ; presto-main/src/main/java/com/facebook/presto/operator/LimitOperator.java ; Limit and TopN operator ; nan
93 ;  presto-main/src/main/java/com/facebook/presto/operator/TopNOperator.java ; Limit and TopN operator ; nan
93 ;  presto-main/src/main/java/com/facebook/presto/tuple/FieldOrderedTupleComparator.java ; Limit and TopN operator ; nan
93 ;  presto-main/src/test/java/com/facebook/presto/operator/OperatorAssertions.java ; Limit and TopN operator ; nan
93 ;  presto-main/src/test/java/com/facebook/presto/operator/TestTopNOperator.java ; Limit and TopN operator ; nan
94 ; presto-main/src/test/java/com/facebook/presto/benchmark/CountWithFilterSqlBenchmark.java ; Actually use a filter in query benchmark ; nan
95 ; presto-main/src/main/java/com/facebook/presto/sql/compiler/Analyzer.java ; Add support for selecting with qualified wildcard from anonymous columns ; Queries of this form are now resolved correctly:      sql SELECT T.* FROM (     SELECT a + b     FROM U ) T      Note that the expression  a + b  doesn t have an alias
95 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/NamedSlot.java ; Add support for selecting with qualified wildcard from anonymous columns ; Queries of this form are now resolved correctly:      sql SELECT T.* FROM (     SELECT a + b     FROM U ) T      Note that the expression  a + b  doesn t have an alias
95 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/TupleDescriptor.java ; Add support for selecting with qualified wildcard from anonymous columns ; Queries of this form are now resolved correctly:      sql SELECT T.* FROM (     SELECT a + b     FROM U ) T      Note that the expression  a + b  doesn t have an alias
95 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/Planner.java ; Add support for selecting with qualified wildcard from anonymous columns ; Queries of this form are now resolved correctly:      sql SELECT T.* FROM (     SELECT a + b     FROM U ) T      Note that the expression  a + b  doesn t have an alias
95 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Add support for selecting with qualified wildcard from anonymous columns ; Queries of this form are now resolved correctly:      sql SELECT T.* FROM (     SELECT a + b     FROM U ) T      Note that the expression  a + b  doesn t have an alias
97 ; presto-main/src/main/java/com/facebook/presto/sql/compiler/AnalysisResult.java ; Add support for LIMIT ; nan
97 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/Analyzer.java ; Add support for LIMIT ; nan
97 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/CoalesceLimits.java ; Add support for LIMIT ; nan
97 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExecutionPlanner.java ; Add support for LIMIT ; nan
97 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LimitNode.java ; Add support for LIMIT ; nan
97 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Add support for LIMIT ; nan
97 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanVisitor.java ; Add support for LIMIT ; nan
97 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/Planner.java ; Add support for LIMIT ; nan
97 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PruneRedundantProjections.java ; Add support for LIMIT ; nan
97 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PruneUnreferencedOutputs.java ; Add support for LIMIT ; nan
97 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/UnaliasSlotReferences.java ; Add support for LIMIT ; nan
97 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Add support for LIMIT ; nan
98 ; presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; TopN benchmark ; nan
98 ;  presto-main/src/test/java/com/facebook/presto/benchmark/Top100Benchmark.java ; TopN benchmark ; nan
99 ; presto-main/src/main/java/com/facebook/presto/operator/AggregationOperator.java ; Speed improvements ; nan
100 ; presto-main/src/main/java/com/facebook/presto/operator/InMemoryOrderByOperator.java ; Add in memory order by operator ; This is a very ghetto in memory implementation of order by that materializes all tuples and sorts them. This should be good for what we need at this point in time.
100 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Add in memory order by operator ; This is a very ghetto in memory implementation of order by that materializes all tuples and sorts them. This should be good for what we need at this point in time.
100 ;  presto-main/src/test/java/com/facebook/presto/benchmark/InMemoryOrderByBenchmark.java ; Add in memory order by operator ; This is a very ghetto in memory implementation of order by that materializes all tuples and sorts them. This should be good for what we need at this point in time.
100 ;  presto-main/src/test/java/com/facebook/presto/operator/TestInMemoryOrderByOperator.java ; Add in memory order by operator ; This is a very ghetto in memory implementation of order by that materializes all tuples and sorts them. This should be good for what we need at this point in time.
103 ; presto-main/src/main/java/com/facebook/presto/sql/planner/ExecutionPlanner.java ; Fix perf regression ; nan
106 ; presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedDoubleBlockCursor.java ; Null support ; Add isNull(field) to TupleReadable Null is stored in a bit vector at the head of the tuple Aggregates (except) count skip null values
106 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedLongBlockCursor.java ; Null support ; Add isNull(field) to TupleReadable Null is stored in a bit vector at the head of the tuple Aggregates (except) count skip null values
106 ;  presto-main/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java ; Null support ; Add isNull(field) to TupleReadable Null is stored in a bit vector at the head of the tuple Aggregates (except) count skip null values
106 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/ExpressionAnalyzer.java ; Null support ; Add isNull(field) to TupleReadable Null is stored in a bit vector at the head of the tuple Aggregates (except) count skip null values
106 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Null support ; Add isNull(field) to TupleReadable Null is stored in a bit vector at the head of the tuple Aggregates (except) count skip null values
106 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/CoalesceExpression.java ; Null support ; Add isNull(field) to TupleReadable Null is stored in a bit vector at the head of the tuple Aggregates (except) count skip null values
106 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedProjectionFunction.java ; Null support ; Add isNull(field) to TupleReadable Null is stored in a bit vector at the head of the tuple Aggregates (except) count skip null values
107 ; presto-main/src/main/java/com/facebook/presto/sql/planner/AlignNode.java ; Merge ColumnScan and Align plan nodes into a single logical TableScan node ; nan
107 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/CoalesceLimits.java ; Merge ColumnScan and Align plan nodes into a single logical TableScan node ; nan
107 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ColumnScan.java ; Merge ColumnScan and Align plan nodes into a single logical TableScan node ; nan
107 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExecutionPlanner.java ; Merge ColumnScan and Align plan nodes into a single logical TableScan node ; nan
107 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Merge ColumnScan and Align plan nodes into a single logical TableScan node ; nan
107 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanVisitor.java ; Merge ColumnScan and Align plan nodes into a single logical TableScan node ; nan
107 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/Planner.java ; Merge ColumnScan and Align plan nodes into a single logical TableScan node ; nan
107 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PruneRedundantProjections.java ; Merge ColumnScan and Align plan nodes into a single logical TableScan node ; nan
107 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PruneUnreferencedOutputs.java ; Merge ColumnScan and Align plan nodes into a single logical TableScan node ; nan
107 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/TableScan.java ; Merge ColumnScan and Align plan nodes into a single logical TableScan node ; nan
107 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/UnaliasSlotReferences.java ; Merge ColumnScan and Align plan nodes into a single logical TableScan node ; nan
108 ; presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Add sum(double) benchmark ; nan
108 ;  presto-main/src/test/java/com/facebook/presto/benchmark/DoubleSumAggregationBenchmark.java ; Add sum(double) benchmark ; nan
108 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlDoubleSumAggregationBenchmark.java ; Add sum(double) benchmark ; nan
109 ; presto-main/src/main/java/com/facebook/presto/block/BlockIterable.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/block/BlockIterables.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/block/BlockUtils.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/cli/ExampleSumAggregation.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/cli/Execute.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/ingest/ImportingOperator.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/ingest/RecordProjectOperator.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/operator/AggregationOperator.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/operator/AlignmentOperator.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/operator/ConsolePrinter.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/operator/FilterAndProjectOperator.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/operator/InMemoryOrderByOperator.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/operator/LimitOperator.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/operator/Operator.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/operator/TopNOperator.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/serde/BlockEncoding.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/serde/BlocksFileReader.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/serde/DictionaryBlockEncoding.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/serde/EncodedBlockIterable.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/serde/RunLengthBlockEncoding.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/serde/UncompressedBlockEncoding.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/server/CliHttpQueryProvider.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/server/HttpQuery.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/server/HttpQueryProvider.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/server/QueryDriverProvider.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/server/QueryDriversOperator.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/server/QueryInfo.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/server/QueryManager.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/server/QueryResource.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Tuple info in operator ; nan
109 ;  presto-main/src/main/java/com/facebook/presto/tuple/TupleInfo.java ; Tuple info in operator ; nan
109 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Tuple info in operator ; nan
109 ;  presto-main/src/test/java/com/facebook/presto/operator/OperatorAssertions.java ; Tuple info in operator ; nan
109 ;  presto-main/src/test/java/com/facebook/presto/server/SimpleQueryManager.java ; Tuple info in operator ; nan
109 ;  presto-main/src/test/java/com/facebook/presto/server/TestHttpQueryProvider.java ; Tuple info in operator ; nan
109 ;  presto-main/src/test/java/com/facebook/presto/server/TestQueryDriversOperator.java ; Tuple info in operator ; nan
110 ; presto-main/src/main/java/com/facebook/presto/importer/ImportField.java ; Add distributed data imports ; nan
110 ;  presto-main/src/main/java/com/facebook/presto/importer/ImportManager.java ; Add distributed data imports ; nan
110 ;  presto-main/src/main/java/com/facebook/presto/importer/NodeWorkerQueue.java ; Add distributed data imports ; nan
110 ;  presto-main/src/main/java/com/facebook/presto/ingest/SerializedPartitionChunk.java ; Add distributed data imports ; nan
110 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseShardManager.java ; Add distributed data imports ; nan
110 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeColumnHandle.java ; Add distributed data imports ; nan
110 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeTableHandle.java ; Add distributed data imports ; nan
110 ;  presto-main/src/main/java/com/facebook/presto/metadata/Node.java ; Add distributed data imports ; nan
112 ; presto-main/src/main/java/com/facebook/presto/operator/aggregation/AggregationFunction.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AggregationFunctions.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountAggregation.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleAverageAggregation.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleSumAggregation.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/FullAggregationFunction.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongAverageAggregation.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongSumAggregation.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExecutionPlanner.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountAggregationBenchmark.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/test/java/com/facebook/presto/benchmark/DoubleSumAggregationBenchmark.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashAggregationBenchmark.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/test/java/com/facebook/presto/operator/TestAggregationOperator.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashAggregationOperator.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestAggregationFunction.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestCountAggregation.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestDoubleAverageAggregation.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestDoubleSumAggregation.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestLongAverageAggregation.java ; Intermediate aggregates ; nan
112 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestLongSumAggregation.java ; Intermediate aggregates ; nan
113 ; presto-main/src/main/java/com/facebook/presto/operator/AggregationOperator.java ; Update to SPI package and fix imports ; nan
113 ;  presto-main/src/main/java/com/facebook/presto/operator/AlignmentOperator.java ; Update to SPI package and fix imports ; nan
113 ;  presto-main/src/main/java/com/facebook/presto/operator/ConsolePrinter.java ; Update to SPI package and fix imports ; nan
113 ;  presto-main/src/main/java/com/facebook/presto/operator/FilterAndProjectOperator.java ; Update to SPI package and fix imports ; nan
113 ;  presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Update to SPI package and fix imports ; nan
113 ;  presto-main/src/main/java/com/facebook/presto/operator/InMemoryOrderByOperator.java ; Update to SPI package and fix imports ; nan
113 ;  presto-main/src/main/java/com/facebook/presto/operator/LimitOperator.java ; Update to SPI package and fix imports ; nan
113 ;  presto-main/src/main/java/com/facebook/presto/operator/TopNOperator.java ; Update to SPI package and fix imports ; nan
113 ;  presto-main/src/main/java/com/facebook/presto/tuple/FieldOrderedTupleComparator.java ; Update to SPI package and fix imports ; nan
114 ; presto-main/src/main/java/com/facebook/presto/split/ImportSplit.java ; Add handles + jackson serialization formats ; nan
114 ;  presto-main/src/main/java/com/facebook/presto/split/NativeSplit.java ; Add handles + jackson serialization formats ; nan
114 ;  presto-main/src/main/java/com/facebook/presto/split/Split.java ; Add handles + jackson serialization formats ; nan
115 ; presto-main/src/main/java/com/facebook/presto/operator/AggregationOperator.java ; Add vectorized AggregationOperator ; nan
115 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AggregationFunction.java ; Add vectorized AggregationOperator ; nan
115 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AggregationFunctions.java ; Add vectorized AggregationOperator ; nan
115 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountAggregation.java ; Add vectorized AggregationOperator ; nan
115 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleAverageAggregation.java ; Add vectorized AggregationOperator ; nan
115 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleSumAggregation.java ; Add vectorized AggregationOperator ; nan
115 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/FullAggregationFunction.java ; Add vectorized AggregationOperator ; nan
115 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongAverageAggregation.java ; Add vectorized AggregationOperator ; nan
115 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongSumAggregation.java ; Add vectorized AggregationOperator ; nan
115 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestAggregationFunction.java ; Add vectorized AggregationOperator ; nan
115 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestCountAggregation.java ; Add vectorized AggregationOperator ; nan
115 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestDoubleAverageAggregation.java ; Add vectorized AggregationOperator ; nan
115 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestDoubleSumAggregation.java ; Add vectorized AggregationOperator ; nan
115 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestLongAverageAggregation.java ; Add vectorized AggregationOperator ; nan
115 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestLongSumAggregation.java ; Add vectorized AggregationOperator ; nan
117 ; presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Add managers for metastore and datastreamproviders ; - Also make some needed  augmentations to metastore interface
117 ;  presto-main/src/main/java/com/facebook/presto/split/DataStreamManager.java ; Add managers for metastore and datastreamproviders ; - Also make some needed  augmentations to metastore interface
118 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionBinder.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionInfo.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/main/java/com/facebook/presto/operator/AggregationOperator.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AggregationFunction.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AggregationFunctionStep.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AggregationFunctions.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountAggregation.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleAverageAggregation.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleSumAggregation.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/FullAggregationFunction.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongAverageAggregation.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongSumAggregation.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExecutionPlanner.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestAggregationFunction.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestCountAggregation.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestDoubleAverageAggregation.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestDoubleSumAggregation.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestLongAverageAggregation.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
118 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestLongSumAggregation.java ; Aggregation function improvements ; - Add intermediate types to aggregation FunctionInfo (in preparation for distributed plan creation) - Rename FullAggregationFunction to AggregationFunction -- the  public  aggregation class  - Rename AggregationFunction to AggregationFunctionStep -- an aggregation function specialized on one of the execution steps (single-node  combine  intermediate  final) - Mechanism for instantiating aggregation functions bound to inputs in physical plan. This is so that we can get rid of the hard-coded if-then-else checks in ExecutionPlanner  Also  fix source of potential bugs in Page.
119 ; presto-main/src/main/java/com/facebook/presto/metadata/Node.java ; Add SplitManager ; nan
119 ;  presto-main/src/main/java/com/facebook/presto/split/SplitAssignments.java ; Add SplitManager ; nan
119 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Add SplitManager ; nan
120 ; presto-main/src/main/java/com/facebook/presto/cli/ExampleSumAggregation.java ; Demonstrate integration of end-to-end query with static query ; nan
120 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Demonstrate integration of end-to-end query with static query ; nan
123 ; presto-main/src/main/java/com/facebook/presto/metadata/ColumnHandle.java ; Don t contact metastore when reading data ; nan
123 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseMetadata.java ; Don t contact metastore when reading data ; nan
123 ;  presto-main/src/main/java/com/facebook/presto/metadata/ImportColumnHandle.java ; Don t contact metastore when reading data ; nan
123 ;  presto-main/src/main/java/com/facebook/presto/metadata/ImportMetadata.java ; Don t contact metastore when reading data ; nan
123 ;  presto-main/src/main/java/com/facebook/presto/metadata/Metadata.java ; Don t contact metastore when reading data ; nan
123 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataDao.java ; Don t contact metastore when reading data ; nan
123 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Don t contact metastore when reading data ; nan
123 ;  presto-main/src/main/java/com/facebook/presto/split/ImportDataStreamProvider.java ; Don t contact metastore when reading data ; nan
123 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestingMetadata.java ; Don t contact metastore when reading data ; nan
124 ; presto-main/src/main/java/com/facebook/presto/importer/ImportManager.java ; Use discovery instead of hard coded HiveClient ; nan
124 ;  presto-main/src/main/java/com/facebook/presto/importer/PartitionChunkSupplier.java ; Use discovery instead of hard coded HiveClient ; nan
124 ;  presto-main/src/main/java/com/facebook/presto/importer/ShardImporter.java ; Use discovery instead of hard coded HiveClient ; nan
124 ;  presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Use discovery instead of hard coded HiveClient ; nan
124 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Use discovery instead of hard coded HiveClient ; nan
124 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Use discovery instead of hard coded HiveClient ; nan
124 ;  presto-main/src/test/java/com/facebook/presto/cli/TestServer.java ; Use discovery instead of hard coded HiveClient ; nan
125 ; presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Make catalog name a parameter ; nan
126 ; presto-main/src/main/java/com/facebook/presto/metadata/LegacyStorageManager.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/main/java/com/facebook/presto/metadata/LegacyStorageManagerFacade.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/SessionMetadata.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExecutionPlanner.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractOperatorBenchmark.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractSqlBenchmark.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountAggregationBenchmark.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/benchmark/DoubleSumAggregationBenchmark.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashAggregationBenchmark.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/benchmark/InMemoryOrderByBenchmark.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/benchmark/PredicateFilterBenchmark.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/benchmark/RawStreamingBenchmark.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/benchmark/Top100Benchmark.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/tpch/CachingTpchDataProvider.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/tpch/GeneratingTpchDataProvider.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/tpch/MetricRecordingTpchBlocksProvider.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/tpch/StatsTpchBlocksProvider.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchBlocksProvider.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchColumnHandle.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchDataProvider.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchDataStreamProvider.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchLegacyStorageManagerAdapter.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchSchema.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchSplit.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
126 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchTableHandle.java ; Migrate Tpch test data system to be compliant with Metadata and DataStreamProvider ; - This affects the benchmark code as well as the TestQueries. - There is currently a temporary hack with the LegacyStorageManager to allow it to interface with the ExecutionPlanner  but all those hacks should be removed once ExecutionPlanner switches to using DataStreamProviders.
127 ; presto-main/src/main/java/com/facebook/presto/cli/LocalQueryCommand.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/AnalysisContext.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/AnalysisResult.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/AnalyzedOutput.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/Analyzer.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/ExpressionAnalyzer.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/Field.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/NameToSlotRewriter.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/NameToSymbolRewriter.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/Slot.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/SlotAllocator.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/SlotReference.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/Symbol.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/SymbolAllocator.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/TupleDescriptor.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/AggregationNode.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/CoalesceLimits.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DependencyExtractor.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExchangeNode.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExecutionPlanner.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/FilterNode.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedFilterFunction.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedProjectionFunction.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LimitNode.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/OutputPlan.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanNode.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizer.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/Planner.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ProjectNode.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PruneRedundantProjections.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PruneUnreferencedOutputs.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/TableScan.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/TopNNode.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/UnaliasSymbolReferences.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/NodeRewriter.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/TreeRewriter.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractSqlBenchmark.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedFilterFunction.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
127 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedProjectionFunction.java ; Replace Slot/SlotReference with SQL-parseable Symbol ; Also  other minor changes in preparation for distributed planning and execution
128 ; presto-main/src/main/java/com/facebook/presto/cli/Execute.java ; Schedule improvements ; nan
128 ;  presto-main/src/main/java/com/facebook/presto/server/HttpQueryProvider.java ; Schedule improvements ; nan
128 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Schedule improvements ; nan
128 ;  presto-main/src/test/java/com/facebook/presto/server/TestHttpQueryProvider.java ; Schedule improvements ; nan
130 ; presto-main/src/main/java/com/facebook/presto/metadata/DatabaseStorageManager.java ; Various changes ; nan
131 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionHandle.java ; Distributed sql execution and other fixes ; nan
131 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Distributed sql execution and other fixes ; nan
131 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/FragmentPlanner.java ; Distributed sql execution and other fixes ; nan
131 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanFragment.java ; Distributed sql execution and other fixes ; nan
132 ; presto-main/src/main/java/com/facebook/presto/cli/Execute.java ; Initial feedback implementation ; nan
132 ;  presto-main/src/main/java/com/facebook/presto/server/HttpQueryProvider.java ; Initial feedback implementation ; nan
132 ;  presto-main/src/main/java/com/facebook/presto/server/MasterQueryState.java ; Initial feedback implementation ; nan
132 ;  presto-main/src/main/java/com/facebook/presto/server/QueryInfo.java ; Initial feedback implementation ; nan
132 ;  presto-main/src/main/java/com/facebook/presto/server/QueryState.java ; Initial feedback implementation ; nan
132 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Initial feedback implementation ; nan
132 ;  presto-main/src/test/java/com/facebook/presto/server/SimpleQueryManager.java ; Initial feedback implementation ; nan
133 ; presto-main/src/main/java/com/facebook/presto/operator/ConsolePrinter.java ; Fix NPE when printing null columns ; nan
134 ; presto-main/src/main/java/com/facebook/presto/cli/Execute.java ; Minor feedback fixes ; nan
134 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Minor feedback fixes ; nan
136 ; presto-main/src/main/java/com/facebook/presto/block/Block.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/block/BlockIterable.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/block/BlockIterables.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/block/BlockUtils.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedBlock.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/block/rle/RunLengthEncodedBlock.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedBlock.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/cli/Execute.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseStorageManager.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/operator/AlignmentOperator.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/operator/Page.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/serde/BlocksFileReader.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/serde/EncodedBlockIterable.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/server/MasterQueryState.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/server/QueryInfo.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/server/QueryState.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Add more feedback data ; nan
136 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExecutionPlanner.java ; Add more feedback data ; nan
136 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Add more feedback data ; nan
136 ;  presto-main/src/test/java/com/facebook/presto/server/SimpleQueryManager.java ; Add more feedback data ; nan
137 ; presto-main/src/main/java/com/facebook/presto/cli/Execute.java ; Fix http timeout and reliability issues ; nan
137 ;  presto-main/src/main/java/com/facebook/presto/server/HttpQuery.java ; Fix http timeout and reliability issues ; nan
137 ;  presto-main/src/main/java/com/facebook/presto/server/HttpQueryProvider.java ; Fix http timeout and reliability issues ; nan
137 ;  presto-main/src/main/java/com/facebook/presto/server/MasterQueryState.java ; Fix http timeout and reliability issues ; nan
137 ;  presto-main/src/main/java/com/facebook/presto/server/QueryDriversOperator.java ; Fix http timeout and reliability issues ; nan
137 ;  presto-main/src/main/java/com/facebook/presto/server/QueryManager.java ; Fix http timeout and reliability issues ; nan
137 ;  presto-main/src/main/java/com/facebook/presto/server/QueryResource.java ; Fix http timeout and reliability issues ; nan
137 ;  presto-main/src/main/java/com/facebook/presto/server/QueryState.java ; Fix http timeout and reliability issues ; nan
137 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Fix http timeout and reliability issues ; nan
137 ;  presto-main/src/test/java/com/facebook/presto/server/SimpleQueryManager.java ; Fix http timeout and reliability issues ; nan
137 ;  presto-main/src/test/java/com/facebook/presto/server/TestQueryState.java ; Fix http timeout and reliability issues ; nan
138 ; presto-main/src/main/java/com/facebook/presto/server/QueryState.java ; Fix bug in reporting of running tasks ; nan
139 ; presto-main/src/main/java/com/facebook/presto/block/BlockIterables.java ; Fix issue where positions are counted multiple times ; nan
142 ; presto-main/src/main/java/com/facebook/presto/GraphvizPrinter.java ; Join logical planning and other fixes ; nan
143 ; presto-main/src/main/java/com/facebook/presto/sql/compiler/Analyzer.java ; Add basic support for JOIN ... USING ; nan
144 ; presto-main/src/main/java/com/facebook/presto/cli/Execute.java ; Refactor ColumnPrinter into OutputProcessor ; nan
144 ;  presto-main/src/main/java/com/facebook/presto/cli/TuplePrinters.java ; Refactor ColumnPrinter into OutputProcessor ; nan
144 ;  presto-main/src/main/java/com/facebook/presto/metadata/DataSourceType.java ; Refactor ColumnPrinter into OutputProcessor ; nan
144 ;  presto-main/src/main/java/com/facebook/presto/operator/ConsolePrinter.java ; Refactor ColumnPrinter into OutputProcessor ; nan
144 ;  presto-main/src/main/java/com/facebook/presto/operator/OutputProcessor.java ; Refactor ColumnPrinter into OutputProcessor ; nan
144 ;  presto-main/src/main/java/com/facebook/presto/operator/OutputSink.java ; Refactor ColumnPrinter into OutputProcessor ; nan
144 ;  presto-main/src/test/java/com/facebook/presto/operator/TestConsolePrinter.java ; Refactor ColumnPrinter into OutputProcessor ; nan
144 ;  presto-main/src/test/java/com/facebook/presto/operator/TestOutputProcessor.java ; Refactor ColumnPrinter into OutputProcessor ; nan
145 ; presto-main/src/main/java/com/facebook/presto/operator/BlocksHash.java ; New hash and sort ; nan
145 ;  presto-main/src/main/java/com/facebook/presto/operator/ChannelHash.java ; New hash and sort ; nan
145 ;  presto-main/src/main/java/com/facebook/presto/operator/ChannelIndex.java ; New hash and sort ; nan
145 ;  presto-main/src/main/java/com/facebook/presto/operator/PagesIndex.java ; New hash and sort ; nan
145 ;  presto-main/src/main/java/com/facebook/presto/operator/SourceHash.java ; New hash and sort ; nan
145 ;  presto-main/src/main/java/com/facebook/presto/operator/SyntheticAddress.java ; New hash and sort ; nan
146 ; presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Single-node join plans  test and benchmark ; nan
146 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlHashJoinBenchmark.java ; Single-node join plans  test and benchmark ; nan
147 ; presto-main/src/main/java/com/facebook/presto/server/HackPlanFragmentSourceProvider.java ; Only create http client if needed ; This fixes most of the performance regression.  The HttpClient was initializing ssl for some reason.
148 ; presto-main/src/test/java/com/facebook/presto/benchmark/AbstractOperatorBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountAggregationBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountAggregationSqlBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountWithFilterSqlBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/DoubleSumAggregationBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/GroupByAggregationSqlBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/GroupBySumWithArithmeticSqlBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashAggregationBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashBuildAndJoinBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashBuildBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashJoinBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/InMemoryOrderByBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/NewInMemoryOrderByBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/PredicateFilterBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/PredicateFilterSqlBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/RawStreamingBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/RawStreamingSqlBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlDoubleSumAggregationBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlHashJoinBenchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/Top100Benchmark.java ; Devirtualize benchmark innerloop ; nan
148 ;  presto-main/src/test/java/com/facebook/presto/benchmark/Top100SqlBenchmark.java ; Devirtualize benchmark innerloop ; nan
149 ; presto-main/src/main/java/com/facebook/presto/cli/Execute.java ; Add aligned output ; nan
149 ;  presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Add aligned output ; nan
150 ; presto-main/src/main/java/com/facebook/presto/server/SqlQueryTaskManager.java ; Move uses of  session  up the analysis stack ; Split Session out of SessionMetadata and make all the components in the planning stack depend on Metadata except for the Analyzer.
150 ;  presto-main/src/main/java/com/facebook/presto/server/StaticQueryManager.java ; Move uses of  session  up the analysis stack ; Split Session out of SessionMetadata and make all the components in the planning stack depend on Metadata except for the Analyzer.
150 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/AnalysisContext.java ; Move uses of  session  up the analysis stack ; Split Session out of SessionMetadata and make all the components in the planning stack depend on Metadata except for the Analyzer.
150 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/Analyzer.java ; Move uses of  session  up the analysis stack ; Split Session out of SessionMetadata and make all the components in the planning stack depend on Metadata except for the Analyzer.
150 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/ExpressionAnalyzer.java ; Move uses of  session  up the analysis stack ; Split Session out of SessionMetadata and make all the components in the planning stack depend on Metadata except for the Analyzer.
150 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/Session.java ; Move uses of  session  up the analysis stack ; Split Session out of SessionMetadata and make all the components in the planning stack depend on Metadata except for the Analyzer.
150 ;  presto-main/src/main/java/com/facebook/presto/sql/compiler/SessionMetadata.java ; Move uses of  session  up the analysis stack ; Split Session out of SessionMetadata and make all the components in the planning stack depend on Metadata except for the Analyzer.
150 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExecutionPlanner.java ; Move uses of  session  up the analysis stack ; Split Session out of SessionMetadata and make all the components in the planning stack depend on Metadata except for the Analyzer.
150 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/FragmentPlanner.java ; Move uses of  session  up the analysis stack ; Split Session out of SessionMetadata and make all the components in the planning stack depend on Metadata except for the Analyzer.
150 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Move uses of  session  up the analysis stack ; Split Session out of SessionMetadata and make all the components in the planning stack depend on Metadata except for the Analyzer.
150 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractSqlBenchmark.java ; Move uses of  session  up the analysis stack ; Split Session out of SessionMetadata and make all the components in the planning stack depend on Metadata except for the Analyzer.
153 ; presto-main/src/main/java/com/facebook/presto/server/HackPlanFragmentSourceProvider.java ; Add PageIterator interface with close method ; nan
154 ; presto-main/src/main/java/com/facebook/presto/server/QueryState.java ; Log errors reported to the QueryState object ; nan
155 ;  presto-main/src/main/java/com/facebook/presto/operator/ForExchange.java ; Inject HttpClients ; nan
155 ;  presto-main/src/main/java/com/facebook/presto/operator/ForScheduler.java ; Inject HttpClients ; nan
155 ;  presto-main/src/main/java/com/facebook/presto/server/HackPlanFragmentSourceProvider.java ; Inject HttpClients ; nan
155 ;  presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Inject HttpClients ; nan
155 ;  presto-main/src/main/java/com/facebook/presto/server/TaskScheduler.java ; Inject HttpClients ; nan
155 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Inject HttpClients ; nan
155 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractSqlBenchmark.java ; Inject HttpClients ; nan
156 ; presto-main/src/main/java/com/facebook/presto/cli/Console.java ; Add debug flag to console ; nan
157 ; presto-main/src/main/java/com/facebook/presto/server/HttpQueryClient.java ; When exchange is closed  abort results on remote nodes ; nan
157 ;  presto-main/src/main/java/com/facebook/presto/server/QueryTaskInfo.java ; When exchange is closed  abort results on remote nodes ; nan
157 ;  presto-main/src/main/java/com/facebook/presto/server/SqlQueryTaskManager.java ; When exchange is closed  abort results on remote nodes ; nan
157 ;  presto-main/src/main/java/com/facebook/presto/server/TaskOutput.java ; When exchange is closed  abort results on remote nodes ; nan
161 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Fix bug in group by column with output alias ; nan
161 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Fix bug in group by column with output alias ; nan
162 ; presto-main/src/main/java/com/facebook/presto/server/TaskScheduler.java ; Tiny fixes ; nan
163 ; presto-main/src/main/java/com/facebook/presto/operator/FilterAndProjectOperator.java ; Fix bug in count aggregation from inline view ; This query now works:  SELECT COUNT(*) FROM (SELECT ... ) x
163 ;  presto-main/src/main/java/com/facebook/presto/operator/Page.java ; Fix bug in count aggregation from inline view ; This query now works:  SELECT COUNT(*) FROM (SELECT ... ) x
163 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Fix bug in count aggregation from inline view ; This query now works:  SELECT COUNT(*) FROM (SELECT ... ) x
164 ; presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Allow hash aggregation with no aggregation functions ; nan
164 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Allow hash aggregation with no aggregation functions ; nan
165 ;  presto-main/src/main/java/com/facebook/presto/cli/Console.java ; Add internal table support ; nan
165 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/ShowTables.java ; Add internal table support ; nan
165 ;  presto-main/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Add internal table support ; nan
166 ; presto-main/src/main/java/com/facebook/presto/server/SqlQueryTaskManager.java ; Fix query state machine ; Fix the query and task state machines Fix bugs with communicating  no more data  via http response codes
167 ; presto-main/src/main/java/com/facebook/presto/metadata/NodeManager.java ; Schedule internal splits on current node ; nan
167 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Schedule internal splits on current node ; nan
167 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestNodeManager.java ; Schedule internal splits on current node ; nan
168 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Implement GROUP BY w/o aggregations ; nan
168 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/Planner.java ; Implement GROUP BY w/o aggregations ; nan
168 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Implement GROUP BY w/o aggregations ; nan
169 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Implement ORDER BY ; nan
169 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedLogicalPlanner.java ; Implement ORDER BY ; nan
169 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Implement ORDER BY ; nan
169 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Implement ORDER BY ; nan
169 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanSanityChecker.java ; Implement ORDER BY ; nan
169 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/Planner.java ; Implement ORDER BY ; nan
169 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/SymbolExtractor.java ; Implement ORDER BY ; nan
169 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/CoalesceLimits.java ; Implement ORDER BY ; nan
169 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneRedundantProjections.java ; Implement ORDER BY ; nan
169 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Implement ORDER BY ; nan
169 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/UnaliasSymbolReferences.java ; Implement ORDER BY ; nan
169 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanNode.java ; Implement ORDER BY ; nan
169 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanVisitor.java ; Implement ORDER BY ; nan
169 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SortNode.java ; Implement ORDER BY ; nan
169 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Implement ORDER BY ; nan
171 ; presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Fixed bug when building Sort execution plan ; nan
171 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Fixed bug when building Sort execution plan ; nan
172 ; presto-main/src/main/java/com/facebook/presto/cli/Console.java ; Cleanup and organize ; nan
172 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Cleanup and organize ; nan
174 ; presto-main/src/main/java/com/facebook/presto/cli/Execute.java ; Console improvements ; nan
174 ;  presto-main/src/main/java/com/facebook/presto/cli/Pager.java ; Console improvements ; nan
175 ; presto-main/src/main/java/com/facebook/presto/metadata/ImportColumnHandle.java ; Implement partition pruning for hive tables ; These changes depend on  https://github.com/facebook/presto-hive/pull/10
175 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Implement partition pruning for hive tables ; These changes depend on  https://github.com/facebook/presto-hive/pull/10
175 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/ComparisonExpression.java ; Implement partition pruning for hive tables ; These changes depend on  https://github.com/facebook/presto-hive/pull/10
176 ; presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Fix bug when partition key does not appear in predicate ; nan
177 ; presto-main/src/main/java/com/facebook/presto/metadata/DualTable.java ; Add dual table ; nan
177 ;  presto-main/src/main/java/com/facebook/presto/metadata/InternalMetadata.java ; Add dual table ; nan
177 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Add dual table ; nan
177 ;  presto-main/src/main/java/com/facebook/presto/split/InternalDataStreamProvider.java ; Add dual table ; nan
178 ; presto-main/src/main/java/com/facebook/presto/metadata/InternalMetadata.java ; Add system tables and add internal tables to metadata ; nan
178 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Add system tables and add internal tables to metadata ; nan
178 ;  presto-main/src/main/java/com/facebook/presto/metadata/SystemTables.java ; Add system tables and add internal tables to metadata ; nan
178 ;  presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Add system tables and add internal tables to metadata ; nan
178 ;  presto-main/src/main/java/com/facebook/presto/split/InternalDataStreamProvider.java ; Add system tables and add internal tables to metadata ; nan
179 ; presto-main/src/main/java/com/facebook/presto/cli/Console.java ; Don t add special commands to history ; nan
181 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/AnalysisResult.java ; Implement DISTINCT ; nan
181 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/AnalyzedExpression.java ; Implement DISTINCT ; nan
181 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/AnalyzedOrdering.java ; Implement DISTINCT ; nan
181 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Implement DISTINCT ; nan
181 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java ; Implement DISTINCT ; nan
181 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Implement DISTINCT ; nan
182 ; presto-main/src/main/java/com/facebook/presto/execution/ImportTableExecution.java ; Bookkeeping ; Rewrite bookkeeping objects to be correct and thread safe Added Stage abstraction Add more stats and cleanup stats collection Record exceptions in info objects and propagate to client Add multiline progress to console
182 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryStats.java ; Bookkeeping ; Rewrite bookkeeping objects to be correct and thread safe Added Stage abstraction Add more stats and cleanup stats collection Record exceptions in info objects and propagate to client Add multiline progress to console
182 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Bookkeeping ; Rewrite bookkeeping objects to be correct and thread safe Added Stage abstraction Add more stats and cleanup stats collection Record exceptions in info objects and propagate to client Add multiline progress to console
183 ; presto-main/src/main/java/com/facebook/presto/sql/planner/ChannelSymbolResolver.java ; Move allocation out of the inner loop ; A bit of a hack  but hey...
183 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedFilterFunction.java ; Move allocation out of the inner loop ; A bit of a hack  but hey...
183 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedProjectionFunction.java ; Move allocation out of the inner loop ; A bit of a hack  but hey...
185 ; presto-main/src/main/java/com/facebook/presto/execution/QueryStats.java ; Convert query queued time to mills ; nan
186 ; presto-main/src/main/java/com/facebook/presto/server/HttpQueryClient.java ; Automatically add /v1/query to end of server uri ; nan
187 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleAverageAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleMaxAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleMinAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleSumAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongAverageAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongMaxAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongMinAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongSumAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestAggregationFunction.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestCountAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestDoubleAverageAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestDoubleMaxAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestDoubleMinAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestDoubleSumAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestLongAverageAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestLongMaxAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestLongMinAggregation.java ; Add max and min aggregations ; nan
187 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestLongSumAggregation.java ; Add max and min aggregations ; nan
188 ; presto-main/src/main/java/com/facebook/presto/cli/Console.java ; Add support for MySQL ; nan
191 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Column aligned console status output format ; nan
194 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Fix stuck task issue ; nan
195 ; presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Make LocalExecutionPlanner use a visitor ; nan
196 ; presto-main/src/main/java/com/facebook/presto/cli/Console.java ; Properly handle the user aborting the pager ; nan
196 ;  presto-main/src/main/java/com/facebook/presto/cli/Pager.java ; Properly handle the user aborting the pager ; nan
196 ;  presto-main/src/main/java/com/facebook/presto/cli/QueryAbortedException.java ; Properly handle the user aborting the pager ; nan
197 ; presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Fix split reporting code ; nan
198 ; presto-main/src/main/java/com/facebook/presto/cli/ConvertCsv.java ; Get real file size for hive splits ; nan
198 ;  presto-main/src/main/java/com/facebook/presto/importer/LocalShardManager.java ; Get real file size for hive splits ; nan
198 ;  presto-main/src/main/java/com/facebook/presto/ingest/RecordProjectOperator.java ; Get real file size for hive splits ; nan
198 ;  presto-main/src/main/java/com/facebook/presto/split/ImportDataStreamProvider.java ; Get real file size for hive splits ; nan
198 ;  presto-main/src/main/java/com/facebook/presto/tpch/GeneratingTpchDataProvider.java ; Get real file size for hive splits ; nan
198 ;  presto-main/src/test/java/com/facebook/presto/ingest/TestRecordProjectionOperator.java ; Get real file size for hive splits ; nan
198 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestDatabaseStorageManager.java ; Get real file size for hive splits ; nan
199 ; presto-main/src/main/java/com/facebook/presto/ingest/RecordProjectOperator.java ; Fix recording of actual size ; nan
200 ; presto-main/src/main/java/com/facebook/presto/tuple/TupleInfo.java ; Add benchmarks to varbinarymax + cleanup for tupleinfo ; nan
203 ; presto-main/src/main/java/com/facebook/presto/operator/InMemoryOrderByOperator.java ; Rename NewInMemoryOrderByOperator to InMemoryOrderByOperator ; Remove old InMemoryOrderByOperator code
203 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Rename NewInMemoryOrderByOperator to InMemoryOrderByOperator ; Remove old InMemoryOrderByOperator code
203 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Rename NewInMemoryOrderByOperator to InMemoryOrderByOperator ; Remove old InMemoryOrderByOperator code
203 ;  presto-main/src/test/java/com/facebook/presto/benchmark/InMemoryOrderByBenchmark.java ; Rename NewInMemoryOrderByOperator to InMemoryOrderByOperator ; Remove old InMemoryOrderByOperator code
203 ;  presto-main/src/test/java/com/facebook/presto/operator/TestInMemoryOrderByOperator.java ; Rename NewInMemoryOrderByOperator to InMemoryOrderByOperator ; Remove old InMemoryOrderByOperator code
204 ; presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; Add flag to disable import support ; nan
204 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Add flag to disable import support ; nan
204 ;  presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Add flag to disable import support ; nan
205 ; presto-main/src/main/java/com/facebook/presto/slice/Slice.java ; Hard limits ; nan
206 ; presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Show decimal values in console status ; nan
207 ; presto-main/src/main/java/com/facebook/presto/operator/AggregationOperator.java ; Flat hash aggregation ; nan
207 ;  presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Flat hash aggregation ; nan
207 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/FixedWidthAggregationFunction.java ; Flat hash aggregation ; nan
207 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/VariableWidthAggregationFunction.java ; Flat hash aggregation ; nan
207 ;  presto-main/src/main/java/com/facebook/presto/slice/Slice.java ; Flat hash aggregation ; nan
207 ;  presto-main/src/main/java/com/facebook/presto/tuple/TupleInfo.java ; Flat hash aggregation ; nan
208 ;  presto-main/src/main/java/com/facebook/presto/metadata/NodeManager.java ; Nodes must now declare supporte import clients ; nan
208 ;  presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Nodes must now declare supporte import clients ; nan
208 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Nodes must now declare supporte import clients ; nan
209 ;  presto-main/src/main/java/com/facebook/presto/importer/NodeWorkerQueue.java ; Limit target nodes for presto imports ; nan
209 ;  presto-main/src/main/java/com/facebook/presto/metadata/NodeManager.java ; Limit target nodes for presto imports ; nan
209 ;  presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Limit target nodes for presto imports ; nan
209 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Limit target nodes for presto imports ; nan
210 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Limit threads ; nan
211 ;  presto-main/src/main/java/com/facebook/presto/execution/ExecutionStats.java ; Query gc ; nan
211 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; Query gc ; nan
211 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryStats.java ; Query gc ; nan
211 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Query gc ; nan
211 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Query gc ; nan
211 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryManagerConfig.java ; Query gc ; nan
212 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/payload/EventCategoryMapProvider.java ; Add Scribe/Nectar event logging framework ; - Adds the Scribe-backed Event handling service for Presto - Adds one QueryCompletionEvent for Presto  To integrate these changes: 1) update config values: scribe.nectar.event-category-map with the event to scribe category mapping 2) Update discovery with the local scribed on each machine: curl -H  Content-Type: application/json  --data-binary  { environment : test   type : scribe   pool : general   properties :{ thrift : localhost:1456 }}  http://localhost:8411/v1/announcement/static  The Scribe category to watch is: nectar_presto_query_stats
212 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/payload/EventMappingConfiguration.java ; Add Scribe/Nectar event logging framework ; - Adds the Scribe-backed Event handling service for Presto - Adds one QueryCompletionEvent for Presto  To integrate these changes: 1) update config values: scribe.nectar.event-category-map with the event to scribe category mapping 2) Update discovery with the local scribed on each machine: curl -H  Content-Type: application/json  --data-binary  { environment : test   type : scribe   pool : general   properties :{ thrift : localhost:1456 }}  http://localhost:8411/v1/announcement/static  The Scribe category to watch is: nectar_presto_query_stats
212 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/payload/ScribeEventClient.java ; Add Scribe/Nectar event logging framework ; - Adds the Scribe-backed Event handling service for Presto - Adds one QueryCompletionEvent for Presto  To integrate these changes: 1) update config values: scribe.nectar.event-category-map with the event to scribe category mapping 2) Update discovery with the local scribed on each machine: curl -H  Content-Type: application/json  --data-binary  { environment : test   type : scribe   pool : general   properties :{ thrift : localhost:1456 }}  http://localhost:8411/v1/announcement/static  The Scribe category to watch is: nectar_presto_query_stats
212 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/payload/ScribeEventModule.java ; Add Scribe/Nectar event logging framework ; - Adds the Scribe-backed Event handling service for Presto - Adds one QueryCompletionEvent for Presto  To integrate these changes: 1) update config values: scribe.nectar.event-category-map with the event to scribe category mapping 2) Update discovery with the local scribed on each machine: curl -H  Content-Type: application/json  --data-binary  { environment : test   type : scribe   pool : general   properties :{ thrift : localhost:1456 }}  http://localhost:8411/v1/announcement/static  The Scribe category to watch is: nectar_presto_query_stats
213 ; presto-main/src/main/java/com/facebook/presto/cli/Query.java ; Handle aborting queries in console ; nan
214 ; presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Show query status during planning ; nan
215 ; presto-main/src/main/java/com/facebook/presto/importer/ImportField.java ; Pass list of columns to ImportClient ; nan
215 ;  presto-main/src/main/java/com/facebook/presto/importer/ImportManager.java ; Pass list of columns to ImportClient ; nan
215 ;  presto-main/src/main/java/com/facebook/presto/importer/PartitionChunkSupplier.java ; Pass list of columns to ImportClient ; nan
215 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Pass list of columns to ImportClient ; nan
217 ; presto-main/src/main/java/com/facebook/presto/ingest/ImportPartition.java ; Record now returns byte[] for getString() ; This depends on https://github.com/facebook/presto-hive/pull/14
217 ;  presto-main/src/main/java/com/facebook/presto/ingest/Record.java ; Record now returns byte[] for getString() ; This depends on https://github.com/facebook/presto-hive/pull/14
217 ;  presto-main/src/main/java/com/facebook/presto/ingest/RecordProjections.java ; Record now returns byte[] for getString() ; This depends on https://github.com/facebook/presto-hive/pull/14
217 ;  presto-main/src/main/java/com/facebook/presto/ingest/StringRecord.java ; Record now returns byte[] for getString() ; This depends on https://github.com/facebook/presto-hive/pull/14
217 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Record now returns byte[] for getString() ; This depends on https://github.com/facebook/presto-hive/pull/14
217 ;  presto-main/src/test/java/com/facebook/presto/ingest/TestDelimitedRecordIterable.java ; Record now returns byte[] for getString() ; This depends on https://github.com/facebook/presto-hive/pull/14
218 ; presto-main/src/main/java/com/facebook/presto/sql/parser/StatementSplitter.java ; Handle multi-line queries in console ; nan
218 ;  presto-main/src/test/java/com/facebook/presto/sql/parser/TestStatementSplitter.java ; Handle multi-line queries in console ; nan
219 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Add basic string functions ; Yes  the function invocation is a horrible hack and needs to be implemented correctly.
219 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/StringFunctions.java ; Add basic string functions ; Yes  the function invocation is a horrible hack and needs to be implemented correctly.
219 ;  presto-main/src/test/java/com/facebook/presto/TestFunctions.java ; Add basic string functions ; Yes  the function invocation is a horrible hack and needs to be implemented correctly.
220 ;  presto-main/src/main/java/com/facebook/presto/cli/Console.java ; Handle user interrupt (ctrl-C) in console ; nan
221 ; presto-main/src/main/java/com/facebook/presto/importer/LocalShardManager.java ; Change to RecordCursor and pass column ids instead of names to hive client API  ; nan
221 ;  presto-main/src/main/java/com/facebook/presto/ingest/RecordProjectOperator.java ; Change to RecordCursor and pass column ids instead of names to hive client API  ; nan
221 ;  presto-main/src/main/java/com/facebook/presto/metadata/ImportColumnHandle.java ; Change to RecordCursor and pass column ids instead of names to hive client API  ; nan
221 ;  presto-main/src/main/java/com/facebook/presto/split/ImportDataStreamProvider.java ; Change to RecordCursor and pass column ids instead of names to hive client API  ; nan
221 ;  presto-main/src/main/java/com/facebook/presto/tpch/GeneratingTpchDataProvider.java ; Change to RecordCursor and pass column ids instead of names to hive client API  ; nan
221 ;  presto-main/src/test/java/com/facebook/presto/ingest/InMemoryRecordSet.java ; Change to RecordCursor and pass column ids instead of names to hive client API  ; nan
221 ;  presto-main/src/test/java/com/facebook/presto/ingest/TestRecordProjectionOperator.java ; Change to RecordCursor and pass column ids instead of names to hive client API  ; nan
221 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestDatabaseStorageManager.java ; Change to RecordCursor and pass column ids instead of names to hive client API  ; nan
222 ; presto-main/src/main/java/com/facebook/presto/event/query/QueryCreatedEvent.java ; Remove QueryState from QueryCreatedEvent ; nan
222 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryMonitor.java ; Remove QueryState from QueryCreatedEvent ; nan
223 ; presto-main/src/main/java/com/facebook/presto/cli/ClientOptions.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/main/java/com/facebook/presto/cli/ClientSession.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/main/java/com/facebook/presto/cli/Console.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/main/java/com/facebook/presto/cli/Execute.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/main/java/com/facebook/presto/cli/Query.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/main/java/com/facebook/presto/cli/QueryRunner.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryManager.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/main/java/com/facebook/presto/server/HttpQueryClient.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/main/java/com/facebook/presto/server/PrestoHeaders.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/main/java/com/facebook/presto/server/QueryResource.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Session.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/test/java/com/facebook/presto/TestFunctions.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractSqlBenchmark.java ; Make catalog  schema and user configurable in client ; nan
223 ;  presto-main/src/test/java/com/facebook/presto/server/MockQueryManager.java ; Make catalog  schema and user configurable in client ; nan
224 ; presto-main/src/main/java/com/facebook/presto/cli/Query.java ; Partial query cancel ; nan
224 ;  presto-main/src/main/java/com/facebook/presto/server/HttpQueryClient.java ; Partial query cancel ; nan
225 ; presto-main/src/main/java/com/facebook/presto/execution/ExecutionStats.java ; Add proper cpu and user time to query stats ; nan
225 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Add proper cpu and user time to query stats ; nan
228 ; presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Improve console status printing ; nan
229 ; presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Add disabled tests for order by that highlight broken semantics ; nan
230 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java ; Functions ; nan
230 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestMathFunctions.java ; Functions ; nan
232 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java ; Implement like ; nan
232 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Implement like ; nan
232 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Implement like ; nan
232 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestConditions.java ; Implement like ; nan
233 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java ; Implement between ; nan
233 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Implement between ; nan
233 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/NodeRewriter.java ; Implement between ; nan
233 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/TreeRewriter.java ; Implement between ; nan
233 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestConditions.java ; Implement between ; nan
233 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Implement between ; nan
235 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java ; Implement IN list ; nan
235 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Implement IN list ; nan
235 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/NodeRewriter.java ; Implement IN list ; nan
235 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/TreeRewriter.java ; Implement IN list ; nan
235 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestConditions.java ; Implement IN list ; nan
235 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Implement IN list ; nan
238 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java ; Implement case statement ; nan
238 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Implement case statement ; nan
238 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/DefaultTraversalVisitor.java ; Implement case statement ; nan
238 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/NodeRewriter.java ; Implement case statement ; nan
238 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/TreeRewriter.java ; Implement case statement ; nan
238 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Implement case statement ; nan
238 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestConditions.java ; Implement case statement ; nan
238 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Implement case statement ; nan
239 ;  presto-main/src/main/java/com/facebook/presto/sql/Casts.java ; Implement cast ; nan
239 ;  presto-main/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java ; Implement cast ; nan
239 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java ; Implement cast ; nan
239 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Implement cast ; nan
239 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Implement cast ; nan
239 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/Cast.java ; Implement cast ; nan
239 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/DefaultTraversalVisitor.java ; Implement cast ; nan
239 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/NodeRewriter.java ; Implement cast ; nan
239 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/TreeRewriter.java ; Implement cast ; nan
239 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Implement cast ; nan
239 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Implement cast ; nan
242 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Implement count column ; nan
242 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountColumnAggregation.java ; Implement count column ; nan
242 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Implement count column ; nan
242 ;  presto-main/src/test/java/com/facebook/presto/operator/TestAggregationOperator.java ; Implement count column ; nan
242 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashAggregationOperator.java ; Implement count column ; nan
242 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestCountColumnAggregation.java ; Implement count column ; nan
245 ; presto-main/src/main/java/com/facebook/presto/execution/RemoteTaskFactory.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskManager.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/UnixTimeFunctions.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/server/HttpRemoteTaskFactory.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/server/QueryFragmentRequest.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/server/TaskResource.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Session.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedExecutionPlanner.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedFilterFunction.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedProjectionFunction.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractSqlBenchmark.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestUnixTimeFunctions.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/test/java/com/facebook/presto/server/MockQueryManager.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/test/java/com/facebook/presto/server/MockTaskManager.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/test/java/com/facebook/presto/server/TestHttpQueryProvider.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedFilterFunction.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
245 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedProjectionFunction.java ; Make session available to expression interpreter and functions ; Session is passed from coordiator to tasks during creation Add start time to session Change current_timestamp to use session start time
246 ;  presto-main/src/main/java/com/facebook/presto/metadata/AbstractMetadata.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/metadata/ImportMetadata.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/metadata/InformationSchemaData.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/metadata/InformationSchemaMetadata.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/metadata/Metadata.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataDao.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeMetadata.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/metadata/TestingMetadata.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/split/InternalDataStreamProvider.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/split/InternalSplit.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/ShowColumns.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/ShowTables.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
246 ;  presto-main/src/main/java/com/facebook/presto/util/MapTransformer.java ; Support SHOW TABLES and SHOW COLUMNS for Hive ; nan
248 ; presto-main/src/main/java/com/facebook/presto/ingest/RecordProjectOperator.java ; Fix null support in RecordProjectOperator ; nan
249 ; presto-main/src/main/java/com/facebook/presto/metadata/InternalMetadata.java ; Fixes for metadata ; nan
251 ;  presto-main/src/main/java/com/facebook/presto/metadata/AbstractMetadata.java ; Add SHOW PARTITIONS for Hive ; nan
251 ;  presto-main/src/main/java/com/facebook/presto/metadata/ImportMetadata.java ; Add SHOW PARTITIONS for Hive ; nan
251 ;  presto-main/src/main/java/com/facebook/presto/metadata/InformationSchemaData.java ; Add SHOW PARTITIONS for Hive ; nan
251 ;  presto-main/src/main/java/com/facebook/presto/metadata/InformationSchemaMetadata.java ; Add SHOW PARTITIONS for Hive ; nan
251 ;  presto-main/src/main/java/com/facebook/presto/metadata/Metadata.java ; Add SHOW PARTITIONS for Hive ; nan
251 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Add SHOW PARTITIONS for Hive ; nan
251 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeMetadata.java ; Add SHOW PARTITIONS for Hive ; nan
251 ;  presto-main/src/main/java/com/facebook/presto/metadata/TestingMetadata.java ; Add SHOW PARTITIONS for Hive ; nan
251 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Add SHOW PARTITIONS for Hive ; nan
251 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Add SHOW PARTITIONS for Hive ; nan
251 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/ShowPartitions.java ; Add SHOW PARTITIONS for Hive ; nan
253 ; presto-main/src/main/java/com/facebook/presto/metadata/InformationSchemaData.java ; Use dynamic columns for SHOW PARTITIONS output ; nan
253 ;  presto-main/src/main/java/com/facebook/presto/metadata/InformationSchemaMetadata.java ; Use dynamic columns for SHOW PARTITIONS output ; nan
253 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Use dynamic columns for SHOW PARTITIONS output ; nan
253 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/QueryUtil.java ; Use dynamic columns for SHOW PARTITIONS output ; nan
254 ; presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; Announce presto coordinators ; nan
254 ;  presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Announce presto coordinators ; nan
254 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryManagerConfig.java ; Announce presto coordinators ; nan
255 ; presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Make hive chunk size configurable ; nan
255 ;  presto-main/src/main/java/com/facebook/presto/split/HiveClientConfig.java ; Make hive chunk size configurable ; nan
255 ;  presto-main/src/main/java/com/facebook/presto/split/ImportClientFactory.java ; Make hive chunk size configurable ; nan
255 ;  presto-main/src/test/java/com/facebook/presto/split/TestHiveClientConfig.java ; Make hive chunk size configurable ; nan
255 ;  presto-main/src/test/java/com/facebook/presto/split/TestImportClientFactory.java ; Make hive chunk size configurable ; nan
256 ; presto-main/src/main/java/com/facebook/presto/event/query/QueryCompletionEvent.java ; Add event metrics for cumulative split wall and cpu time etc ; Let me know if this is what you guys were looking for or if there are any other metrics you wanted.
257 ;  presto-main/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Fix parsing of non-reserved keywords ; nan
258 ; presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Optimize projections and filters during logical planning ; nan
258 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Optimize projections and filters during logical planning ; nan
258 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java ; Optimize projections and filters during logical planning ; nan
258 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SimplifyExpressions.java ; Optimize projections and filters during logical planning ; nan
258 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Optimize projections and filters during logical planning ; nan
258 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractSqlBenchmark.java ; Optimize projections and filters during logical planning ; nan
258 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Optimize projections and filters during logical planning ; nan
259 ; presto-main/src/main/java/com/facebook/presto/cli/AlignedTuplePrinter.java ; Fix aligned output for multi-line text ; nan
259 ;  presto-main/src/test/java/com/facebook/presto/cli/TestAlignedTuplePrinter.java ; Fix aligned output for multi-line text ; nan
264 ; presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountColumnAggregation.java ; Count column should return 0 if all values are null ; nan
264 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Count column should return 0 if all values are null ; nan
265 ; presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestCountColumnAggregation.java ; Fix broken tests for count column ; nan
266 ; presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Remove unused variable ; nan
267 ; presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Allow stages with no tasks to fix issue #260 ; nan
267 ;  presto-main/src/main/java/com/facebook/presto/server/QueryDriversOperator.java ; Allow stages with no tasks to fix issue #260 ; nan
267 ;  presto-main/src/test/java/com/facebook/presto/server/TestHttpQueryProvider.java ; Allow stages with no tasks to fix issue #260 ; nan
267 ;  presto-main/src/test/java/com/facebook/presto/server/TestQueryDriversOperator.java ; Allow stages with no tasks to fix issue #260 ; nan
268 ; presto-main/src/main/java/com/facebook/presto/sql/planner/ChannelSymbolResolver.java ; Optimize symbol -> channel/field mapping during expression interpretation ; nan
268 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Optimize symbol -> channel/field mapping during expression interpretation ; nan
268 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InputResolver.java ; Optimize symbol -> channel/field mapping during expression interpretation ; nan
268 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedFilterFunction.java ; Optimize symbol -> channel/field mapping during expression interpretation ; nan
268 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedProjectionFunction.java ; Optimize symbol -> channel/field mapping during expression interpretation ; nan
268 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/SymbolToInputRewriter.java ; Optimize symbol -> channel/field mapping during expression interpretation ; nan
268 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/TupleInputResolver.java ; Optimize symbol -> channel/field mapping during expression interpretation ; nan
268 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Optimize symbol -> channel/field mapping during expression interpretation ; nan
268 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/InputReference.java ; Optimize symbol -> channel/field mapping during expression interpretation ; nan
269 ; presto-main/src/main/java/com/facebook/presto/cli/Query.java ; Print results normally for a query with no rows	 ; nan
270 ; presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Allow null stageinfos when computing global stats ; nan
270 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryMonitor.java ; Allow null stageinfos when computing global stats ; nan
270 ;  presto-main/src/main/java/com/facebook/presto/execution/StageInfo.java ; Allow null stageinfos when computing global stats ; nan
272 ; presto-main/src/main/java/com/facebook/presto/event/query/QueryCompletionEvent.java ; Add logging for user  catalog  schema ; nan
272 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryCreatedEvent.java ; Add logging for user  catalog  schema ; nan
272 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryMonitor.java ; Add logging for user  catalog  schema ; nan
272 ;  presto-main/src/main/java/com/facebook/presto/execution/ImportTableExecution.java ; Add logging for user  catalog  schema ; nan
272 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java ; Add logging for user  catalog  schema ; nan
272 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Add logging for user  catalog  schema ; nan
272 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Add logging for user  catalog  schema ; nan
272 ;  presto-main/src/test/java/com/facebook/presto/server/MockQueryManager.java ; Add logging for user  catalog  schema ; nan
274 ; presto-main/src/main/java/com/facebook/presto/cli/AlignedTuplePrinter.java ; Fix NPE and remove OutputStats ; nan
274 ;  presto-main/src/main/java/com/facebook/presto/cli/DelimitedTuplePrinter.java ; Fix NPE and remove OutputStats ; nan
274 ;  presto-main/src/main/java/com/facebook/presto/cli/Query.java ; Fix NPE and remove OutputStats ; nan
274 ;  presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Fix NPE and remove OutputStats ; nan
274 ;  presto-main/src/main/java/com/facebook/presto/operator/OutputProcessor.java ; Fix NPE and remove OutputStats ; nan
274 ;  presto-main/src/test/java/com/facebook/presto/cli/TestAlignedTuplePrinter.java ; Fix NPE and remove OutputStats ; nan
274 ;  presto-main/src/test/java/com/facebook/presto/operator/TestOutputProcessor.java ; Fix NPE and remove OutputStats ; nan
275 ; presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Add support for non-string partition keys to split pruning ; nan
276 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/ColumnInfo.java ; Add start of a JDBC driver ; nan
276 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/Driver.java ; Add start of a JDBC driver ; nan
276 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcConnection.java ; Add start of a JDBC driver ; nan
276 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcDatabaseMetaData.java ; Add start of a JDBC driver ; nan
276 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcPreparedStatement.java ; Add start of a JDBC driver ; nan
276 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcResultSet.java ; Add start of a JDBC driver ; nan
276 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcResultSetMetaData.java ; Add start of a JDBC driver ; nan
276 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcStatement.java ; Add start of a JDBC driver ; nan
276 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryExecutor.java ; Add start of a JDBC driver ; nan
276 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/ResultsIterator.java ; Add start of a JDBC driver ; nan
276 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/UserAgentRequestFilter.java ; Add start of a JDBC driver ; nan
276 ;  presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestDriver.java ; Add start of a JDBC driver ; nan
277 ; presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Covnert info stats objects to use DataSize and Duration ; nan
277 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryCompletionEvent.java ; Covnert info stats objects to use DataSize and Duration ; nan
277 ;  presto-main/src/main/java/com/facebook/presto/execution/ExecutionStats.java ; Covnert info stats objects to use DataSize and Duration ; nan
277 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryStats.java ; Covnert info stats objects to use DataSize and Duration ; nan
278 ; presto-main/src/main/java/com/facebook/presto/server/HttpQueryClient.java ; Fix console problems ; nan
279 ; presto-main/src/main/java/com/facebook/presto/sql/ExpressionOptimizer.java ; Remove unused class ; nan
280 ; presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Add per-node avg stats to console in debug mode ; nan
281 ; presto-main/src/main/java/com/facebook/presto/split/SplitAssignments.java ; Improve split assignment algorithm ; The existing algorithm chooses a node for each split by drawing from a random uniform distribution.This results in a non-uniform (poisson-like) distribution for splits per node.  The updated algorithm emulates a least-load load balancing algorithm by assigning each split to the node with the smallest number of assignments.
281 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedExecutionPlanner.java ; Improve split assignment algorithm ; The existing algorithm chooses a node for each split by drawing from a random uniform distribution.This results in a non-uniform (poisson-like) distribution for splits per node.  The updated algorithm emulates a least-load load balancing algorithm by assigning each split to the node with the smallest number of assignments.
282 ; presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Fix issue when partition keys are strings ; nan
285 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/ColumnInfo.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/Driver.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcConnection.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcDatabaseMetaData.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcPreparedStatement.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcResultSet.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcResultSetMetaData.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcStatement.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryExecutor.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/ResultsIterator.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/UserAgentRequestFilter.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestDriver.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-main/src/main/java/com/facebook/presto/cli/Query.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
285 ;  presto-main/src/main/java/com/facebook/presto/server/HttpQueryClient.java ; Make presto build in eclipse ; exclude the dependency:copy goal because eclipse can not handle it.
288 ;  presto-main/src/main/java/com/facebook/presto/metadata/AbstractMetadata.java ; Add SHOW FUNCTIONS ; nan
288 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Add SHOW FUNCTIONS ; nan
288 ;  presto-main/src/main/java/com/facebook/presto/metadata/InformationSchemaData.java ; Add SHOW FUNCTIONS ; nan
288 ;  presto-main/src/main/java/com/facebook/presto/metadata/InformationSchemaMetadata.java ; Add SHOW FUNCTIONS ; nan
288 ;  presto-main/src/main/java/com/facebook/presto/metadata/Metadata.java ; Add SHOW FUNCTIONS ; nan
288 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Add SHOW FUNCTIONS ; nan
288 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeMetadata.java ; Add SHOW FUNCTIONS ; nan
288 ;  presto-main/src/main/java/com/facebook/presto/metadata/TestingMetadata.java ; Add SHOW FUNCTIONS ; nan
288 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/UnixTimeFunctions.java ; Add SHOW FUNCTIONS ; nan
288 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Add SHOW FUNCTIONS ; nan
288 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Add SHOW FUNCTIONS ; nan
288 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/ShowFunctions.java ; Add SHOW FUNCTIONS ; nan
290 ; presto-main/src/test/java/com/facebook/presto/server/TestQueryDriversOperator.java ; Disable broken test ; nan
292 ; presto-main/src/test/java/com/facebook/presto/execution/TestQueryManagerConfig.java ; Fix TestQueryManagerConfig test ; nan
293 ; presto-main/src/main/java/com/facebook/presto/operator/AbstractPageIterator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/main/java/com/facebook/presto/operator/AggregationOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/main/java/com/facebook/presto/operator/HashJoinOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/main/java/com/facebook/presto/operator/InMemoryOrderByOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/main/java/com/facebook/presto/operator/PagesIndex.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/main/java/com/facebook/presto/operator/SourceHash.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/main/java/com/facebook/presto/operator/SourceHashProvider.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/main/java/com/facebook/presto/operator/TopNOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/test/java/com/facebook/presto/ingest/TestImportingOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/test/java/com/facebook/presto/operator/BlockingOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/test/java/com/facebook/presto/operator/CancelTester.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/test/java/com/facebook/presto/operator/ExceptionOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/test/java/com/facebook/presto/operator/TestAggregationOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/test/java/com/facebook/presto/operator/TestAlignmentOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/test/java/com/facebook/presto/operator/TestFilterAndProjectOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashAggregationOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashJoinOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/test/java/com/facebook/presto/operator/TestInMemoryOrderByOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/test/java/com/facebook/presto/operator/TestLimitOperator.java ; Fix cancel for operators ; nan
293 ;  presto-main/src/test/java/com/facebook/presto/operator/TestTopNOperator.java ; Fix cancel for operators ; nan
296 ; presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Add disabled test for self joins ; nan
298 ; presto-main/src/test/java/com/facebook/presto/TestQueries.java ; add statistic aggregation functions ; add standard deviation and variance aggregation for int64 and double for sample and population. 
299 ; presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Hive progress ; nan
302 ;  presto-spi/src/main/java/com/facebook/presto/spi/ImportClient.java ; Move SPI to separate module ; nan
302 ;  presto-spi/src/main/java/com/facebook/presto/spi/ObjectNotFoundException.java ; Move SPI to separate module ; nan
302 ;  presto-spi/src/main/java/com/facebook/presto/spi/PartitionChunk.java ; Move SPI to separate module ; nan
302 ;  presto-spi/src/main/java/com/facebook/presto/spi/PartitionInfo.java ; Move SPI to separate module ; nan
302 ;  presto-spi/src/main/java/com/facebook/presto/spi/RecordCursor.java ; Move SPI to separate module ; nan
302 ;  presto-spi/src/main/java/com/facebook/presto/spi/SchemaField.java ; Move SPI to separate module ; nan
303 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Add get_json_scalar function ; nan
303 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/JsonExtract.java ; Add get_json_scalar function ; nan
303 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/JsonFunctions.java ; Add get_json_scalar function ; nan
303 ;  presto-main/src/main/java/com/facebook/presto/util/ThreadLocalCache.java ; Add get_json_scalar function ; nan
303 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestJsonExtract.java ; Add get_json_scalar function ; nan
303 ;  presto-main/src/test/java/com/facebook/presto/util/TestThreadLocalCache.java ; Add get_json_scalar function ; nan
304 ; presto-main/src/main/java/com/facebook/presto/cli/Console.java ; Add basic help command ; nan
304 ;  presto-main/src/main/java/com/facebook/presto/cli/Help.java ; Add basic help command ; nan
305 ; presto-main/src/main/java/com/facebook/presto/sql/ExpressionUtils.java ; Push down predicates through joins for partition pruning ; nan
305 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedExecutionPlanner.java ; Push down predicates through joins for partition pruning ; nan
307 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionInfo.java ; Add support for non-deterministic functions ; nan
307 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Add support for non-deterministic functions ; nan
307 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java ; Add support for non-deterministic functions ; nan
307 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/ScalarFunction.java ; Add support for non-deterministic functions ; nan
307 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Add support for non-deterministic functions ; nan
307 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Add support for non-deterministic functions ; nan
307 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedFilterFunction.java ; Add support for non-deterministic functions ; nan
307 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedProjectionFunction.java ; Add support for non-deterministic functions ; nan
307 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SimplifyExpressions.java ; Add support for non-deterministic functions ; nan
307 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Add support for non-deterministic functions ; nan
308 ; presto-jdbc/src/main/java/com/facebook/presto/jdbc/Driver.java ; Minor JDBC driver improvements ; nan
308 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcConnection.java ; Minor JDBC driver improvements ; nan
308 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcResultSet.java ; Minor JDBC driver improvements ; nan
310 ; presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Plan rewriter framework + migrate optimizations to it ; nan
311 ; presto-main/src/main/java/com/facebook/presto/sql/tree/TreeRewriter.java ; Fix bug when rewriting NegativeExpression ; It was discarding the rewritten subexpression of arithmetic negations
311 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Fix bug when rewriting NegativeExpression ; It was discarding the rewritten subexpression of arithmetic negations
312 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Show proper messages for parser errors ; nan
312 ;  presto-main/src/main/java/com/facebook/presto/sql/parser/ParsingException.java ; Show proper messages for parser errors ; nan
312 ;  presto-main/src/main/java/com/facebook/presto/sql/parser/SqlParser.java ; Show proper messages for parser errors ; nan
312 ;  presto-main/src/main/java/com/facebook/presto/sql/parser/StatementSplitter.java ; Show proper messages for parser errors ; nan
312 ;  presto-main/src/main/java/com/facebook/presto/sql/parser/TokenizationException.java ; Show proper messages for parser errors ; nan
312 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/Serialization.java ; Show proper messages for parser errors ; nan
312 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Show proper messages for parser errors ; nan
312 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractSqlBenchmark.java ; Show proper messages for parser errors ; nan
312 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Show proper messages for parser errors ; nan
312 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Show proper messages for parser errors ; nan
312 ;  presto-main/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Show proper messages for parser errors ; nan
312 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedFilterFunction.java ; Show proper messages for parser errors ; nan
312 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedProjectionFunction.java ; Show proper messages for parser errors ; nan
313 ; presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Bypass interpreter for identity projections ; nan
315 ; presto-main/src/main/java/com/facebook/presto/util/GraphvizPrinter.java ; Move GraphvizPrinter to util with minor cleanup ; nan
316 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Add SHOW TABLES with LIKE predicate ; nan
316 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/ShowTables.java ; Add SHOW TABLES with LIKE predicate ; nan
316 ;  presto-main/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Add SHOW TABLES with LIKE predicate ; nan
317 ; presto-main/src/main/java/com/facebook/presto/execution/PageBuffer.java ; Exchange operator ; nan
317 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskOutput.java ; Exchange operator ; nan
317 ;  presto-main/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Exchange operator ; nan
317 ;  presto-main/src/test/java/com/facebook/presto/server/TestExchangeOperator.java ; Exchange operator ; nan
317 ;  presto-main/src/test/java/com/facebook/presto/server/TestPageBuffer.java ; Exchange operator ; nan
318 ; presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcResultSet.java ; Improve cancelation of queries ; nan
318 ;  presto-main/src/main/java/com/facebook/presto/cli/Query.java ; Improve cancelation of queries ; nan
318 ;  presto-main/src/main/java/com/facebook/presto/server/HttpQueryClient.java ; Improve cancelation of queries ; nan
319 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionInfo.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/AggregationFunctionDefinition.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/AggregationOperator.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AbstractVarianceAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountColumnAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleAverageAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleMaxAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleMinAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleSumAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleVarianceAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/FixedWidthAggregationFunction.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongAverageAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongMaxAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongMinAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongSumAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongVarianceAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/VarBinaryMaxAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/VarBinaryMinAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/VariableWidthAggregationFunction.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/main/java/com/facebook/presto/tuple/Tuple.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountAggregationBenchmark.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/test/java/com/facebook/presto/benchmark/DoubleSumAggregationBenchmark.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashAggregationBenchmark.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/test/java/com/facebook/presto/block/BlockAssertions.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/test/java/com/facebook/presto/operator/TestAggregationOperator.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashAggregationOperator.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestAggregationFunction.java ; Add support for inputs at fields index > 0 for aggregations ; nan
319 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestCountAggregation.java ; Add support for inputs at fields index > 0 for aggregations ; nan
320 ; presto-main/src/main/java/com/facebook/presto/split/ImportClientFactory.java ; Presto Main part for the Hive Metadata caching implementation ; - Add Metadata SPI - Use CachingHiveClient in the HiveClientFactory.
320 ;  presto-main/src/test/java/com/facebook/presto/split/TestImportClientFactory.java ; Presto Main part for the Hive Metadata caching implementation ; - Add Metadata SPI - Use CachingHiveClient in the HiveClientFactory.
320 ;  presto-spi/src/main/java/com/facebook/presto/spi/MetadataCache.java ; Presto Main part for the Hive Metadata caching implementation ; - Add Metadata SPI - Use CachingHiveClient in the HiveClientFactory.
322 ; presto-main/src/main/java/com/facebook/presto/event/query/QueryCompletionEvent.java ; Code formatting ; nan
322 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/payload/PayloadBuilder.java ; Code formatting ; nan
322 ;  presto-main/src/main/java/com/facebook/presto/operator/ChannelIndex.java ; Code formatting ; nan
322 ;  presto-main/src/main/java/com/facebook/presto/operator/PagesIndex.java ; Code formatting ; nan
322 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AbstractVarianceAggregation.java ; Code formatting ; nan
322 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleVarianceAggregation.java ; Code formatting ; nan
322 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/JsonExtract.java ; Code formatting ; nan
322 ;  presto-main/src/main/java/com/facebook/presto/slice/SliceOutput.java ; Code formatting ; nan
322 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Code formatting ; nan
322 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/UnaliasSymbolReferences.java ; Code formatting ; nan
323 ; presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Fix hash aggregation operator slice sizing bug ; Fixes this:  presto> select ds  stddev(cpu_msec) from hive_silver.default.hivedba_query_stats group by ds limit 20  Query 0 failed: Task 0.0.0 failed: java.lang.IndexOutOfBoundsException: end index (2625) must not be greater than size (2621)     at com.google.common.base.Preconditions.checkPositionIndexes(Preconditions.jav a:388)     at com.facebook.presto.slice.Slice.checkIndexLength(Slice.java:914)     at com.facebook.presto.slice.Slice.setDouble(Slice.java:480)     at com.facebook.presto.tuple.TupleInfo.setDouble(TupleInfo.java:337)     at com.facebook.presto.operator.aggregation.AbstractVarianceAggregation.initia lize(AbstractVarianceAggregation.java:69)     at com.facebook.presto.operator.HashAggregationOperator$FixedWidthAggregator.i nitialize(HashAggregationOperator.java:350)     at com.facebook.presto.operator.HashAggregationOperator$HashAggregationIterato r.aggregate(HashAggregationOperator.java:191)     at com.facebook.presto.operator.HashAggregationOperator$HashAggregationIterato r.computeNext(HashAggregationOperator.java:234)     at com.facebook.presto.operator.AbstractPageIterator.tryToComputeNext(Abstract PageIterator.java:137)     at com.facebook.presto.operator.AbstractPageIterator.hasNext(AbstractPageItera tor.java:130)     at com.facebook.presto.operator.FilterAndProjectOperator$FilterAndProjectItera tor.computeNext(FilterAndProjectOperator.java:84)     at com.facebook.presto.operator.AbstractPageIterator.tryToComputeNext(Abstract PageIterator.java:137)     at com.facebook.presto.operator.AbstractPageIterator.hasNext(AbstractPageItera tor.java:130)     at com.facebook.presto.operator.LimitOperator$LimitIterator.computeNext(LimitO perator.java:60)     at com.facebook.presto.operator.AbstractPageIterator.tryToComputeNext(Abstract PageIterator.java:137)     at com.facebook.presto.operator.AbstractPageIterator.hasNext(AbstractPageItera tor.java:130)     at com.facebook.presto.execution.SqlTaskExecution$SplitWorker.call(SqlTaskExec ution.java:269)     at com.facebook.presto.execution.SqlTaskExecution.run(SqlTaskExecution.java:12 6)     at com.facebook.presto.execution.SqlTaskManager$TaskStarter.run(SqlTaskManager .java:282)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)     at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)     at java.util.concurrent.FutureTask.run(FutureTask.java:166)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1 110)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java: 603)     at java.lang.Thread.run(Thread.java:722) java.lang.IndexOutOfBoundsException: end index (2625) must not be greater than size (2621)     at com.google.common.base.Preconditions.checkPositionIndexes(Preconditions.jav a:388)     at com.facebook.presto.slice.Slice.checkIndexLength(Slice.java:914)     at com.facebook.presto.slice.Slice.setDouble(Slice.java:480)     at com.facebook.presto.tuple.TupleInfo.setDouble(TupleInfo.java:337)     at com.facebook.presto.operator.aggregation.AbstractVarianceAggregation.initia lize(AbstractVarianceAggregation.java:69)     at com.facebook.presto.operator.HashAggregationOperator$FixedWidthAggregator.i nitialize(HashAggregationOperator.java:350)     at com.facebook.presto.operator.HashAggregationOperator$HashAggregationIterato r.aggregate(HashAggregationOperator.java:191)     at com.facebook.presto.operator.HashAggregationOperator$HashAggregationIterato r.computeNext(HashAggregationOperator.java:234)     at com.facebook.presto.operator.AbstractPageIterator.tryToComputeNext(Abstract PageIterator.java:137)     at com.facebook.presto.operator.AbstractPageIterator.hasNext(AbstractPageItera tor.java:130)     at com.facebook.presto.operator.FilterAndProjectOperator$FilterAndProjectItera tor.computeNext(FilterAndProjectOperator.java:84)     at com.facebook.presto.operator.AbstractPageIterator.tryToComputeNext(Abstract PageIterator.java:137)     at com.facebook.presto.operator.AbstractPageIterator.hasNext(AbstractPageItera tor.java:130)     at com.facebook.presto.operator.LimitOperator$LimitIterator.computeNext(LimitO perator.java:60)     at com.facebook.presto.operator.AbstractPageIterator.tryToComputeNext(Abstract PageIterator.java:137)     at com.facebook.presto.operator.AbstractPageIterator.hasNext(AbstractPageItera tor.java:130)     at com.facebook.presto.execution.SqlTaskExecution$SplitWorker.call(SqlTaskExec ution.java:269)     at com.facebook.presto.execution.SqlTaskExecution.run(SqlTaskExecution.java:12 6)     at com.facebook.presto.execution.SqlTaskManager$TaskStarter.run(SqlTaskManager .java:282)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)     at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)     at java.util.concurrent.FutureTask.run(FutureTask.java:166)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1 110)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java: 603)     at java.lang.Thread.run(Thread.java:722)
323 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashAggregationOperator.java ; Fix hash aggregation operator slice sizing bug ; Fixes this:  presto> select ds  stddev(cpu_msec) from hive_silver.default.hivedba_query_stats group by ds limit 20  Query 0 failed: Task 0.0.0 failed: java.lang.IndexOutOfBoundsException: end index (2625) must not be greater than size (2621)     at com.google.common.base.Preconditions.checkPositionIndexes(Preconditions.jav a:388)     at com.facebook.presto.slice.Slice.checkIndexLength(Slice.java:914)     at com.facebook.presto.slice.Slice.setDouble(Slice.java:480)     at com.facebook.presto.tuple.TupleInfo.setDouble(TupleInfo.java:337)     at com.facebook.presto.operator.aggregation.AbstractVarianceAggregation.initia lize(AbstractVarianceAggregation.java:69)     at com.facebook.presto.operator.HashAggregationOperator$FixedWidthAggregator.i nitialize(HashAggregationOperator.java:350)     at com.facebook.presto.operator.HashAggregationOperator$HashAggregationIterato r.aggregate(HashAggregationOperator.java:191)     at com.facebook.presto.operator.HashAggregationOperator$HashAggregationIterato r.computeNext(HashAggregationOperator.java:234)     at com.facebook.presto.operator.AbstractPageIterator.tryToComputeNext(Abstract PageIterator.java:137)     at com.facebook.presto.operator.AbstractPageIterator.hasNext(AbstractPageItera tor.java:130)     at com.facebook.presto.operator.FilterAndProjectOperator$FilterAndProjectItera tor.computeNext(FilterAndProjectOperator.java:84)     at com.facebook.presto.operator.AbstractPageIterator.tryToComputeNext(Abstract PageIterator.java:137)     at com.facebook.presto.operator.AbstractPageIterator.hasNext(AbstractPageItera tor.java:130)     at com.facebook.presto.operator.LimitOperator$LimitIterator.computeNext(LimitO perator.java:60)     at com.facebook.presto.operator.AbstractPageIterator.tryToComputeNext(Abstract PageIterator.java:137)     at com.facebook.presto.operator.AbstractPageIterator.hasNext(AbstractPageItera tor.java:130)     at com.facebook.presto.execution.SqlTaskExecution$SplitWorker.call(SqlTaskExec ution.java:269)     at com.facebook.presto.execution.SqlTaskExecution.run(SqlTaskExecution.java:12 6)     at com.facebook.presto.execution.SqlTaskManager$TaskStarter.run(SqlTaskManager .java:282)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)     at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)     at java.util.concurrent.FutureTask.run(FutureTask.java:166)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1 110)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java: 603)     at java.lang.Thread.run(Thread.java:722) java.lang.IndexOutOfBoundsException: end index (2625) must not be greater than size (2621)     at com.google.common.base.Preconditions.checkPositionIndexes(Preconditions.jav a:388)     at com.facebook.presto.slice.Slice.checkIndexLength(Slice.java:914)     at com.facebook.presto.slice.Slice.setDouble(Slice.java:480)     at com.facebook.presto.tuple.TupleInfo.setDouble(TupleInfo.java:337)     at com.facebook.presto.operator.aggregation.AbstractVarianceAggregation.initia lize(AbstractVarianceAggregation.java:69)     at com.facebook.presto.operator.HashAggregationOperator$FixedWidthAggregator.i nitialize(HashAggregationOperator.java:350)     at com.facebook.presto.operator.HashAggregationOperator$HashAggregationIterato r.aggregate(HashAggregationOperator.java:191)     at com.facebook.presto.operator.HashAggregationOperator$HashAggregationIterato r.computeNext(HashAggregationOperator.java:234)     at com.facebook.presto.operator.AbstractPageIterator.tryToComputeNext(Abstract PageIterator.java:137)     at com.facebook.presto.operator.AbstractPageIterator.hasNext(AbstractPageItera tor.java:130)     at com.facebook.presto.operator.FilterAndProjectOperator$FilterAndProjectItera tor.computeNext(FilterAndProjectOperator.java:84)     at com.facebook.presto.operator.AbstractPageIterator.tryToComputeNext(Abstract PageIterator.java:137)     at com.facebook.presto.operator.AbstractPageIterator.hasNext(AbstractPageItera tor.java:130)     at com.facebook.presto.operator.LimitOperator$LimitIterator.computeNext(LimitO perator.java:60)     at com.facebook.presto.operator.AbstractPageIterator.tryToComputeNext(Abstract PageIterator.java:137)     at com.facebook.presto.operator.AbstractPageIterator.hasNext(AbstractPageItera tor.java:130)     at com.facebook.presto.execution.SqlTaskExecution$SplitWorker.call(SqlTaskExec ution.java:269)     at com.facebook.presto.execution.SqlTaskExecution.run(SqlTaskExecution.java:12 6)     at com.facebook.presto.execution.SqlTaskManager$TaskStarter.run(SqlTaskManager .java:282)     at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)     at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)     at java.util.concurrent.FutureTask.run(FutureTask.java:166)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1 110)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java: 603)     at java.lang.Thread.run(Thread.java:722)
325 ; presto-main/src/main/java/com/facebook/presto/execution/ImportTableExecution.java ; Fix table imports ; nan
325 ;  presto-main/src/main/java/com/facebook/presto/importer/ImportField.java ; Fix table imports ; nan
325 ;  presto-main/src/main/java/com/facebook/presto/importer/ImportManager.java ; Fix table imports ; nan
325 ;  presto-main/src/main/java/com/facebook/presto/importer/LocalShardManager.java ; Fix table imports ; nan
325 ;  presto-main/src/main/java/com/facebook/presto/ingest/ImportSchemaUtil.java ; Fix table imports ; nan
325 ;  presto-main/src/main/java/com/facebook/presto/metadata/ImportMetadata.java ; Fix table imports ; nan
326 ; presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Add JsonAvgBenchmarkResultWriter ; nan
326 ;  presto-main/src/test/java/com/facebook/presto/benchmark/JsonAvgBenchmarkResultWriter.java ; Add JsonAvgBenchmarkResultWriter ; nan
329 ; presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Handle smaller terminal windows properly ; nan
333 ; presto-main/src/main/java/com/facebook/presto/cli/Query.java ; Show query with error portion highlighted ; nan
333 ;  presto-main/src/main/java/com/facebook/presto/execution/ErrorLocation.java ; Show query with error portion highlighted ; nan
333 ;  presto-main/src/main/java/com/facebook/presto/execution/FailureInfo.java ; Show query with error portion highlighted ; nan
333 ;  presto-main/src/main/java/com/facebook/presto/sql/parser/ParsingException.java ; Show query with error portion highlighted ; nan
333 ;  presto-main/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Show query with error portion highlighted ; nan
334 ; presto-main/src/main/java/com/facebook/presto/cli/Query.java ; Add dummy EOF token when highlighting errors ; nan
335 ; presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Add support for complex join subexpressions and joins on multiple fields ; nan
337 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/JsonExtract.java ; Upgrade to latest airlift with latest jackson and switch to more efficient json ; jackson 1.9.12 fixes the bug we were seeing with nextFieldName method from jackson. The code no longer hangs when there is a space before a colon.  The JSON parsing function in Presto should be substantially more perfomant now.
338 ; presto-main/src/main/java/com/facebook/presto/sql/planner/PlanFragment.java ; Add @JsonCreator annotation to PlanFragment ; nan
339 ; presto-main/src/main/java/com/facebook/presto/cli/Help.java ; Add full syntax for SHOW TABLES to help ; nan
341 ;  presto-main/src/main/java/com/facebook/presto/sql/SqlFormatter.java ; Handle parsing doubles with exponents ; nan
341 ;  presto-main/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Handle parsing doubles with exponents ; nan
342 ; presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Fix divide by zero when no nodes ; nan
343 ; presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveClient.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveImportClientFactory.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/BoundedExecutor.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/FileStatusCallback.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/SuspendingExecutor.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestCachingHiveClient.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientChunkIteratorBackPressure.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-hive/src/test/java/com/facebook/presto/hive/util/TestAsyncRecursiveWalker.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-hive/src/test/java/com/facebook/presto/hive/util/TestSuspendingExecutor.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-main/src/main/java/com/facebook/presto/importer/PartitionChunkSupplier.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-main/src/main/java/com/facebook/presto/util/BoundedExecutor.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-main/src/test/java/com/facebook/presto/split/TestHiveClientConfig.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-main/src/test/java/com/facebook/presto/split/TestImportClientFactory.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
343 ;  presto-spi/src/main/java/com/facebook/presto/spi/ImportClient.java ; Make HiveClient PartitionChunk iteration bounded and pipelined ; Having threads block to fill a queue for an iterator turns out to be a little iffy since you need to deal with a way of cleaning up those thread resources if you never finish your iterator (especially if it is passed through an SPI).  Instead  what this does is add a SuspendingExecutor that has the ability to halt and resume tasks submitted to it without holding up thread resources. Once you tie that into the partition chunk iterator  what you have is a queue that halts tasks when it fills up  and resumes the executor when enough tasks have been drained from it without holding any thread resources.
345 ; presto-main/src/main/java/com/facebook/presto/operator/OperatorStats.java ; Update timing stats incrementally ; They were only being updated at the end of processing a split. Bytes and rows are updated incrementally so we need timings to be updated at the same rate to get consistent row and data rate reports.
347 ; presto-main/src/main/java/com/facebook/presto/sql/planner/PlanSanityChecker.java ; Add id to plan nodes and fix queries where table appears twice in the same fragment ; nan
348 ; presto-main/src/main/java/com/facebook/presto/server/ExecuteResource.java ; Add basic endpoint for query execution ; nan
348 ;  presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Add basic endpoint for query execution ; nan
349 ; presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Make plan fragment id a typed object ; nan
349 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedExecutionPlanner.java ; Make plan fragment id a typed object ; nan
349 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedLogicalPlanner.java ; Make plan fragment id a typed object ; nan
349 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanFragment.java ; Make plan fragment id a typed object ; nan
349 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/SubPlan.java ; Make plan fragment id a typed object ; nan
349 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/SubPlanBuilder.java ; Make plan fragment id a typed object ; nan
349 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/ExchangeNode.java ; Make plan fragment id a typed object ; nan
349 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanFragmentId.java ; Make plan fragment id a typed object ; nan
349 ;  presto-main/src/main/java/com/facebook/presto/util/GraphvizPrinter.java ; Make plan fragment id a typed object ; nan
349 ;  presto-main/src/test/java/com/facebook/presto/server/TestHttpQueryProvider.java ; Make plan fragment id a typed object ; nan
350 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveColumn.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-hive/src/main/java/com/facebook/presto/hive/HivePartitionChunk.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-hive/src/main/java/com/facebook/presto/hive/HivePartitionKey.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-hive/src/main/java/com/facebook/presto/hive/PathJsonDeserializer.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-hive/src/test/java/com/facebook/presto/hive/HiveImportClientFactoryTest.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryExecutor.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/cli/QueryRunner.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/event/Event.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/payload/ScribeEventClient.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/execution/ErrorLocation.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/execution/ExchangePlanFragmentSource.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/execution/ExecutionStats.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/execution/FailureInfo.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/execution/PageBufferInfo.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryStats.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/execution/StageInfo.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskInfo.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/importer/ImportField.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/ingest/SerializedPartitionChunk.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/metadata/ColumnHandle.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/metadata/DataSourceType.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionHandle.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/metadata/ImportColumnHandle.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/metadata/ImportTableHandle.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/metadata/InternalColumnHandle.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/metadata/InternalTableHandle.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeColumnHandle.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeTableHandle.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/metadata/TableHandle.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/JsonExtract.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/server/ExecuteResource.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/server/QueryFragmentRequest.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/server/ShardImport.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/split/ImportSplit.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/split/InternalSplit.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/split/NativeSplit.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/split/Split.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Session.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Symbol.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanFragment.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanFragmentSource.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/TableScanPlanFragmentSource.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/AggregationNode.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/ExchangeNode.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/FilterNode.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/LimitNode.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/OutputNode.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanFragmentId.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanNode.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanNodeId.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/ProjectNode.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SinkNode.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SortNode.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/TableScanNode.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/TopNNode.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/Serialization.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/tpch/TpchColumnHandle.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/tpch/TpchSplit.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/tpch/TpchTableHandle.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/main/java/com/facebook/presto/tuple/TupleInfo.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/test/java/com/facebook/presto/benchmark/JsonAvgBenchmarkResultWriter.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/test/java/com/facebook/presto/benchmark/JsonBenchmarkResultWriter.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/test/java/com/facebook/presto/benchmark/OdsBenchmarkResultWriter.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestJsonExtract.java ; Upgrade to Jackson 2.x ; nan
350 ;  presto-main/src/test/java/com/facebook/presto/split/TestInternalSplit.java ; Upgrade to Jackson 2.x ; nan
352 ; presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/main/java/com/facebook/presto/tpch/MetricRecordingTpchBlocksProvider.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractOperatorBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountAggregationBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountAggregationSqlBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountWithFilterSqlBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/DoubleSumAggregationBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/GroupByAggregationSqlBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/GroupBySumWithArithmeticSqlBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashAggregationBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashBuildAndJoinBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashBuildBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashJoinBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/InMemoryOrderByBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/PredicateFilterBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/PredicateFilterSqlBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/RawStreamingBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/RawStreamingSqlBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlDistinctMultipleFields.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlDistinctSingleField.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlDoubleSumAggregationBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlHashJoinBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/StatisticsBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/Top100Benchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/Top100SqlBenchmark.java ; Improve benchmarks stats ; nan
352 ;  presto-main/src/test/java/com/facebook/presto/benchmark/VarBinaryMaxAggregationSqlBenchmark.java ; Improve benchmarks stats ; nan
353 ; presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedBlock.java ; Fixes for distributed execution ; nan
353 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedBlockCursor.java ; Fixes for distributed execution ; nan
353 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedDoubleBlockCursor.java ; Fixes for distributed execution ; nan
353 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedLongBlockCursor.java ; Fixes for distributed execution ; nan
353 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedSliceBlockCursor.java ; Fixes for distributed execution ; nan
355 ;  presto-main/src/test/java/com/facebook/presto/TestQueries.java ; Add string concatenation operator ; nan
355 ;  presto-main/src/test/java/com/facebook/presto/sql/parser/TestStatementBuilder.java ; Add string concatenation operator ; nan
356 ; presto-main/src/main/java/com/facebook/presto/execution/PageBuffer.java ; Fix client latency issues  ; nan
359 ; presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcResultSet.java ; Add distributed SQL integration tests ; Note: all of the std dev and variance tests are broken in distributed mode (currently tests are disabled for those)
359 ;  presto-main/src/main/java/com/facebook/presto/cli/Query.java ; Add distributed SQL integration tests ; Note: all of the std dev and variance tests are broken in distributed mode (currently tests are disabled for those)
359 ;  presto-main/src/main/java/com/facebook/presto/metadata/TestingMetadata.java ; Add distributed SQL integration tests ; Note: all of the std dev and variance tests are broken in distributed mode (currently tests are disabled for those)
359 ;  presto-main/src/main/java/com/facebook/presto/operator/ProjectionFunctions.java ; Add distributed SQL integration tests ; Note: all of the std dev and variance tests are broken in distributed mode (currently tests are disabled for those)
359 ;  presto-main/src/main/java/com/facebook/presto/server/FullJsonResponseHandler.java ; Add distributed SQL integration tests ; Note: all of the std dev and variance tests are broken in distributed mode (currently tests are disabled for those)
359 ;  presto-main/src/main/java/com/facebook/presto/server/HttpQueryClient.java ; Add distributed SQL integration tests ; Note: all of the std dev and variance tests are broken in distributed mode (currently tests are disabled for those)
359 ;  presto-main/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Add distributed SQL integration tests ; Note: all of the std dev and variance tests are broken in distributed mode (currently tests are disabled for those)
359 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add distributed SQL integration tests ; Note: all of the std dev and variance tests are broken in distributed mode (currently tests are disabled for those)
359 ;  presto-main/src/test/java/com/facebook/presto/TestDistributedQueries.java ; Add distributed SQL integration tests ; Note: all of the std dev and variance tests are broken in distributed mode (currently tests are disabled for those)
359 ;  presto-main/src/test/java/com/facebook/presto/TestLocalQueries.java ; Add distributed SQL integration tests ; Note: all of the std dev and variance tests are broken in distributed mode (currently tests are disabled for those)
359 ;  presto-main/src/test/java/com/facebook/presto/util/MaterializedResult.java ; Add distributed SQL integration tests ; Note: all of the std dev and variance tests are broken in distributed mode (currently tests are disabled for those)
359 ;  presto-main/src/test/java/com/facebook/presto/util/MaterializedTuple.java ; Add distributed SQL integration tests ; Note: all of the std dev and variance tests are broken in distributed mode (currently tests are disabled for those)
360 ;  presto-main/src/main/java/com/facebook/presto/sql/parser/StatementSplitter.java ; Handle lexer errors properly in console ; nan
360 ;  presto-main/src/test/java/com/facebook/presto/sql/parser/TestStatementSplitter.java ; Handle lexer errors properly in console ; nan
361 ; presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix Variance and Std Dev failing distributed tests ; nan
361 ;  presto-main/src/test/java/com/facebook/presto/TestDistributedQueries.java ; Fix Variance and Std Dev failing distributed tests ; nan
363 ; presto-main/src/main/java/com/facebook/presto/cli/AlignedTuplePrinter.java ; Hackathon project - CSV output for the console ; - add command line command execution to the console - add CSV / TSV output format to the console  This implements  --execute  sql command  and sends the output to stdout. Default format is  CSV . Available formats are  CSV - comma separated TSV - tab separated CSV_HEADER - comma separated with an additional row that has the column names TSV_HEADER - tab separated with an additional row that has the column names
363 ;  presto-main/src/main/java/com/facebook/presto/cli/CSVPrinter.java ; Hackathon project - CSV output for the console ; - add command line command execution to the console - add CSV / TSV output format to the console  This implements  --execute  sql command  and sends the output to stdout. Default format is  CSV . Available formats are  CSV - comma separated TSV - tab separated CSV_HEADER - comma separated with an additional row that has the column names TSV_HEADER - tab separated with an additional row that has the column names
363 ;  presto-main/src/main/java/com/facebook/presto/cli/DelimitedTuplePrinter.java ; Hackathon project - CSV output for the console ; - add command line command execution to the console - add CSV / TSV output format to the console  This implements  --execute  sql command  and sends the output to stdout. Default format is  CSV . Available formats are  CSV - comma separated TSV - tab separated CSV_HEADER - comma separated with an additional row that has the column names TSV_HEADER - tab separated with an additional row that has the column names
363 ;  presto-main/src/main/java/com/facebook/presto/cli/Query.java ; Hackathon project - CSV output for the console ; - add command line command execution to the console - add CSV / TSV output format to the console  This implements  --execute  sql command  and sends the output to stdout. Default format is  CSV . Available formats are  CSV - comma separated TSV - tab separated CSV_HEADER - comma separated with an additional row that has the column names TSV_HEADER - tab separated with an additional row that has the column names
365 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Support SymlinkTextInputFormat for Hive ; nan
369 ; presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryExecutor.java ; Convert to Netty http client ; This depends on https://github.com/airlift/airlift/pull/39
369 ;  presto-main/src/main/java/com/facebook/presto/cli/QueryRunner.java ; Convert to Netty http client ; This depends on https://github.com/airlift/airlift/pull/39
369 ;  presto-main/src/main/java/com/facebook/presto/cli/TableNameCompleter.java ; Convert to Netty http client ; This depends on https://github.com/airlift/airlift/pull/39
369 ;  presto-main/src/test/java/com/facebook/presto/TestDistributedQueries.java ; Convert to Netty http client ; This depends on https://github.com/airlift/airlift/pull/39
369 ;  presto-main/src/test/java/com/facebook/presto/server/TestExchangeOperator.java ; Convert to Netty http client ; This depends on https://github.com/airlift/airlift/pull/39
371 ;  presto-main/src/main/java/com/facebook/presto/execution/ImportTableExecution.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/main/java/com/facebook/presto/importer/AbstractPeriodicImportRunnable.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/main/java/com/facebook/presto/importer/ForPeriodicImport.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/main/java/com/facebook/presto/importer/ImportManager.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/main/java/com/facebook/presto/importer/JobStateFactory.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportConfig.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportController.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportDao.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportJob.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportJobResource.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportManager.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportRun.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportRunnable.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/main/java/com/facebook/presto/importer/PersistentPeriodicImportJob.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/main/java/com/facebook/presto/util/Threads.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-main/src/test/java/com/facebook/presto/importer/TestPeriodicImportDao.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
371 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Add cron based import into Presto. ; This is driven by a configurable background service that accepts import requests through a rest endpoint.
372 ; presto-main/src/main/java/com/facebook/presto/event/scribe/client/AsyncScribeLogger.java ; Add shutdown for executors ; nan
372 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Add shutdown for executors ; nan
372 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Add shutdown for executors ; nan
372 ;  presto-main/src/main/java/com/facebook/presto/importer/NodeWorkerQueue.java ; Add shutdown for executors ; nan
372 ;  presto-main/src/test/java/com/facebook/presto/operator/CancelTester.java ; Add shutdown for executors ; nan
374 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Add plugin system ; nan
374 ;  presto-hive/src/main/java/com/facebook/presto/hive/RebindSafeMBeanServer.java ; Add plugin system ; nan
374 ;  presto-main/src/main/java/com/facebook/presto/split/ImportClientManager.java ; Add plugin system ; nan
374 ;  presto-server/src/main/java/com/facebook/presto/server/PluginManager.java ; Add plugin system ; nan
374 ;  presto-server/src/main/java/com/facebook/presto/server/ThreadContextClassLoader.java ; Add plugin system ; nan
375 ; presto-main/src/main/java/com/facebook/presto/tpch/TpchColumnHandle.java ; Add SQL benchmark for TPC-H query 1 ; nan
375 ;  presto-main/src/main/java/com/facebook/presto/tpch/TpchTableHandle.java ; Add SQL benchmark for TPC-H query 1 ; nan
375 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Add SQL benchmark for TPC-H query 1 ; nan
375 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlTpchQuery1.java ; Add SQL benchmark for TPC-H query 1 ; nan
376 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveChunkReader.java ; Fix requiring Hadoop native libraries ; nan
376 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Fix requiring Hadoop native libraries ; nan
377 ; presto-main/src/main/java/com/facebook/presto/metadata/TableHandleJacksonModule.java ; Tweak exception handling ; nan
378 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/StringFunctions.java ; Add STRPOS function ; nan
378 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestStringFunctions.java ; Add STRPOS function ; nan
380 ;  presto-main/src/test/java/com/facebook/presto/sql/parser/TestStatementBuilder.java ; Add support for prism table links ; Will add specific unit test in another commit to get this in first.
380 ;  presto-prism/src/main/java/com/facebook/presto/hive/PrismClient.java ; Add support for prism table links ; Will add specific unit test in another commit to get this in first.
381 ;  presto-prism/src/main/java/com/facebook/presto/hive/PrismServiceClientProvider.java ; Add integration tests for prism client ; nan
381 ;  presto-prism/src/test/java/com/facebook/presto/hive/TestPrismHiveClient.java ; Add integration tests for prism client ; nan
383 ; presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryExecutor.java ; Type DeSer configurable for multiple types ; Turns out that not only the TableHandle but also the ColumnHandles need to be serialized and deserialized.  Factor out the common code into a base class  add code for ColumnHandles.
383 ;  presto-main/src/main/java/com/facebook/presto/cli/QueryRunner.java ; Type DeSer configurable for multiple types ; Turns out that not only the TableHandle but also the ColumnHandles need to be serialized and deserialized.  Factor out the common code into a base class  add code for ColumnHandles.
383 ;  presto-main/src/main/java/com/facebook/presto/metadata/AbstractTypedJacksonModule.java ; Type DeSer configurable for multiple types ; Turns out that not only the TableHandle but also the ColumnHandles need to be serialized and deserialized.  Factor out the common code into a base class  add code for ColumnHandles.
383 ;  presto-main/src/main/java/com/facebook/presto/metadata/ColumnHandle.java ; Type DeSer configurable for multiple types ; Turns out that not only the TableHandle but also the ColumnHandles need to be serialized and deserialized.  Factor out the common code into a base class  add code for ColumnHandles.
383 ;  presto-main/src/main/java/com/facebook/presto/metadata/ColumnHandleJacksonModule.java ; Type DeSer configurable for multiple types ; Turns out that not only the TableHandle but also the ColumnHandles need to be serialized and deserialized.  Factor out the common code into a base class  add code for ColumnHandles.
383 ;  presto-main/src/main/java/com/facebook/presto/metadata/HandleJsonBinder.java ; Type DeSer configurable for multiple types ; Turns out that not only the TableHandle but also the ColumnHandles need to be serialized and deserialized.  Factor out the common code into a base class  add code for ColumnHandles.
383 ;  presto-main/src/main/java/com/facebook/presto/metadata/HandleJsonModule.java ; Type DeSer configurable for multiple types ; Turns out that not only the TableHandle but also the ColumnHandles need to be serialized and deserialized.  Factor out the common code into a base class  add code for ColumnHandles.
383 ;  presto-main/src/main/java/com/facebook/presto/metadata/TableHandleJacksonModule.java ; Type DeSer configurable for multiple types ; Turns out that not only the TableHandle but also the ColumnHandles need to be serialized and deserialized.  Factor out the common code into a base class  add code for ColumnHandles.
383 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestJsonTableHandle.java ; Type DeSer configurable for multiple types ; Turns out that not only the TableHandle but also the ColumnHandles need to be serialized and deserialized.  Factor out the common code into a base class  add code for ColumnHandles.
383 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Type DeSer configurable for multiple types ; Turns out that not only the TableHandle but also the ColumnHandles need to be serialized and deserialized.  Factor out the common code into a base class  add code for ColumnHandles.
383 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Type DeSer configurable for multiple types ; Turns out that not only the TableHandle but also the ColumnHandles need to be serialized and deserialized.  Factor out the common code into a base class  add code for ColumnHandles.
384 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Cancel stops work ; nan
384 ;  presto-main/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Cancel stops work ; nan
385 ; presto-hive/src/main/java/com/facebook/presto/hive/CachingPath.java ; Add configuration for hdfs socks proxy ; nan
385 ;  presto-hive/src/main/java/com/facebook/presto/hive/FileSystemCache.java ; Add configuration for hdfs socks proxy ; nan
385 ;  presto-hive/src/main/java/com/facebook/presto/hive/HadoopConfiguration.java ; Add configuration for hdfs socks proxy ; nan
385 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveChunkReader.java ; Add configuration for hdfs socks proxy ; nan
385 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Add configuration for hdfs socks proxy ; nan
385 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientFactory.java ; Add configuration for hdfs socks proxy ; nan
385 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java ; Add configuration for hdfs socks proxy ; nan
385 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java ; Add configuration for hdfs socks proxy ; nan
385 ;  presto-hive/src/test/java/com/facebook/presto/hive/HiveImportClientFactoryTest.java ; Add configuration for hdfs socks proxy ; nan
385 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Add configuration for hdfs socks proxy ; nan
385 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientChunkIteratorBackPressure.java ; Add configuration for hdfs socks proxy ; nan
385 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientFactory.java ; Add configuration for hdfs socks proxy ; nan
385 ;  presto-prism/src/main/java/com/facebook/presto/hive/PrismClient.java ; Add configuration for hdfs socks proxy ; nan
385 ;  presto-prism/src/main/java/com/facebook/presto/hive/PrismImportClientFactory.java ; Add configuration for hdfs socks proxy ; nan
386 ; presto-main/src/main/java/com/facebook/presto/operator/InMemoryWindowOperator.java ; Add window functions ; nan
386 ;  presto-main/src/main/java/com/facebook/presto/operator/window/WindowFunction.java ; Add window functions ; nan
386 ;  presto-main/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java ; Add window functions ; nan
386 ;  presto-main/src/main/java/com/facebook/presto/sql/SqlFormatter.java ; Add window functions ; nan
386 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/AnalysisResult.java ; Add window functions ; nan
386 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Add window functions ; nan
386 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java ; Add window functions ; nan
386 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Add window functions ; nan
386 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/FrameBound.java ; Add window functions ; nan
386 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/Window.java ; Add window functions ; nan
386 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/WindowFrame.java ; Add window functions ; nan
390 ;  presto-hive/src/main/java/com/facebook/presto/hive/BytesHiveRecordCursor.java ; Add temporary support for MAP  ARRAY  and STRUCT by processing as strings ; nan
390 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Add temporary support for MAP  ARRAY  and STRUCT by processing as strings ; nan
390 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveChunkReader.java ; Add temporary support for MAP  ARRAY  and STRUCT by processing as strings ; nan
390 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Add temporary support for MAP  ARRAY  and STRUCT by processing as strings ; nan
390 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveColumn.java ; Add temporary support for MAP  ARRAY  and STRUCT by processing as strings ; nan
390 ;  presto-hive/src/main/java/com/facebook/presto/hive/HivePartitionKey.java ; Add temporary support for MAP  ARRAY  and STRUCT by processing as strings ; nan
390 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveType.java ; Add temporary support for MAP  ARRAY  and STRUCT by processing as strings ; nan
390 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java ; Add temporary support for MAP  ARRAY  and STRUCT by processing as strings ; nan
390 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Add temporary support for MAP  ARRAY  and STRUCT by processing as strings ; nan
391 ; presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Implement approximate count distinct ; nan
391 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlApproximateCountDistinctDoubleBenchmark.java ; Implement approximate count distinct ; nan
391 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlApproximateCountDistinctLongBenchmark.java ; Implement approximate count distinct ; nan
391 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlApproximateCountDistinctVarBinaryBenchmark.java ; Implement approximate count distinct ; nan
392 ; presto-main/src/test/java/com/facebook/presto/JMeterOutputWriter.java ; Remove JMeter benchmark output ; nan
392 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Remove JMeter benchmark output ; nan
392 ;  presto-main/src/test/java/com/facebook/presto/benchmark/JMeterBenchmarkResultWriter.java ; Remove JMeter benchmark output ; nan
397 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Make batch size for fetching partition info configurable and default it to 500 ; nan
397 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java ; Make batch size for fetching partition info configurable and default it to 500 ; nan
397 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientFactory.java ; Make batch size for fetching partition info configurable and default it to 500 ; nan
397 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Make batch size for fetching partition info configurable and default it to 500 ; nan
397 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientChunkIteratorBackPressure.java ; Make batch size for fetching partition info configurable and default it to 500 ; nan
397 ;  presto-hive/src/test/java/com/facebook/presto/split/TestHiveClientConfig.java ; Make batch size for fetching partition info configurable and default it to 500 ; nan
399 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Pipeline hive client ; nan
400 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Pipeline scheduling of query tasks ; nan
400 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Pipeline scheduling of query tasks ; nan
403 ; presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Minor fixes ; nan
403 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Minor fixes ; nan
403 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Minor fixes ; nan
404 ; presto-main/src/main/java/com/facebook/presto/operator/FilterFunctions.java ; Make constant final ; nan
405 ; presto-main/src/main/java/com/facebook/presto/Main.java ; Fix logging to match changes in airlift 0.71 ; nan
408 ; presto-main/src/main/java/com/facebook/presto/PrestoMediaTypes.java ; Replace Jersey MediaType with Guava MediaType ; Jersey MediaType now requires internal classes only available in server jars
408 ;  presto-main/src/main/java/com/facebook/presto/operator/HttpPageBufferClient.java ; Replace Jersey MediaType with Guava MediaType ; Jersey MediaType now requires internal classes only available in server jars
408 ;  presto-server/src/main/java/com/facebook/presto/server/PagesMapper.java ; Replace Jersey MediaType with Guava MediaType ; Jersey MediaType now requires internal classes only available in server jars
408 ;  presto-server/src/test/java/com/facebook/presto/server/TestQueryResourceServer.java ; Replace Jersey MediaType with Guava MediaType ; Jersey MediaType now requires internal classes only available in server jars
409 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/client/AsyncScribeLogger.java ; Remove scribe event client ; nan
409 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/client/LogEntry.java ; Remove scribe event client ; nan
409 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/client/ResultCode.java ; Remove scribe event client ; nan
409 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/client/ReusableScribeClient.java ; Remove scribe event client ; nan
409 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/client/ScribeClient.java ; Remove scribe event client ; nan
409 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/client/ScribeClientConfiguration.java ; Remove scribe event client ; nan
409 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/client/ScribeClientModule.java ; Remove scribe event client ; nan
409 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/client/ScribeClientProvider.java ; Remove scribe event client ; nan
409 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/client/SourceInfo.java ; Remove scribe event client ; nan
409 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/payload/EventCategoryMapProvider.java ; Remove scribe event client ; nan
409 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/payload/EventMappingConfiguration.java ; Remove scribe event client ; nan
409 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/payload/PayloadBuilder.java ; Remove scribe event client ; nan
409 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/payload/ScribeEventClient.java ; Remove scribe event client ; nan
409 ;  presto-main/src/main/java/com/facebook/presto/event/scribe/payload/ScribeEventModule.java ; Remove scribe event client ; nan
409 ;  presto-main/src/test/java/com/facebook/presto/event/scribe/client/TestAsyncScribeLogger.java ; Remove scribe event client ; nan
409 ;  presto-server/src/main/java/com/facebook/presto/server/Main.java ; Remove scribe event client ; nan
413 ; presto-server/src/main/java/com/facebook/presto/server/PluginManager.java ; Fix plugin class loader  getResources implementation ; nan
417 ;  presto-server/src/main/java/com/facebook/presto/server/Main.java ; Extensible main class ; nan
419 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; More task info ; nan
419 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskInfo.java ; More task info ; nan
419 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskOutput.java ; More task info ; nan
419 ;  presto-server/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; More task info ; nan
423 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Minor fixes ; nan
424 ;  presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestDriver.java ; Fixes ; nan
424 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Fixes ; nan
424 ;  presto-server/src/test/java/com/facebook/presto/server/TestExchangeOperator.java ; Fixes ; nan
424 ;  presto-server/src/test/java/com/facebook/presto/server/TestQueryResourceServer.java ; Fixes ; nan
424 ;  presto-server/src/test/java/com/facebook/presto/server/TestServer.java ; Fixes ; nan
426 ;  presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Show proper error message when querying Hive views ; nan
426 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Show proper error message when querying Hive views ; nan
427 ; presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Make Hive view error message a constant ; nan
427 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Make Hive view error message a constant ; nan
427 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Make Hive view error message a constant ; nan
428 ; presto-server/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Support queries with no matching partitions ; When setting no more splits on exchanges  mark all exchange sources not just the ones that had locations assigned
432 ; presto-main/src/main/java/com/facebook/presto/execution/ImportTableExecution.java ; Various fixes ; nan
432 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryExecution.java ; Various fixes ; nan
432 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Various fixes ; nan
432 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Various fixes ; nan
433 ; presto-main/src/main/java/com/facebook/presto/operator/ExchangeOperator.java ; Add request scheduled/complete stats to exchange operator ; nan
433 ;  presto-main/src/main/java/com/facebook/presto/operator/HttpPageBufferClient.java ; Add request scheduled/complete stats to exchange operator ; nan
434 ; presto-main/src/main/java/com/facebook/presto/operator/ExchangeOperator.java ; Expose async http state in exchange info ; nan
434 ;  presto-main/src/main/java/com/facebook/presto/operator/HttpPageBufferClient.java ; Expose async http state in exchange info ; nan
435 ; presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; Remove 100k split limit ; nan
435 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Remove 100k split limit ; nan
435 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryManagerConfig.java ; Remove 100k split limit ; nan
436 ; presto-main/src/main/java/com/facebook/presto/execution/CreateOrReplaceMaterializedViewExecution.java ; Simple sql execution and create materialized view ; nan
436 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryExecution.java ; Simple sql execution and create materialized view ; nan
436 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryExecutionState.java ; Simple sql execution and create materialized view ; nan
436 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java ; Simple sql execution and create materialized view ; nan
436 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java ; Simple sql execution and create materialized view ; nan
436 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Simple sql execution and create materialized view ; nan
436 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Simple sql execution and create materialized view ; nan
436 ;  presto-main/src/main/java/com/facebook/presto/sql/tree/CreateOrReplaceMaterializedView.java ; Simple sql execution and create materialized view ; nan
436 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Simple sql execution and create materialized view ; nan
437 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveChunkReader.java ; Use chunk schema ; nan
438 ; presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryExecutor.java ; Change to new async configuration name ; nan
438 ;  presto-main/src/main/java/com/facebook/presto/cli/QueryRunner.java ; Change to new async configuration name ; nan
440 ; presto-main/src/main/java/com/facebook/presto/sql/tree/TreeRewriter.java ; Fixes ; nan
441 ; presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; make threadpool sizes configurable ; - query manager executor pool - import partition  chunk and shard pools
441 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; make threadpool sizes configurable ; - query manager executor pool - import partition  chunk and shard pools
441 ;  presto-main/src/main/java/com/facebook/presto/importer/ImportManager.java ; make threadpool sizes configurable ; - query manager executor pool - import partition  chunk and shard pools
441 ;  presto-main/src/main/java/com/facebook/presto/importer/ImportManagerConfig.java ; make threadpool sizes configurable ; - query manager executor pool - import partition  chunk and shard pools
441 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryManagerConfig.java ; make threadpool sizes configurable ; - query manager executor pool - import partition  chunk and shard pools
441 ;  presto-main/src/test/java/com/facebook/presto/importer/TestImportManagerConfig.java ; make threadpool sizes configurable ; - query manager executor pool - import partition  chunk and shard pools
441 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; make threadpool sizes configurable ; - query manager executor pool - import partition  chunk and shard pools
442 ; presto-main/src/main/java/com/facebook/presto/execution/TaskInfo.java ; Update and cancel tasks in parallel ; nan
442 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskOutput.java ; Update and cancel tasks in parallel ; nan
442 ;  presto-main/src/main/java/com/facebook/presto/util/FutureUtils.java ; Update and cancel tasks in parallel ; nan
442 ;  presto-server/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Update and cancel tasks in parallel ; nan
443 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryExecutor.java ; Upgrade to Airlift 0.74-SNAPSHOT ; nan
443 ;  presto-main/src/main/java/com/facebook/presto/cli/QueryRunner.java ; Upgrade to Airlift 0.74-SNAPSHOT ; nan
443 ;  presto-main/src/main/java/com/facebook/presto/cli/TableNameCompleter.java ; Upgrade to Airlift 0.74-SNAPSHOT ; nan
443 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Upgrade to Airlift 0.74-SNAPSHOT ; nan
443 ;  presto-server/src/test/java/com/facebook/presto/server/TestExchangeOperator.java ; Upgrade to Airlift 0.74-SNAPSHOT ; nan
444 ; presto-main/src/main/java/com/facebook/presto/importer/NodeWorkerQueue.java ; Importer fixes ; - fix node worker logic for imports - reduce size of buffered output streams to 64k
444 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseStorageManager.java ; Importer fixes ; - fix node worker logic for imports - reduce size of buffered output streams to 64k
445 ; presto-main/src/main/java/com/facebook/presto/slice/Slices.java ; Change memory allocation policy when growing slices. ; Change the memory allocation policy when a slice needs memory beyond a given threshold (512k). Switch from doubling the current buffer size to an increase by 25%. Using this policy  a buffer of 512k that needs to hold 600k will grow only to 640k  not 1024k.  Benchmarks seem to imply that queries run slightly faster:  original:                            count_agg ::    0.086 cpu ms :: in  1.5M   12.9MB    17.4B/s    146GB/s :: out     1       9B    11.6K/s    102KB/s                  double_sum_agg ::   10.211 cpu ms :: in  1.5M   12.9MB     147M/s   1.23GB/s :: out     1       9B       97/s     881B/s                        hash_agg ::  184.440 cpu ms :: in  1.5M   21.5MB    8.13M/s    116MB/s :: out     3      45B       16/s     243B/s                predicate_filter ::   99.070 cpu ms :: in  1.5M   12.9MB    15.1M/s    130MB/s :: out 1.29M   11.1MB      13M/s    112MB/s                      raw_stream ::    3.577 cpu ms :: in  1.5M   12.9MB     419M/s   3.52GB/s :: out  1.5M   12.9MB     419M/s   3.52GB/s                          top100 ::   33.175 cpu ms :: in  1.5M   12.9MB    45.2M/s    388MB/s :: out   100     900B    3.01K/s   26.5KB/s          in_memory_orderby_1.5M :: 1527.672 cpu ms :: in  1.5M   41.5MB     982K/s   27.2MB/s :: out  1.5M   28.6MB     982K/s   18.7MB/s                      hash_build ::  566.392 cpu ms :: in  1.5M   25.8MB    2.65M/s   45.5MB/s :: out     0       0B        0/s       0B/s                       hash_join :: 1645.129 cpu ms :: in    6M    103MB    3.65M/s   62.6MB/s :: out    6M    206MB    3.65M/s    125MB/s             hash_build_and_join :: 2005.875 cpu ms :: in  1.5M    129MB     748K/s   64.2MB/s :: out    6M    206MB    2.99M/s    103MB/s sql_groupby_agg_with_arithmetic :: 2057.132 cpu ms :: in    6M    137MB    2.92M/s   66.8MB/s :: out     2      30B        0/s      14B/s                   sql_count_agg ::    0.131 cpu ms :: in  1.5M   12.9MB    11.4B/s   95.9GB/s :: out     1       9B    7.63K/s   67.1KB/s              sql_double_sum_agg ::   10.315 cpu ms :: in  1.5M   12.9MB     145M/s   1.22GB/s :: out     1       9B       96/s     872B/s           sql_count_with_filter ::  163.948 cpu ms :: in  1.5M   8.58MB    9.15M/s   52.4MB/s :: out     1       9B        6/s      54B/s                 sql_groupby_agg ::  191.831 cpu ms :: in  1.5M   21.5MB    7.82M/s    112MB/s :: out     3      45B       15/s     234B/s            sql_predicate_filter ::  154.564 cpu ms :: in  1.5M   12.9MB     9.7M/s   83.3MB/s :: out 1.29M   11.1MB    8.34M/s   71.6MB/s                  sql_raw_stream ::    3.649 cpu ms :: in  1.5M   12.9MB     411M/s   3.45GB/s :: out  1.5M   12.9MB     411M/s   3.45GB/s                     sql_top_100 ::   33.660 cpu ms :: in  1.5M   12.9MB    44.6M/s    383MB/s :: out   100     900B    2.97K/s   26.1KB/s                   sql_hash_join :: 1979.658 cpu ms :: in    6M    129MB    3.03M/s   65.1MB/s :: out    6M    206MB    3.03M/s    104MB/s               sql_varbinary_max ::  173.180 cpu ms :: in    6M   97.3MB    34.7M/s    562MB/s :: out     1      21B        5/s     121B/s              sql_distinct_multi ::  424.781 cpu ms :: in  1.5M   27.8MB    3.53M/s   65.3MB/s :: out     5      97B       11/s     228B/s             sql_distinct_single ::  126.152 cpu ms :: in  1.5M   8.58MB    11.9M/s     68MB/s :: out     1       6B        7/s      47B/s                sql_tpch_query_1 :: 15379.948 cpu ms :: in    6M    361MB     390K/s   23.4MB/s :: out     4     336B        0/s      21B/s              stat_long_variance ::   17.611 cpu ms :: in  1.5M   12.9MB    85.2M/s    731MB/s :: out     1       9B       56/s     511B/s          stat_long_variance_pop ::   17.593 cpu ms :: in  1.5M   12.9MB    85.3M/s    732MB/s :: out     1       9B       56/s     511B/s            stat_double_variance ::   17.744 cpu ms :: in  1.5M   12.9MB    84.5M/s    726MB/s :: out     1       9B       56/s     507B/s        stat_double_variance_pop ::   18.162 cpu ms :: in  1.5M   12.9MB    82.6M/s    709MB/s :: out     1       9B       55/s     495B/s                stat_long_stddev ::   19.123 cpu ms :: in  1.5M   12.9MB    78.4M/s    673MB/s :: out     1       9B       52/s     470B/s            stat_long_stddev_pop ::   18.837 cpu ms :: in  1.5M   12.9MB    79.6M/s    684MB/s :: out     1       9B       53/s     477B/s              stat_double_stddev ::   17.624 cpu ms :: in  1.5M   12.9MB    85.1M/s    731MB/s :: out     1       9B       56/s     510B/s          stat_double_stddev_pop ::   18.902 cpu ms :: in  1.5M   12.9MB    79.4M/s    681MB/s :: out     1       9B       52/s     476B/s  sql_approx_count_distinct_long ::  139.656 cpu ms :: in  1.5M   12.9MB    10.7M/s   92.2MB/s :: out     1       9B        7/s      64B/s         sql_approx_count_distinct_double ::  156.869 cpu ms :: in  1.5M   12.9MB    9.56M/s   82.1MB/s :: out     1       9B        6/s      57B/s sql_approx_count_distinct_varbinary ::  242.097 cpu ms :: in  1.5M   21.5MB     6.2M/s   88.6MB/s :: out     1       9B        4/s      37B/s  with this change:                            count_agg ::    0.081 cpu ms :: in  1.5M   12.9MB    18.5B/s    155GB/s :: out     1       9B    12.3K/s    108KB/s                  double_sum_agg ::   10.186 cpu ms :: in  1.5M   12.9MB     147M/s   1.23GB/s :: out     1       9B       98/s     883B/s                        hash_agg ::  182.666 cpu ms :: in  1.5M   21.5MB    8.21M/s    117MB/s :: out     3      45B       16/s     246B/s                predicate_filter ::   98.264 cpu ms :: in  1.5M   12.9MB    15.3M/s    131MB/s :: out 1.29M   11.1MB    13.1M/s    113MB/s                      raw_stream ::    3.598 cpu ms :: in  1.5M   12.9MB     417M/s   3.49GB/s :: out  1.5M   12.9MB     417M/s   3.49GB/s                          top100 ::   33.915 cpu ms :: in  1.5M   12.9MB    44.2M/s    380MB/s :: out   100     900B    2.95K/s   25.9KB/s          in_memory_orderby_1.5M :: 1517.990 cpu ms :: in  1.5M   41.5MB     988K/s   27.3MB/s :: out  1.5M   28.6MB     988K/s   18.8MB/s                      hash_build ::  557.322 cpu ms :: in  1.5M   25.8MB    2.69M/s   46.2MB/s :: out     0       0B        0/s       0B/s                       hash_join :: 1605.892 cpu ms :: in    6M    103MB    3.74M/s   64.2MB/s :: out    6M    206MB    3.74M/s    128MB/s             hash_build_and_join :: 1950.674 cpu ms :: in  1.5M    129MB     769K/s     66MB/s :: out    6M    206MB    3.08M/s    106MB/s sql_groupby_agg_with_arithmetic :: 2007.107 cpu ms :: in    6M    137MB    2.99M/s   68.4MB/s :: out     2      30B        0/s      14B/s                   sql_count_agg ::    0.121 cpu ms :: in  1.5M   12.9MB    12.4B/s    104GB/s :: out     1       9B    8.24K/s   72.4KB/s              sql_double_sum_agg ::   10.238 cpu ms :: in  1.5M   12.9MB     147M/s   1.23GB/s :: out     1       9B       97/s     879B/s           sql_count_with_filter ::  158.863 cpu ms :: in  1.5M   8.58MB    9.44M/s     54MB/s :: out     1       9B        6/s      56B/s                 sql_groupby_agg ::  186.075 cpu ms :: in  1.5M   21.5MB    8.06M/s    115MB/s :: out     3      45B       16/s     241B/s            sql_predicate_filter ::  152.790 cpu ms :: in  1.5M   12.9MB    9.82M/s   84.3MB/s :: out 1.29M   11.1MB    8.44M/s   72.4MB/s                  sql_raw_stream ::    3.702 cpu ms :: in  1.5M   12.9MB     405M/s    3.4GB/s :: out  1.5M   12.9MB     405M/s    3.4GB/s                     sql_top_100 ::   34.809 cpu ms :: in  1.5M   12.9MB    43.1M/s    370MB/s :: out   100     900B    2.87K/s   25.2KB/s                   sql_hash_join :: 1992.505 cpu ms :: in    6M    129MB    3.01M/s   64.6MB/s :: out    6M    206MB    3.01M/s    103MB/s               sql_varbinary_max ::  176.755 cpu ms :: in    6M   97.3MB      34M/s    550MB/s :: out     1      21B        5/s     118B/s              sql_distinct_multi ::  416.329 cpu ms :: in  1.5M   27.8MB     3.6M/s   66.7MB/s :: out     5      97B       12/s     232B/s             sql_distinct_single ::  130.377 cpu ms :: in  1.5M   8.58MB    11.5M/s   65.8MB/s :: out     1       6B        7/s      46B/s                sql_tpch_query_1 :: 15415.718 cpu ms :: in    6M    361MB     389K/s   23.4MB/s :: out     4     336B        0/s      21B/s              stat_long_variance ::   17.385 cpu ms :: in  1.5M   12.9MB    86.3M/s    741MB/s :: out     1       9B       57/s     517B/s          stat_long_variance_pop ::   17.379 cpu ms :: in  1.5M   12.9MB    86.3M/s    741MB/s :: out     1       9B       57/s     517B/s            stat_double_variance ::   17.366 cpu ms :: in  1.5M   12.9MB    86.4M/s    741MB/s :: out     1       9B       57/s     518B/s        stat_double_variance_pop ::   17.378 cpu ms :: in  1.5M   12.9MB    86.3M/s    741MB/s :: out     1       9B       57/s     517B/s                stat_long_stddev ::   17.433 cpu ms :: in  1.5M   12.9MB      86M/s    739MB/s :: out     1       9B       57/s     516B/s            stat_long_stddev_pop ::   17.483 cpu ms :: in  1.5M   12.9MB    85.8M/s    736MB/s :: out     1       9B       57/s     514B/s              stat_double_stddev ::   17.445 cpu ms :: in  1.5M   12.9MB      86M/s    738MB/s :: out     1       9B       57/s     515B/s          stat_double_stddev_pop ::   17.490 cpu ms :: in  1.5M   12.9MB    85.8M/s    736MB/s :: out     1       9B       57/s     514B/s  sql_approx_count_distinct_long ::  129.374 cpu ms :: in  1.5M   12.9MB    11.6M/s   99.5MB/s :: out     1       9B        7/s      69B/s         sql_approx_count_distinct_double ::  141.799 cpu ms :: in  1.5M   12.9MB    10.6M/s   90.8MB/s :: out     1       9B        7/s      63B/s sql_approx_count_distinct_varbinary ::  210.820 cpu ms :: in  1.5M   21.5MB    7.12M/s    102MB/s :: out     1       9B        4/s      42B/s
448 ; presto-server/src/main/java/com/facebook/presto/server/ExecuteResource.java ; Fix finding current server in execute endpoint ; nan
448 ;  presto-server/src/test/java/com/facebook/presto/server/TestExecuteResource.java ; Fix finding current server in execute endpoint ; nan
449 ; presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Use TestingMBeanServer in TestingPrestoServer	 ; nan
449 ;  presto-server/src/test/java/com/facebook/presto/server/TestServer.java ; Use TestingMBeanServer in TestingPrestoServer	 ; nan
449 ;  presto-server/src/test/java/com/facebook/presto/server/TestingJmxModule.java ; Use TestingMBeanServer in TestingPrestoServer	 ; nan
449 ;  presto-server/src/test/java/com/facebook/presto/server/TestingPrestoServer.java ; Use TestingMBeanServer in TestingPrestoServer	 ; nan
451 ; presto-main/src/main/java/com/facebook/presto/metadata/AbstractMetadata.java ; Metadata api ; nan
451 ;  presto-main/src/main/java/com/facebook/presto/metadata/ImportMetadata.java ; Metadata api ; nan
451 ;  presto-main/src/main/java/com/facebook/presto/metadata/InformationSchemaData.java ; Metadata api ; nan
451 ;  presto-main/src/main/java/com/facebook/presto/metadata/InternalMetadata.java ; Metadata api ; nan
451 ;  presto-main/src/main/java/com/facebook/presto/metadata/Metadata.java ; Metadata api ; nan
451 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Metadata api ; nan
451 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataResource.java ; Metadata api ; nan
451 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataUtil.java ; Metadata api ; nan
451 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeMetadata.java ; Metadata api ; nan
451 ;  presto-main/src/main/java/com/facebook/presto/metadata/QualifiedTablePrefix.java ; Metadata api ; nan
451 ;  presto-main/src/main/java/com/facebook/presto/metadata/TestingMetadata.java ; Metadata api ; nan
451 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestNativeMetadata.java ; Metadata api ; nan
451 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestQualifiedTablePrefix.java ; Metadata api ; nan
451 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Metadata api ; nan
452 ; presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Optimizers api ; Do not work on this before https://github.com/facebook/presto/pull/451 has been applied. This sits on top of that pull request.
452 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java ; Optimizers api ; Do not work on this before https://github.com/facebook/presto/pull/451 has been applied. This sits on top of that pull request.
452 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java ; Optimizers api ; Do not work on this before https://github.com/facebook/presto/pull/451 has been applied. This sits on top of that pull request.
452 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/CoalesceLimits.java ; Optimizers api ; Do not work on this before https://github.com/facebook/presto/pull/451 has been applied. This sits on top of that pull request.
452 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PlanOptimizer.java ; Optimizers api ; Do not work on this before https://github.com/facebook/presto/pull/451 has been applied. This sits on top of that pull request.
452 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneRedundantProjections.java ; Optimizers api ; Do not work on this before https://github.com/facebook/presto/pull/451 has been applied. This sits on top of that pull request.
452 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Optimizers api ; Do not work on this before https://github.com/facebook/presto/pull/451 has been applied. This sits on top of that pull request.
452 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SimplifyExpressions.java ; Optimizers api ; Do not work on this before https://github.com/facebook/presto/pull/451 has been applied. This sits on top of that pull request.
452 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/TableAliasSelector.java ; Optimizers api ; Do not work on this before https://github.com/facebook/presto/pull/451 has been applied. This sits on top of that pull request.
452 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/UnaliasSymbolReferences.java ; Optimizers api ; Do not work on this before https://github.com/facebook/presto/pull/451 has been applied. This sits on top of that pull request.
452 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractSqlBenchmark.java ; Optimizers api ; Do not work on this before https://github.com/facebook/presto/pull/451 has been applied. This sits on top of that pull request.
452 ;  presto-main/src/test/java/com/facebook/presto/util/LocalQueryRunner.java ; Optimizers api ; Do not work on this before https://github.com/facebook/presto/pull/451 has been applied. This sits on top of that pull request.
452 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Optimizers api ; Do not work on this before https://github.com/facebook/presto/pull/451 has been applied. This sits on top of that pull request.
453 ; presto-server/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Allow duplicate requests to add buffers ; nan
454 ; presto-main/src/main/java/com/facebook/presto/importer/ImportManager.java ; Rename ShardBoundedExecutor to KeyBoundedExecutor ; nan
454 ;  presto-main/src/main/java/com/facebook/presto/importer/LocalShardManager.java ; Rename ShardBoundedExecutor to KeyBoundedExecutor ; nan
454 ;  presto-main/src/main/java/com/facebook/presto/util/KeyBoundedExecutor.java ; Rename ShardBoundedExecutor to KeyBoundedExecutor ; nan
455 ; presto-main/src/main/java/com/facebook/presto/cli/HttpQueryClient.java ; Split stats ; nan
455 ;  presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Split stats ; nan
456 ; presto-main/src/main/java/com/facebook/presto/execution/DropTableExecution.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/execution/Sitevars.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/execution/SitevarsConfig.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/metadata/AbstractMetadata.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseShardManager.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseStorageManager.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/metadata/ForShardCleaner.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/metadata/Metadata.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataDao.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeMetadata.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardCleaner.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardCleanerConfig.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardManager.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardManagerDao.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardNode.java ; Drop table ; nan
456 ;  presto-main/src/main/java/com/facebook/presto/metadata/TestingMetadata.java ; Drop table ; nan
456 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSitevarsConfig.java ; Drop table ; nan
456 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestDatabaseStorageManager.java ; Drop table ; nan
456 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestShardCleanerConfig.java ; Drop table ; nan
456 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/DropTable.java ; Drop table ; nan
456 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Drop table ; nan
457 ; presto-main/src/main/java/com/facebook/presto/execution/ExecutionStats.java ; Fix NPE in ExecutionStats ; nan
458 ; presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java ; fix missing import ; nan
459 ; presto-main/src/main/java/com/facebook/presto/client/QueryResults.java ; Statement resource ; nan
459 ;  presto-main/src/main/java/com/facebook/presto/client/StageStats.java ; Statement resource ; nan
459 ;  presto-main/src/main/java/com/facebook/presto/client/StatementStats.java ; Statement resource ; nan
459 ;  presto-server/src/main/java/com/facebook/presto/server/StatementResource.java ; Statement resource ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/parser/CaseInsensitiveStream.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/parser/ParsingException.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/parser/SqlParser.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/parser/StatementSplitter.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AliasedExpression.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AliasedRelation.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AllColumns.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ArithmeticExpression.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/BetweenPredicate.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/BooleanLiteral.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Cast.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/CoalesceExpression.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ComparisonExpression.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/CreateOrReplaceMaterializedView.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/CurrentTime.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/DateLiteral.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultTraversalVisitor.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/DoubleLiteral.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ExistsPredicate.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Expression.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Extract.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/FrameBound.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/FunctionCall.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/InListExpression.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/InPredicate.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Input.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/InputReference.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/IntervalLiteral.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/IsNotNullPredicate.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/IsNullPredicate.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Join.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/JoinCriteria.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/JoinOn.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/JoinUsing.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/LikePredicate.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Literal.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/LogicalBinaryExpression.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/LongLiteral.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/NaturalJoin.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/NegativeExpression.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Node.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/NodeRewriter.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/NotExpression.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/NullIfExpression.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/NullLiteral.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/QualifiedName.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/QualifiedNameReference.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Query.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/QueryUtil.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Relation.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/SearchedCaseExpression.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Select.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Serialization.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ShowColumns.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ShowFunctions.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ShowPartitions.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ShowTables.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/SimpleCaseExpression.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/SortItem.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Statement.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/StringLiteral.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Subquery.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/SubqueryExpression.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Table.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/TimeLiteral.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/TimestampLiteral.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/TreePrinter.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/TreeRewriter.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/WhenClause.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Window.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/WindowFrame.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementBuilder.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementSplitter.java ; Make CLI use new client API ; nan
460 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TreePrinter.java ; Make CLI use new client API ; nan
461 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Various fixes ; nan
461 ;  presto-hive/src/main/java/com/facebook/presto/hive/HivePartitionChunk.java ; Various fixes ; nan
461 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Various fixes ; nan
461 ;  presto-main/src/main/java/com/facebook/presto/operator/OperatorStats.java ; Various fixes ; nan
461 ;  presto-main/src/main/java/com/facebook/presto/split/ImportSplit.java ; Various fixes ; nan
461 ;  presto-main/src/main/java/com/facebook/presto/split/InternalSplit.java ; Various fixes ; nan
461 ;  presto-main/src/main/java/com/facebook/presto/split/NativeSplit.java ; Various fixes ; nan
461 ;  presto-main/src/main/java/com/facebook/presto/split/RemoteSplit.java ; Various fixes ; nan
461 ;  presto-main/src/main/java/com/facebook/presto/split/Split.java ; Various fixes ; nan
461 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Various fixes ; nan
461 ;  presto-main/src/main/java/com/facebook/presto/tpch/TpchSplit.java ; Various fixes ; nan
461 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Various fixes ; nan
461 ;  presto-spi/src/main/java/com/facebook/presto/spi/PartitionChunk.java ; Various fixes ; nan
462 ; presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Quote identifiers when formatting expressions ; This is to avoid issues with identifiers that are also SQL keywords
462 ;  presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java ; Quote identifiers when formatting expressions ; This is to avoid issues with identifiers that are also SQL keywords
464 ; presto-main/src/main/java/com/facebook/presto/metadata/NodeManager.java ; Simple heartbeat-based failure detector ; This is a naive failure detector that watches discovery for  presto  announcements and monitors the remote services using the http url.  It considers a service failed if the percentage of failed requests over the last minute (exponentially decayed) is higher than a configurable threshold. It also supports a configurable warmup period during which newly discovered nodes are considered failed.
464 ;  presto-main/src/main/java/com/facebook/presto/server/FailureDetector.java ; Simple heartbeat-based failure detector ; This is a naive failure detector that watches discovery for  presto  announcements and monitors the remote services using the http url.  It considers a service failed if the percentage of failed requests over the last minute (exponentially decayed) is higher than a configurable threshold. It also supports a configurable warmup period during which newly discovered nodes are considered failed.
464 ;  presto-main/src/main/java/com/facebook/presto/server/FailureDetectorConfiguration.java ; Simple heartbeat-based failure detector ; This is a naive failure detector that watches discovery for  presto  announcements and monitors the remote services using the http url.  It considers a service failed if the percentage of failed requests over the last minute (exponentially decayed) is higher than a configurable threshold. It also supports a configurable warmup period during which newly discovered nodes are considered failed.
464 ;  presto-main/src/main/java/com/facebook/presto/server/FailureDetectorModule.java ; Simple heartbeat-based failure detector ; This is a naive failure detector that watches discovery for  presto  announcements and monitors the remote services using the http url.  It considers a service failed if the percentage of failed requests over the last minute (exponentially decayed) is higher than a configurable threshold. It also supports a configurable warmup period during which newly discovered nodes are considered failed.
464 ;  presto-main/src/main/java/com/facebook/presto/server/ForFailureDetector.java ; Simple heartbeat-based failure detector ; This is a naive failure detector that watches discovery for  presto  announcements and monitors the remote services using the http url.  It considers a service failed if the percentage of failed requests over the last minute (exponentially decayed) is higher than a configurable threshold. It also supports a configurable warmup period during which newly discovered nodes are considered failed.
464 ;  presto-main/src/main/java/com/facebook/presto/server/HeartbeatFailureDetector.java ; Simple heartbeat-based failure detector ; This is a naive failure detector that watches discovery for  presto  announcements and monitors the remote services using the http url.  It considers a service failed if the percentage of failed requests over the last minute (exponentially decayed) is higher than a configurable threshold. It also supports a configurable warmup period during which newly discovered nodes are considered failed.
464 ;  presto-main/src/main/java/com/facebook/presto/server/NoOpFailureDetector.java ; Simple heartbeat-based failure detector ; This is a naive failure detector that watches discovery for  presto  announcements and monitors the remote services using the http url.  It considers a service failed if the percentage of failed requests over the last minute (exponentially decayed) is higher than a configurable threshold. It also supports a configurable warmup period during which newly discovered nodes are considered failed.
464 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestNodeManager.java ; Simple heartbeat-based failure detector ; This is a naive failure detector that watches discovery for  presto  announcements and monitors the remote services using the http url.  It considers a service failed if the percentage of failed requests over the last minute (exponentially decayed) is higher than a configurable threshold. It also supports a configurable warmup period during which newly discovered nodes are considered failed.
464 ;  presto-main/src/test/java/com/facebook/presto/server/TestFailureDetectorConfiguration.java ; Simple heartbeat-based failure detector ; This is a naive failure detector that watches discovery for  presto  announcements and monitors the remote services using the http url.  It considers a service failed if the percentage of failed requests over the last minute (exponentially decayed) is higher than a configurable threshold. It also supports a configurable warmup period during which newly discovered nodes are considered failed.
464 ;  presto-server/src/main/java/com/facebook/presto/server/Main.java ; Simple heartbeat-based failure detector ; This is a naive failure detector that watches discovery for  presto  announcements and monitors the remote services using the http url.  It considers a service failed if the percentage of failed requests over the last minute (exponentially decayed) is higher than a configurable threshold. It also supports a configurable warmup period during which newly discovered nodes are considered failed.
464 ;  presto-server/src/main/java/com/facebook/presto/server/NodeResource.java ; Simple heartbeat-based failure detector ; This is a naive failure detector that watches discovery for  presto  announcements and monitors the remote services using the http url.  It considers a service failed if the percentage of failed requests over the last minute (exponentially decayed) is higher than a configurable threshold. It also supports a configurable warmup period during which newly discovered nodes are considered failed.
464 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Simple heartbeat-based failure detector ; This is a naive failure detector that watches discovery for  presto  announcements and monitors the remote services using the http url.  It considers a service failed if the percentage of failed requests over the last minute (exponentially decayed) is higher than a configurable threshold. It also supports a configurable warmup period during which newly discovered nodes are considered failed.
464 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Simple heartbeat-based failure detector ; This is a naive failure detector that watches discovery for  presto  announcements and monitors the remote services using the http url.  It considers a service failed if the percentage of failed requests over the last minute (exponentially decayed) is higher than a configurable threshold. It also supports a configurable warmup period during which newly discovered nodes are considered failed.
464 ;  presto-server/src/test/java/com/facebook/presto/server/TestingPrestoServer.java ; Simple heartbeat-based failure detector ; This is a naive failure detector that watches discovery for  presto  announcements and monitors the remote services using the http url.  It considers a service failed if the percentage of failed requests over the last minute (exponentially decayed) is higher than a configurable threshold. It also supports a configurable warmup period during which newly discovered nodes are considered failed.
465 ; presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Fail remote tasks on bad responses or repeated failures ; nan
466 ; presto-main/src/test/java/com/facebook/presto/server/NoOpFailureDetector.java ; Move NoOpFailureDetector to tests ; nan
468 ; presto-main/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Fix overflow bug in status printer ; nan
469 ; presto-cli/src/main/java/com/facebook/presto/cli/Query.java ; More updates for new client API ; nan
469 ;  presto-cli/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; More updates for new client API ; nan
469 ;  presto-client/src/main/java/com/facebook/presto/client/StatementClient.java ; More updates for new client API ; nan
469 ;  presto-client/src/main/java/com/facebook/presto/client/StatementStats.java ; More updates for new client API ; nan
469 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcResultSet.java ; More updates for new client API ; nan
469 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java ; More updates for new client API ; nan
469 ;  presto-server/src/main/java/com/facebook/presto/server/ExecuteResource.java ; More updates for new client API ; nan
469 ;  presto-server/src/main/java/com/facebook/presto/server/StatementResource.java ; More updates for new client API ; nan
469 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; More updates for new client API ; nan
470 ; presto-server/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Fixes ; nan
471 ; presto-main/src/main/java/com/facebook/presto/metadata/NodeManager.java ; Optimize split assignment algorithm and tracking of nodes ; nan
471 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Optimize split assignment algorithm and tracking of nodes ; nan
471 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestNodeManager.java ; Optimize split assignment algorithm and tracking of nodes ; nan
471 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Optimize split assignment algorithm and tracking of nodes ; nan
471 ;  presto-server/src/test/java/com/facebook/presto/server/TestingPrestoServer.java ; Optimize split assignment algorithm and tracking of nodes ; nan
472 ; presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Choose all local and rack-local nodes and fill with random if needed ; nan
473 ; presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Fix another deadlock in HttpRemoteTask ; nan
473 ;  presto-server/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Fix another deadlock in HttpRemoteTask ; nan
474 ; presto-client/src/main/java/com/facebook/presto/client/StatementClient.java ; Tolerate connection errors in client ; nan
475 ; presto-cli/src/main/java/com/facebook/presto/cli/Query.java ; Fix console --execute ; nan
476 ; presto-cli/src/main/java/com/facebook/presto/cli/Query.java ; Minor statement API cleanups ; nan
476 ;  presto-cli/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Minor statement API cleanups ; nan
476 ;  presto-client/src/main/java/com/facebook/presto/client/ErrorLocation.java ; Minor statement API cleanups ; nan
476 ;  presto-client/src/main/java/com/facebook/presto/client/FailureInfo.java ; Minor statement API cleanups ; nan
476 ;  presto-client/src/main/java/com/facebook/presto/client/QueryResults.java ; Minor statement API cleanups ; nan
476 ;  presto-client/src/main/java/com/facebook/presto/client/StageStats.java ; Minor statement API cleanups ; nan
476 ;  presto-client/src/main/java/com/facebook/presto/client/StatementClient.java ; Minor statement API cleanups ; nan
476 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcResultSet.java ; Minor statement API cleanups ; nan
476 ;  presto-server/src/main/java/com/facebook/presto/server/ExecuteResource.java ; Minor statement API cleanups ; nan
476 ;  presto-server/src/main/java/com/facebook/presto/server/StatementResource.java ; Minor statement API cleanups ; nan
476 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Minor statement API cleanups ; nan
478 ; presto-main/src/main/java/com/facebook/presto/execution/QueryId.java ; Id improvements ; nan
478 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryIdGenerator.java ; Id improvements ; nan
478 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Id improvements ; nan
478 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Id improvements ; nan
479 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Fix cancel ; nan
480 ; presto-main/src/main/java/com/facebook/presto/event/query/QueryMonitor.java ; Add event logging for split completion ; The nectar payload in scribe will look like this:  {    completed_positions_rate_ten_sec : 437     completed_data_size_count_one_min : 1026901     event_type :  SplitCompletion      task_id :  2.1.0      completed_data_size_total : 1026901     time_to_last_byte_ms : 24719     event_uuid :  fffb559f-7db3-40bb-aad4-56e001f1dbc8      completed_positions_count_ten_sec : 4370     time_to_first_byte_ms : 24716     completed_data_size_rate_thirty_sec : 34230.033333333     query_id :  2      execution_start_time :  2013-04-09T22:40:23.309Z      wall_time_ms : 24720     completed_positions_rate_one_min : 72.833333333333     completed_data_size_count_ten_sec : 1026901     completed_positions_count_thirty_sec : 4370     completed_positions_count_one_min : 4370     cpu_time_ms : 210     split_info_json :  [{\ path\ :\ hdfs:\/\/dfs1.data.facebook.com:9000\/user\/facebook\/warehouse\/ad_account_bass_ad_obj_map\/ds=2013-04-06\/000000_0\  \ start\ :0 \ length\ :49792606 \ hosts\ :[\ hadoop2913.snc5.facebook.com.\/10.38.208.27\  \ hadoop417.snc5.facebook.com.\/10.38.27.21\  \ hadoop1829.snc5.facebook.com.\/10.38.106.27\ ]}]      completed_positions_total : 4370     completed_data_size_count_thirty_sec : 1026901     user_time_ms : 199     event_time :  2013-04-09T22:40:48.033Z      completed_data_size_rate_ten_sec : 102690.1     completed_positions_rate_thirty_sec : 145.66666666667     completed_data_size_rate_one_min : 17115.016666667     event_host :  ehwang-mbp.local      stage_id :  2.1  }
480 ;  presto-main/src/main/java/com/facebook/presto/event/query/SplitCompletionEvent.java ; Add event logging for split completion ; The nectar payload in scribe will look like this:  {    completed_positions_rate_ten_sec : 437     completed_data_size_count_one_min : 1026901     event_type :  SplitCompletion      task_id :  2.1.0      completed_data_size_total : 1026901     time_to_last_byte_ms : 24719     event_uuid :  fffb559f-7db3-40bb-aad4-56e001f1dbc8      completed_positions_count_ten_sec : 4370     time_to_first_byte_ms : 24716     completed_data_size_rate_thirty_sec : 34230.033333333     query_id :  2      execution_start_time :  2013-04-09T22:40:23.309Z      wall_time_ms : 24720     completed_positions_rate_one_min : 72.833333333333     completed_data_size_count_ten_sec : 1026901     completed_positions_count_thirty_sec : 4370     completed_positions_count_one_min : 4370     cpu_time_ms : 210     split_info_json :  [{\ path\ :\ hdfs:\/\/dfs1.data.facebook.com:9000\/user\/facebook\/warehouse\/ad_account_bass_ad_obj_map\/ds=2013-04-06\/000000_0\  \ start\ :0 \ length\ :49792606 \ hosts\ :[\ hadoop2913.snc5.facebook.com.\/10.38.208.27\  \ hadoop417.snc5.facebook.com.\/10.38.27.21\  \ hadoop1829.snc5.facebook.com.\/10.38.106.27\ ]}]      completed_positions_total : 4370     completed_data_size_count_thirty_sec : 1026901     user_time_ms : 199     event_time :  2013-04-09T22:40:48.033Z      completed_data_size_rate_ten_sec : 102690.1     completed_positions_rate_thirty_sec : 145.66666666667     completed_data_size_rate_one_min : 17115.016666667     event_host :  ehwang-mbp.local      stage_id :  2.1  }
480 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Add event logging for split completion ; The nectar payload in scribe will look like this:  {    completed_positions_rate_ten_sec : 437     completed_data_size_count_one_min : 1026901     event_type :  SplitCompletion      task_id :  2.1.0      completed_data_size_total : 1026901     time_to_last_byte_ms : 24719     event_uuid :  fffb559f-7db3-40bb-aad4-56e001f1dbc8      completed_positions_count_ten_sec : 4370     time_to_first_byte_ms : 24716     completed_data_size_rate_thirty_sec : 34230.033333333     query_id :  2      execution_start_time :  2013-04-09T22:40:23.309Z      wall_time_ms : 24720     completed_positions_rate_one_min : 72.833333333333     completed_data_size_count_ten_sec : 1026901     completed_positions_count_thirty_sec : 4370     completed_positions_count_one_min : 4370     cpu_time_ms : 210     split_info_json :  [{\ path\ :\ hdfs:\/\/dfs1.data.facebook.com:9000\/user\/facebook\/warehouse\/ad_account_bass_ad_obj_map\/ds=2013-04-06\/000000_0\  \ start\ :0 \ length\ :49792606 \ hosts\ :[\ hadoop2913.snc5.facebook.com.\/10.38.208.27\  \ hadoop417.snc5.facebook.com.\/10.38.27.21\  \ hadoop1829.snc5.facebook.com.\/10.38.106.27\ ]}]      completed_positions_total : 4370     completed_data_size_count_thirty_sec : 1026901     user_time_ms : 199     event_time :  2013-04-09T22:40:48.033Z      completed_data_size_rate_ten_sec : 102690.1     completed_positions_rate_thirty_sec : 145.66666666667     completed_data_size_rate_one_min : 17115.016666667     event_host :  ehwang-mbp.local      stage_id :  2.1  }
480 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Add event logging for split completion ; The nectar payload in scribe will look like this:  {    completed_positions_rate_ten_sec : 437     completed_data_size_count_one_min : 1026901     event_type :  SplitCompletion      task_id :  2.1.0      completed_data_size_total : 1026901     time_to_last_byte_ms : 24719     event_uuid :  fffb559f-7db3-40bb-aad4-56e001f1dbc8      completed_positions_count_ten_sec : 4370     time_to_first_byte_ms : 24716     completed_data_size_rate_thirty_sec : 34230.033333333     query_id :  2      execution_start_time :  2013-04-09T22:40:23.309Z      wall_time_ms : 24720     completed_positions_rate_one_min : 72.833333333333     completed_data_size_count_ten_sec : 1026901     completed_positions_count_thirty_sec : 4370     completed_positions_count_one_min : 4370     cpu_time_ms : 210     split_info_json :  [{\ path\ :\ hdfs:\/\/dfs1.data.facebook.com:9000\/user\/facebook\/warehouse\/ad_account_bass_ad_obj_map\/ds=2013-04-06\/000000_0\  \ start\ :0 \ length\ :49792606 \ hosts\ :[\ hadoop2913.snc5.facebook.com.\/10.38.208.27\  \ hadoop417.snc5.facebook.com.\/10.38.27.21\  \ hadoop1829.snc5.facebook.com.\/10.38.106.27\ ]}]      completed_positions_total : 4370     completed_data_size_count_thirty_sec : 1026901     user_time_ms : 199     event_time :  2013-04-09T22:40:48.033Z      completed_data_size_rate_ten_sec : 102690.1     completed_positions_rate_thirty_sec : 145.66666666667     completed_data_size_rate_one_min : 17115.016666667     event_host :  ehwang-mbp.local      stage_id :  2.1  }
480 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Add event logging for split completion ; The nectar payload in scribe will look like this:  {    completed_positions_rate_ten_sec : 437     completed_data_size_count_one_min : 1026901     event_type :  SplitCompletion      task_id :  2.1.0      completed_data_size_total : 1026901     time_to_last_byte_ms : 24719     event_uuid :  fffb559f-7db3-40bb-aad4-56e001f1dbc8      completed_positions_count_ten_sec : 4370     time_to_first_byte_ms : 24716     completed_data_size_rate_thirty_sec : 34230.033333333     query_id :  2      execution_start_time :  2013-04-09T22:40:23.309Z      wall_time_ms : 24720     completed_positions_rate_one_min : 72.833333333333     completed_data_size_count_ten_sec : 1026901     completed_positions_count_thirty_sec : 4370     completed_positions_count_one_min : 4370     cpu_time_ms : 210     split_info_json :  [{\ path\ :\ hdfs:\/\/dfs1.data.facebook.com:9000\/user\/facebook\/warehouse\/ad_account_bass_ad_obj_map\/ds=2013-04-06\/000000_0\  \ start\ :0 \ length\ :49792606 \ hosts\ :[\ hadoop2913.snc5.facebook.com.\/10.38.208.27\  \ hadoop417.snc5.facebook.com.\/10.38.27.21\  \ hadoop1829.snc5.facebook.com.\/10.38.106.27\ ]}]      completed_positions_total : 4370     completed_data_size_count_thirty_sec : 1026901     user_time_ms : 199     event_time :  2013-04-09T22:40:48.033Z      completed_data_size_rate_ten_sec : 102690.1     completed_positions_rate_thirty_sec : 145.66666666667     completed_data_size_rate_one_min : 17115.016666667     event_host :  ehwang-mbp.local      stage_id :  2.1  }
481 ;  presto-main/src/main/java/com/facebook/presto/importer/ImportManager.java ; Move all JaxRS code to server module and remove dependency ; nan
481 ;  presto-main/src/main/java/com/facebook/presto/operator/HttpPageBufferClient.java ; Move all JaxRS code to server module and remove dependency ; nan
481 ;  presto-server/src/main/java/com/facebook/presto/server/MetadataResource.java ; Move all JaxRS code to server module and remove dependency ; nan
481 ;  presto-server/src/main/java/com/facebook/presto/server/PeriodicImportJobResource.java ; Move all JaxRS code to server module and remove dependency ; nan
481 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Move all JaxRS code to server module and remove dependency ; nan
483 ; presto-main/src/main/java/com/facebook/presto/event/Event.java ; Move Event class to presto-facebook ; nan
484 ; presto-hive/src/main/java/com/facebook/presto/hive/FileSystemCache.java ; Enable JMX stats for DFSClient ; This took way too long
486 ; presto-server/src/main/java/com/facebook/presto/server/StatementResource.java ; Fix bug in StatementResource purger ; nan
488 ;  presto-parser/src/main/java/com/facebook/presto/sql/parser/StatementSplitter.java ; Improve error message for backquoted identifiers ; nan
488 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Improve error message for backquoted identifiers ; nan
488 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementSplitter.java ; Improve error message for backquoted identifiers ; nan
489 ;  presto-main/src/main/java/com/facebook/presto/block/snappy/SnappyBlock.java ; Add snappy compression for native store. ; Use Snappy to block compress data.
489 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseStorageManager.java ; Add snappy compression for native store. ; Use Snappy to block compress data.
489 ;  presto-main/src/main/java/com/facebook/presto/serde/BlockEncodings.java ; Add snappy compression for native store. ; Use Snappy to block compress data.
489 ;  presto-main/src/main/java/com/facebook/presto/serde/BlocksFileEncoding.java ; Add snappy compression for native store. ; Use Snappy to block compress data.
489 ;  presto-main/src/main/java/com/facebook/presto/serde/SnappyBlockEncoding.java ; Add snappy compression for native store. ; Use Snappy to block compress data.
489 ;  presto-main/src/main/java/com/facebook/presto/serde/SnappyEncoder.java ; Add snappy compression for native store. ; Use Snappy to block compress data.
489 ;  presto-main/src/test/java/com/facebook/presto/serde/TestSnappyBlockSerde.java ; Add snappy compression for native store. ; Use Snappy to block compress data.
490 ; presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Fix setting timeouts for Hive metastore client ; nan
490 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientChunkIteratorBackPressure.java ; Fix setting timeouts for Hive metastore client ; nan
490 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestingHiveCluster.java ; Fix setting timeouts for Hive metastore client ; nan
492 ; presto-server/src/main/java/com/facebook/presto/server/StatementResource.java ; fix client hang for simple queries with no output stage ; This makes e.g.  DROP TABLE  not hang in the cli.
493 ; presto-main/src/main/java/com/facebook/presto/metadata/DatabaseStorageManager.java ; change default table store to use snappy ; nan
494 ; presto-server/src/main/java/com/facebook/presto/server/StatementResource.java ; only return data if query was successful ; nan
499 ; presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Create alias ; do not work on this pull request until https://github.com/facebook/presto/pull/498 was applied!
500 ; presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Add simple query dashboard ; nan
501 ; presto-main/src/main/java/com/facebook/presto/tuple/TupleInfo.java ; Fix bug in TupleInfo.setNull/setNotNull ; nan
501 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix bug in TupleInfo.setNull/setNotNull ; nan
501 ;  presto-main/src/test/java/com/facebook/presto/tuple/TestTupleInfo.java ; Fix bug in TupleInfo.setNull/setNotNull ; nan
502 ; presto-cli/src/main/java/com/facebook/presto/cli/AlignedTuplePrinter.java ; Flush buffered console results during slow queries ; nan
502 ;  presto-cli/src/main/java/com/facebook/presto/cli/CsvPrinter.java ; Flush buffered console results during slow queries ; nan
502 ;  presto-cli/src/main/java/com/facebook/presto/cli/OutputHandler.java ; Flush buffered console results during slow queries ; nan
502 ;  presto-cli/src/main/java/com/facebook/presto/cli/OutputPrinter.java ; Flush buffered console results during slow queries ; nan
502 ;  presto-cli/src/main/java/com/facebook/presto/cli/Query.java ; Flush buffered console results during slow queries ; nan
502 ;  presto-cli/src/test/java/com/facebook/presto/cli/TestAlignedTuplePrinter.java ; Flush buffered console results during slow queries ; nan
502 ;  presto-cli/src/test/java/com/facebook/presto/cli/TestCsvPrinter.java ; Flush buffered console results during slow queries ; nan
506 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java ; Upgrade DFSClient and add slow node switching ; nan
506 ;  presto-hive/src/main/java/com/facebook/presto/hive/SlowDatanodeSwitcher.java ; Upgrade DFSClient and add slow node switching ; nan
508 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Remove import client ; nan
510 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Fix parsing of identifiers that start with a digit ; nan
510 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementSplitter.java ; Fix parsing of identifiers that start with a digit ; nan
512 ; presto-main/src/main/java/com/facebook/presto/execution/CreateAliasExecution.java ; Minor (hacky) refactoring to fix missing stats from completion event ; nan
512 ;  presto-main/src/main/java/com/facebook/presto/execution/DropAliasExecution.java ; Minor (hacky) refactoring to fix missing stats from completion event ; nan
512 ;  presto-main/src/main/java/com/facebook/presto/execution/DropTableExecution.java ; Minor (hacky) refactoring to fix missing stats from completion event ; nan
512 ;  presto-main/src/main/java/com/facebook/presto/execution/FailedQueryExecution.java ; Minor (hacky) refactoring to fix missing stats from completion event ; nan
512 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryExecution.java ; Minor (hacky) refactoring to fix missing stats from completion event ; nan
512 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java ; Minor (hacky) refactoring to fix missing stats from completion event ; nan
512 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Minor (hacky) refactoring to fix missing stats from completion event ; nan
512 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Minor (hacky) refactoring to fix missing stats from completion event ; nan
513 ; presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Record failures for any error during task scheduling ; nan
514 ; presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; ExpressionFormatter fixes ; nan
514 ;  presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java ; ExpressionFormatter fixes ; nan
514 ;  presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java ; ExpressionFormatter fixes ; nan
514 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Expression.java ; ExpressionFormatter fixes ; nan
514 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Serialization.java ; ExpressionFormatter fixes ; nan
515 ; presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java ; Fix bug when ordering by window function ; nan
515 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix bug when ordering by window function ; nan
516 ;  presto-main/src/test/java/com/facebook/presto/util/LocalQueryRunner.java ; Fix SQL formatter and add tests ; nan
516 ;  presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java ; Fix SQL formatter and add tests ; nan
516 ;  presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java ; Fix SQL formatter and add tests ; nan
516 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementBuilder.java ; Fix SQL formatter and add tests ; nan
516 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TreeAssertions.java ; Fix SQL formatter and add tests ; nan
518 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Fix issue when following symlinks across hdfs instances ; nan
519 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Ask for partition info in exponentially increasing batch sizes ; This should help speed up trivial queries (e.g.  limit) when the number of candidate partitions is large and the partition information hasn t been cached yet.
520 ; presto-main/src/main/java/com/facebook/presto/execution/SharedBuffer.java ; Fast trivial queries ; nan
520 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Fast trivial queries ; nan
520 ;  presto-main/src/main/java/com/facebook/presto/operator/ExchangeClient.java ; Fast trivial queries ; nan
520 ;  presto-main/src/main/java/com/facebook/presto/operator/ExchangeOperator.java ; Fast trivial queries ; nan
521 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Show error for SHOW COLUMNS if table does not exist ; nan
522 ; presto-main/src/main/java/com/facebook/presto/metadata/InformationSchemaData.java ; Show whether columns are partition keys in DESCRIBE ; nan
522 ;  presto-main/src/main/java/com/facebook/presto/metadata/InformationSchemaMetadata.java ; Show whether columns are partition keys in DESCRIBE ; nan
522 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Show whether columns are partition keys in DESCRIBE ; nan
523 ; presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Fix benchmarks ; nan
524 ; presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Add benchmark for LIKE ; nan
524 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlLikeBenchmark.java ; Add benchmark for LIKE ; nan
525 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Fix starvation (task should run if the query is not done) ; nan
526 ; presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Add retry code back into hive client ; Remove other unnecessary uses of RetryDriver Move RetryDriver to hive module
526 ;  presto-hive/src/main/java/com/facebook/presto/hive/RetryDriver.java ; Add retry code back into hive client ; Remove other unnecessary uses of RetryDriver Move RetryDriver to hive module
526 ;  presto-hive/src/test/java/com/facebook/presto/hive/MockHiveMetastoreClient.java ; Add retry code back into hive client ; Remove other unnecessary uses of RetryDriver Move RetryDriver to hive module
526 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseLocalStorageManager.java ; Add retry code back into hive client ; Remove other unnecessary uses of RetryDriver Move RetryDriver to hive module
526 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardCleaner.java ; Add retry code back into hive client ; Remove other unnecessary uses of RetryDriver Move RetryDriver to hive module
527 ; presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Fix show partitions bug ; Supply a default value to bindings optional
528 ; presto-main/src/main/java/com/facebook/presto/execution/CreateAliasExecution.java ; Fix calls to Optional.get() without Optional.isPresent() ; nan
528 ;  presto-main/src/main/java/com/facebook/presto/execution/DropTableExecution.java ; Fix calls to Optional.get() without Optional.isPresent() ; nan
528 ;  presto-main/src/main/java/com/facebook/presto/metadata/InformationSchemaData.java ; Fix calls to Optional.get() without Optional.isPresent() ; nan
528 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java ; Fix calls to Optional.get() without Optional.isPresent() ; nan
528 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java ; Fix calls to Optional.get() without Optional.isPresent() ; nan
528 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Fix calls to Optional.get() without Optional.isPresent() ; nan
528 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java ; Fix calls to Optional.get() without Optional.isPresent() ; nan
528 ;  presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java ; Fix calls to Optional.get() without Optional.isPresent() ; nan
528 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/TreeRewriter.java ; Fix calls to Optional.get() without Optional.isPresent() ; nan
529 ; presto-main/src/main/java/com/facebook/presto/operator/ExchangeClient.java ; Return multiple pages from statement resource ; nan
529 ;  presto-server/src/main/java/com/facebook/presto/server/StatementResource.java ; Return multiple pages from statement resource ; nan
530 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/UnixTimeFunctions.java ; Use UNIX timestamps in seconds for time functions ; nan
530 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestUnixTimeFunctions.java ; Use UNIX timestamps in seconds for time functions ; nan
530 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Use UNIX timestamps in seconds for time functions ; nan
530 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/TimestampLiteral.java ; Use UNIX timestamps in seconds for time functions ; nan
531 ; presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java ; Skip split address hints that do not resolve ; nan
531 ;  presto-spi/src/main/java/com/facebook/presto/spi/HostAddress.java ; Skip split address hints that do not resolve ; nan
532 ; presto-main/src/main/java/com/facebook/presto/sql/planner/SymbolAllocator.java ; Fix symbol to QualifiedName conversion ; nan
532 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix symbol to QualifiedName conversion ; nan
534 ; presto-main/src/main/java/com/facebook/presto/execution/SharedBuffer.java ; Minor fixes ; nan
536 ; presto-main/src/test/java/com/facebook/presto/benchmark/AbstractOperatorBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractSqlBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountAggregationBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountAggregationSqlBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountWithFilterSqlBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/DoubleSumAggregationBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/GroupByAggregationSqlBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/GroupBySumWithArithmeticSqlBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashAggregationBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashBuildAndJoinBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashBuildBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashJoinBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/InMemoryOrderByBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/PredicateFilterBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/PredicateFilterSqlBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/RawStreamingBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/RawStreamingSqlBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlApproximateCountDistinctDoubleBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlApproximateCountDistinctLongBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlApproximateCountDistinctVarBinaryBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlDistinctMultipleFields.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlDistinctSingleField.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlDoubleSumAggregationBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlHashJoinBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlLikeBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlTpchQuery1.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/StatisticsBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/TestBenchmarks.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/Top100Benchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/Top100SqlBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
536 ;  presto-main/src/test/java/com/facebook/presto/benchmark/VarBinaryMaxAggregationSqlBenchmark.java ; Improve metadata system ; Replace internal schema with connector metadata Add sys.query and sys.task tables Add jmx connector Move local tests and benchmarks to use standard execution apis
541 ; presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Hive connector fixes ; nan
541 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Hive connector fixes ; nan
541 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Hive connector fixes ; nan
541 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Hive connector fixes ; nan
542 ; presto-main/src/main/java/com/facebook/presto/connector/system/QuerySystemTable.java ; Add more data to sys.query and sys.task ; Rename heartBeat to heartbeat
542 ;  presto-main/src/main/java/com/facebook/presto/connector/system/TaskSystemTable.java ; Add more data to sys.query and sys.task ; Rename heartBeat to heartbeat
542 ;  presto-main/src/main/java/com/facebook/presto/execution/AbandonedException.java ; Add more data to sys.query and sys.task ; Rename heartBeat to heartbeat
542 ;  presto-main/src/main/java/com/facebook/presto/execution/ExecutionStats.java ; Add more data to sys.query and sys.task ; Rename heartBeat to heartbeat
542 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryStats.java ; Add more data to sys.query and sys.task ; Rename heartBeat to heartbeat
542 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Add more data to sys.query and sys.task ; Rename heartBeat to heartbeat
542 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Add more data to sys.query and sys.task ; Rename heartBeat to heartbeat
542 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Add more data to sys.query and sys.task ; Rename heartBeat to heartbeat
542 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskExecution.java ; Add more data to sys.query and sys.task ; Rename heartBeat to heartbeat
543 ; presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Expose hive flush cache via JMX ; nan
543 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java ; Expose hive flush cache via JMX ; nan
544 ; presto-main/src/main/java/com/facebook/presto/operator/ExchangeOperator.java ; Stop exchange operator immediately when task output is done ; nan
545 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Cache regexps for LIKE and switch to joni ; nan
548 ; presto-main/src/main/java/com/facebook/presto/operator/TopNOperator.java ; Limit the amount of memory for TopN operator ; nan
548 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Limit the amount of memory for TopN operator ; nan
548 ;  presto-main/src/test/java/com/facebook/presto/benchmark/Top100Benchmark.java ; Limit the amount of memory for TopN operator ; nan
548 ;  presto-main/src/test/java/com/facebook/presto/operator/TestTopNOperator.java ; Limit the amount of memory for TopN operator ; nan
549 ; presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Optimize LIKE expressions ; - If pattern does not have % or _  replace with comparison expression - Return new like expression with optimized operands
549 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Optimize LIKE expressions ; - If pattern does not have % or _  replace with comparison expression - Return new like expression with optimized operands
550 ; presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Fix null handling in LIKE expressions ; nan
550 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Fix null handling in LIKE expressions ; nan
551 ;  presto-hive/src/main/java/com/facebook/presto/hive/BytesHiveRecordCursor.java ; Add support for Hive binary type ; nan
551 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Add support for Hive binary type ; nan
551 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveType.java ; Add support for Hive binary type ; nan
551 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Add support for Hive binary type ; nan
552 ; presto-main/src/test/java/com/facebook/presto/benchmark/SqlInBenchmark.java ; Benchmark for IN with constant list ; nan
554 ; presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Enable IN benchmark ; I forgot to add it to the benchmark suite...
555 ; presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Do not assume metastore.get_partitions_by_names returns partitions in the same order as requested ; nan
555 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Do not assume metastore.get_partitions_by_names returns partitions in the same order as requested ; nan
555 ;  presto-hive/src/test/java/com/facebook/presto/hive/MockHiveMetastoreClient.java ; Do not assume metastore.get_partitions_by_names returns partitions in the same order as requested ; nan
555 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestCachingHiveMetastore.java ; Do not assume metastore.get_partitions_by_names returns partitions in the same order as requested ; nan
557 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java ; Add more information to events ; add source  remote user address and user agent to session add partition id to hive split info 
558 ; presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaDataStreamProvider.java ; Add function type to show functions command ; nan
558 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaMetadata.java ; Add function type to show functions command ; nan
558 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Add function type to show functions command ; nan
558 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add function type to show functions command ; nan
559 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Add max split size to hive client ; nan
559 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Add max split size to hive client ; nan
559 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Add max split size to hive client ; nan
559 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientSplitIteratorBackPressure.java ; Add max split size to hive client ; nan
561 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analysis.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultTraversalVisitor.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Query.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/QueryBody.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/QuerySpecification.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Relation.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/TableSubquery.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/TreePrinter.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/TreeRewriter.java ; Alter queries to support a QueryBody structure ; nan
561 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Alter queries to support a QueryBody structure ; nan
562 ; presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Support multiple wildcards in select list ; nan
562 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementBuilder.java ; Support multiple wildcards in select list ; nan
563 ; presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Expose some query/task manager stats via jmx ; nan
563 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManagerStats.java ; Expose some query/task manager stats via jmx ; nan
563 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Expose some query/task manager stats via jmx ; nan
564 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Add table name to hive split info ; nan
564 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java ; Add table name to hive split info ; nan
564 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java ; Add table name to hive split info ; nan
565 ; presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Unpartitioned hive tables have no partition keys not no partitions ; nan
565 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Unpartitioned hive tables have no partition keys not no partitions ; nan
565 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestCachingHiveMetastore.java ; Unpartitioned hive tables have no partition keys not no partitions ; nan
566 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Upgrade to hive-presto-shaded 0.5 ; nan
566 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Upgrade to hive-presto-shaded 0.5 ; nan
566 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java ; Upgrade to hive-presto-shaded 0.5 ; nan
567 ; presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; Add max page size limit ; nan
567 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Add max page size limit ; nan
567 ;  presto-main/src/main/java/com/facebook/presto/ingest/RecordProjectOperator.java ; Add max page size limit ; nan
567 ;  presto-main/src/main/java/com/facebook/presto/operator/FilterAndProjectOperator.java ; Add max page size limit ; nan
567 ;  presto-main/src/main/java/com/facebook/presto/operator/PageBuilder.java ; Add max page size limit ; nan
567 ;  presto-main/src/main/java/com/facebook/presto/operator/TopNOperator.java ; Add max page size limit ; nan
567 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryManagerConfig.java ; Add max page size limit ; nan
568 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/UnixTimeFunctions.java ; Implement mysql-compatible date format/parse functions ; nan
568 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestUnixTimeFunctions.java ; Implement mysql-compatible date format/parse functions ; nan
569 ; presto-client/src/main/java/com/facebook/presto/client/PrestoHeaders.java ; Better constrain buffer memory usage ; Add soft limit to exchange client buffer Add soft limit to output sink buffer (SharedBuffer) Size buffers in PageBuilder based on the size of previous page produced Add more testing to exchange client
569 ;  presto-main/src/main/java/com/facebook/presto/execution/BufferResult.java ; Better constrain buffer memory usage ; Add soft limit to exchange client buffer Add soft limit to output sink buffer (SharedBuffer) Size buffers in PageBuilder based on the size of previous page produced Add more testing to exchange client
569 ;  presto-main/src/main/java/com/facebook/presto/execution/SharedBuffer.java ; Better constrain buffer memory usage ; Add soft limit to exchange client buffer Add soft limit to output sink buffer (SharedBuffer) Size buffers in PageBuilder based on the size of previous page produced Add more testing to exchange client
569 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Better constrain buffer memory usage ; Add soft limit to exchange client buffer Add soft limit to output sink buffer (SharedBuffer) Size buffers in PageBuilder based on the size of previous page produced Add more testing to exchange client
569 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Better constrain buffer memory usage ; Add soft limit to exchange client buffer Add soft limit to output sink buffer (SharedBuffer) Size buffers in PageBuilder based on the size of previous page produced Add more testing to exchange client
569 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskExecution.java ; Better constrain buffer memory usage ; Add soft limit to exchange client buffer Add soft limit to output sink buffer (SharedBuffer) Size buffers in PageBuilder based on the size of previous page produced Add more testing to exchange client
569 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskManager.java ; Better constrain buffer memory usage ; Add soft limit to exchange client buffer Add soft limit to output sink buffer (SharedBuffer) Size buffers in PageBuilder based on the size of previous page produced Add more testing to exchange client
569 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskOutput.java ; Better constrain buffer memory usage ; Add soft limit to exchange client buffer Add soft limit to output sink buffer (SharedBuffer) Size buffers in PageBuilder based on the size of previous page produced Add more testing to exchange client
569 ;  presto-main/src/main/java/com/facebook/presto/operator/HttpPageBufferClient.java ; Better constrain buffer memory usage ; Add soft limit to exchange client buffer Add soft limit to output sink buffer (SharedBuffer) Size buffers in PageBuilder based on the size of previous page produced Add more testing to exchange client
569 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSharedBuffer.java ; Better constrain buffer memory usage ; Add soft limit to exchange client buffer Add soft limit to output sink buffer (SharedBuffer) Size buffers in PageBuilder based on the size of previous page produced Add more testing to exchange client
569 ;  presto-main/src/test/java/com/facebook/presto/operator/MockExchangeRequestProcessor.java ; Better constrain buffer memory usage ; Add soft limit to exchange client buffer Add soft limit to output sink buffer (SharedBuffer) Size buffers in PageBuilder based on the size of previous page produced Add more testing to exchange client
569 ;  presto-server/src/main/java/com/facebook/presto/server/TaskResource.java ; Better constrain buffer memory usage ; Add soft limit to exchange client buffer Add soft limit to output sink buffer (SharedBuffer) Size buffers in PageBuilder based on the size of previous page produced Add more testing to exchange client
569 ;  presto-server/src/test/java/com/facebook/presto/server/MockTaskManager.java ; Better constrain buffer memory usage ; Add soft limit to exchange client buffer Add soft limit to output sink buffer (SharedBuffer) Size buffers in PageBuilder based on the size of previous page produced Add more testing to exchange client
569 ;  presto-server/src/test/java/com/facebook/presto/server/TestQueryResourceServer.java ; Better constrain buffer memory usage ; Add soft limit to exchange client buffer Add soft limit to output sink buffer (SharedBuffer) Size buffers in PageBuilder based on the size of previous page produced Add more testing to exchange client
570 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/Session.java ; Add missing @JsonProperty annotation to session source field ; nan
571 ; presto-server/src/main/java/com/facebook/presto/server/PluginManager.java ; Add com.fasterxml.jackson to parent-first packages ; nan
574 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Add UNION [ALL] support ; nan
574 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedLogicalPlanner.java ; Add UNION [ALL] support ; nan
574 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanSanityChecker.java ; Add UNION [ALL] support ; nan
574 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Add UNION [ALL] support ; nan
574 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/SubPlanBuilder.java ; Add UNION [ALL] support ; nan
574 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SetFlatteningOptimizer.java ; Add UNION [ALL] support ; nan
574 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/UnaliasSymbolReferences.java ; Add UNION [ALL] support ; nan
574 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/UnionNode.java ; Add UNION [ALL] support ; nan
574 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Except.java ; Add UNION [ALL] support ; nan
574 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Intersect.java ; Add UNION [ALL] support ; nan
574 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/SetOperation.java ; Add UNION [ALL] support ; nan
574 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Union.java ; Add UNION [ALL] support ; nan
575 ; presto-main/src/main/java/com/facebook/presto/operator/HttpPageBufferClient.java ; Add masterSequenceId to SharedBufferInfo ; nan
578 ; presto-main/src/main/java/com/facebook/presto/execution/SharedBuffer.java ; Limit size of response based on bytes not pages ; nan
578 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Limit size of response based on bytes not pages ; nan
578 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Limit size of response based on bytes not pages ; nan
578 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskExecution.java ; Limit size of response based on bytes not pages ; nan
578 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskManager.java ; Limit size of response based on bytes not pages ; nan
578 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskOutput.java ; Limit size of response based on bytes not pages ; nan
578 ;  presto-main/src/main/java/com/facebook/presto/operator/HttpPageBufferClient.java ; Limit size of response based on bytes not pages ; nan
578 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSharedBuffer.java ; Limit size of response based on bytes not pages ; nan
578 ;  presto-server/src/main/java/com/facebook/presto/server/TaskResource.java ; Limit size of response based on bytes not pages ; nan
578 ;  presto-server/src/test/java/com/facebook/presto/server/MockTaskManager.java ; Limit size of response based on bytes not pages ; nan
578 ;  presto-server/src/test/java/com/facebook/presto/server/TestQueryResourceServer.java ; Limit size of response based on bytes not pages ; nan
580 ;  presto-hive/src/main/java/com/facebook/presto/hive/FileSystemWrapper.java ; Use new shaded Hadoop and Hive artifacts ; nan
580 ;  presto-hive/src/main/java/com/facebook/presto/hive/FileSystemWrapperProvider.java ; Use new shaded Hadoop and Hive artifacts ; nan
580 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForwardingFileStatus.java ; Use new shaded Hadoop and Hive artifacts ; nan
580 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForwardingFileSystem.java ; Use new shaded Hadoop and Hive artifacts ; nan
580 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForwardingLocatedFileStatus.java ; Use new shaded Hadoop and Hive artifacts ; nan
580 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForwardingRemoteIterator.java ; Use new shaded Hadoop and Hive artifacts ; nan
580 ;  presto-hive/src/main/java/com/facebook/presto/hive/HdfsConfiguration.java ; Use new shaded Hadoop and Hive artifacts ; nan
580 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Use new shaded Hadoop and Hive artifacts ; nan
580 ;  presto-hive/src/main/java/com/facebook/presto/hive/SlowDatanodeSwitcher.java ; Use new shaded Hadoop and Hive artifacts ; nan
581 ; presto-main/src/main/java/com/facebook/presto/execution/QueryIdGenerator.java ; Make query id actually unique ; nan
581 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryIdGenerator.java ; Make query id actually unique ; nan
583 ; presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; Task manager fixes ; nan
583 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Task manager fixes ; nan
583 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryManagerConfig.java ; Task manager fixes ; nan
583 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Task manager fixes ; nan
584 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/UnixTimeFunctions.java ; Change date_format and date_parse to use server local time as mysql does ; nan
584 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestUnixTimeFunctions.java ; Change date_format and date_parse to use server local time as mysql does ; nan
585 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Some extra commits for the UNION stuff ; nan
585 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanRewriter.java ; Some extra commits for the UNION stuff ; nan
585 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Some extra commits for the UNION stuff ; nan
585 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultTraversalVisitor.java ; Some extra commits for the UNION stuff ; nan
585 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Except.java ; Some extra commits for the UNION stuff ; nan
585 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Intersect.java ; Some extra commits for the UNION stuff ; nan
585 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/NodeRewriter.java ; Some extra commits for the UNION stuff ; nan
585 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/SetOperation.java ; Some extra commits for the UNION stuff ; nan
585 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/TreeRewriter.java ; Some extra commits for the UNION stuff ; nan
586 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Assure task info end time is set when task is done ; nan
586 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskOutput.java ; Assure task info end time is set when task is done ; nan
586 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Assure task info end time is set when task is done ; nan
587 ; presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/UnaliasSymbolReferences.java ; Provides a quick fix for the UNION ordering issue ; nan
587 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Provides a quick fix for the UNION ordering issue ; nan
588 ; presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Collapse project on filter  ; nan
591 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Clear operator in worker after work is completed ; nan
592 ; presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Add tpch query 6 to benchmark ; nan
592 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlTpchQuery6.java ; Add tpch query 6 to benchmark ; nan
593 ; presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Fix planning issue when grouping by repeated fields ; nan
593 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix planning issue when grouping by repeated fields ; nan
594 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Avoid exponential backtracking when parsing nested expressions ; nan
595 ; presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Add queryId/stageId/taskId to worker thread names ; nan
595 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Add queryId/stageId/taskId to worker thread names ; nan
595 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Add queryId/stageId/taskId to worker thread names ; nan
595 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Add queryId/stageId/taskId to worker thread names ; nan
595 ;  presto-main/src/main/java/com/facebook/presto/util/SetThreadName.java ; Add queryId/stageId/taskId to worker thread names ; nan
595 ;  presto-server/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Add queryId/stageId/taskId to worker thread names ; nan
597 ; presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Really fix issue when grouping by repeated fields ; The previous fix was in the wrong place
597 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java ; Really fix issue when grouping by repeated fields ; The previous fix was in the wrong place
598 ; presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedLogicalPlanner.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanSanityChecker.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlan.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/SymbolExtractor.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SetFlatteningOptimizer.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/UnaliasSymbolReferences.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/LocalUnionNode.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanRewriter.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanVisitor.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SinkNode.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/UnionNode.java ; Normalize UNION input if the underlying projection differs from expected ; nan
598 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Normalize UNION input if the underlying projection differs from expected ; nan
600 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Add basic regexp functions ; nan
600 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/RegexpFunctions.java ; Add basic regexp functions ; nan
600 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Add basic regexp functions ; nan
600 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlRegexpLikeBenchmark.java ; Add basic regexp functions ; nan
600 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestRegexpFunctions.java ; Add basic regexp functions ; nan
601 ; presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java ; Add Limit push down optimizer ; nan
601 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java ; Add Limit push down optimizer ; nan
601 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/CoalesceLimits.java ; Add Limit push down optimizer ; nan
601 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/LimitPushDown.java ; Add Limit push down optimizer ; nan
601 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/MergeProjections.java ; Add Limit push down optimizer ; nan
601 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PlanOptimizer.java ; Add Limit push down optimizer ; nan
601 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneRedundantProjections.java ; Add Limit push down optimizer ; nan
601 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Add Limit push down optimizer ; nan
601 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SetFlatteningOptimizer.java ; Add Limit push down optimizer ; nan
601 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SimplifyExpressions.java ; Add Limit push down optimizer ; nan
601 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/TableAliasSelector.java ; Add Limit push down optimizer ; nan
601 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/UnaliasSymbolReferences.java ; Add Limit push down optimizer ; nan
601 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/LimitNode.java ; Add Limit push down optimizer ; nan
601 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/OutputNode.java ; Add Limit push down optimizer ; nan
601 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add Limit push down optimizer ; nan
603 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/UnixTimeFunctions.java ; Function cleanups ; nan
605 ; presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Fix hang in LIKE operator for invalid UTF-8 ; nan
605 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Fix hang in LIKE operator for invalid UTF-8 ; nan
606 ; presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Add support for IS DISTINCT FROM ; nan
606 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Add support for IS DISTINCT FROM ; nan
606 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ComparisonExpression.java ; Add support for IS DISTINCT FROM ; nan
606 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementBuilder.java ; Add support for IS DISTINCT FROM ; nan
607 ; presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedFilterFunction.java ; Fix comparison test for IS DISTINCT FROM ; nan
608 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Fix Hadoop FileSystem caching ; nan
609 ; presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java ; Some minor optimizations ; nan
610 ; presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Compiler ; nan
611 ; presto-hive/src/main/java/com/facebook/presto/hive/SlowDatanodeSwitcher.java ; Make SlowDatanodeSwitcher compatible with cdh4 ; nan
612 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/StringFunctions.java ; Add the split_part string function ; nan
612 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestStringFunctions.java ; Add the split_part string function ; nan
613 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/StringFunctions.java ; Add url_extract and url_extract_param ; nan
613 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestStringFunctions.java ; Add url_extract and url_extract_param ; nan
614 ; presto-main/src/main/java/com/facebook/presto/operator/aggregation/BooleanSumAggregation.java ; Full boolean support ; nan
614 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestBooleanSumAggregation.java ; Full boolean support ; nan
615 ; presto-main/src/main/java/com/facebook/presto/byteCode/Block.java ; Codegen filter to record set ; nan
615 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/ExpressionCompiler.java ; Codegen filter to record set ; nan
616 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java ; Make error message say  column  instead of  attribute  ; nan
617 ; presto-main/src/main/java/com/facebook/presto/execution/TaskOutput.java ; Add exception cause before transitioning to FAILED state ; nan
618 ; presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java ; Excape single quotes when outputing string literal ; nan
619 ; presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Refresh hive cached values in background ; nan
619 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForHiveMetastore.java ; Refresh hive cached values in background ; nan
619 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java ; Refresh hive cached values in background ; nan
619 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java ; Refresh hive cached values in background ; nan
619 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestCachingHiveMetastore.java ; Refresh hive cached values in background ; nan
619 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Refresh hive cached values in background ; nan
619 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java ; Refresh hive cached values in background ; nan
619 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientSplitIteratorBackPressure.java ; Refresh hive cached values in background ; nan
620 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Throw specific message for identifiers containing a colon ; nan
622 ; presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Improve error messages ; nan
623 ; presto-main/src/main/java/com/facebook/presto/event/query/QueryCompletionEvent.java ; Add environment to event objects ; nan
623 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryCreatedEvent.java ; Add environment to event objects ; nan
623 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryMonitor.java ; Add environment to event objects ; nan
623 ;  presto-main/src/main/java/com/facebook/presto/event/query/SplitCompletionEvent.java ; Add environment to event objects ; nan
623 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Add environment to event objects ; nan
624 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Add json_array_length and json_array_contains ; nan
624 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/JsonFunctions.java ; Add json_array_length and json_array_contains ; nan
624 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/DefaultFunctionBinder.java ; Add json_array_length and json_array_contains ; nan
624 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/ExpressionCompiler.java ; Add json_array_length and json_array_contains ; nan
624 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestJsonFunctions.java ; Add json_array_length and json_array_contains ; nan
624 ;  presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Add json_array_length and json_array_contains ; nan
625 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Change sum(Boolean) to count_if(boolean) with same null handeling as count ; nan
625 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountIfAggregation.java ; Change sum(Boolean) to count_if(boolean) with same null handeling as count ; nan
625 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestCountIfAggregation.java ; Change sum(Boolean) to count_if(boolean) with same null handeling as count ; nan
626 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Split URL extraction into separate functions ; nan
626 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/StringFunctions.java ; Split URL extraction into separate functions ; nan
626 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/UrlFunctions.java ; Split URL extraction into separate functions ; nan
626 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Split URL extraction into separate functions ; nan
626 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestStringFunctions.java ; Split URL extraction into separate functions ; nan
626 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestUrlFunctions.java ; Split URL extraction into separate functions ; nan
627 ; presto-main/src/main/java/com/facebook/presto/sql/gen/ExpressionCompiler.java ; Properly handle null in filter funtion result ; nan
627 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Properly handle null in filter funtion result ; nan
627 ;  presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Properly handle null in filter funtion result ; nan
628 ; presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Fix comparisons of longs as doubles in interpreter ; nan
628 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Fix comparisons of longs as doubles in interpreter ; nan
628 ;  presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Fix comparisons of longs as doubles in interpreter ; nan
631 ;  presto-parser/src/main/java/com/facebook/presto/sql/parser/SqlParser.java ; Fix parsing of current_timestamp as a single expression ; nan
631 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Fix parsing of current_timestamp as a single expression ; nan
633 ; presto-main/src/main/java/com/facebook/presto/byteCode/Block.java ; Align compiler interpreter ; nan
633 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/JsonFunctions.java ; Align compiler interpreter ; nan
633 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/RegexpFunctions.java ; Align compiler interpreter ; nan
633 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/BootstrapFunctionBinder.java ; Align compiler interpreter ; nan
633 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/DefaultFunctionBinder.java ; Align compiler interpreter ; nan
633 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/ExpressionCompiler.java ; Align compiler interpreter ; nan
633 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/FunctionBinder.java ; Align compiler interpreter ; nan
633 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/LikeFunctionBinder.java ; Align compiler interpreter ; nan
633 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/OperatorFactory.java ; Align compiler interpreter ; nan
633 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Align compiler interpreter ; nan
633 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Align compiler interpreter ; nan
633 ;  presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Align compiler interpreter ; nan
634 ; presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Fix bug in MAX/MIN aggregations with null strings ; nan
634 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix bug in MAX/MIN aggregations with null strings ; nan
635 ; presto-main/src/main/java/com/facebook/presto/connector/dual/DualSplitManager.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaSplitManager.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxSplitManager.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemSplitManager.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/operator/TableScanOperator.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/ExpressionUtils.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DeterminismEvaluator.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedExecutionPlanner.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInliner.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanSanityChecker.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/Symbol.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/LimitPushDown.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/MergeProjections.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PlanOptimizer.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PredicatePushDown.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SimplifyExpressions.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/TableAliasSelector.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/UnaliasSymbolReferences.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/TableScanNode.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/UnionNode.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/main/java/com/facebook/presto/util/GraphvizPrinter.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashJoinOperator.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestDeterminismEvaluator.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/optimizations/TestEqualityInference.java ; Left Join + Predicate Pushdown ; nan
635 ;  presto-main/src/test/java/com/facebook/presto/util/LocalQueryRunner.java ; Left Join + Predicate Pushdown ; nan
636 ; presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Reduce the number of expected groups ; The current value of 100k means that each aggregation requires at least 400 KB of memory. For a query running ~120 splits per node  this adds up.
638 ; presto-main/src/main/java/com/facebook/presto/sql/gen/DefaultFunctionBinder.java ; Fix Eclipse compile errors ; The Eclipse incremental compiler can not deal with the short expressions. Hint with some casts.
638 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/ExpressionCompiler.java ; Fix Eclipse compile errors ; The Eclipse incremental compiler can not deal with the short expressions. Hint with some casts.
639 ; presto-main/src/main/java/com/facebook/presto/execution/CreateAliasExecution.java ; Fix reversed precondition that broke aliases ; nan
641 ; presto-main/src/main/java/com/facebook/presto/sql/gen/ExpressionCompiler.java ; Fix isNull call for classes generated against RecordSet ; nan
641 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Fix isNull call for classes generated against RecordSet ; nan
641 ;  presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Fix isNull call for classes generated against RecordSet ; nan
642 ; presto-main/src/main/java/com/facebook/presto/operator/ProjectionFunctions.java ; Fix broken ConcatProjection function ; nan
643 ; presto-main/src/main/java/com/facebook/presto/byteCode/Block.java ; Update operator stats when reading directly from RecordSet ; nan
643 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/VariableInstruction.java ; Update operator stats when reading directly from RecordSet ; nan
643 ;  presto-main/src/main/java/com/facebook/presto/operator/AbstractFilterAndProjectOperator.java ; Update operator stats when reading directly from RecordSet ; nan
643 ;  presto-main/src/main/java/com/facebook/presto/operator/FilterAndProjectOperator.java ; Update operator stats when reading directly from RecordSet ; nan
643 ;  presto-main/src/main/java/com/facebook/presto/operator/PageIterators.java ; Update operator stats when reading directly from RecordSet ; nan
643 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/ExpressionCompiler.java ; Update operator stats when reading directly from RecordSet ; nan
643 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HandTpchQuery6.java ; Update operator stats when reading directly from RecordSet ; nan
643 ;  presto-main/src/test/java/com/facebook/presto/operator/OperatorAssertions.java ; Update operator stats when reading directly from RecordSet ; nan
643 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Update operator stats when reading directly from RecordSet ; nan
643 ;  presto-spi/src/main/java/com/facebook/presto/spi/InMemoryRecordSet.java ; Update operator stats when reading directly from RecordSet ; nan
644 ; presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Add EXPLAIN functionality to presto ; nan
644 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Add EXPLAIN functionality to presto ; nan
644 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/QueryExplainer.java ; Add EXPLAIN functionality to presto ; nan
644 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Add EXPLAIN functionality to presto ; nan
644 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Add EXPLAIN functionality to presto ; nan
644 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Add EXPLAIN functionality to presto ; nan
644 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add EXPLAIN functionality to presto ; nan
644 ;  presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java ; Add EXPLAIN functionality to presto ; nan
644 ;  presto-main/src/test/java/com/facebook/presto/util/LocalQueryRunner.java ; Add EXPLAIN functionality to presto ; nan
644 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Add EXPLAIN functionality to presto ; nan
644 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Explain.java ; Add EXPLAIN functionality to presto ; nan
644 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementBuilder.java ; Add EXPLAIN functionality to presto ; nan
644 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Add EXPLAIN functionality to presto ; nan
646 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/ColorFunctions.java ; Add boolean support to render() function ; nan
649 ; presto-main/src/main/java/com/facebook/presto/connector/system/AliasSystemTable.java ; implement sys.alias ; list all the table aliases in the system.  select \* from sys.alias   source_connector_id | source_schema_name |              source_table_name               | destination_connector_id | destination_schema_name | destination_table_name ---------------------+--------------------+----------------------------------------------+--------------------------+-------------------------+------------------------  ailabs              | bi_carolina        | tmp_presto_polaris_lu_psychographic_segments | default                  | default                 | tpp (1 row)
649 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemTablesModule.java ; implement sys.alias ; list all the table aliases in the system.  select \* from sys.alias   source_connector_id | source_schema_name |              source_table_name               | destination_connector_id | destination_schema_name | destination_table_name ---------------------+--------------------+----------------------------------------------+--------------------------+-------------------------+------------------------  ailabs              | bi_carolina        | tmp_presto_polaris_lu_psychographic_segments | default                  | default                 | tpp (1 row)
649 ;  presto-main/src/main/java/com/facebook/presto/metadata/AliasDao.java ; implement sys.alias ; list all the table aliases in the system.  select \* from sys.alias   source_connector_id | source_schema_name |              source_table_name               | destination_connector_id | destination_schema_name | destination_table_name ---------------------+--------------------+----------------------------------------------+--------------------------+-------------------------+------------------------  ailabs              | bi_carolina        | tmp_presto_polaris_lu_psychographic_segments | default                  | default                 | tpp (1 row)
650 ; presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java ; Fix deadlock between stage with too many splits and substage with full output buffers ; nan
650 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Fix deadlock between stage with too many splits and substage with full output buffers ; nan
650 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskOutput.java ; Fix deadlock between stage with too many splits and substage with full output buffers ; nan
650 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlStageExecution.java ; Fix deadlock between stage with too many splits and substage with full output buffers ; nan
650 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Fix deadlock between stage with too many splits and substage with full output buffers ; nan
651 ; presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add test for count with boolean argument ; nan
652 ; presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryExecutor.java ; JDBC fixes ; nan
654 ; presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaDataStreamProvider.java ; Add SHOW SCHEMAS function ; nan
654 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaMetadata.java ; Add SHOW SCHEMAS function ; nan
654 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Add SHOW SCHEMAS function ; nan
654 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add SHOW SCHEMAS function ; nan
654 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Add SHOW SCHEMAS function ; nan
654 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ShowSchemas.java ; Add SHOW SCHEMAS function ; nan
654 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Add SHOW SCHEMAS function ; nan
657 ; presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Limit memory for entire task instead of per operator ; nan
658 ; presto-cli/src/main/java/com/facebook/presto/cli/Console.java ; Rework tab complete to run a query and add tab complete for functions ; nan
658 ;  presto-cli/src/main/java/com/facebook/presto/cli/HttpMetadataClient.java ; Rework tab complete to run a query and add tab complete for functions ; nan
658 ;  presto-cli/src/main/java/com/facebook/presto/cli/QueryRunner.java ; Rework tab complete to run a query and add tab complete for functions ; nan
658 ;  presto-cli/src/main/java/com/facebook/presto/cli/TableNameCompleter.java ; Rework tab complete to run a query and add tab complete for functions ; nan
659 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Add support for Right join ; nan
659 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedLogicalPlanner.java ; Add support for Right join ; nan
659 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Add support for Right join ; nan
659 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Add support for Right join ; nan
659 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PredicatePushDown.java ; Add support for Right join ; nan
659 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java ; Add support for Right join ; nan
659 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add support for Right join ; nan
660 ; presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportDao.java ; Fix cascading of job to run table. ; Any run for a job will hold the row in the job table and jobs can not be deleted. Change foreign key to drop all run records if a job gets deleted.
664 ; presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; Change operators to have pre allocated memory instead of a min flush size ; nan
664 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Change operators to have pre allocated memory instead of a min flush size ; nan
664 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Change operators to have pre allocated memory instead of a min flush size ; nan
664 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskMemoryManager.java ; Change operators to have pre allocated memory instead of a min flush size ; nan
664 ;  presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Change operators to have pre allocated memory instead of a min flush size ; nan
664 ;  presto-main/src/main/java/com/facebook/presto/operator/TopNOperator.java ; Change operators to have pre allocated memory instead of a min flush size ; nan
664 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryManagerConfig.java ; Change operators to have pre allocated memory instead of a min flush size ; nan
664 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashAggregationOperator.java ; Change operators to have pre allocated memory instead of a min flush size ; nan
667 ; presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java ; Run prune unreferenced outputs one more time for predicate pushdown ; nan
668 ;  presto-server/src/main/java/com/facebook/presto/server/Main.java ; Show warning message if FloatingDecimal patch to fix monitoring contention is not installed ; nan
670 ; presto-main/src/main/java/com/facebook/presto/sql/gen/ExpressionCompiler.java ; Fix compilation of IF and CASE statements with nulls ; nan
670 ;  presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Fix compilation of IF and CASE statements with nulls ; nan
671 ; presto-cli/src/main/java/com/facebook/presto/cli/Console.java ; Add namespace to CLI output ; nan
672 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/QueryExplainer.java ; Add FORMAT to EXPLAIN queries  and add graphviz explain functionality ; nan
672 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Add FORMAT to EXPLAIN queries  and add graphviz explain functionality ; nan
672 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Add FORMAT to EXPLAIN queries  and add graphviz explain functionality ; nan
672 ;  presto-main/src/main/java/com/facebook/presto/util/GraphvizPrinter.java ; Add FORMAT to EXPLAIN queries  and add graphviz explain functionality ; nan
672 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add FORMAT to EXPLAIN queries  and add graphviz explain functionality ; nan
672 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Add FORMAT to EXPLAIN queries  and add graphviz explain functionality ; nan
672 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Explain.java ; Add FORMAT to EXPLAIN queries  and add graphviz explain functionality ; nan
672 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ExplainFormat.java ; Add FORMAT to EXPLAIN queries  and add graphviz explain functionality ; nan
672 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ExplainOption.java ; Add FORMAT to EXPLAIN queries  and add graphviz explain functionality ; nan
673 ; presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxSplitManager.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/main/java/com/facebook/presto/connector/system/NodesSystemTable.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemSplitManager.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/main/java/com/facebook/presto/metadata/AllNodes.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/main/java/com/facebook/presto/metadata/DiscoveryNodeManager.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/main/java/com/facebook/presto/metadata/InMemoryNodeManager.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/main/java/com/facebook/presto/metadata/Node.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/main/java/com/facebook/presto/metadata/NodeManager.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/main/java/com/facebook/presto/metadata/NodeVersion.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardCleaner.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/main/java/com/facebook/presto/split/NativeSplitManager.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/TableAliasSelector.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/main/java/com/facebook/presto/tpch/TpchSplitManager.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlStageExecution.java ; Filter active nodes by node version ; nan
673 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestDiscoveryNodeManager.java ; Filter active nodes by node version ; nan
673 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Filter active nodes by node version ; nan
673 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Filter active nodes by node version ; nan
673 ;  presto-server/src/test/java/com/facebook/presto/server/TestingPrestoServer.java ; Filter active nodes by node version ; nan
674 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/JsonExtract.java ; Disable Jackson field name canonicalization (string intern cache) ; Close Jackson parsers after use
674 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/JsonFunctions.java ; Disable Jackson field name canonicalization (string intern cache) ; Close Jackson parsers after use
675 ; presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Fix compiler var-args warning ; nan
676 ; presto-hive/src/main/java/com/facebook/presto/hive/BackgroundCacheLoader.java ; Allow per-host configuration for HDFS ; nan
676 ;  presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Allow per-host configuration for HDFS ; nan
677 ; presto-main/src/main/java/com/facebook/presto/operator/AggregationOperator.java ; stop processing if operatorStats says we are done ; nan
677 ;  presto-main/src/main/java/com/facebook/presto/operator/TableWriterOperator.java ; stop processing if operatorStats says we are done ; nan
678 ; presto-hive/src/main/java/com/facebook/presto/hive/BytesHiveRecordCursor.java ; Parse Hive column values as needed instead of all up front ; nan
678 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Parse Hive column values as needed instead of all up front ; nan
678 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveBooleanParser.java ; Parse Hive column values as needed instead of all up front ; nan
680 ; presto-main/src/main/java/com/facebook/presto/split/NativeSplit.java ; allow empty address lists in native split ; NativeSplit only needs an address when reading data. When data is written  the node that will hold the data will be known only after the data was written (and the split was consumed). This was masked till now by using the list of addresses from the source split (the hdfs nodes that hold the source data) but the raid changes now may return empty lists.  Fix is to allow empty lists  set the list explicitly to empty when creating a write split and check to make sure that the list of addresses returned in the native split manager is not empty.
680 ;  presto-main/src/main/java/com/facebook/presto/split/NativeSplitManager.java ; allow empty address lists in native split ; NativeSplit only needs an address when reading data. When data is written  the node that will hold the data will be known only after the data was written (and the split was consumed). This was masked till now by using the list of addresses from the source split (the hdfs nodes that hold the source data) but the raid changes now may return empty lists.  Fix is to allow empty lists  set the list explicitly to empty when creating a write split and check to make sure that the list of addresses returned in the native split manager is not empty.
680 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/TableWriter.java ; allow empty address lists in native split ; NativeSplit only needs an address when reading data. When data is written  the node that will hold the data will be known only after the data was written (and the split was consumed). This was masked till now by using the list of addresses from the source split (the hdfs nodes that hold the source data) but the raid changes now may return empty lists.  Fix is to allow empty lists  set the list explicitly to empty when creating a write split and check to make sure that the list of addresses returned in the native split manager is not empty.
681 ; presto-main/src/main/java/com/facebook/presto/operator/TableWriterOperator.java ; Exception fixes ; nan
682 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Adjust the partition fetch batch characteristics  ; nan
682 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java ; Adjust the partition fetch batch characteristics  ; nan
682 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Adjust the partition fetch batch characteristics  ; nan
682 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java ; Adjust the partition fetch batch characteristics  ; nan
682 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientSplitIteratorBackPressure.java ; Adjust the partition fetch batch characteristics  ; nan
683 ; presto-cli/src/main/java/com/facebook/presto/cli/AlignedTuplePrinter.java ; Only print wrap indicator for multiple rows ; nan
683 ;  presto-cli/src/main/java/com/facebook/presto/cli/CsvPrinter.java ; Only print wrap indicator for multiple rows ; nan
683 ;  presto-cli/src/main/java/com/facebook/presto/cli/OutputHandler.java ; Only print wrap indicator for multiple rows ; nan
683 ;  presto-cli/src/main/java/com/facebook/presto/cli/OutputPrinter.java ; Only print wrap indicator for multiple rows ; nan
683 ;  presto-cli/src/test/java/com/facebook/presto/cli/TestAlignedTuplePrinter.java ; Only print wrap indicator for multiple rows ; nan
683 ;  presto-cli/src/test/java/com/facebook/presto/cli/TestCsvPrinter.java ; Only print wrap indicator for multiple rows ; nan
684 ; presto-cli/src/main/java/com/facebook/presto/cli/Help.java ; Add function annotation for more verbose descriptions ; nan
684 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaDataStreamProvider.java ; Add function annotation for more verbose descriptions ; nan
684 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaMetadata.java ; Add function annotation for more verbose descriptions ; nan
684 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionInfo.java ; Add function annotation for more verbose descriptions ; nan
684 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Add function annotation for more verbose descriptions ; nan
684 ;  presto-main/src/main/java/com/facebook/presto/operator/Description.java ; Add function annotation for more verbose descriptions ; nan
684 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java ; Add function annotation for more verbose descriptions ; nan
684 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/RegexpFunctions.java ; Add function annotation for more verbose descriptions ; nan
684 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/StringFunctions.java ; Add function annotation for more verbose descriptions ; nan
684 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/UnixTimeFunctions.java ; Add function annotation for more verbose descriptions ; nan
684 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/UrlFunctions.java ; Add function annotation for more verbose descriptions ; nan
684 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Add function annotation for more verbose descriptions ; nan
684 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add function annotation for more verbose descriptions ; nan
685 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java ; Hive timestamp fixes ; nan
685 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveUtil.java ; Hive timestamp fixes ; nan
686 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Use SQL types for metadata ; nan
686 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Type.java ; Use SQL types for metadata ; nan
686 ;  presto-main/src/main/java/com/facebook/presto/tuple/TupleInfo.java ; Use SQL types for metadata ; nan
686 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Use SQL types for metadata ; nan
687 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; More verbose message for  function not found  exception ; nan
688 ; presto-cli/src/main/java/com/facebook/presto/cli/ClientOptions.java ; Add -f <filename> option to run query from file ; nan
688 ;  presto-cli/src/main/java/com/facebook/presto/cli/Console.java ; Add -f <filename> option to run query from file ; nan
689 ; presto-cli/src/main/java/com/facebook/presto/cli/AlignedTuplePrinter.java ; Add vertical output ; nan
689 ;  presto-cli/src/main/java/com/facebook/presto/cli/ClientOptions.java ; Add vertical output ; nan
689 ;  presto-cli/src/main/java/com/facebook/presto/cli/Console.java ; Add vertical output ; nan
689 ;  presto-cli/src/main/java/com/facebook/presto/cli/Query.java ; Add vertical output ; nan
689 ;  presto-cli/src/main/java/com/facebook/presto/cli/VerticalTuplePrinter.java ; Add vertical output ; nan
689 ;  presto-cli/src/test/java/com/facebook/presto/cli/TestVerticalTuplePrinter.java ; Add vertical output ; nan
690 ; presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementSplitter.java ; Fix tests ; nan
691 ; presto-cli/src/main/java/com/facebook/presto/cli/Pager.java ; Make pager configurable ; nan
691 ;  presto-cli/src/main/java/com/facebook/presto/cli/Query.java ; Make pager configurable ; nan
692 ; presto-main/src/main/java/com/facebook/presto/operator/AbstractFilterAndProjectOperator.java ; Stop operators when query is done ; nan
692 ;  presto-main/src/main/java/com/facebook/presto/operator/FilterAndProjectOperator.java ; Stop operators when query is done ; nan
692 ;  presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Stop operators when query is done ; nan
692 ;  presto-main/src/main/java/com/facebook/presto/operator/HashJoinOperator.java ; Stop operators when query is done ; nan
692 ;  presto-main/src/main/java/com/facebook/presto/operator/InMemoryOrderByOperator.java ; Stop operators when query is done ; nan
692 ;  presto-main/src/main/java/com/facebook/presto/operator/InMemoryWindowOperator.java ; Stop operators when query is done ; nan
692 ;  presto-main/src/main/java/com/facebook/presto/operator/PagesIndex.java ; Stop operators when query is done ; nan
692 ;  presto-main/src/main/java/com/facebook/presto/operator/SourceHash.java ; Stop operators when query is done ; nan
692 ;  presto-main/src/main/java/com/facebook/presto/operator/SourceHashProvider.java ; Stop operators when query is done ; nan
692 ;  presto-main/src/main/java/com/facebook/presto/operator/TopNOperator.java ; Stop operators when query is done ; nan
692 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/ExpressionCompiler.java ; Stop operators when query is done ; nan
693 ; presto-server/src/main/java/com/facebook/presto/server/TaskResource.java ; Reduce requests ; nan
694 ; presto-main/src/main/java/com/facebook/presto/util/GraphvizPrinter.java ; Add unsupported nodes to graphviz printer ; nan
695 ; presto-server/src/main/java/com/facebook/presto/server/Main.java ; Make distributed tests using TestingPrestoServer	 ; nan
696 ; presto-main/src/main/java/com/facebook/presto/sql/planner/DependencyExtractor.java ; Predicate move around ; nan
696 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/EffectivePredicateExtractor.java ; Predicate move around ; nan
696 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/EqualityInference.java ; Predicate move around ; nan
696 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanSanityChecker.java ; Predicate move around ; nan
696 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PredicatePushDown.java ; Predicate move around ; nan
696 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Predicate move around ; nan
696 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/TableScanNode.java ; Predicate move around ; nan
696 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/UnionNode.java ; Predicate move around ; nan
696 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestEqualityInference.java ; Predicate move around ; nan
698 ; presto-main/src/test/java/com/facebook/presto/operator/TestExchangeClient.java ; Fix hangs in failing unit tests ; nan
698 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHttpPageBufferClient.java ; Fix hangs in failing unit tests ; nan
699 ;  presto-cli/src/main/java/com/facebook/presto/cli/FormatUtils.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-cli/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-hive/src/main/java/com/facebook/presto/hive/FileSystemCache.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-hive/src/main/java/com/facebook/presto/hive/HdfsConfiguration.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveMetastoreClientFactory.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-hive/src/main/java/com/facebook/presto/hive/RetryDriver.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-hive/src/main/java/com/facebook/presto/hive/SlowDatanodeSwitcher.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/connector/system/QuerySystemTable.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/connector/system/TaskSystemTable.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryCompletionEvent.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/event/query/SplitCompletionEvent.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/execution/ExecutionStats.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/execution/SharedBuffer.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManagerStats.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/execution/StageStats.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/execution/StateMachine.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/failureDetector/HeartbeatFailureDetector.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/importer/DatabasePeriodicImportManager.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportController.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/metadata/AliasDao.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataDao.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardCleaner.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardManagerDao.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/operator/ExchangeClient.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/storage/StorageDao.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/main/java/com/facebook/presto/util/CpuTimer.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractBenchmark.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractOperatorBenchmark.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/test/java/com/facebook/presto/benchmark/FormatUtils.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSharedBuffer.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-server/src/main/java/com/facebook/presto/server/StatementResource.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-server/src/main/java/com/facebook/presto/server/TaskResource.java ; Update to ResponseHandler API change in Airlift ; nan
699 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Update to ResponseHandler API change in Airlift ; nan
701 ; presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Extract TestingDiscoveryServer to upper level ; nan
701 ;  presto-server/src/test/java/com/facebook/presto/server/TestingDiscoveryServer.java ; Extract TestingDiscoveryServer to upper level ; nan
702 ; presto-cli/src/main/java/com/facebook/presto/cli/Pager.java ; Make QueryAbortedException an IOException ; nan
702 ;  presto-cli/src/main/java/com/facebook/presto/cli/Query.java ; Make QueryAbortedException an IOException ; nan
702 ;  presto-cli/src/main/java/com/facebook/presto/cli/QueryAbortedException.java ; Make QueryAbortedException an IOException ; nan
703 ; presto-main/src/main/java/com/facebook/presto/sql/planner/LikeUtils.java ; Fix infinite loop when LIKE pattern has utf-8 chars ; nan
703 ;  presto-main/src/test/java/com/facebook/presto/sql/TestLikeUtils.java ; Fix infinite loop when LIKE pattern has utf-8 chars ; nan
707 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Fixes for problems found in verifier ; nan
707 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskOutput.java ; Fixes for problems found in verifier ; nan
707 ;  presto-server/src/main/java/com/facebook/presto/server/TaskResource.java ; Fixes for problems found in verifier ; nan
708 ; presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Fix eager evaluation of conditions ; nan
708 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Fix eager evaluation of conditions ; nan
709 ; presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Fix LIKE escaping ; Makes it compliant to ANSI
709 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LikeUtils.java ; Fix LIKE escaping ; Makes it compliant to ANSI
709 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestConditions.java ; Fix LIKE escaping ; Makes it compliant to ANSI
709 ;  presto-main/src/test/java/com/facebook/presto/sql/TestLikeUtils.java ; Fix LIKE escaping ; Makes it compliant to ANSI
710 ; presto-main/src/main/java/com/facebook/presto/execution/SharedBuffer.java ; Add failed method to shared buffer to free writers on query failure ; nan
710 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskOutput.java ; Add failed method to shared buffer to free writers on query failure ; nan
710 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSharedBuffer.java ; Add failed method to shared buffer to free writers on query failure ; nan
712 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/UnixTimeFunctions.java ; Add unixtime conversion functions ; nan
712 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestUnixTimeFunctions.java ; Add unixtime conversion functions ; nan
713 ; presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Datetime function cleanup ; nan
713 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestUnixTimeFunctions.java ; Datetime function cleanup ; nan
713 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Extract.java ; Datetime function cleanup ; nan
714 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Retry createRecordReader ; nan
715 ; presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Fix EXTRACT tests ; nan
719 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Use SQL types in error messages ; nan
719 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Type.java ; Use SQL types in error messages ; nan
719 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Use SQL types in error messages ; nan
721 ; presto-main/src/main/java/com/facebook/presto/sql/planner/EqualityInference.java ; A few improvements for predicate move around ; nan
721 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/SubExpressionExtractor.java ; A few improvements for predicate move around ; nan
721 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestEffectivePredicateExtractor.java ; A few improvements for predicate move around ; nan
722 ; presto-cli/src/main/java/com/facebook/presto/cli/CsvPrinter.java ; Use escaping rather than enclosing quotes for TSV ; nan
722 ;  presto-cli/src/main/java/com/facebook/presto/cli/Query.java ; Use escaping rather than enclosing quotes for TSV ; nan
722 ;  presto-cli/src/main/java/com/facebook/presto/cli/TsvPrinter.java ; Use escaping rather than enclosing quotes for TSV ; nan
722 ;  presto-cli/src/test/java/com/facebook/presto/cli/TestCsvPrinter.java ; Use escaping rather than enclosing quotes for TSV ; nan
722 ;  presto-cli/src/test/java/com/facebook/presto/cli/TestTsvPrinter.java ; Use escaping rather than enclosing quotes for TSV ; nan
723 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Support WHERE and ORDER BY for SHOW PARTITIONS ; nan
723 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/QueryUtil.java ; Support WHERE and ORDER BY for SHOW PARTITIONS ; nan
723 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ShowPartitions.java ; Support WHERE and ORDER BY for SHOW PARTITIONS ; nan
723 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementBuilder.java ; Support WHERE and ORDER BY for SHOW PARTITIONS ; nan
725 ; presto-cli/src/main/java/com/facebook/presto/cli/Help.java ; Support LIMIT for SHOW PARTITIONS ; nan
725 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Support LIMIT for SHOW PARTITIONS ; nan
725 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ShowPartitions.java ; Support LIMIT for SHOW PARTITIONS ; nan
725 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementBuilder.java ; Support LIMIT for SHOW PARTITIONS ; nan
727 ; presto-server/src/main/java/com/facebook/presto/server/Main.java ; Workaround for Code Cache eviction problems in Java 7 Hotspot ; nan
728 ; presto-parser/src/main/java/com/facebook/presto/sql/parser/ParsingException.java ; Handle StackOverflowError from parser ; nan
728 ;  presto-parser/src/main/java/com/facebook/presto/sql/parser/SqlParser.java ; Handle StackOverflowError from parser ; nan
728 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Handle StackOverflowError from parser ; nan
729 ; presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Handle StackOverflowError during analysis ; nan
729 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Handle StackOverflowError during analysis ; nan
730 ; presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PredicatePushDown.java ; Fix non-deterministic predicate pushdown for aggregates and table scans ; nan
730 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix non-deterministic predicate pushdown for aggregates and table scans ; nan
731 ; presto-server/src/main/java/com/facebook/presto/server/Main.java ; Install the code cache gc trigger on run() ; nan
732 ; presto-main/src/main/java/com/facebook/presto/operator/ExchangeClientFactory.java ; Use Supplier instead of Provider for ExchangeClient ; nan
732 ;  presto-main/src/main/java/com/facebook/presto/operator/ExchangeOperator.java ; Use Supplier instead of Provider for ExchangeClient ; nan
732 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Use Supplier instead of Provider for ExchangeClient ; nan
732 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Use Supplier instead of Provider for ExchangeClient ; nan
732 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Use Supplier instead of Provider for ExchangeClient ; nan
732 ;  presto-server/src/main/java/com/facebook/presto/server/StatementResource.java ; Use Supplier instead of Provider for ExchangeClient ; nan
733 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Use Supplier instead of Provider ; nan
733 ;  presto-main/src/main/java/com/facebook/presto/operator/HashJoinOperator.java ; Use Supplier instead of Provider ; nan
733 ;  presto-main/src/main/java/com/facebook/presto/operator/SourceHashSupplier.java ; Use Supplier instead of Provider ; nan
733 ;  presto-main/src/main/java/com/facebook/presto/operator/SourceHashSupplierFactory.java ; Use Supplier instead of Provider ; nan
733 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Use Supplier instead of Provider ; nan
733 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashBuildAndJoinBenchmark.java ; Use Supplier instead of Provider ; nan
733 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashBuildBenchmark.java ; Use Supplier instead of Provider ; nan
733 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashJoinBenchmark.java ; Use Supplier instead of Provider ; nan
733 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashJoinOperator.java ; Use Supplier instead of Provider ; nan
733 ;  presto-main/src/test/java/com/facebook/presto/util/LocalQueryRunner.java ; Use Supplier instead of Provider ; nan
734 ; presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Add benchmark for sql join queries with predicates on the join clause ; nan
734 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlJoinWithPredicateBenchmark.java ; Add benchmark for sql join queries with predicates on the join clause ; nan
735 ;  presto-server/src/main/java/com/facebook/presto/server/PluginManagerConfig.java ; Upgrade to Airlift 0.79-SNAPSHOT ; nan
735 ;  presto-server/src/test/java/com/facebook/presto/server/TestPluginManagerConfig.java ; Upgrade to Airlift 0.79-SNAPSHOT ; nan
736 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Add Hive partition columns last to match Hive ; nan
736 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Add Hive partition columns last to match Hive ; nan
741 ; presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java ; New operator framework ; The commits are structured as follows - Add new operator and testing framework - Add new versions of all existing operators - Convert execution engine to use new operators - Add new scheduler that favors interactive queries - Add blocking support to operators - Rewrite the context and stats system  - Convert compiler to new operators - Convert benchmarks to new operators - Convert storage manager to new operators - Convert a few remaining tests - Remove old operators  After this main body of work is reviewed  I will add additional commits to repackage and rename classes to the old style  because doing this before the review will make fixes more difficult.
741 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryStats.java ; New operator framework ; The commits are structured as follows - Add new operator and testing framework - Add new versions of all existing operators - Convert execution engine to use new operators - Add new scheduler that favors interactive queries - Add blocking support to operators - Rewrite the context and stats system  - Convert compiler to new operators - Convert benchmarks to new operators - Convert storage manager to new operators - Convert a few remaining tests - Remove old operators  After this main body of work is reviewed  I will add additional commits to repackage and rename classes to the old style  because doing this before the review will make fixes more difficult.
741 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryStats.java ; New operator framework ; The commits are structured as follows - Add new operator and testing framework - Add new versions of all existing operators - Convert execution engine to use new operators - Add new scheduler that favors interactive queries - Add blocking support to operators - Rewrite the context and stats system  - Convert compiler to new operators - Convert benchmarks to new operators - Convert storage manager to new operators - Convert a few remaining tests - Remove old operators  After this main body of work is reviewed  I will add additional commits to repackage and rename classes to the old style  because doing this before the review will make fixes more difficult.
742 ; presto-server/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Fix bad error message when response is empty in HttpRemoteTask ; nan
745 ;  presto-server/src/main/java/com/facebook/presto/server/PluginManager.java ; Switch back to resolver until Aether is fixed ; nan
745 ;  presto-server/src/main/java/com/facebook/presto/server/PluginManagerConfig.java ; Switch back to resolver until Aether is fixed ; nan
745 ;  presto-server/src/test/java/com/facebook/presto/server/TestPluginManagerConfig.java ; Switch back to resolver until Aether is fixed ; nan
746 ;  presto-main/src/main/java/com/facebook/presto/execution/CreateAliasExecution.java ; Instrument thread pools ; nan
746 ;  presto-main/src/main/java/com/facebook/presto/execution/DropAliasExecution.java ; Instrument thread pools ; nan
746 ;  presto-main/src/main/java/com/facebook/presto/execution/DropTableExecution.java ; Instrument thread pools ; nan
746 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; Instrument thread pools ; nan
746 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Instrument thread pools ; nan
746 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Instrument thread pools ; nan
746 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Instrument thread pools ; nan
746 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Instrument thread pools ; nan
746 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseLocalStorageManager.java ; Instrument thread pools ; nan
746 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryManagerConfig.java ; Instrument thread pools ; nan
746 ;  presto-server/src/main/java/com/facebook/presto/server/HttpRemoteTaskFactory.java ; Instrument thread pools ; nan
746 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Instrument thread pools ; nan
747 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Use more efficient API for finding split locations ; nan
747 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java ; Use more efficient API for finding split locations ; nan
747 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/FileStatusCallback.java ; Use more efficient API for finding split locations ; nan
747 ;  presto-hive/src/test/java/com/facebook/presto/hive/util/TestAsyncRecursiveWalker.java ; Use more efficient API for finding split locations ; nan
751 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Parser changes for table sample ; This request only has the changes made to the grammar for implementing tablesample.   Used the syntax for tablesample from here: http://www.neilconway.org/talks/hacking/ottawa/sql_standard.pdf Parse tree for a sample query: https://gist.github.com/nileema/6458383
751 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Parser changes for table sample ; This request only has the changes made to the grammar for implementing tablesample.   Used the syntax for tablesample from here: http://www.neilconway.org/talks/hacking/ottawa/sql_standard.pdf Parse tree for a sample query: https://gist.github.com/nileema/6458383
751 ;  presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java ; Parser changes for table sample ; This request only has the changes made to the grammar for implementing tablesample.   Used the syntax for tablesample from here: http://www.neilconway.org/talks/hacking/ottawa/sql_standard.pdf Parse tree for a sample query: https://gist.github.com/nileema/6458383
751 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Parser changes for table sample ; This request only has the changes made to the grammar for implementing tablesample.   Used the syntax for tablesample from here: http://www.neilconway.org/talks/hacking/ottawa/sql_standard.pdf Parse tree for a sample query: https://gist.github.com/nileema/6458383
751 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultTraversalVisitor.java ; Parser changes for table sample ; This request only has the changes made to the grammar for implementing tablesample.   Used the syntax for tablesample from here: http://www.neilconway.org/talks/hacking/ottawa/sql_standard.pdf Parse tree for a sample query: https://gist.github.com/nileema/6458383
751 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/SampledRelation.java ; Parser changes for table sample ; This request only has the changes made to the grammar for implementing tablesample.   Used the syntax for tablesample from here: http://www.neilconway.org/talks/hacking/ottawa/sql_standard.pdf Parse tree for a sample query: https://gist.github.com/nileema/6458383
751 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/TreePrinter.java ; Parser changes for table sample ; This request only has the changes made to the grammar for implementing tablesample.   Used the syntax for tablesample from here: http://www.neilconway.org/talks/hacking/ottawa/sql_standard.pdf Parse tree for a sample query: https://gist.github.com/nileema/6458383
751 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementBuilder.java ; Parser changes for table sample ; This request only has the changes made to the grammar for implementing tablesample.   Used the syntax for tablesample from here: http://www.neilconway.org/talks/hacking/ottawa/sql_standard.pdf Parse tree for a sample query: https://gist.github.com/nileema/6458383
752 ; presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java ; Fix for all columns with alias ; For selecting all columns with alias (eg: SELECT A.\* FROM orders a) we were building it as select true.\*  use the node.toString instead which implements this correctly. 
754 ; presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Add logging for TestExpressionCompiler ; nan
755 ; presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Reduce memory usage on semi join test ; It was failing sporadically on the distributed test due to heap space
756 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Fix HiveClient call to getFileBlockLocations ; nan
757 ; presto-main/src/main/java/com/facebook/presto/execution/CreateAliasExecution.java ; Remove native store related runtime configuration ; nan
757 ;  presto-main/src/main/java/com/facebook/presto/execution/DropAliasExecution.java ; Remove native store related runtime configuration ; nan
757 ;  presto-main/src/main/java/com/facebook/presto/execution/DropTableExecution.java ; Remove native store related runtime configuration ; nan
757 ;  presto-main/src/main/java/com/facebook/presto/execution/Sitevars.java ; Remove native store related runtime configuration ; nan
757 ;  presto-main/src/main/java/com/facebook/presto/execution/SitevarsConfig.java ; Remove native store related runtime configuration ; nan
757 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardCleaner.java ; Remove native store related runtime configuration ; nan
757 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java ; Remove native store related runtime configuration ; nan
757 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/TableAliasSelector.java ; Remove native store related runtime configuration ; nan
757 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSitevarsConfig.java ; Remove native store related runtime configuration ; nan
757 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Remove native store related runtime configuration ; nan
758 ; presto-main/src/main/java/com/facebook/presto/operator/HashJoinOperator.java ; Fix hash join handling of nulls ; nan
758 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix hash join handling of nulls ; nan
758 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashJoinOperator.java ; Fix hash join handling of nulls ; nan
762 ; presto-cli/src/main/java/com/facebook/presto/cli/AlignedTuplePrinter.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/ClientOptions.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/Console.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/ConsolePrinter.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/CsvPrinter.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/FormatUtils.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/Help.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/LineReader.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/Main.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/OutputHandler.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/OutputPrinter.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/Pager.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/Query.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/QueryAbortedException.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/QueryRunner.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/TableNameCompleter.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/TsvPrinter.java ; Add license headers ; nan
762 ;  presto-cli/src/main/java/com/facebook/presto/cli/VerticalTuplePrinter.java ; Add license headers ; nan
762 ;  presto-cli/src/test/java/com/facebook/presto/cli/TestAlignedTuplePrinter.java ; Add license headers ; nan
762 ;  presto-cli/src/test/java/com/facebook/presto/cli/TestCsvPrinter.java ; Add license headers ; nan
762 ;  presto-cli/src/test/java/com/facebook/presto/cli/TestTsvPrinter.java ; Add license headers ; nan
762 ;  presto-cli/src/test/java/com/facebook/presto/cli/TestVerticalTuplePrinter.java ; Add license headers ; nan
762 ;  presto-client/src/main/java/com/facebook/presto/client/ClientSession.java ; Add license headers ; nan
762 ;  presto-client/src/main/java/com/facebook/presto/client/Column.java ; Add license headers ; nan
762 ;  presto-client/src/main/java/com/facebook/presto/client/ErrorLocation.java ; Add license headers ; nan
762 ;  presto-client/src/main/java/com/facebook/presto/client/Failure.java ; Add license headers ; nan
762 ;  presto-client/src/main/java/com/facebook/presto/client/FailureInfo.java ; Add license headers ; nan
762 ;  presto-client/src/main/java/com/facebook/presto/client/PrestoHeaders.java ; Add license headers ; nan
762 ;  presto-client/src/main/java/com/facebook/presto/client/QueryError.java ; Add license headers ; nan
762 ;  presto-client/src/main/java/com/facebook/presto/client/QueryResults.java ; Add license headers ; nan
762 ;  presto-client/src/main/java/com/facebook/presto/client/StageStats.java ; Add license headers ; nan
762 ;  presto-client/src/main/java/com/facebook/presto/client/StatementClient.java ; Add license headers ; nan
762 ;  presto-client/src/main/java/com/facebook/presto/client/StatementStats.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/BackgroundCacheLoader.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/BytesHiveRecordCursor.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/DiscoveryLocatedHiveCluster.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/FileSystemCache.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/FileSystemWrapper.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/FileSystemWrapperProvider.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForHiveClient.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForHiveMetastore.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForwardingFileStatus.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForwardingFileSystem.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForwardingPath.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HdfsConfiguration.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HdfsEnvironment.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveBooleanParser.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveCluster.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveColumnHandle.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveConnector.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveConnectorFactory.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveConnectorId.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveMetastoreClient.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveMetastoreClientFactory.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HivePartition.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HivePartitionKey.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HivePlugin.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveTableHandle.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveType.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveViewNotSupportedException.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/NumberParser.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/PartitionOfflineException.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/RebindSafeMBeanServer.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/RetryDriver.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/TableOfflineException.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/ThreadContextClassLoader.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/UnpartitionedPartition.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/BoundedExecutor.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/Distribution2.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/FileStatusCallback.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/QuantileDigest2.java ; Add license headers ; nan
762 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/SuspendingExecutor.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/HiveImportClientFactoryTest.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/MockHiveMetastoreClient.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestCachingHiveMetastore.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveBooleanParser.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientSplitIteratorBackPressure.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveColumnHandle.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveTableHandle.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveUtil.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestJsonHiveHandles.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestNumberParser.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestingHiveCluster.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/util/TestAsyncRecursiveWalker.java ; Add license headers ; nan
762 ;  presto-hive/src/test/java/com/facebook/presto/hive/util/TestSuspendingExecutor.java ; Add license headers ; nan
762 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/ColumnInfo.java ; Add license headers ; nan
762 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/Driver.java ; Add license headers ; nan
762 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcConnection.java ; Add license headers ; nan
762 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcDatabaseMetaData.java ; Add license headers ; nan
762 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcPreparedStatement.java ; Add license headers ; nan
762 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcResultSet.java ; Add license headers ; nan
762 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcResultSetMetaData.java ; Add license headers ; nan
762 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/JdbcStatement.java ; Add license headers ; nan
762 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryExecutor.java ; Add license headers ; nan
762 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/UserAgentRequestFilter.java ; Add license headers ; nan
762 ;  presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestDriver.java ; Add license headers ; nan
762 ;  presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestJdbcResultSet.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/OutputBuffers.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/PrestoMediaTypes.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/ScheduledSplit.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/TaskSource.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/Block.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/BlockBuilder.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/BlockCursor.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/BlockIterable.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/BlockIterables.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/BlockUtils.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/dictionary/Dictionary.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedBlock.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedBlockCursor.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/dictionary/PackedLongSerde.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/rle/RunLengthEncodedBlock.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/rle/RunLengthEncodedBlockCursor.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/snappy/SnappyBlock.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedBlock.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedBlockCursor.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedBooleanBlockCursor.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedDoubleBlockCursor.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedLongBlockCursor.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedSliceBlockCursor.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedTupleInfoSerde.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/Access.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/AnnotationDefinition.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/Block.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/ByteCodeNode.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/ByteCodeNodeFactory.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/ByteCodeNodes.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/ByteCodeVisitor.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/ClassDefinition.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/ClassInfoLoader.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/Comment.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/CompilerContext.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/DumpByteCodeVisitor.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/DynamicClassLoader.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/ExpectedType.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/FieldDefinition.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/IterationScope.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/LocalVariable.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/LocalVariableDefinition.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/LocalVariableFactory.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/MethodDefinition.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/NamedParameterDefinition.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/OpCodes.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/ParameterizedType.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/SmartClassWriter.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/Variable.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/VariableFactory.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/control/CaseStatement.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/control/DoWhileLoop.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/control/FlowControl.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/control/ForLoop.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/control/IfStatement.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/control/LookupSwitch.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/control/WhileLoop.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/debug/DebugNode.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/debug/LineNumberNode.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/debug/LocalVariableNode.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/BasicInstruction.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/Constant.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/FieldInstruction.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/InstructionNode.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/InvokeInstruction.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/JumpInstruction.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/LabelNode.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/TypeInstruction.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/VariableInstruction.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/concurrent/FairBatchExecutor.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/ConnectorManager.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/NativeConnectorFactory.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/StaticConnector.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualColumnHandle.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualConnector.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualDataStreamProvider.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualHandleResolver.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualMetadata.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualModule.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualSplit.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualSplitManager.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualTableHandle.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaColumnHandle.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaDataStreamProvider.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaHandleResolver.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaMetadata.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaModule.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaSplit.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaSplitManager.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaTableHandle.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxColumnHandle.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxConnectorFactory.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxConnectorId.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxDataStreamProvider.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxHandleResolver.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxMetadata.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxSplit.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxSplitManager.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxTableHandle.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/system/AliasSystemTable.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/system/NodesSystemTable.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/system/QuerySystemTable.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemColumnHandle.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemConnector.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemDataStreamProvider.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemHandleResolver.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemSplit.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemSplitManager.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemTableHandle.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemTablesManager.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemTablesMetadata.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemTablesModule.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/connector/system/TaskSystemTable.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryCompletionEvent.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryCreatedEvent.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryMonitor.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/event/query/SplitCompletionEvent.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/AbandonedException.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/BufferInfo.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/BufferResult.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/CreateAliasExecution.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/DataSource.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/DropAliasExecution.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/DropTableExecution.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/FailedQueryException.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/FailedQueryExecution.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/LocationFactory.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/NoSuchBufferException.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/NodeSchedulerConfig.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryExecution.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryId.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryIdGenerator.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryManager.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryState.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryStats.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/RemoteTask.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/RemoteTaskFactory.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/SharedBuffer.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/SharedBufferInfo.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/SplitRunner.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManagerStats.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManagerStats.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/StageId.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/StageInfo.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/StageState.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/StageStats.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/StateMachine.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskExecution.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskExecutor.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskId.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskInfo.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskManager.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskState.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskStateMachine.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/failureDetector/FailureDetector.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/failureDetector/FailureDetectorConfiguration.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/failureDetector/FailureDetectorModule.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/failureDetector/ForFailureDetector.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/failureDetector/HeartbeatFailureDetector.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/guice/AbstractConfigurationAwareModule.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/guice/ConditionalModule.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/guice/DbiProvider.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/importer/AbstractPeriodicImportRunnable.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/importer/DatabasePeriodicImportManager.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/importer/ForPeriodicImport.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/importer/JobStateFactory.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportConfig.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportController.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportDao.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportJob.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportManager.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportRun.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportRunnable.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/importer/PersistentPeriodicImportJob.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/metadata/AbstractTypedJacksonModule.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/metadata/AliasDao.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/metadata/AllNodes.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/metadata/CatalogManager.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/metadata/CatalogManagerConfig.java ; Add license headers ; nan
762 ;  presto-main/src/main/java/com/facebook/presto/metadata/CollocatedSplitHandleResolver.java ; Add license headers ; nan
763 ;  presto-cli/src/main/java/com/facebook/presto/cli/StatusPrinter.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-cli/src/main/java/com/facebook/presto/cli/TableNameCompleter.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-cli/src/main/java/com/facebook/presto/cli/VerticalTuplePrinter.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-client/src/main/java/com/facebook/presto/client/FailureInfo.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-client/src/main/java/com/facebook/presto/client/StatementClient.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/FileSystemWrapper.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForHiveClient.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForHiveMetastore.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveConnectorFactory.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/HivePartitionKey.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/HivePlugin.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/NumberParser.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/PartitionOfflineException.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/RebindSafeMBeanServer.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/RetryDriver.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/TableOfflineException.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/BoundedExecutor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/QuantileDigest2.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/SuspendingExecutor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/test/java/com/facebook/presto/hive/MockHiveMetastoreClient.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveTableHandle.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestNumberParser.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/PrestoMediaTypes.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/block/BlockBuilder.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/block/BlockCursor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/block/BlockIterable.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/block/BlockUtils.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedBlockCursor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/block/dictionary/PackedLongSerde.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/block/rle/RunLengthEncodedBlock.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/block/rle/RunLengthEncodedBlockCursor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedBlockCursor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedBooleanBlockCursor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedDoubleBlockCursor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedLongBlockCursor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedSliceBlockCursor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/block/uncompressed/UncompressedTupleInfoSerde.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/AnnotationDefinition.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/Block.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/ByteCodeNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/ByteCodeNodes.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/ClassDefinition.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/ClassInfo.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/DumpByteCodeVisitor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/DynamicClassLoader.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/FieldDefinition.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/IterationScope.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/LocalVariableFactory.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/MethodDefinition.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/OpCodes.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/ParameterizedType.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/SmartClassWriter.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/Variable.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/control/CaseStatement.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/control/FlowControl.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/control/ForLoop.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/control/IfStatement.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/control/LookupSwitch.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/control/WhileLoop.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/debug/DebugNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/debug/LineNumberNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/debug/LocalVariableNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/BasicInstruction.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/Constant.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/FieldInstruction.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/InstructionNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/InvokeInstruction.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/JumpInstruction.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/LabelNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/TypeInstruction.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/byteCode/instruction/VariableInstruction.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/concurrent/FairBatchExecutor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/ConnectorManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/NativeConnectorFactory.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualConnector.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualMetadata.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualSplitManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaDataStreamProvider.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaSplit.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaSplitManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxConnectorFactory.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxDataStreamProvider.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxMetadata.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/system/AliasSystemTable.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/system/QuerySystemTable.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemConnector.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemDataStreamProvider.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemSplit.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemTablesManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/connector/system/TaskSystemTable.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryCompletionEvent.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryCreatedEvent.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/AbandonedException.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/BufferInfo.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/DropTableExecution.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/FailedQueryException.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryId.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryIdGenerator.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/RemoteTask.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManagerStats.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/StageStats.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/StateMachine.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskExecutor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskId.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskStateMachine.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/failureDetector/FailureDetectorConfiguration.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/failureDetector/FailureDetectorModule.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/failureDetector/ForFailureDetector.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/failureDetector/HeartbeatFailureDetector.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/guice/DbiProvider.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/importer/AbstractPeriodicImportRunnable.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/importer/ForPeriodicImport.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/importer/JobStateFactory.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportController.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportDao.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportJob.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportRun.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportRunnable.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/importer/PersistentPeriodicImportJob.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/AbstractTypedJacksonModule.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/AliasDao.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/CatalogManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/CatalogManagerConfig.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/DataSourceType.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseLocalStorageManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseShardManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/ForAlias.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/ForMetadata.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/ForShardManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/ForStorageManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionInfo.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/HandleJsonBinder.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/HandleResolver.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/InMemoryMetadata.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/InMemoryNodeManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/LocalStorageManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/Metadata.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataDao.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataUtil.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeHandleResolver.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeMetadata.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/QualifiedTableName.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardManagerDao.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/TableAlias.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/metadata/TablePartition.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/AbstractScanFilterAndProjectOperator.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/AggregationOperator.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/AlignmentOperator.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/ChannelHash.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/Driver.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/DriverContext.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/ExchangeClientFactory.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/ForExchange.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/ForScheduler.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/HashJoinOperator.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/HttpPageBufferClient.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/Operator.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/OperatorContext.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/Page.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/PageBufferClientStatus.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/PageBuilder.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/PagesIndex.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/PipelineContext.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/ProjectionFunctions.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/RecordProjectOperator.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/SetBuilderOperator.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/SliceHashStrategy.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/TableScanOperator.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/TableWriterResult.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/TaskContext.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/TopNOperator.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AbstractVarianceAggregation.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximateCountDistinctAggregation.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleApproximatePercentileAggregation.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleApproximatePercentileWeightedAggregation.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleAverageAggregation.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleMaxAggregation.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleMinAggregation.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleSumAggregation.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/FixedWidthAggregationFunction.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongApproximatePercentileAggregation.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongApproximatePercentileWeightedAggregation.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongAverageAggregation.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongMaxAggregation.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongMinAggregation.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongSumAggregation.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/VariableWidthAggregationFunction.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/ColorFunctions.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/JsonExtract.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/JsonFunctions.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/RegexpFunctions.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/ScalarFunction.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/UrlFunctions.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/serde/BlocksFileEncoding.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/serde/BlocksFileWriter.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/serde/DictionaryEncoder.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/serde/EncodedBlockIterable.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/serde/PagesSerde.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/split/CollocatedSplit.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/split/DataStreamManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/split/NativePartitionKey.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/split/PartitionFunction.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/split/RecordSetDataStreamProvider.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/ExpressionUtils.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/AggregationAnalyzer.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/SemanticException.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/ByteCodeExpressionVisitor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/DefaultFunctionBinder.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/ExpressionCompiler.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/LikeFunctionBinder.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/SliceLiteralBootstrap.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DependencyExtractor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedLogicalPlanner.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/EffectivePredicateExtractor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/EqualityInference.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LikeUtils.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/NoOpSymbolResolver.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanFragment.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanSanityChecker.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/SymbolAllocator.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/SymbolExtractor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/TableWriter.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/TranslationMap.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/TupleInputResolver.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PredicatePushDown.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SimplifyExpressions.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/TableAliasSelector.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/AggregationNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/ExchangeNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/FilterNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/OutputNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/ProjectNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SemiJoinNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/TableScanNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/TableWriterNode.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/storage/ForStorage.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/storage/StorageManager.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/tpch/CachingTpchDataFileLoader.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/tpch/GeneratingTpchDataFileLoader.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/tpch/TpchConnectorFactory.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/tpch/TpchDataStreamProvider.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/tpch/TpchHandleResolver.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/tpch/TpchMetadata.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/util/BoundedExecutor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/util/CpuTimer.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/util/GraphvizPrinter.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/util/MoreFunctions.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/util/MoreFutures.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/util/SqlUtils.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/main/java/com/facebook/presto/util/Threads.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractBenchmark.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractSimpleOperatorBenchmark.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AverageBenchmarkResults.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkResultHook.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HandTpchQuery1.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashBuildAndJoinBenchmark.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashBuildBenchmark.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashJoinBenchmark.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/benchmark/JsonBenchmarkResultWriter.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/benchmark/OdsBenchmarkResultWriter.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/benchmark/OrderByBenchmark.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/benchmark/PredicateFilterBenchmark.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SimpleLineBenchmarkResultWriter.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/benchmark/VarBinaryMaxAggregationSqlBenchmark.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/block/AbstractTestBlockCursor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/block/BlockAssertions.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/block/BlockCursorAssertions.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/block/dictionary/TestDictionaryEncodedBlockCursor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/block/dictionary/TestPackedLongSerde.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/block/rle/TestRunLengthEncodedBlockCursor.java ; Fix code formatting and optimize imports ; nan
763 ;  presto-main/src/test/java/com/facebook/presto/block/uncompressed/TestUncompressedBlockCursor.java ; Fix code formatting and optimize imports ; nan
764 ; presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Various fixes ; nan
765 ;  presto-server/src/main/java/com/facebook/presto/server/PrestoServer.java ; Updates ; nan
765 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Updates ; nan
766 ;  presto-cli/src/main/java/com/facebook/presto/cli/ClientOptions.java ; CLI changes ; nan
766 ;  presto-cli/src/main/java/com/facebook/presto/cli/Console.java ; CLI changes ; nan
766 ;  presto-cli/src/main/java/com/facebook/presto/cli/Presto.java ; CLI changes ; nan
770 ; presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; Limit the number of queries remembered after they are finished ; Prune the set of remembered queries down to a configurable number  but only consider queries that haven t heartbeat within the client timeout period.
770 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Limit the number of queries remembered after they are finished ; Prune the set of remembered queries down to a configurable number  but only consider queries that haven t heartbeat within the client timeout period.
770 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryManagerConfig.java ; Limit the number of queries remembered after they are finished ; Prune the set of remembered queries down to a configurable number  but only consider queries that haven t heartbeat within the client timeout period.
774 ; presto-main/src/main/java/com/facebook/presto/operator/OperatorStats.java ; Convert to most succinct unit ; nan
775 ; presto-main/src/main/java/com/facebook/presto/failureDetector/HeartbeatFailureDetector.java ; Expose number of  live  nodes ; nan
776 ; presto-main/src/main/java/com/facebook/presto/operator/RecordProjectOperator.java ; Lazily load RecordCursor in RecordProjectOpereator ; nan
778 ;  presto-hive-cdh4/src/main/java/com/facebook/presto/hive/HiveCdh4Plugin.java ; Allow having multiple Hive plugins ; nan
778 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveConnectorFactory.java ; Allow having multiple Hive plugins ; nan
778 ;  presto-hive/src/main/java/com/facebook/presto/hive/HivePlugin.java ; Allow having multiple Hive plugins ; nan
778 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveConnectorFactory.java ; Allow having multiple Hive plugins ; nan
779 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java ; Allow using Hive plugin without discovery ; nan
779 ;  presto-hive/src/main/java/com/facebook/presto/hive/HivePluginConfig.java ; Allow using Hive plugin without discovery ; nan
779 ;  presto-hive/src/main/java/com/facebook/presto/hive/StaticHiveCluster.java ; Allow using Hive plugin without discovery ; nan
779 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveConnectorFactory.java ; Allow using Hive plugin without discovery ; nan
779 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHivePluginConfig.java ; Allow using Hive plugin without discovery ; nan
780 ; presto-main/src/main/java/com/facebook/presto/execution/SplitRunner.java ; Fix network issue ; Only the last commit actually fixes this issue.  The others are useful fixes made while trying to fix the core issue
780 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Fix network issue ; Only the last commit actually fixes this issue.  The others are useful fixes made while trying to fix the core issue
780 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskExecutor.java ; Fix network issue ; Only the last commit actually fixes this issue.  The others are useful fixes made while trying to fix the core issue
780 ;  presto-main/src/main/java/com/facebook/presto/operator/AbstractScanFilterAndProjectOperator.java ; Fix network issue ; Only the last commit actually fixes this issue.  The others are useful fixes made while trying to fix the core issue
780 ;  presto-main/src/main/java/com/facebook/presto/operator/Driver.java ; Fix network issue ; Only the last commit actually fixes this issue.  The others are useful fixes made while trying to fix the core issue
780 ;  presto-main/src/main/java/com/facebook/presto/operator/DriverContext.java ; Fix network issue ; Only the last commit actually fixes this issue.  The others are useful fixes made while trying to fix the core issue
780 ;  presto-main/src/main/java/com/facebook/presto/operator/PipelineContext.java ; Fix network issue ; Only the last commit actually fixes this issue.  The others are useful fixes made while trying to fix the core issue
780 ;  presto-main/src/main/java/com/facebook/presto/operator/RecordProjectOperator.java ; Fix network issue ; Only the last commit actually fixes this issue.  The others are useful fixes made while trying to fix the core issue
780 ;  presto-main/src/main/java/com/facebook/presto/operator/TaskContext.java ; Fix network issue ; Only the last commit actually fixes this issue.  The others are useful fixes made while trying to fix the core issue
780 ;  presto-main/src/test/java/com/facebook/presto/execution/TaskExecutorSimulator.java ; Fix network issue ; Only the last commit actually fixes this issue.  The others are useful fixes made while trying to fix the core issue
780 ;  presto-main/src/test/java/com/facebook/presto/execution/TaskExecutorTest.java ; Fix network issue ; Only the last commit actually fixes this issue.  The others are useful fixes made while trying to fix the core issue
783 ; presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/ImplementSampleAsFilter.java ; Taking care of boundary case conditions in the TABLESAMPLE operator ; Changing the comparison expression between  rand()  and  sampleRatio  from  <=  to  < .  rand()  returns a value between [0 1). So  rand() < 0  will return no values and  rand() < 1  will return all the values.
784 ; presto-main/src/main/java/com/facebook/presto/operator/DriverContext.java ; Fix JMX stats for new operators ; nan
784 ;  presto-main/src/main/java/com/facebook/presto/operator/OperatorContext.java ; Fix JMX stats for new operators ; nan
784 ;  presto-main/src/main/java/com/facebook/presto/operator/PipelineContext.java ; Fix JMX stats for new operators ; nan
784 ;  presto-main/src/main/java/com/facebook/presto/operator/TaskContext.java ; Fix JMX stats for new operators ; nan
785 ; presto-main/src/main/java/com/facebook/presto/event/query/QueryCompletionEvent.java ; Add failure info to completion events ; nan
785 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryMonitor.java ; Add failure info to completion events ; nan
785 ;  presto-main/src/main/java/com/facebook/presto/event/query/SplitCompletionEvent.java ; Add failure info to completion events ; nan
785 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Add failure info to completion events ; nan
787 ; presto-main/src/main/java/com/facebook/presto/operator/OperatorContext.java ; Add counters for calls to operator addInput  getOutput  and finish ; nan
787 ;  presto-main/src/main/java/com/facebook/presto/operator/OperatorStats.java ; Add counters for calls to operator addInput  getOutput  and finish ; nan
787 ;  presto-main/src/test/java/com/facebook/presto/operator/TestOperatorStats.java ; Add counters for calls to operator addInput  getOutput  and finish ; nan
788 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Tablesample system implementation ; Recreating the pull request as it got closed earlier. 
788 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedExecutionPlanner.java ; Tablesample system implementation ; Recreating the pull request as it got closed earlier. 
788 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedLogicalPlanner.java ; Tablesample system implementation ; Recreating the pull request as it got closed earlier. 
788 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Tablesample system implementation ; Recreating the pull request as it got closed earlier. 
788 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Tablesample system implementation ; Recreating the pull request as it got closed earlier. 
788 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/ImplementSampleAsFilter.java ; Tablesample system implementation ; Recreating the pull request as it got closed earlier. 
788 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanRewriter.java ; Tablesample system implementation ; Recreating the pull request as it got closed earlier. 
788 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SampleNode.java ; Tablesample system implementation ; Recreating the pull request as it got closed earlier. 
788 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Tablesample system implementation ; Recreating the pull request as it got closed earlier. 
789 ; presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Allow running locally without discovery ; nan
789 ;  presto-server/src/test/java/com/facebook/presto/server/TestingPrestoServer.java ; Allow running locally without discovery ; nan
790 ; presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; Make cpu time tracking in OperatorStats configurable ; Added task.cpu-timer-enabled  which can be used to turn off cpu time tracking
790 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Make cpu time tracking in OperatorStats configurable ; Added task.cpu-timer-enabled  which can be used to turn off cpu time tracking
790 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Make cpu time tracking in OperatorStats configurable ; Added task.cpu-timer-enabled  which can be used to turn off cpu time tracking
790 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryManagerConfig.java ; Make cpu time tracking in OperatorStats configurable ; Added task.cpu-timer-enabled  which can be used to turn off cpu time tracking
792 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java ; Random cleanups ; nan
792 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java ; Random cleanups ; nan
793 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/MathFunctions.java ; Add functions for NaN and Infinity ; Add math functions related to NaN and Infinity.  - nan() - is_nan(value) - infinity() - is_infinity(value) - is_finite(value)  Tested it on various combinations: https://gist.github.com/nileema/6734480
793 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Add functions for NaN and Infinity ; Add math functions related to NaN and Infinity.  - nan() - is_nan(value) - infinity() - is_infinity(value) - is_finite(value)  Tested it on various combinations: https://gist.github.com/nileema/6734480
793 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add functions for NaN and Infinity ; Add math functions related to NaN and Infinity.  - nan() - is_nan(value) - infinity() - is_infinity(value) - is_finite(value)  Tested it on various combinations: https://gist.github.com/nileema/6734480
793 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestMathFunctions.java ; Add functions for NaN and Infinity ; Add math functions related to NaN and Infinity.  - nan() - is_nan(value) - infinity() - is_infinity(value) - is_finite(value)  Tested it on various combinations: https://gist.github.com/nileema/6734480
794 ; presto-hive/src/main/java/com/facebook/presto/hive/BytesHiveRecordCursor.java ; Close recordReader when advance reaches the end or throws ; nan
794 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Close recordReader when advance reaches the end or throws ; nan
795 ; presto-main/src/main/java/com/facebook/presto/execution/SharedBuffer.java ; Scheduling fixes ; nan
795 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Scheduling fixes ; nan
795 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSharedBuffer.java ; Scheduling fixes ; nan
795 ;  presto-server/src/test/java/com/facebook/presto/server/MockTaskManager.java ; Scheduling fixes ; nan
796 ; presto-hive/src/main/java/com/facebook/presto/hive/BytesHiveRecordCursor.java ; Protect against bad Hadoop input formats ; nan
796 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Protect against bad Hadoop input formats ; nan
798 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java ; Remove legacy config names ; nan
798 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java ; Remove legacy config names ; nan
798 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; Remove legacy config names ; nan
798 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryManagerConfig.java ; Remove legacy config names ; nan
799 ; presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Improve speed of TABLESAMPLE tests ; nan
799 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Improve speed of TABLESAMPLE tests ; nan
800 ; presto-client/src/main/java/com/facebook/presto/client/PrestoHeaders.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/main/java/com/facebook/presto/HashPagePartitionFunction.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/main/java/com/facebook/presto/OutputBuffers.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/main/java/com/facebook/presto/PagePartitionFunction.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/main/java/com/facebook/presto/UnpartitionedPagePartitionFunction.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/main/java/com/facebook/presto/block/BlockBuilder.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/main/java/com/facebook/presto/execution/BufferResult.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/main/java/com/facebook/presto/execution/SharedBuffer.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/main/java/com/facebook/presto/operator/HttpPageBufferClient.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/main/java/com/facebook/presto/serde/PagesSerde.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/main/java/com/facebook/presto/tuple/TupleInfo.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryManagerConfig.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSharedBuffer.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlStageExecution.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/test/java/com/facebook/presto/operator/MockExchangeRequestProcessor.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-main/src/test/java/com/facebook/presto/operator/TestExchangeOperator.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-server/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-server/src/main/java/com/facebook/presto/server/TaskResource.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-server/src/test/java/com/facebook/presto/server/MockQueryManager.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
800 ;  presto-server/src/test/java/com/facebook/presto/server/TestQueryResourceServer.java ; Partitioned hash aggregations ; This implements a fixed size partitioning for hash aggregations set by the  query.initial-hash-partitions  configuration option (default 8)
801 ;  presto-main/src/main/java/com/facebook/presto/byteCode/ClassInfoLoader.java ; Fix license of ClassInfoLoader ; nan
804 ; presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Hive plugin cleanup ; nan
804 ;  presto-hive/src/test/java/com/facebook/presto/hive/MockHiveMetastoreClient.java ; Hive plugin cleanup ; nan
804 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestCachingHiveMetastore.java ; Hive plugin cleanup ; nan
804 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveBooleanParser.java ; Hive plugin cleanup ; nan
804 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestJsonHiveHandles.java ; Hive plugin cleanup ; nan
804 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestNumberParser.java ; Hive plugin cleanup ; nan
804 ;  presto-hive/src/test/java/com/facebook/presto/hive/util/TestAsyncRecursiveWalker.java ; Hive plugin cleanup ; nan
804 ;  presto-hive/src/test/java/com/facebook/presto/hive/util/TestSuspendingExecutor.java ; Hive plugin cleanup ; nan
806 ;  presto-hive/src/main/java/com/facebook/presto/hive/BytesHiveRecordCursor.java ; Improve query performance for hive bucketed tables ; nan
806 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java ; Improve query performance for hive bucketed tables ; nan
806 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Improve query performance for hive bucketed tables ; nan
806 ;  presto-hive/src/main/java/com/facebook/presto/hive/HivePartition.java ; Improve query performance for hive bucketed tables ; nan
806 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Improve query performance for hive bucketed tables ; nan
806 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitIterable.java ; Improve query performance for hive bucketed tables ; nan
806 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java ; Improve query performance for hive bucketed tables ; nan
806 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Improve query performance for hive bucketed tables ; nan
806 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveBucketing.java ; Improve query performance for hive bucketed tables ; nan
807 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Allow parsing CREATE TABLE AS SELECT ; nan
807 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/CreateTable.java ; Allow parsing CREATE TABLE AS SELECT ; nan
807 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementBuilder.java ; Allow parsing CREATE TABLE AS SELECT ; nan
808 ; presto-hive/src/test/java/com/facebook/presto/hive/TestHiveBucketing.java ; Fix bucket hashing test ; nan
809 ; presto-main/src/main/java/com/facebook/presto/execution/QueryManagerConfig.java ; Split up QueryManagerConfig ; This renames the following property:     query.shard.max-threads  ->  task.shard.max-threads   Additionally  a new config property  task.info.max-age  is split out from the  query.info.max-age  property. The task property controls how often the coordinator must heartbeat tasks on the workers. The query property controls how often the end user (statement client) must heartbeat the query on the coordinator.
809 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Split up QueryManagerConfig ; This renames the following property:     query.shard.max-threads  ->  task.shard.max-threads   Additionally  a new config property  task.info.max-age  is split out from the  query.info.max-age  property. The task property controls how often the coordinator must heartbeat tasks on the workers. The query property controls how often the end user (statement client) must heartbeat the query on the coordinator.
809 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskExecutor.java ; Split up QueryManagerConfig ; This renames the following property:     query.shard.max-threads  ->  task.shard.max-threads   Additionally  a new config property  task.info.max-age  is split out from the  query.info.max-age  property. The task property controls how often the coordinator must heartbeat tasks on the workers. The query property controls how often the end user (statement client) must heartbeat the query on the coordinator.
809 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskManagerConfig.java ; Split up QueryManagerConfig ; This renames the following property:     query.shard.max-threads  ->  task.shard.max-threads   Additionally  a new config property  task.info.max-age  is split out from the  query.info.max-age  property. The task property controls how often the coordinator must heartbeat tasks on the workers. The query property controls how often the end user (statement client) must heartbeat the query on the coordinator.
809 ;  presto-main/src/main/java/com/facebook/presto/operator/ExchangeClientConfig.java ; Split up QueryManagerConfig ; This renames the following property:     query.shard.max-threads  ->  task.shard.max-threads   Additionally  a new config property  task.info.max-age  is split out from the  query.info.max-age  property. The task property controls how often the coordinator must heartbeat tasks on the workers. The query property controls how often the end user (statement client) must heartbeat the query on the coordinator.
809 ;  presto-main/src/main/java/com/facebook/presto/operator/ExchangeClientFactory.java ; Split up QueryManagerConfig ; This renames the following property:     query.shard.max-threads  ->  task.shard.max-threads   Additionally  a new config property  task.info.max-age  is split out from the  query.info.max-age  property. The task property controls how often the coordinator must heartbeat tasks on the workers. The query property controls how often the end user (statement client) must heartbeat the query on the coordinator.
809 ;  presto-main/src/test/java/com/facebook/presto/execution/TestQueryManagerConfig.java ; Split up QueryManagerConfig ; This renames the following property:     query.shard.max-threads  ->  task.shard.max-threads   Additionally  a new config property  task.info.max-age  is split out from the  query.info.max-age  property. The task property controls how often the coordinator must heartbeat tasks on the workers. The query property controls how often the end user (statement client) must heartbeat the query on the coordinator.
809 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Split up QueryManagerConfig ; This renames the following property:     query.shard.max-threads  ->  task.shard.max-threads   Additionally  a new config property  task.info.max-age  is split out from the  query.info.max-age  property. The task property controls how often the coordinator must heartbeat tasks on the workers. The query property controls how often the end user (statement client) must heartbeat the query on the coordinator.
809 ;  presto-main/src/test/java/com/facebook/presto/execution/TestTaskManagerConfig.java ; Split up QueryManagerConfig ; This renames the following property:     query.shard.max-threads  ->  task.shard.max-threads   Additionally  a new config property  task.info.max-age  is split out from the  query.info.max-age  property. The task property controls how often the coordinator must heartbeat tasks on the workers. The query property controls how often the end user (statement client) must heartbeat the query on the coordinator.
809 ;  presto-main/src/test/java/com/facebook/presto/operator/TestExchangeClientConfig.java ; Split up QueryManagerConfig ; This renames the following property:     query.shard.max-threads  ->  task.shard.max-threads   Additionally  a new config property  task.info.max-age  is split out from the  query.info.max-age  property. The task property controls how often the coordinator must heartbeat tasks on the workers. The query property controls how often the end user (statement client) must heartbeat the query on the coordinator.
809 ;  presto-server/src/main/java/com/facebook/presto/server/CoordinatorModule.java ; Split up QueryManagerConfig ; This renames the following property:     query.shard.max-threads  ->  task.shard.max-threads   Additionally  a new config property  task.info.max-age  is split out from the  query.info.max-age  property. The task property controls how often the coordinator must heartbeat tasks on the workers. The query property controls how often the end user (statement client) must heartbeat the query on the coordinator.
809 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Split up QueryManagerConfig ; This renames the following property:     query.shard.max-threads  ->  task.shard.max-threads   Additionally  a new config property  task.info.max-age  is split out from the  query.info.max-age  property. The task property controls how often the coordinator must heartbeat tasks on the workers. The query property controls how often the end user (statement client) must heartbeat the query on the coordinator.
810 ; presto-hive/src/main/java/com/facebook/presto/hive/HdfsConfiguration.java ; Fixes ; nan
811 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Parser changes for creating stratified samples with TABLESAMPLE ; This diff adds an optional  STRATIFY ON  clause to  TABLESAMPLE  in the parser.  Examples:   SELECT * FROM temp TABLESAMPLE BERNOULLI (50) STRATIFY ON (col_A)   SELECT * FROM temp TABLESAMPLE SYSTEM (50) STRATIFY ON (col_A  col_B) 
811 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Parser changes for creating stratified samples with TABLESAMPLE ; This diff adds an optional  STRATIFY ON  clause to  TABLESAMPLE  in the parser.  Examples:   SELECT * FROM temp TABLESAMPLE BERNOULLI (50) STRATIFY ON (col_A)   SELECT * FROM temp TABLESAMPLE SYSTEM (50) STRATIFY ON (col_A  col_B) 
811 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SampleNode.java ; Parser changes for creating stratified samples with TABLESAMPLE ; This diff adds an optional  STRATIFY ON  clause to  TABLESAMPLE  in the parser.  Examples:   SELECT * FROM temp TABLESAMPLE BERNOULLI (50) STRATIFY ON (col_A)   SELECT * FROM temp TABLESAMPLE SYSTEM (50) STRATIFY ON (col_A  col_B) 
811 ;  presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java ; Parser changes for creating stratified samples with TABLESAMPLE ; This diff adds an optional  STRATIFY ON  clause to  TABLESAMPLE  in the parser.  Examples:   SELECT * FROM temp TABLESAMPLE BERNOULLI (50) STRATIFY ON (col_A)   SELECT * FROM temp TABLESAMPLE SYSTEM (50) STRATIFY ON (col_A  col_B) 
811 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultTraversalVisitor.java ; Parser changes for creating stratified samples with TABLESAMPLE ; This diff adds an optional  STRATIFY ON  clause to  TABLESAMPLE  in the parser.  Examples:   SELECT * FROM temp TABLESAMPLE BERNOULLI (50) STRATIFY ON (col_A)   SELECT * FROM temp TABLESAMPLE SYSTEM (50) STRATIFY ON (col_A  col_B) 
811 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/SampledRelation.java ; Parser changes for creating stratified samples with TABLESAMPLE ; This diff adds an optional  STRATIFY ON  clause to  TABLESAMPLE  in the parser.  Examples:   SELECT * FROM temp TABLESAMPLE BERNOULLI (50) STRATIFY ON (col_A)   SELECT * FROM temp TABLESAMPLE SYSTEM (50) STRATIFY ON (col_A  col_B) 
811 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/TreePrinter.java ; Parser changes for creating stratified samples with TABLESAMPLE ; This diff adds an optional  STRATIFY ON  clause to  TABLESAMPLE  in the parser.  Examples:   SELECT * FROM temp TABLESAMPLE BERNOULLI (50) STRATIFY ON (col_A)   SELECT * FROM temp TABLESAMPLE SYSTEM (50) STRATIFY ON (col_A  col_B) 
811 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementBuilder.java ; Parser changes for creating stratified samples with TABLESAMPLE ; This diff adds an optional  STRATIFY ON  clause to  TABLESAMPLE  in the parser.  Examples:   SELECT * FROM temp TABLESAMPLE BERNOULLI (50) STRATIFY ON (col_A)   SELECT * FROM temp TABLESAMPLE SYSTEM (50) STRATIFY ON (col_A  col_B) 
812 ; presto-cli/src/main/java/com/facebook/presto/cli/Console.java ; Fix overly broad exception handling ; nan
812 ;  presto-hive/src/main/java/com/facebook/presto/hive/BytesHiveRecordCursor.java ; Fix overly broad exception handling ; nan
812 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Fix overly broad exception handling ; nan
812 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Fix overly broad exception handling ; nan
812 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Fix overly broad exception handling ; nan
812 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java ; Fix overly broad exception handling ; nan
812 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java ; Fix overly broad exception handling ; nan
812 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Fix overly broad exception handling ; nan
812 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestCachingHiveMetastore.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/execution/CreateAliasExecution.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/execution/DropAliasExecution.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/execution/DropTableExecution.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskExecutor.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/failureDetector/HeartbeatFailureDetector.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/importer/AbstractPeriodicImportRunnable.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/importer/PeriodicImportRunnable.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseLocalStorageManager.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardCleaner.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/operator/Driver.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/JsonFunctions.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/RegexpFunctions.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/sql/Casts.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/ByteCodeExpressionVisitor.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/ExpressionCompiler.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/LikeFunctionBinder.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/Operations.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/main/java/com/facebook/presto/util/Threads.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/test/java/com/facebook/presto/benchmark/TestBenchmarks.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/test/java/com/facebook/presto/concurrent/TestFairBatchExecutor.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHttpPageBufferClient.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Fix overly broad exception handling ; nan
812 ;  presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Fix overly broad exception handling ; nan
812 ;  presto-server/src/main/java/com/facebook/presto/server/TaskResource.java ; Fix overly broad exception handling ; nan
812 ;  presto-server/src/test/java/com/facebook/presto/server/MockQueryManager.java ; Fix overly broad exception handling ; nan
817 ; presto-cli/src/main/java/com/facebook/presto/cli/LineReader.java ; Fix CLI history behavior on user interrupt ; This is a temporary fix until a new jline is released.
818 ;  presto-cli/src/main/java/com/facebook/presto/cli/PerfTest.java ; Update to Airlift with Jetty 9 client and server ; nan
818 ;  presto-cli/src/main/java/com/facebook/presto/cli/QueryRunner.java ; Update to Airlift with Jetty 9 client and server ; nan
818 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryExecutor.java ; Update to Airlift with Jetty 9 client and server ; nan
818 ;  presto-main/src/main/java/com/facebook/presto/operator/HttpPageBufferClient.java ; Update to Airlift with Jetty 9 client and server ; nan
818 ;  presto-main/src/test/java/com/facebook/presto/failureDetector/TestHeartbeatFailureDetector.java ; Update to Airlift with Jetty 9 client and server ; nan
818 ;  presto-server/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Update to Airlift with Jetty 9 client and server ; nan
818 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Update to Airlift with Jetty 9 client and server ; nan
818 ;  presto-server/src/test/java/com/facebook/presto/server/TestExecuteResource.java ; Update to Airlift with Jetty 9 client and server ; nan
818 ;  presto-server/src/test/java/com/facebook/presto/server/TestNodeResource.java ; Update to Airlift with Jetty 9 client and server ; nan
818 ;  presto-server/src/test/java/com/facebook/presto/server/TestQueryResourceServer.java ; Update to Airlift with Jetty 9 client and server ; nan
818 ;  presto-server/src/test/java/com/facebook/presto/server/TestServer.java ; Update to Airlift with Jetty 9 client and server ; nan
821 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java ; Fix for hive bucketed tables ; Additional checks to ensure that we apply bucketing only when a table is bucketed. 
821 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Fix for hive bucketed tables ; Additional checks to ensure that we apply bucketing only when a table is bucketed. 
822 ; presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Allow subclasses to use different Partition types ; nan
825 ; presto-server/src/main/java/com/facebook/presto/server/CoordinatorModule.java ; Only announce coordinator if configured as one ; This fixes a bug introduced in the CoordinatorModule refactoring that causes every node to announce itself as a coordinator.
825 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Only announce coordinator if configured as one ; This fixes a bug introduced in the CoordinatorModule refactoring that causes every node to announce itself as a coordinator.
831 ; presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Make interpreter stateless ; nan
831 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Make interpreter stateless ; nan
831 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Make interpreter stateless ; nan
831 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InputResolver.java ; Make interpreter stateless ; nan
831 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedFilterFunction.java ; Make interpreter stateless ; nan
831 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedProjectionFunction.java ; Make interpreter stateless ; nan
831 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Make interpreter stateless ; nan
831 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/TupleInputResolver.java ; Make interpreter stateless ; nan
831 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PredicatePushDown.java ; Make interpreter stateless ; nan
831 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SimplifyExpressions.java ; Make interpreter stateless ; nan
831 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Make interpreter stateless ; nan
831 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Make interpreter stateless ; nan
831 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedFilterFunction.java ; Make interpreter stateless ; nan
831 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedProjectionFunction.java ; Make interpreter stateless ; nan
832 ; presto-example-http/src/main/java/com/facebook/presto/example/ExamplePartition.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleSplitManager.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-hive/src/main/java/com/facebook/presto/hive/HivePartition.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualSplitManager.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaDataStreamProvider.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaSplitManager.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxSplitManager.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemSplitManager.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/split/NativeSplitManager.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/split/PartitionFunction.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/split/SplitManager.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/ExpressionUtils.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedExecutionPlanner.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DomainTranslator.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DomainUtils.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/EffectivePredicateExtractor.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LiteralInterpreter.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanSanityChecker.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PredicatePushDown.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SimplifyExpressions.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/TableAliasSelector.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/UnaliasSymbolReferences.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/TableScanNode.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/tpch/TpchSplitManager.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/main/java/com/facebook/presto/util/GraphvizPrinter.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlStageExecution.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/test/java/com/facebook/presto/split/TestNativeSplitManager.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestDomainTranslator.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestEffectivePredicateExtractor.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestingColumnHandle.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-main/src/test/java/com/facebook/presto/util/LocalQueryRunner.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/main/java/com/facebook/presto/spi/ColumnType.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSplitManager.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/main/java/com/facebook/presto/spi/Domain.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/main/java/com/facebook/presto/spi/Marker.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/main/java/com/facebook/presto/spi/Partition.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/main/java/com/facebook/presto/spi/PartitionResult.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/main/java/com/facebook/presto/spi/Range.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/main/java/com/facebook/presto/spi/SerializableNativeValue.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/main/java/com/facebook/presto/spi/SortedRangeSet.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/main/java/com/facebook/presto/spi/TupleDomain.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/main/java/com/facebook/presto/spi/classloader/ClassLoaderSafeConnectorSplitManager.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/test/java/com/facebook/presto/spi/TestDomain.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/test/java/com/facebook/presto/spi/TestMarker.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/test/java/com/facebook/presto/spi/TestRange.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/test/java/com/facebook/presto/spi/TestSortedRangeSet.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/test/java/com/facebook/presto/spi/TestTupleDomain.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
832 ;  presto-spi/src/test/java/com/facebook/presto/spi/TestingColumnHandle.java ; Modify SPI to enable range predicate pushdown and negotiation with connectors ; As a simple extension of this new API  all of our connectors are now able to feed back domain information from Partitions during the optimization phase to enable greater plan optimizations.
834 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Handle binary RCFiles correctly ; This also changes the unit tests to work correctly when the timezone is set to that of the Hive installation.
834 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Handle binary RCFiles correctly ; This also changes the unit tests to work correctly when the timezone is set to that of the Hive installation.
835 ; presto-main/src/test/java/com/facebook/presto/execution/TestQueryStats.java ; Fix tests when run with non-UTC timezone ; nan
835 ;  presto-main/src/test/java/com/facebook/presto/operator/TestDriverStats.java ; Fix tests when run with non-UTC timezone ; nan
835 ;  presto-main/src/test/java/com/facebook/presto/operator/TestTaskStats.java ; Fix tests when run with non-UTC timezone ; nan
836 ; presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoConnection.java ; Rename JDBC classes to start with Presto ; nan
836 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoDatabaseMetaData.java ; Rename JDBC classes to start with Presto ; nan
836 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoDriver.java ; Rename JDBC classes to start with Presto ; nan
836 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoPreparedStatement.java ; Rename JDBC classes to start with Presto ; nan
836 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoResultSet.java ; Rename JDBC classes to start with Presto ; nan
836 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoResultSetMetaData.java ; Rename JDBC classes to start with Presto ; nan
836 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoStatement.java ; Rename JDBC classes to start with Presto ; nan
836 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/QueryExecutor.java ; Rename JDBC classes to start with Presto ; nan
836 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/UserAgentRequestFilter.java ; Rename JDBC classes to start with Presto ; nan
837 ;  presto-server/src/main/java/com/facebook/presto/discovery/EmbeddedDiscoveryConfig.java ; Allow running embedded version of Discovery ; Simplify deployment by allowing Presto to run an embedded version of the Discovery service. This embedded version only supports dynamic announcements. It does not have a static store.
837 ;  presto-server/src/main/java/com/facebook/presto/discovery/EmbeddedDiscoveryModule.java ; Allow running embedded version of Discovery ; Simplify deployment by allowing Presto to run an embedded version of the Discovery service. This embedded version only supports dynamic announcements. It does not have a static store.
837 ;  presto-server/src/main/java/com/facebook/presto/server/PrestoServer.java ; Allow running embedded version of Discovery ; Simplify deployment by allowing Presto to run an embedded version of the Discovery service. This embedded version only supports dynamic announcements. It does not have a static store.
837 ;  presto-server/src/test/java/com/facebook/presto/discovery/TestEmbeddedDiscoveryConfig.java ; Allow running embedded version of Discovery ; Simplify deployment by allowing Presto to run an embedded version of the Discovery service. This embedded version only supports dynamic announcements. It does not have a static store.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleClient.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleColumn.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleColumnHandle.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleConfig.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleConnector.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleConnectorFactory.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleConnectorId.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleHandleResolver.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleMetadata.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleModule.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExamplePartition.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExamplePlugin.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleRecordCursor.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleRecordSet.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleRecordSetProvider.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleSplit.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleSplitManager.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleTable.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleTableHandle.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/test/java/com/facebook/presto/example/ExampleHttpServer.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/test/java/com/facebook/presto/example/TestExampleClient.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/test/java/com/facebook/presto/example/TestExampleColumnHandle.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/test/java/com/facebook/presto/example/TestExampleConfig.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/test/java/com/facebook/presto/example/TestExampleMetadata.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/test/java/com/facebook/presto/example/TestExampleRecordSet.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/test/java/com/facebook/presto/example/TestExampleRecordSetProvider.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/test/java/com/facebook/presto/example/TestExampleSplit.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/test/java/com/facebook/presto/example/TestExampleTable.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
846 ;  presto-example-http/src/test/java/com/facebook/presto/example/TestExampleTableHandle.java ; Example plugin ; This connector exposes schemas defined in the  metadata-uri  catalog property.  The  metadata-uri  can reference a local file or a remote http resource.  The table data files are simple CSV (no escaping supported) fetched from a location relative to the  metadata-uri .  The sample  etc/catalog/example.properties  file has URIs for local file data and a sample remote dataset hosted on Amazon s3.
857 ; presto-client/src/main/java/com/facebook/presto/client/StatementClient.java ; Cli hangs when the server goes away ; Presto cli hangs for a long time when the server goes away. Add a check to see if the client is closed so that we can get out of this state by pressing ctrl-C
861 ; presto-server/src/main/java/com/facebook/presto/server/CodeCacheGcTrigger.java ; Fix logging for full code cache condition ; nan
862 ; presto-server/src/main/java/com/facebook/presto/server/PrestoJvmRequirements.java ; Verify JVM requirements ; nan
862 ;  presto-server/src/main/java/com/facebook/presto/server/PrestoServer.java ; Verify JVM requirements ; nan
863 ; presto-main/src/main/java/com/facebook/presto/connector/system/CatalogSystemTable.java ; Show catalogs ; List all the loaded catalogs - creates an in memory system table for all the catalog names.
863 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemTablesModule.java ; Show catalogs ; List all the loaded catalogs - creates an in memory system table for all the catalog names.
863 ;  presto-main/src/main/java/com/facebook/presto/metadata/Metadata.java ; Show catalogs ; List all the loaded catalogs - creates an in memory system table for all the catalog names.
863 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Show catalogs ; List all the loaded catalogs - creates an in memory system table for all the catalog names.
863 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Show catalogs ; List all the loaded catalogs - creates an in memory system table for all the catalog names.
863 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Show catalogs ; List all the loaded catalogs - creates an in memory system table for all the catalog names.
863 ;  presto-main/src/test/java/com/facebook/presto/util/LocalQueryRunner.java ; Show catalogs ; List all the loaded catalogs - creates an in memory system table for all the catalog names.
863 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Show catalogs ; List all the loaded catalogs - creates an in memory system table for all the catalog names.
863 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ShowCatalogs.java ; Show catalogs ; List all the loaded catalogs - creates an in memory system table for all the catalog names.
863 ;  presto-server/src/main/java/com/facebook/presto/server/CoordinatorModule.java ; Show catalogs ; List all the loaded catalogs - creates an in memory system table for all the catalog names.
863 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Show catalogs ; List all the loaded catalogs - creates an in memory system table for all the catalog names.
865 ;  presto-hive-apache1/src/main/java/com/facebook/presto/hive/HiveApache1Plugin.java ; Add Hive plugin for Apache Hadoop 1.x ; nan
865 ;  presto-hive-apache1/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Add Hive plugin for Apache Hadoop 1.x ; nan
865 ;  presto-hive-apache1/src/test/java/com/facebook/presto/hive/TestSplitIteratorBackpressure.java ; Add Hive plugin for Apache Hadoop 1.x ; nan
866 ; presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Restore binding for node resource ; nan
866 ;  presto-server/src/test/java/com/facebook/presto/server/TestNodeResource.java ; Restore binding for node resource ; nan
869 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/SemanticErrorCode.java ; Show correct error message when catalog name is incorrect ; nan
869 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Show correct error message when catalog name is incorrect ; nan
869 ;  presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java ; Show correct error message when catalog name is incorrect ; nan
870 ; presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestDriver.java ; Fix test ; nan
873 ; presto-example-http/src/test/java/com/facebook/presto/example/ExampleHttpServer.java ; Fix tests for example-http plugin ; nan
873 ;  presto-example-http/src/test/java/com/facebook/presto/example/TestExampleRecordSet.java ; Fix tests for example-http plugin ; nan
873 ;  presto-example-http/src/test/java/com/facebook/presto/example/TestExampleRecordSetProvider.java ; Fix tests for example-http plugin ; nan
878 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Cross joins ; nan
878 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/EffectivePredicateExtractor.java ; Cross joins ; nan
878 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Cross joins ; nan
878 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PredicatePushDown.java ; Cross joins ; nan
878 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/JoinNode.java ; Cross joins ; nan
878 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Cross joins ; nan
878 ;  presto-main/src/test/java/com/facebook/presto/TestLocalQueries.java ; Cross joins ; nan
878 ;  presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java ; Cross joins ; nan
878 ;  presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java ; Cross joins ; nan
878 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultTraversalVisitor.java ; Cross joins ; nan
878 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Join.java ; Cross joins ; nan
879 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analysis.java ; Rename TableWriter to MaterializedViewWriter	 ; nan
879 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Rename TableWriter to MaterializedViewWriter	 ; nan
879 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java ; Rename TableWriter to MaterializedViewWriter	 ; nan
883 ; presto-cli/src/main/java/com/facebook/presto/cli/ClientOptions.java ; Add --source option to CLI ; This lets you set the source of the query for logging purposes. Tested by running the CLI with --help to make sure the option showed up  and added a unit test
883 ;  presto-cli/src/test/java/com/facebook/presto/cli/TestClientOptions.java ; Add --source option to CLI ; This lets you set the source of the query for logging purposes. Tested by running the CLI with --help to make sure the option showed up  and added a unit test
884 ; presto-main/src/main/java/com/facebook/presto/metadata/ColumnFileHandle.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseLocalStorageManager.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseShardManager.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/metadata/LocalStorageManager.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardManager.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardManagerDao.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/metadata/ShardNode.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/metadata/StorageManagerDao.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/metadata/UuidArguments.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/operator/MaterializedViewWriterOperator.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/operator/MaterializedViewWriterResult.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/split/NativeDataStreamProvider.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/split/NativeSplit.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/split/NativeSplitManager.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/MaterializedViewWriter.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/TableAliasSelector.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/main/java/com/facebook/presto/tpch/GeneratingTpchDataFileLoader.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/test/java/com/facebook/presto/metadata/MockLocalStorageManager.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestDatabaseLocalStorageManager.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestDatabaseShardManager.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestShardManagerDao.java ; Use UUID for native shard IDs ; nan
884 ;  presto-main/src/test/java/com/facebook/presto/split/TestNativeSplitManager.java ; Use UUID for native shard IDs ; nan
884 ;  presto-server/src/main/java/com/facebook/presto/server/ShardResource.java ; Use UUID for native shard IDs ; nan
885 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Implement SHOW SCHEMAS FROM syntax ; Allows you to show schemas from a specific catalog. Tested by running SHOW SCHEMAS  and SHOW SCHEMAS FROM multifeed 
885 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Implement SHOW SCHEMAS FROM syntax ; Allows you to show schemas from a specific catalog. Tested by running SHOW SCHEMAS  and SHOW SCHEMAS FROM multifeed 
885 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ShowSchemas.java ; Implement SHOW SCHEMAS FROM syntax ; Allows you to show schemas from a specific catalog. Tested by running SHOW SCHEMAS  and SHOW SCHEMAS FROM multifeed 
888 ; presto-server/src/main/java/com/facebook/presto/server/StatementResource.java ; Execution performance improvements ; Change blocks and TupleInfo to only contain a single field value Move looping into aggregation implementations Use ClassLoader magic to share base classes of aggregations without creating megamorphic call sites Change aggregation to support multi-channel grouping Change orderBy  topN  and window to support multi-channel sorting Change join to support multi-channel keys Pipeline schedule splits in batches instead of one at a time 
889 ; presto-hive/src/main/java/com/facebook/presto/hive/ColumnarBinaryHiveRecordCursor.java ; Add custom cursor for rc binary format ; Ran the unit tests  and also ran a simple query against a table in the hivedev cluster
889 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Add custom cursor for rc binary format ; Ran the unit tests  and also ran a simple query against a table in the hivedev cluster
889 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Add custom cursor for rc binary format ; Ran the unit tests  and also ran a simple query against a table in the hivedev cluster
891 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Add empty strings to Hive integration test ; nan
895 ; presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoConnection.java ; Add catalog and schema to jdbc string ; nan
895 ;  presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestDriver.java ; Add catalog and schema to jdbc string ; nan
895 ;  presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestJdbcResultSet.java ; Add catalog and schema to jdbc string ; nan
898 ; presto-hive/src/main/java/com/facebook/presto/hive/ColumnarBinaryHiveRecordCursorProvider.java ; Refactor HiveRecordSet to make it easier to extend with new file formats ; nan
898 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarTextHiveRecordCursorProvider.java ; Refactor HiveRecordSet to make it easier to extend with new file formats ; nan
898 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursorProvider.java ; Refactor HiveRecordSet to make it easier to extend with new file formats ; nan
898 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Refactor HiveRecordSet to make it easier to extend with new file formats ; nan
898 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordCursorProvider.java ; Refactor HiveRecordSet to make it easier to extend with new file formats ; nan
898 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordCursorProviders.java ; Refactor HiveRecordSet to make it easier to extend with new file formats ; nan
898 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Refactor HiveRecordSet to make it easier to extend with new file formats ; nan
904 ; presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Change DATE  TIME  TIMESTAMP and INTERVAL to be non-reserved words ; nan
905 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Add unit tests for rc binary and rc text ; nan
905 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java ; Add unit tests for rc binary and rc text ; nan
905 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java ; Add unit tests for rc binary and rc text ; nan
906 ; presto-main/src/main/java/com/facebook/presto/operator/DistinctLimitOperator.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedExecutionPlanner.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedLogicalPlanner.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/EffectivePredicateExtractor.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanSanityChecker.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/SymbolExtractor.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/LimitPushDown.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/DistinctLimitNode.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanNode.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanNodeRewriter.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanRewriter.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanVisitor.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/main/java/com/facebook/presto/util/GraphvizPrinter.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Implement distinct limit operator ; nan
906 ;  presto-main/src/test/java/com/facebook/presto/operator/TestDistinctLimitOperator.java ; Implement distinct limit operator ; nan
907 ; presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoDatabaseMetaData.java ; Implement some functions in Presto JDBC driver ; Got basic queries running in Squirrel SQL Client
907 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoResultSet.java ; Implement some functions in Presto JDBC driver ; Got basic queries running in Squirrel SQL Client
907 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoStatement.java ; Implement some functions in Presto JDBC driver ; Got basic queries running in Squirrel SQL Client
907 ;  presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestDriver.java ; Implement some functions in Presto JDBC driver ; Got basic queries running in Squirrel SQL Client
909 ; presto-cli/src/main/java/com/facebook/presto/cli/Console.java ; Implement use catalog and use schema ; nan
909 ;  presto-cli/src/main/java/com/facebook/presto/cli/Help.java ; Implement use catalog and use schema ; nan
909 ;  presto-cli/src/test/java/com/facebook/presto/cli/TestClientOptions.java ; Implement use catalog and use schema ; nan
909 ;  presto-client/src/main/java/com/facebook/presto/client/ClientSession.java ; Implement use catalog and use schema ; nan
909 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Implement use catalog and use schema ; nan
909 ;  presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java ; Implement use catalog and use schema ; nan
909 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Implement use catalog and use schema ; nan
909 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/UseCollection.java ; Implement use catalog and use schema ; nan
909 ;  presto-server/src/main/java/com/facebook/presto/server/CoordinatorModule.java ; Implement use catalog and use schema ; nan
911 ; presto-main/src/main/java/com/facebook/presto/sql/planner/DomainUtils.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PredicatePushDown.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SimplifyExpressions.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/TableAliasSelector.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/UnaliasSymbolReferences.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/TableScanNode.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-main/src/main/java/com/facebook/presto/util/GraphvizPrinter.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlStageExecution.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestEffectivePredicateExtractor.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-spi/src/main/java/com/facebook/presto/spi/Domain.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
911 ;  presto-spi/src/main/java/com/facebook/presto/spi/TupleDomain.java ; Add a summarized print of TableScanNode TupleDomain to cut down on logging size ; Formatting:  Where there are a small number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2013-11-15  AND (type= A  OR type= B ) GROUP BY ds  id   --- - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2013-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Domain{ranges=[[2013-11-15]  [2013-11-16]  [2013-11-17]  [2013-11-18]  [2013-11-19]  [2013-11-20]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=6  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)  When there are a large number of range segments:  presto> explain SELECT ds  id  COUNT(1) AS count FROM table WHERE ds >=  2012-11-15  AND (type= A  OR type= B ) GROUP BY ds  id  ##                                                                                                                                                                                                                                                               Query Plan - Output[ds  id  count]        id := id        count := count   - Aggregate[ds  id] => [ds:varchar  id:varchar  count:bigint]          count := count( expr )     - Project => [ds:varchar  id:varchar  expr:bigint]            expr := 1       - TableScan[default:default:table  original constrant=(( ds  >=  2012-11-15 ) AND (( type  =  A ) OR ( type  =  B )))  domain={ds => Summarized:Domain{ranges=[[2013-08-04  2013-12-15]]  nullAllowed=false}  type => Domain{ranges=[[A]  [B]]  nullAllowed=false}}] => [id:varchar  ds:varchar]              id := HiveColumnHandle{clientId=default  name=id  ordinalPosition=1  hiveType=STRING  hiveColumnIndex=1  partitionKey=false}              ds := HiveColumnHandle{clientId=default  name=ds  ordinalPosition=2  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}              type := HiveColumnHandle{clientId=default  name=type  ordinalPosition=3  hiveType=STRING  hiveColumnIndex=-1  partitionKey=true}  (1 row)
912 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Add support for DISTINCT in aggregations for simple cases ; Supports COUNT(DISTINCT) and DISTINCT in other aggregations  as long as there is only one DISTINCT expression  and all the aggregations use this expression. Also  using it with GROUP BY is not supported yet.
912 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java ; Add support for DISTINCT in aggregations for simple cases ; Supports COUNT(DISTINCT) and DISTINCT in other aggregations  as long as there is only one DISTINCT expression  and all the aggregations use this expression. Also  using it with GROUP BY is not supported yet.
912 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add support for DISTINCT in aggregations for simple cases ; Supports COUNT(DISTINCT) and DISTINCT in other aggregations  as long as there is only one DISTINCT expression  and all the aggregations use this expression. Also  using it with GROUP BY is not supported yet.
912 ;  presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java ; Add support for DISTINCT in aggregations for simple cases ; Supports COUNT(DISTINCT) and DISTINCT in other aggregations  as long as there is only one DISTINCT expression  and all the aggregations use this expression. Also  using it with GROUP BY is not supported yet.
915 ; presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Set no more buffers for hash distributed node ; nan
916 ; presto-spi/src/main/java/com/facebook/presto/spi/classloader/ClassLoaderSafeConnectorHandleResolver.java ; Add CREATE TABLE AS SELECT for native tables ; nan
916 ;  presto-spi/src/main/java/com/facebook/presto/spi/classloader/ClassLoaderSafeConnectorMetadata.java ; Add CREATE TABLE AS SELECT for native tables ; nan
916 ;  presto-spi/src/main/java/com/facebook/presto/spi/classloader/ClassLoaderSafeConnectorRecordSetProvider.java ; Add CREATE TABLE AS SELECT for native tables ; nan
916 ;  presto-spi/src/main/java/com/facebook/presto/spi/classloader/ClassLoaderSafeConnectorSplitManager.java ; Add CREATE TABLE AS SELECT for native tables ; nan
916 ;  presto-spi/src/main/java/com/facebook/presto/spi/classloader/ClassLoaderSafeRecordSet.java ; Add CREATE TABLE AS SELECT for native tables ; nan
917 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java ; Fix querying tables with missing bucket columns ; nan
919 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java ; Fix handling of Hive bucketed tables ; This fixes #918.
919 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Fix handling of Hive bucketed tables ; This fixes #918.
919 ;  presto-hive/src/main/java/com/facebook/presto/hive/HivePartition.java ; Fix handling of Hive bucketed tables ; This fixes #918.
919 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitIterable.java ; Fix handling of Hive bucketed tables ; This fixes #918.
919 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/DirectoryLister.java ; Fix handling of Hive bucketed tables ; This fixes #918.
919 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/FileStatusUtil.java ; Fix handling of Hive bucketed tables ; This fixes #918.
919 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Fix handling of Hive bucketed tables ; This fixes #918.
919 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveBucketing.java ; Fix handling of Hive bucketed tables ; This fixes #918.
920 ; presto-main/src/main/java/com/facebook/presto/OutputBuffers.java ; Fix hash distributed aggregations ; Split distribution strategy and output buffer partition strategy
920 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Fix hash distributed aggregations ; Split distribution strategy and output buffer partition strategy
920 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Fix hash distributed aggregations ; Split distribution strategy and output buffer partition strategy
920 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Fix hash distributed aggregations ; Split distribution strategy and output buffer partition strategy
920 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedLogicalPlanner.java ; Fix hash distributed aggregations ; Split distribution strategy and output buffer partition strategy
920 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanFragment.java ; Fix hash distributed aggregations ; Split distribution strategy and output buffer partition strategy
920 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Fix hash distributed aggregations ; Split distribution strategy and output buffer partition strategy
920 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/SubPlanBuilder.java ; Fix hash distributed aggregations ; Split distribution strategy and output buffer partition strategy
920 ;  presto-main/src/main/java/com/facebook/presto/util/GraphvizPrinter.java ; Fix hash distributed aggregations ; Split distribution strategy and output buffer partition strategy
920 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix hash distributed aggregations ; Split distribution strategy and output buffer partition strategy
920 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlStageExecution.java ; Fix hash distributed aggregations ; Split distribution strategy and output buffer partition strategy
920 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Fix hash distributed aggregations ; Split distribution strategy and output buffer partition strategy
927 ; presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Add table creation for Hive ; nan
927 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Add table creation for Hive ; nan
927 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveConnectorFactory.java ; Add table creation for Hive ; nan
927 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveOutputTableHandle.java ; Add table creation for Hive ; nan
927 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSink.java ; Add table creation for Hive ; nan
927 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveType.java ; Add table creation for Hive ; nan
927 ;  presto-hive/src/main/java/com/facebook/presto/hive/TableAlreadyExistsException.java ; Add table creation for Hive ; nan
927 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Add table creation for Hive ; nan
929 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Fix table creation ; nan
929 ;  presto-main/src/main/java/com/facebook/presto/operator/DriverFactory.java ; Fix table creation ; nan
929 ;  presto-main/src/main/java/com/facebook/presto/operator/InMemoryExchange.java ; Fix table creation ; nan
929 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Fix table creation ; nan
930 ; presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Don t swallow exception when dropping table ; nan
932 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Remove support for implicit cross joins ; The pre-ANSI join syntax makes it very easy to accidentally perform a cross join when an inner join was intended  not to mention resulting in harder to read queries  so we need a way to disable it via configuration.
932 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Remove support for implicit cross joins ; The pre-ANSI join syntax makes it very easy to accidentally perform a cross join when an inner join was intended  not to mention resulting in harder to read queries  so we need a way to disable it via configuration.
932 ;  presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java ; Remove support for implicit cross joins ; The pre-ANSI join syntax makes it very easy to accidentally perform a cross join when an inner join was intended  not to mention resulting in harder to read queries  so we need a way to disable it via configuration.
935 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitIterable.java ; Guarantee that semaphore is always released ; nan
935 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java ; Guarantee that semaphore is always released ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/FileSystemCache.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/FileSystemWrapper.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/FileSystemWrapperProvider.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForwardingFileStatus.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForwardingFileSystem.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/ForwardingPath.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/HdfsEnvironment.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSourceProvider.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/DirectoryEntry.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/DirectoryLister.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/FileStatusUtil.java ; Simplify handling multiple Hadoop versions ; nan
940 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Simplify handling multiple Hadoop versions ; nan
941 ; presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java ; Fix optimizer performance regression ; This was a subtle one.
943 ;  presto-hive-hadoop2/src/main/java/com/facebook/presto/hive/HiveHadoop2Plugin.java ; Add Hive plugin for Apache Hadoop 2.x ; nan
943 ;  presto-hive-hadoop2/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Add Hive plugin for Apache Hadoop 2.x ; nan
943 ;  presto-hive-hadoop2/src/test/java/com/facebook/presto/hive/TestSplitIteratorBackpressure.java ; Add Hive plugin for Apache Hadoop 2.x ; nan
943 ;  presto-hive/src/main/java/com/facebook/presto/hive/HdfsConfiguration.java ; Add Hive plugin for Apache Hadoop 2.x ; nan
943 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Add Hive plugin for Apache Hadoop 2.x ; nan
944 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseLocalStorageManager.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseLocalStorageManagerConfig.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeRecordSinkProvider.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/main/java/com/facebook/presto/tpch/CachingTpchDataFileLoader.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/main/java/com/facebook/presto/tpch/DataFileTpchBlocksProvider.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/main/java/com/facebook/presto/tpch/GeneratingTpchDataFileLoader.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/main/java/com/facebook/presto/tpch/TpchBlocksProvider.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/main/java/com/facebook/presto/tpch/TpchDataFileLoader.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/main/java/com/facebook/presto/tpch/TpchDataStreamProvider.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractOperatorBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractSimpleOperatorBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractSqlBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkQueryRunner.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountAggregationBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountAggregationSqlBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountWithFilterSqlBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/DoubleSumAggregationBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/GroupByAggregationSqlBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/GroupBySumWithArithmeticSqlBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HandTpchQuery1.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HandTpchQuery6.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashAggregationBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashBuildAndJoinBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashBuildBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashJoinBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/OrderByBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/PredicateFilterBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/PredicateFilterSqlBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/RawStreamingBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/RawStreamingSqlBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlApproximateCountDistinctDoubleBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlApproximateCountDistinctLongBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlApproximateCountDistinctVarBinaryBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlApproximatePercentileBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlDistinctMultipleFields.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlDistinctSingleField.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlDoubleSumAggregationBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlHashJoinBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlInBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlJoinWithPredicateBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlLikeBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlRegexpLikeBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlSemiJoinInPredicateBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlTpchQuery1.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/SqlTpchQuery6.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/StatisticsBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/TestBenchmarks.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/Top100Benchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/Top100SqlBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/benchmark/VarBinaryMaxAggregationSqlBenchmark.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestDatabaseLocalStorageManagerConfig.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/util/InMemoryTpchBlocksProvider.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
944 ;  presto-main/src/test/java/com/facebook/presto/util/LocalQueryRunner.java ; TPCH plugin ; Add a plugin based on the airlift TPCH data generator.  This also converts test and benchmarks to use generated data instead of static files.  For benchmarks this code replaces TpchBlocksProvider with CREATE TABLE commands using LocalQueryRunner.  The means that benchmarks now use the native plugin which adds about 1-3ms to the benchmarks times.  For super fast benchmarks (e.g.  count_agg and raw_stream)  this appears as a huge performance drop.  Before:                                count_agg ::    0.697 cpu ms :: in  1.5M   12.9MB    2.15B/s     18GB/s :: out     1       9B    1.43K/s   12.6KB/s                      double_sum_agg ::   10.741 cpu ms :: in  1.5M   12.9MB     140M/s   1.17GB/s :: out     1       9B       93/s     837B/s                            hash_agg ::  137.724 cpu ms :: in  1.5M   21.5MB    10.9M/s    156MB/s :: out     3      45B       21/s     326B/s                    predicate_filter ::   55.698 cpu ms :: in  1.5M   12.9MB    26.9M/s    231MB/s :: out 1.29M   11.1MB    23.1M/s    199MB/s                          raw_stream ::    0.810 cpu ms :: in  1.5M   12.9MB    1.85B/s   15.5GB/s :: out  1.5M   12.9MB    1.85B/s   15.5GB/s                              top100 ::   41.238 cpu ms :: in  1.5M   12.9MB    36.4M/s    312MB/s :: out   100     900B    2.42K/s   21.3KB/s              in_memory_orderby_1.5M :: 1521.210 cpu ms :: in  1.5M   41.5MB     986K/s   27.3MB/s :: out  1.5M   28.6MB     986K/s   18.8MB/s                          hash_build ::  529.348 cpu ms :: in  1.5M   25.7MB    2.83M/s   48.6MB/s :: out  1.5M   25.7MB    2.83M/s   48.6MB/s                           hash_join :: 1643.575 cpu ms :: in    6M    103MB    3.65M/s   62.7MB/s :: out    6M    206MB    3.65M/s    125MB/s                 hash_build_and_join :: 2215.610 cpu ms :: in  7.5M    129MB    3.39M/s   58.1MB/s :: out    6M    206MB    2.71M/s     93MB/s                   hand_tpch_query_1 :: 2450.150 cpu ms :: in    6M    361MB    2.45M/s    147MB/s :: out     4     300B        1/s     122B/s                   hand_tpch_query_6 ::  289.359 cpu ms :: in    6M    240MB    20.7M/s    831MB/s :: out     1       9B        3/s      31B/s     sql_groupby_agg_with_arithmetic ::  891.984 cpu ms :: in    6M    137MB    6.73M/s    154MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    1.578 cpu ms :: in  1.5M   12.9MB     950M/s   7.97GB/s :: out     1       9B      633/s   5.57KB/s                  sql_double_sum_agg ::   12.196 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       81/s     737B/s               sql_count_with_filter ::   61.586 cpu ms :: in  1.5M   8.58MB    24.4M/s    139MB/s :: out     1       9B       16/s     146B/s                     sql_groupby_agg ::  139.857 cpu ms :: in  1.5M   21.5MB    10.7M/s    153MB/s :: out     3      45B       21/s     321B/s                sql_predicate_filter ::   37.860 cpu ms :: in  1.5M   12.9MB    39.6M/s    340MB/s :: out 1.29M   11.1MB      34M/s    292MB/s                      sql_raw_stream ::    1.508 cpu ms :: in  1.5M   12.9MB     995M/s   8.34GB/s :: out  1.5M   12.9MB     995M/s   8.34GB/s                         sql_top_100 ::   42.490 cpu ms :: in  1.5M   12.9MB    35.3M/s    303MB/s :: out   100     900B    2.35K/s   20.7KB/s                       sql_hash_join :: 3281.675 cpu ms :: in  7.5M    129MB    2.29M/s   39.2MB/s :: out    6M    206MB    1.83M/s   62.8MB/s             sql_join_with_predicate ::  787.630 cpu ms :: in  7.5M    116MB    9.52M/s    147MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  182.818 cpu ms :: in    6M   97.3MB    32.8M/s    532MB/s :: out     1      21B        5/s     114B/s                  sql_distinct_multi ::  199.495 cpu ms :: in  1.5M     32MB    7.52M/s    161MB/s :: out     5     112B       25/s     561B/s                 sql_distinct_single ::   93.074 cpu ms :: in  1.5M   12.9MB    16.1M/s    138MB/s :: out     1       9B       10/s      96B/s                    sql_tpch_query_1 :: 2503.541 cpu ms :: in    6M    361MB     2.4M/s    144MB/s :: out     4     336B        1/s     134B/s                    sql_tpch_query_6 ::  268.098 cpu ms :: in    6M    240MB    22.4M/s    897MB/s :: out     1       9B        3/s      33B/s                            sql_like :: 2812.936 cpu ms :: in    6M    232MB    2.13M/s   82.4MB/s :: out 1.15M   9.84MB     408K/s    3.5MB/s                              sql_in ::   67.976 cpu ms :: in    6M   51.5MB    88.3M/s    758MB/s :: out    25     225B      367/s   3.23KB/s                     sql_semijoin_in :: 1660.280 cpu ms :: in  7.5M   64.4MB    4.52M/s   38.8MB/s :: out    3M   25.8MB    1.81M/s   15.5MB/s                     sql_regexp_like :: 1853.437 cpu ms :: in  1.5M   76.6MB     809K/s   41.3MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  559.526 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   21.974 cpu ms :: in  1.5M   12.9MB    68.3M/s    586MB/s :: out     1       9B       45/s     409B/s              stat_long_variance_pop ::   21.928 cpu ms :: in  1.5M   12.9MB    68.4M/s    587MB/s :: out     1       9B       45/s     410B/s                stat_double_variance ::   19.587 cpu ms :: in  1.5M   12.9MB    76.6M/s    657MB/s :: out     1       9B       51/s     459B/s            stat_double_variance_pop ::   19.382 cpu ms :: in  1.5M   12.9MB    77.4M/s    664MB/s :: out     1       9B       51/s     464B/s                    stat_long_stddev ::   22.252 cpu ms :: in  1.5M   12.9MB    67.4M/s    579MB/s :: out     1       9B       44/s     404B/s                stat_long_stddev_pop ::   22.540 cpu ms :: in  1.5M   12.9MB    66.5M/s    571MB/s :: out     1       9B       44/s     399B/s                  stat_double_stddev ::   19.305 cpu ms :: in  1.5M   12.9MB    77.7M/s    667MB/s :: out     1       9B       51/s     466B/s              stat_double_stddev_pop ::   19.459 cpu ms :: in  1.5M   12.9MB    77.1M/s    662MB/s :: out     1       9B       51/s     462B/s      sql_approx_count_distinct_long ::  128.087 cpu ms :: in  1.5M   12.9MB    11.7M/s    101MB/s :: out     1       9B        7/s      70B/s    sql_approx_count_distinct_double ::  134.577 cpu ms :: in  1.5M   12.9MB    11.1M/s   95.7MB/s :: out     1       9B        7/s      66B/s sql_approx_count_distinct_varbinary ::  227.544 cpu ms :: in  1.5M   21.5MB    6.59M/s   94.3MB/s :: out     1       9B        4/s      39B/s      After:                                count_agg ::    1.781 cpu ms :: in  1.5M   12.9MB     842M/s   7.06GB/s :: out     1       9B      561/s   4.93KB/s                      double_sum_agg ::   12.181 cpu ms :: in  1.5M   12.9MB     123M/s   1.03GB/s :: out     1       9B       82/s     738B/s                            hash_agg ::  141.757 cpu ms :: in  1.5M   21.5MB    10.6M/s    151MB/s :: out     3      45B       21/s     317B/s                    predicate_filter ::   58.120 cpu ms :: in  1.5M   12.9MB    25.8M/s    222MB/s :: out 1.29M   11.1MB    22.2M/s    190MB/s                          raw_stream ::    1.696 cpu ms :: in  1.5M   12.9MB     885M/s   7.41GB/s :: out  1.5M   12.9MB     885M/s   7.41GB/s                              top100 ::   45.253 cpu ms :: in  1.5M   12.9MB    33.1M/s    285MB/s :: out   100     900B    2.21K/s   19.4KB/s              in_memory_orderby_1.5M :: 1531.159 cpu ms :: in  1.5M   41.5MB     980K/s   27.1MB/s :: out  1.5M   28.6MB     980K/s   18.7MB/s                          hash_build ::  541.420 cpu ms :: in  1.5M   25.7MB    2.77M/s   47.6MB/s :: out  1.5M   25.7MB    2.77M/s   47.6MB/s                           hash_join :: 1673.213 cpu ms :: in    6M    103MB    3.59M/s   61.6MB/s :: out    6M    206MB    3.59M/s    123MB/s                 hash_build_and_join :: 2204.910 cpu ms :: in  7.5M    129MB     3.4M/s   58.4MB/s :: out    6M    206MB    2.72M/s   93.4MB/s                   hand_tpch_query_1 :: 2464.116 cpu ms :: in    6M    361MB    2.44M/s    146MB/s :: out     4     300B        1/s     121B/s                   hand_tpch_query_6 ::  293.306 cpu ms :: in    6M    240MB    20.5M/s    820MB/s :: out     1       9B        3/s      30B/s     sql_groupby_agg_with_arithmetic ::  904.943 cpu ms :: in    6M    137MB    6.63M/s    152MB/s :: out     2      30B        2/s      33B/s                       sql_count_agg ::    3.073 cpu ms :: in  1.5M   12.9MB     488M/s   4.09GB/s :: out     1       9B      325/s   2.86KB/s                  sql_double_sum_agg ::   14.070 cpu ms :: in  1.5M   12.9MB     107M/s    915MB/s :: out     1       9B       71/s     639B/s               sql_count_with_filter ::   64.687 cpu ms :: in  1.5M   8.58MB    23.2M/s    133MB/s :: out     1       9B       15/s     139B/s                     sql_groupby_agg ::  142.734 cpu ms :: in  1.5M   21.5MB    10.5M/s    150MB/s :: out     3      45B       21/s     315B/s                sql_predicate_filter ::   39.810 cpu ms :: in  1.5M   12.9MB    37.7M/s    323MB/s :: out 1.29M   11.1MB    32.4M/s    278MB/s                      sql_raw_stream ::    3.085 cpu ms :: in  1.5M   12.9MB     486M/s   4.08GB/s :: out  1.5M   12.9MB     486M/s   4.08GB/s                         sql_top_100 ::   44.824 cpu ms :: in  1.5M   12.9MB    33.5M/s    287MB/s :: out   100     900B    2.23K/s   19.6KB/s                       sql_hash_join :: 3308.330 cpu ms :: in  7.5M    129MB    2.27M/s   38.9MB/s :: out    6M    206MB    1.81M/s   62.3MB/s             sql_join_with_predicate ::  794.320 cpu ms :: in  7.5M    116MB    9.44M/s    146MB/s :: out     1       9B        1/s      11B/s                   sql_varbinary_max ::  184.251 cpu ms :: in    6M   97.3MB    32.6M/s    528MB/s :: out     1      21B        5/s     113B/s                  sql_distinct_multi ::  213.832 cpu ms :: in  1.5M     32MB    7.01M/s    150MB/s :: out     5     112B       23/s     523B/s                 sql_distinct_single ::   94.300 cpu ms :: in  1.5M   12.9MB    15.9M/s    137MB/s :: out     1       9B       10/s      95B/s                    sql_tpch_query_1 :: 2532.160 cpu ms :: in    6M    361MB    2.37M/s    142MB/s :: out     4     336B        1/s     132B/s                    sql_tpch_query_6 ::  248.466 cpu ms :: in    6M    240MB    24.2M/s    967MB/s :: out     1       9B        4/s      36B/s                            sql_like :: 2732.147 cpu ms :: in    6M    232MB     2.2M/s   84.8MB/s :: out 1.15M   9.84MB     420K/s    3.6MB/s                              sql_in ::   66.849 cpu ms :: in    6M   51.5MB    89.8M/s    771MB/s :: out    25     225B      373/s   3.29KB/s                     sql_semijoin_in :: 1675.488 cpu ms :: in  7.5M   64.4MB    4.48M/s   38.4MB/s :: out    3M   25.8MB    1.79M/s   15.4MB/s                     sql_regexp_like :: 1891.597 cpu ms :: in  1.5M   76.6MB     793K/s   40.5MB/s :: out     1       9B        0/s       4B/s          sql_approx_percentile_long ::  560.500 cpu ms :: in  1.5M   12.9MB    2.68M/s     23MB/s :: out     1       9B        1/s      16B/s                  stat_long_variance ::   24.178 cpu ms :: in  1.5M   12.9MB      62M/s    532MB/s :: out     1       9B       41/s     372B/s              stat_long_variance_pop ::   23.890 cpu ms :: in  1.5M   12.9MB    62.8M/s    539MB/s :: out     1       9B       41/s     376B/s                stat_double_variance ::   21.324 cpu ms :: in  1.5M   12.9MB    70.3M/s    604MB/s :: out     1       9B       46/s     422B/s            stat_double_variance_pop ::   21.284 cpu ms :: in  1.5M   12.9MB    70.5M/s    605MB/s :: out     1       9B       46/s     422B/s                    stat_long_stddev ::   23.768 cpu ms :: in  1.5M   12.9MB    63.1M/s    542MB/s :: out     1       9B       42/s     378B/s                stat_long_stddev_pop ::   23.717 cpu ms :: in  1.5M   12.9MB    63.2M/s    543MB/s :: out     1       9B       42/s     379B/s                  stat_double_stddev ::   21.165 cpu ms :: in  1.5M   12.9MB    70.9M/s    608MB/s :: out     1       9B       47/s     425B/s              stat_double_stddev_pop ::   21.314 cpu ms :: in  1.5M   12.9MB    70.4M/s    604MB/s :: out     1       9B       46/s     422B/s      sql_approx_count_distinct_long ::  132.816 cpu ms :: in  1.5M   12.9MB    11.3M/s   96.9MB/s :: out     1       9B        7/s      67B/s    sql_approx_count_distinct_double ::  136.426 cpu ms :: in  1.5M   12.9MB      11M/s   94.4MB/s :: out     1       9B        7/s      65B/s sql_approx_count_distinct_varbinary ::  218.193 cpu ms :: in  1.5M   21.5MB    6.87M/s   98.3MB/s :: out     1       9B        4/s      41B/s    
945 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Propagate config from split to RecordReader ; nan
947 ;  presto-hive-cdh4/src/test/java/com/facebook/presto/hive/TestHiveClientS3.java ; Add support for reading Hive data from S3 ; nan
947 ;  presto-hive-hadoop1/src/test/java/com/facebook/presto/hive/TestHiveClientS3.java ; Add support for reading Hive data from S3 ; nan
947 ;  presto-hive-hadoop2/src/test/java/com/facebook/presto/hive/TestHiveClientS3.java ; Add support for reading Hive data from S3 ; nan
947 ;  presto-hive/src/main/java/com/facebook/presto/hive/HdfsConfiguration.java ; Add support for reading Hive data from S3 ; nan
947 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java ; Add support for reading Hive data from S3 ; nan
947 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Add support for reading Hive data from S3 ; nan
947 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClientS3.java ; Add support for reading Hive data from S3 ; nan
947 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java ; Add support for reading Hive data from S3 ; nan
950 ; presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Fix NullPointerException when reading from S3 ; When presto reading from S3  get the following NullPointerException:  presto:benchmark> select dateint  hour  hostname  count(*) as cnt from streaming_client_log where dateint=20130701 GROUP BY dateint  hour  hostname order by cnt   Query 20140109_060239_00014_ddzak  FAILED  8 nodes http://ec2-54-205-226-69.compute-1.amazonaws.com:8080/v1/query/20140109_060239_00014_ddzak?pretty Splits: 10 total  8 done (80.00%) CPU Time: 0.0s total      0 rows/s      0B/s  50% active Per Node: 0.0 parallelism      0 rows/s      0B/s Parallelism: 0.0 0:01 [0 rows  0B] [0 rows/s  0B/s]  Query 20140109_060239_00014_ddzak failed: null java.lang.NullPointerException     at org.apache.hadoop.fs.BufferedFSInputStream.getPos(BufferedFSInputStream.java:50)     at org.apache.hadoop.fs.FSDataInputStream.getPos(FSDataInputStream.java:41)     at org.apache.hadoop.io.SequenceFile$Reader.getPosition(SequenceFile.java:2257)     at org.apache.hadoop.mapred.SequenceFileRecordReader.getProgress(SequenceFileRecordReader.java:114)     at com.facebook.presto.hive.GenericHiveRecordCursor.getCompletedBytes(GenericHiveRecordCursor.java:194)     at com.facebook.presto.operator.RecordProjectOperator.getOutput(RecordProjectOperator.java:157)     at com.facebook.presto.operator.TableScanOperator.getOutput(TableScanOperator.java:201)     at com.facebook.presto.operator.Driver.process(Driver.java:214)     at com.facebook.presto.operator.Driver.processFor(Driver.java:243)     at com.facebook.presto.execution.SqlTaskExecution$DriverSplitRunner.processFor(SqlTaskExecution.java:636)     at com.facebook.presto.execution.TaskExecutor$PrioritizedSplitRunner.process(TaskExecutor.java:436)     at com.facebook.presto.execution.TaskExecutor$Runner.run(TaskExecutor.java:570)     at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)     at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)     at java.lang.Thread.run(Thread.java:744)  This root reason is  in RecordProjectOperator.getOutput()  advanceNextPosition() will close the cursor when reaching the end of file  the following cursor.getCompletedBytes() will get NullPointerException  since cursor is already closed.  This patch fixes the bug.
951 ; presto-main/src/test/java/com/facebook/presto/TestLocalQueries.java ; Add support for connectors with sampled data ; nan
951 ;  presto-main/src/test/java/com/facebook/presto/TestLocalQueriesSampled.java ; Add support for connectors with sampled data ; nan
951 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkQueryRunner.java ; Add support for connectors with sampled data ; nan
951 ;  presto-main/src/test/java/com/facebook/presto/tpch/SampledTpchConnectorFactory.java ; Add support for connectors with sampled data ; nan
951 ;  presto-main/src/test/java/com/facebook/presto/tpch/SampledTpchPlugin.java ; Add support for connectors with sampled data ; nan
951 ;  presto-main/src/test/java/com/facebook/presto/tpch/SampledTpchRecordSetProvider.java ; Add support for connectors with sampled data ; nan
952 ; presto-hive/src/main/java/com/facebook/presto/hive/ColumnarBinaryHiveRecordCursor.java ; Fix use of closed RecordReader ; nan
952 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarTextHiveRecordCursor.java ; Fix use of closed RecordReader ; nan
952 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Fix use of closed RecordReader ; nan
953 ; presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraConnectorFactory.java ; Cassandra Plugin ; This pull request contain an updated version of Martin Weindel s Cassandra plugin for Presto.  The changes include the following:  Updated the code to the Presto coding style. (https://github.com/airlift/codestyle)  Split CassandraClient into separate services.  This is how the other connectors are designed  and Hive is only this way for legacy reasons.  Remove the ClassLoader wrappers because Cassandra client does not seem to load class dynamically (like Hive does).  We can add this back if we find out the client is loading classes.  Added some initial tests that start an embedded Cassandra server.  We need much more extensive tests  but I think this is a good starting point.
953 ;  presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraPlugin.java ; Cassandra Plugin ; This pull request contain an updated version of Martin Weindel s Cassandra plugin for Presto.  The changes include the following:  Updated the code to the Presto coding style. (https://github.com/airlift/codestyle)  Split CassandraClient into separate services.  This is how the other connectors are designed  and Hive is only this way for legacy reasons.  Remove the ClassLoader wrappers because Cassandra client does not seem to load class dynamically (like Hive does).  We can add this back if we find out the client is loading classes.  Added some initial tests that start an embedded Cassandra server.  We need much more extensive tests  but I think this is a good starting point.
953 ;  presto-cassandra/src/test/java/com/facebook/presto/cassandra/TestCassandraConnector.java ; Cassandra Plugin ; This pull request contain an updated version of Martin Weindel s Cassandra plugin for Presto.  The changes include the following:  Updated the code to the Presto coding style. (https://github.com/airlift/codestyle)  Split CassandraClient into separate services.  This is how the other connectors are designed  and Hive is only this way for legacy reasons.  Remove the ClassLoader wrappers because Cassandra client does not seem to load class dynamically (like Hive does).  We can add this back if we find out the client is loading classes.  Added some initial tests that start an embedded Cassandra server.  We need much more extensive tests  but I think this is a good starting point.
956 ; presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Refactor LocalExecutionPlanner ; Replace Multimap with Map  now that all our channels contain only a single symbol
957 ; presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add unit test for DISTINCT aggregation on a JOIN ; nan
965 ; presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java ; Fix warnings in unit tests  and reformat some files ; nan
965 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java ; Fix warnings in unit tests  and reformat some files ; nan
971 ; presto-main/src/main/java/com/facebook/presto/execution/Column.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/main/java/com/facebook/presto/execution/Input.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/main/java/com/facebook/presto/execution/SimpleDomain.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/main/java/com/facebook/presto/execution/SimpleMarker.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/main/java/com/facebook/presto/execution/SimpleRange.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/QueryExplainer.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InputExtractor.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/main/java/com/facebook/presto/util/JsonPlanPrinter.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/main/java/com/facebook/presto/util/QueryExplanation.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/test/java/com/facebook/presto/execution/TestColumn.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/test/java/com/facebook/presto/execution/TestInput.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSimpleDomain.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSimpleMarker.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSimpleRange.java ; EXPLAIN (format json  type source) ; nan
971 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/ExplainFormat.java ; EXPLAIN (format json  type source) ; nan
973 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Fix thread safety for FunctionRegistry ; nan
973 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestFunctionRegistry.java ; Fix thread safety for FunctionRegistry ; nan
977 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSourceProvider.java ; Fix handling of non-splittable files without blocks ; nan
979 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSourceProvider.java ; Fix hive connector semaphore release bug ; nan
983 ;  presto-hive/src/main/java/com/facebook/presto/hive/HdfsConfiguration.java ; Add new S3 FileSystem using AWS SDK ; This is a new proof-of-concept S3 FileSystem implementation that uses the AWS SDK. It passes the basic unit tests but has not been tested otherwise.
983 ;  presto-hive/src/main/java/com/facebook/presto/hive/PrestoS3FileSystem.java ; Add new S3 FileSystem using AWS SDK ; This is a new proof-of-concept S3 FileSystem implementation that uses the AWS SDK. It passes the basic unit tests but has not been tested otherwise.
983 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClientS3.java ; Add new S3 FileSystem using AWS SDK ; This is a new proof-of-concept S3 FileSystem implementation that uses the AWS SDK. It passes the basic unit tests but has not been tested otherwise.
985 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Fix hang in hive split source ; Correctly decrement the outstandingSplitCount in getNextBatch
985 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSourceProvider.java ; Fix hang in hive split source ; Correctly decrement the outstandingSplitCount in getNextBatch
985 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/SuspendingExecutor.java ; Fix hang in hive split source ; Correctly decrement the outstandingSplitCount in getNextBatch
985 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplitSource.java ; Fix hang in hive split source ; Correctly decrement the outstandingSplitCount in getNextBatch
987 ; presto-hive/src/main/java/com/facebook/presto/hive/ColumnarBinaryHiveRecordCursor.java ; SerDeUtils ; Rewrite of hive SerDeUtils.getJSONString() using jackson. 
987 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarTextHiveRecordCursor.java ; SerDeUtils ; Rewrite of hive SerDeUtils.getJSONString() using jackson. 
987 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; SerDeUtils ; Rewrite of hive SerDeUtils.getJSONString() using jackson. 
987 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/SerDeUtils.java ; SerDeUtils ; Rewrite of hive SerDeUtils.getJSONString() using jackson. 
987 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; SerDeUtils ; Rewrite of hive SerDeUtils.getJSONString() using jackson. 
987 ;  presto-hive/src/test/java/com/facebook/presto/hive/util/TestSerDeUtils.java ; SerDeUtils ; Rewrite of hive SerDeUtils.getJSONString() using jackson. 
988 ; presto-main/src/main/java/com/facebook/presto/operator/TopNOperator.java ; Fix memory (estimate) leak in TopNOperator ; nan
998 ; presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoDatabaseMetaData.java ; Add ordering and pattern matching to DatabaseMetaData ; nan
998 ;  presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestDriver.java ; Add ordering and pattern matching to DatabaseMetaData ; nan
1000 ; presto-main/src/main/java/com/facebook/presto/connector/NativeConnectorFactory.java ; Improve encapsulation of native connector interfaces ; - Inject NativeMetadata into NativeConnectorFactory  just like DataStreamProvider et al. - Make NativeSplitManager depend on the connector-specific NativeMetadata instead of global Metadata
1000 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeConnectorId.java ; Improve encapsulation of native connector interfaces ; - Inject NativeMetadata into NativeConnectorFactory  just like DataStreamProvider et al. - Make NativeSplitManager depend on the connector-specific NativeMetadata instead of global Metadata
1000 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeMetadata.java ; Improve encapsulation of native connector interfaces ; - Inject NativeMetadata into NativeConnectorFactory  just like DataStreamProvider et al. - Make NativeSplitManager depend on the connector-specific NativeMetadata instead of global Metadata
1000 ;  presto-main/src/main/java/com/facebook/presto/split/NativeSplitManager.java ; Improve encapsulation of native connector interfaces ; - Inject NativeMetadata into NativeConnectorFactory  just like DataStreamProvider et al. - Make NativeSplitManager depend on the connector-specific NativeMetadata instead of global Metadata
1000 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkQueryRunner.java ; Improve encapsulation of native connector interfaces ; - Inject NativeMetadata into NativeConnectorFactory  just like DataStreamProvider et al. - Make NativeSplitManager depend on the connector-specific NativeMetadata instead of global Metadata
1000 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestNativeMetadata.java ; Improve encapsulation of native connector interfaces ; - Inject NativeMetadata into NativeConnectorFactory  just like DataStreamProvider et al. - Make NativeSplitManager depend on the connector-specific NativeMetadata instead of global Metadata
1000 ;  presto-main/src/test/java/com/facebook/presto/split/TestNativeSplitManager.java ; Improve encapsulation of native connector interfaces ; - Inject NativeMetadata into NativeConnectorFactory  just like DataStreamProvider et al. - Make NativeSplitManager depend on the connector-specific NativeMetadata instead of global Metadata
1000 ;  presto-server/src/main/java/com/facebook/presto/server/CoordinatorModule.java ; Improve encapsulation of native connector interfaces ; - Inject NativeMetadata into NativeConnectorFactory  just like DataStreamProvider et al. - Make NativeSplitManager depend on the connector-specific NativeMetadata instead of global Metadata
1001 ; presto-main/src/main/java/com/facebook/presto/sql/planner/EffectivePredicateExtractor.java ; Predicate optimization improvements ; - Between ranges - Simplified effective predicates from partitions
1003 ; presto-main/src/main/java/com/facebook/presto/execution/TaskInfo.java ; Fix state machine and info objects ; nan
1004 ; presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraClientModule.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraConnector.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraConnectorFactory.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-cassandra/src/test/java/com/facebook/presto/cassandra/TestCassandraConnector.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleConnector.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleConnectorFactory.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleModule.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveConnector.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveConnectorFactory.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveConnectorFactory.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-main/src/main/java/com/facebook/presto/connector/ConnectorManager.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-main/src/main/java/com/facebook/presto/connector/InternalConnector.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-main/src/main/java/com/facebook/presto/connector/NativeConnectorFactory.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualConnector.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxConnectorFactory.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemConnector.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-spi/src/main/java/com/facebook/presto/spi/Connector.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-tpch/src/main/java/com/facebook/presto/tpch/TpchConnector.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1004 ;  presto-tpch/src/main/java/com/facebook/presto/tpch/TpchConnectorFactory.java ; Replace generic  getService  method in Connector with explicit methods ; nan
1005 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Synchronize before copying the output items ; nan
1005 ;  presto-main/src/main/java/com/facebook/presto/operator/DriverStats.java ; Synchronize before copying the output items ; nan
1006 ; presto-main/src/main/java/com/facebook/presto/operator/ExchangeOperator.java ; Fully stop tasks ; nan
1007 ; presto-main/src/main/java/com/facebook/presto/HashPagePartitionFunction.java ; Fix overflow bug in HashPagePartitionFunction ; nan
1007 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix overflow bug in HashPagePartitionFunction ; nan
1008 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaDataStreamProvider.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionInfo.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/metadata/Metadata.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/metadata/Signature.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/AggregationFunctionDefinition.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/AggregationOperator.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AggregationFunction.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximateAverageAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximateCountDistinctAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximatePercentileAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximatePercentileWeightedAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AverageAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/BooleanMaxAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/BooleanMinAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountColumnAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountIfAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleMaxAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleMinAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleSumAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongMaxAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongMinAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongSumAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/SimpleAggregationFunction.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/VarBinaryMaxAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/VarBinaryMinAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/VarianceAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/AnalysisContext.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/AnalyzerConfig.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/QueryExplainer.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/BootstrapFunctionBinder.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedLogicalPlanner.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/MaterializeSamplePullUp.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PredicatePushDown.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SetFlatteningOptimizer.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/UnaliasSymbolReferences.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/AggregationNode.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanRewriter.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestSampledQueries.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/benchmark/CountAggregationBenchmark.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/benchmark/DoubleSumAggregationBenchmark.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HandTpchQuery1.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HandTpchQuery6.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/benchmark/HashAggregationBenchmark.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestSignature.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/operator/TestAggregationOperator.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashAggregationOperator.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestAggregationFunction.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestApproximateAggregationFunction.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestApproximateCountDistinct.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/AggregationTestUtils.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/CustomSum.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestApproximatePercentileAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestDoubleApproximateAverageAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestLongApproximateAverageAggregation.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzerConfig.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestEffectivePredicateExtractor.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-main/src/test/java/com/facebook/presto/util/LocalQueryRunner.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Approximate.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Query.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-server/src/main/java/com/facebook/presto/server/CoordinatorModule.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1008 ;  presto-server/src/test/java/com/facebook/presto/server/TestingPrestoServer.java ; Add experimental support for approximate queries ; Note  most of these are from my sample weight PR. The one that needs review is  Experimental support for approximate queries 
1009 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Do not close output buffers on failure ; nan
1009 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskExecution.java ; Do not close output buffers on failure ; nan
1009 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Do not close output buffers on failure ; nan
1014 ; presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java ; Distribute splits evenly among nodes ; nan
1014 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Distribute splits evenly among nodes ; nan
1014 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlStageExecution.java ; Distribute splits evenly among nodes ; nan
1016 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Add checkstyle rule for colon in foreach loops ; nan
1016 ;  presto-main/src/main/java/com/facebook/presto/operator/MarkDistinctOperator.java ; Add checkstyle rule for colon in foreach loops ; nan
1016 ;  presto-main/src/main/java/com/facebook/presto/operator/MaterializeSampleOperator.java ; Add checkstyle rule for colon in foreach loops ; nan
1016 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestApproximateAggregationFunction.java ; Add checkstyle rule for colon in foreach loops ; nan
1016 ;  presto-main/src/test/java/com/facebook/presto/util/MaterializedResult.java ; Add checkstyle rule for colon in foreach loops ; nan
1017 ; presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Refactor sampled test queries into a separate abstract class ; nan
1017 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestSampledQueries.java ; Refactor sampled test queries into a separate abstract class ; nan
1017 ;  presto-main/src/test/java/com/facebook/presto/TestLocalQueries.java ; Refactor sampled test queries into a separate abstract class ; nan
1017 ;  presto-main/src/test/java/com/facebook/presto/TestLocalQueriesSampled.java ; Refactor sampled test queries into a separate abstract class ; nan
1017 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Refactor sampled test queries into a separate abstract class ; nan
1018 ; presto-main/src/main/java/com/facebook/presto/operator/ChannelIndex.java ; Fix LocalExecutionPlanner handling of null literal projections ; Disable compiler tests involving untyped nulls
1018 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/ExpressionCompiler.java ; Fix LocalExecutionPlanner handling of null literal projections ; Disable compiler tests involving untyped nulls
1018 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Fix LocalExecutionPlanner handling of null literal projections ; Disable compiler tests involving untyped nulls
1018 ;  presto-main/src/main/java/com/facebook/presto/tuple/TupleInfo.java ; Fix LocalExecutionPlanner handling of null literal projections ; Disable compiler tests involving untyped nulls
1018 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix LocalExecutionPlanner handling of null literal projections ; Disable compiler tests involving untyped nulls
1018 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Fix LocalExecutionPlanner handling of null literal projections ; Disable compiler tests involving untyped nulls
1018 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestJsonFunctions.java ; Fix LocalExecutionPlanner handling of null literal projections ; Disable compiler tests involving untyped nulls
1018 ;  presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Fix LocalExecutionPlanner handling of null literal projections ; Disable compiler tests involving untyped nulls
1028 ; presto-main/src/main/java/com/facebook/presto/operator/aggregation/BootstrappedAggregation.java ; Add bootstrapped aggregation ; nan
1028 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/PoissonizedBlock.java ; Add bootstrapped aggregation ; nan
1029 ; presto-main/src/main/java/com/facebook/presto/connector/system/AliasSystemTable.java ; Remove materialized view and alias support ; nan
1029 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemTablesModule.java ; Remove materialized view and alias support ; nan
1029 ;  presto-main/src/main/java/com/facebook/presto/execution/CreateAliasExecution.java ; Remove materialized view and alias support ; nan
1029 ;  presto-main/src/main/java/com/facebook/presto/execution/DropAliasExecution.java ; Remove materialized view and alias support ; nan
1029 ;  presto-main/src/main/java/com/facebook/presto/metadata/AliasDao.java ; Remove materialized view and alias support ; nan
1029 ;  presto-main/src/main/java/com/facebook/presto/metadata/Metadata.java ; Remove materialized view and alias support ; nan
1029 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Remove materialized view and alias support ; nan
1029 ;  presto-main/src/main/java/com/facebook/presto/metadata/TableAlias.java ; Remove materialized view and alias support ; nan
1029 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java ; Remove materialized view and alias support ; nan
1029 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/TableAliasSelector.java ; Remove materialized view and alias support ; nan
1029 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestAliasDao.java ; Remove materialized view and alias support ; nan
1029 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Remove materialized view and alias support ; nan
1029 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/CreateAlias.java ; Remove materialized view and alias support ; nan
1029 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/DropAlias.java ; Remove materialized view and alias support ; nan
1029 ;  presto-server/src/main/java/com/facebook/presto/server/CoordinatorModule.java ; Remove materialized view and alias support ; nan
1030 ; presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Allow optimization of subexpressions in certain cases ; nan
1030 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Allow optimization of subexpressions in certain cases ; nan
1032 ; presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaDataStreamProvider.java ; Fix information schema predicate extraction ; nan
1032 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataUtil.java ; Fix information schema predicate extraction ; nan
1032 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix information schema predicate extraction ; nan
1034 ; presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestDriver.java ; Fix JDBC tests ; nan
1034 ;  presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestJdbcResultSet.java ; Fix JDBC tests ; nan
1036 ; presto-main/src/main/java/com/facebook/presto/operator/SampleOperator.java ; Add poissonized sampling ; nan
1036 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Add poissonized sampling ; nan
1036 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedLogicalPlanner.java ; Add poissonized sampling ; nan
1036 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Add poissonized sampling ; nan
1036 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Add poissonized sampling ; nan
1036 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanRewriter.java ; Add poissonized sampling ; nan
1036 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/SampleNode.java ; Add poissonized sampling ; nan
1036 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add poissonized sampling ; nan
1036 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/SampledRelation.java ; Add poissonized sampling ; nan
1037 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Fix scheduling bug where drivers queued in TaskExecutor are not counted ; Create DriverContext when split is added instead of waiting until a thread is associated with the split.
1040 ;  presto-tpch/src/main/java/com/facebook/presto/tpch/TpchSplitManager.java ; Check for no tpch nodes when generating splits ; nan
1042 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Add support for sampled tables to Hive connector ; nan
1042 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveColumnHandle.java ; Add support for sampled tables to Hive connector ; nan
1042 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSink.java ; Add support for sampled tables to Hive connector ; nan
1042 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Add support for sampled tables to Hive connector ; nan
1046 ; presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Add tracking of failures for metastore API calls ; nan
1046 ;  presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastoreStats.java ; Add tracking of failures for metastore API calls ; nan
1046 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveMetastoreApiStats.java ; Add tracking of failures for metastore API calls ; nan
1050 ; presto-main/src/main/java/com/facebook/presto/operator/ValuesOperator.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/SemanticErrorCode.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedExecutionPlanner.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedLogicalPlanner.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanSanityChecker.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/SymbolExtractor.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanNode.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanNodeRewriter.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanRewriter.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/PlanVisitor.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/ValuesNode.java ; Implement VALUES ; nan
1050 ;  presto-main/src/main/java/com/facebook/presto/util/GraphvizPrinter.java ; Implement VALUES ; nan
1050 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Implement VALUES ; nan
1050 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashJoinOperator.java ; Implement VALUES ; nan
1050 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashSemiJoinOperator.java ; Implement VALUES ; nan
1050 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Implement VALUES ; nan
1050 ;  presto-main/src/test/java/com/facebook/presto/util/LocalQueryRunner.java ; Implement VALUES ; nan
1050 ;  presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java ; Implement VALUES ; nan
1050 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Implement VALUES ; nan
1050 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/DefaultTraversalVisitor.java ; Implement VALUES ; nan
1050 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Row.java ; Implement VALUES ; nan
1050 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/TreePrinter.java ; Implement VALUES ; nan
1050 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Values.java ; Implement VALUES ; nan
1050 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Implement VALUES ; nan
1050 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementBuilder.java ; Implement VALUES ; nan
1054 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Add tracking of latency and failures for hadoop api calls ; nan
1054 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java ; Add tracking of latency and failures for hadoop api calls ; nan
1054 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSourceProvider.java ; Add tracking of latency and failures for hadoop api calls ; nan
1054 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java ; Add tracking of latency and failures for hadoop api calls ; nan
1054 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/HadoopApiStats.java ; Add tracking of latency and failures for hadoop api calls ; nan
1054 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Add tracking of latency and failures for hadoop api calls ; nan
1054 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClientS3.java ; Add tracking of latency and failures for hadoop api calls ; nan
1054 ;  presto-hive/src/test/java/com/facebook/presto/hive/util/TestAsyncRecursiveWalker.java ; Add tracking of latency and failures for hadoop api calls ; nan
1056 ; presto-main/src/main/java/com/facebook/presto/sql/planner/EffectivePredicateExtractor.java ; Fix EffectivePredicateExtractor range summary bug ; Occurs when the RangeSet has no ranges.
1056 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix EffectivePredicateExtractor range summary bug ; Occurs when the RangeSet has no ranges.
1061 ; presto-main/src/main/java/com/facebook/presto/sql/planner/EffectivePredicateExtractor.java ; Fix JOINs that have ORDER BY rand() ; nan
1061 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix JOINs that have ORDER BY rand() ; nan
1064 ; presto-main/src/main/java/com/facebook/presto/operator/HttpPageBufferClient.java ; Fix build failure ; AsyncHttpClient.AsyncHttpResponseFuture was removed from airlift
1065 ; presto-hive/src/main/java/com/facebook/presto/hive/util/SerDeUtils.java ; Fix handling of Hive timestamp in maps/lists ; Also  add more unit tests for RCFile formats
1065 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java ; Fix handling of Hive timestamp in maps/lists ; Also  add more unit tests for RCFile formats
1065 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java ; Fix handling of Hive timestamp in maps/lists ; Also  add more unit tests for RCFile formats
1065 ;  presto-hive/src/test/java/com/facebook/presto/hive/util/TestSerDeUtils.java ; Fix handling of Hive timestamp in maps/lists ; Also  add more unit tests for RCFile formats
1069 ; presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Rename analyzer.approximate-queries-enabled ; Change name of config flag to analyzer.experimental-syntax-enabled  since it s used to gate more than just approximate queries (rescaled sampling)
1069 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Rename analyzer.approximate-queries-enabled ; Change name of config flag to analyzer.experimental-syntax-enabled  since it s used to gate more than just approximate queries (rescaled sampling)
1069 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/AnalyzerConfig.java ; Rename analyzer.approximate-queries-enabled ; Change name of config flag to analyzer.experimental-syntax-enabled  since it s used to gate more than just approximate queries (rescaled sampling)
1069 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java ; Rename analyzer.approximate-queries-enabled ; Change name of config flag to analyzer.experimental-syntax-enabled  since it s used to gate more than just approximate queries (rescaled sampling)
1069 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/QueryExplainer.java ; Rename analyzer.approximate-queries-enabled ; Change name of config flag to analyzer.experimental-syntax-enabled  since it s used to gate more than just approximate queries (rescaled sampling)
1069 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Rename analyzer.approximate-queries-enabled ; Change name of config flag to analyzer.experimental-syntax-enabled  since it s used to gate more than just approximate queries (rescaled sampling)
1069 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Rename analyzer.approximate-queries-enabled ; Change name of config flag to analyzer.experimental-syntax-enabled  since it s used to gate more than just approximate queries (rescaled sampling)
1069 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/PlanOptimizersFactory.java ; Rename analyzer.approximate-queries-enabled ; Change name of config flag to analyzer.experimental-syntax-enabled  since it s used to gate more than just approximate queries (rescaled sampling)
1069 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PredicatePushDown.java ; Rename analyzer.approximate-queries-enabled ; Change name of config flag to analyzer.experimental-syntax-enabled  since it s used to gate more than just approximate queries (rescaled sampling)
1069 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Rename analyzer.approximate-queries-enabled ; Change name of config flag to analyzer.experimental-syntax-enabled  since it s used to gate more than just approximate queries (rescaled sampling)
1069 ;  presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzerConfig.java ; Rename analyzer.approximate-queries-enabled ; Change name of config flag to analyzer.experimental-syntax-enabled  since it s used to gate more than just approximate queries (rescaled sampling)
1069 ;  presto-main/src/test/java/com/facebook/presto/util/LocalQueryRunner.java ; Rename analyzer.approximate-queries-enabled ; Change name of config flag to analyzer.experimental-syntax-enabled  since it s used to gate more than just approximate queries (rescaled sampling)
1069 ;  presto-server/src/main/java/com/facebook/presto/server/testing/TestingPrestoServer.java ; Rename analyzer.approximate-queries-enabled ; Change name of config flag to analyzer.experimental-syntax-enabled  since it s used to gate more than just approximate queries (rescaled sampling)
1075 ; presto-main/src/test/java/com/facebook/presto/AbstractTestSampledQueries.java ; Make unit tests faster ; nan
1077 ; presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add more details to time logging in test queries ; nan
1077 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestSampledQueries.java ; Add more details to time logging in test queries ; nan
1087 ; presto-main/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Change default read timeout to 1 second ; I m not sure if the values are correct  but this shows how the default config system works
1088 ; presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Add error codes ; nan
1088 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Add error codes ; nan
1088 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveErrorCode.java ; Add error codes ; nan
1088 ;  presto-hive/src/main/java/com/facebook/presto/hive/TableOfflineException.java ; Add error codes ; nan
1089 ;  presto-main/src/test/java/com/facebook/presto/block/dictionary/TestPackedLongSerde.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlStageExecution.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskExecution.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestDatabaseLocalStorageManager.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestDatabaseShardManager.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestDiscoveryNodeManager.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestJsonTableHandle.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestNativeMetadata.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestShardManagerDao.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestAggregationOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestAlignmentOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestDistinctLimitOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestExchangeClient.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestExchangeOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestFilterAndProjectOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashAggregationOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashJoinOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashSemiJoinOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestLimitOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestMarkDistinctOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestMaterializeSampleOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestOrderByOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestRecordProjectOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestTopNOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/TestWindowOperator.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/operator/window/TestWindowFunctions.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/split/TestNativeSplitManager.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1089 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestEffectivePredicateExtractor.java ; Parallelize test queries in presto-main ; Make all unit tests in presto-main run in parallel by default  and annotate non-threadsafe tests with singleThreaded=true
1090 ; presto-main/src/main/java/com/facebook/presto/operator/InMemoryExchange.java ; Add backpressure to InMemoryExchange ; nan
1090 ;  presto-main/src/main/java/com/facebook/presto/operator/InMemoryExchangeSinkOperator.java ; Add backpressure to InMemoryExchange ; nan
1090 ;  presto-main/src/main/java/com/facebook/presto/operator/InMemoryExchangeSourceOperator.java ; Add backpressure to InMemoryExchange ; nan
1099 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; closed form SUM and COUNT ; nan
1099 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximateDoubleSumAggregation.java ; closed form SUM and COUNT ; nan
1099 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximateLongSumAggregation.java ; closed form SUM and COUNT ; nan
1099 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximateUtils.java ; closed form SUM and COUNT ; nan
1099 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestApproximateDoubleSumAggregation.java ; closed form SUM and COUNT ; nan
1099 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/TestApproximateLongSumAggregation.java ; closed form SUM and COUNT ; nan
1100 ;  presto-cassandra/src/test/java/com/facebook/presto/cassandra/TestCachingCassandraSchemaProvider.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-example-http/src/test/java/com/facebook/presto/example/TestExampleMetadata.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-hive-cdh4/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-hive-cdh4/src/test/java/com/facebook/presto/hive/TestHiveClientS3.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-hive-cdh4/src/test/java/com/facebook/presto/hive/TestSplitIteratorBackpressure.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-hive-hadoop1/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-hive-hadoop1/src/test/java/com/facebook/presto/hive/TestHiveClientS3.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-hive-hadoop1/src/test/java/com/facebook/presto/hive/TestSplitIteratorBackpressure.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-hive-hadoop2/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-hive-hadoop2/src/test/java/com/facebook/presto/hive/TestHiveClientS3.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-hive-hadoop2/src/test/java/com/facebook/presto/hive/TestSplitIteratorBackpressure.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestCachingHiveMetastore.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestJdbcResultSet.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-server/src/test/java/com/facebook/presto/server/TestExecuteResource.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-server/src/test/java/com/facebook/presto/server/TestNodeResource.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-server/src/test/java/com/facebook/presto/server/TestQueryResourceServer.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1100 ;  presto-server/src/test/java/com/facebook/presto/server/TestServer.java ; Run all tests in parallel by default ; Annotate all tests that use @BeforeMethod with singleThreaded=true
1105 ; presto-main/src/main/java/com/facebook/presto/operator/Driver.java ; Remove potential deadlock with broken connectors ; Replace synchronized lock with a custom lock with timeout support  For close and updateSource stage change and then attempt to acquire lock.  If lock is acquired  process change  otherwise lock holder will process change before releasing lock.  For close  if lock can not be acquired  interrupt lock holder.
1105 ;  presto-main/src/main/java/com/facebook/presto/operator/DriverContext.java ; Remove potential deadlock with broken connectors ; Replace synchronized lock with a custom lock with timeout support  For close and updateSource stage change and then attempt to acquire lock.  If lock is acquired  process change  otherwise lock holder will process change before releasing lock.  For close  if lock can not be acquired  interrupt lock holder.
1105 ;  presto-main/src/main/java/com/facebook/presto/operator/TableScanOperator.java ; Remove potential deadlock with broken connectors ; Replace synchronized lock with a custom lock with timeout support  For close and updateSource stage change and then attempt to acquire lock.  If lock is acquired  process change  otherwise lock holder will process change before releasing lock.  For close  if lock can not be acquired  interrupt lock holder.
1105 ;  presto-main/src/test/java/com/facebook/presto/operator/TestDriver.java ; Remove potential deadlock with broken connectors ; Replace synchronized lock with a custom lock with timeout support  For close and updateSource stage change and then attempt to acquire lock.  If lock is acquired  process change  otherwise lock holder will process change before releasing lock.  For close  if lock can not be acquired  interrupt lock holder.
1108 ; presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximateAverageAggregation.java ; Fix division by zero in VarianceAggregation ; nan
1108 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/VarianceAggregation.java ; Fix division by zero in VarianceAggregation ; nan
1108 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/AggregationTestUtils.java ; Fix division by zero in VarianceAggregation ; nan
1109 ; presto-hive-cdh4/src/test/java/com/facebook/presto/hive/TestHiveClientS3.java ; Update S3 FileSystem ; This is an updated version of #1044.
1109 ;  presto-hive-hadoop1/src/test/java/com/facebook/presto/hive/TestHiveClientS3.java ; Update S3 FileSystem ; This is an updated version of #1044.
1109 ;  presto-hive-hadoop2/src/test/java/com/facebook/presto/hive/TestHiveClientS3.java ; Update S3 FileSystem ; This is an updated version of #1044.
1109 ;  presto-hive/src/main/java/com/facebook/presto/hive/CachingHiveMetastore.java ; Update S3 FileSystem ; This is an updated version of #1044.
1109 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClientS3.java ; Update S3 FileSystem ; This is an updated version of #1044.
1115 ; presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoDatabaseMetaData.java ; Fix null values for DatabaseMetaData.getColumns ; nan
1116 ; presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java ; Fixes ; nan
1122 ; presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountAggregation.java ; Indivisible ; nan
1125 ; presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraRecordCursor.java ; Read timing ; nan
1125 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleRecordCursor.java ; Read timing ; nan
1125 ;  presto-hive/src/main/java/com/facebook/presto/hive/AbstractHiveRecordCursor.java ; Read timing ; nan
1125 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarBinaryHiveRecordCursor.java ; Read timing ; nan
1125 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarBinaryHiveRecordCursorProvider.java ; Read timing ; nan
1125 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarTextHiveRecordCursor.java ; Read timing ; nan
1125 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarTextHiveRecordCursorProvider.java ; Read timing ; nan
1125 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Read timing ; nan
1125 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursorProvider.java ; Read timing ; nan
1125 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordCursorProvider.java ; Read timing ; nan
1125 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Read timing ; nan
1125 ;  presto-main/src/main/java/com/facebook/presto/event/query/QueryMonitor.java ; Read timing ; nan
1125 ;  presto-main/src/main/java/com/facebook/presto/event/query/SplitCompletionEvent.java ; Read timing ; nan
1125 ;  presto-main/src/main/java/com/facebook/presto/operator/AbstractScanFilterAndProjectOperator.java ; Read timing ; nan
1125 ;  presto-main/src/main/java/com/facebook/presto/operator/DriverContext.java ; Read timing ; nan
1125 ;  presto-main/src/main/java/com/facebook/presto/operator/DriverStats.java ; Read timing ; nan
1125 ;  presto-main/src/main/java/com/facebook/presto/operator/OperatorContext.java ; Read timing ; nan
1125 ;  presto-main/src/main/java/com/facebook/presto/operator/RecordProjectOperator.java ; Read timing ; nan
1125 ;  presto-main/src/main/java/com/facebook/presto/split/MappedRecordSet.java ; Read timing ; nan
1125 ;  presto-main/src/main/java/com/facebook/presto/util/DelimitedRecordSet.java ; Read timing ; nan
1125 ;  presto-main/src/test/java/com/facebook/presto/operator/TestDriverStats.java ; Read timing ; nan
1125 ;  presto-main/src/test/java/com/facebook/presto/tpch/SampledTpchRecordSetProvider.java ; Read timing ; nan
1125 ;  presto-main/src/test/java/com/facebook/presto/util/InfiniteRecordSet.java ; Read timing ; nan
1125 ;  presto-spi/src/main/java/com/facebook/presto/spi/InMemoryRecordSet.java ; Read timing ; nan
1125 ;  presto-spi/src/main/java/com/facebook/presto/spi/RecordCursor.java ; Read timing ; nan
1125 ;  presto-tpch/src/main/java/com/facebook/presto/tpch/TpchRecordSet.java ; Read timing ; nan
1128 ; presto-hive/src/main/java/com/facebook/presto/hive/DirectoryLister.java ; Add DirectoryLister interface ; Use dependency injection instead of a static method call.
1128 ;  presto-hive/src/main/java/com/facebook/presto/hive/HadoopDirectoryLister.java ; Add DirectoryLister interface ; Use dependency injection instead of a static method call.
1128 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Add DirectoryLister interface ; Use dependency injection instead of a static method call.
1128 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java ; Add DirectoryLister interface ; Use dependency injection instead of a static method call.
1128 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSourceProvider.java ; Add DirectoryLister interface ; Use dependency injection instead of a static method call.
1128 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java ; Add DirectoryLister interface ; Use dependency injection instead of a static method call.
1128 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Add DirectoryLister interface ; Use dependency injection instead of a static method call.
1128 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClientS3.java ; Add DirectoryLister interface ; Use dependency injection instead of a static method call.
1128 ;  presto-hive/src/test/java/com/facebook/presto/hive/util/TestAsyncRecursiveWalker.java ; Add DirectoryLister interface ; Use dependency injection instead of a static method call.
1129 ; presto-client/src/main/java/com/facebook/presto/client/FailureInfo.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1129 ;  presto-main/src/main/java/com/facebook/presto/ErrorCodes.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1129 ;  presto-main/src/main/java/com/facebook/presto/execution/ExecutionFailureInfo.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1129 ;  presto-main/src/main/java/com/facebook/presto/execution/Failure.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1129 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1129 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1129 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1129 ;  presto-main/src/main/java/com/facebook/presto/execution/StageInfo.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1129 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskInfo.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1129 ;  presto-main/src/main/java/com/facebook/presto/util/Failures.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1129 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlStageExecution.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1129 ;  presto-server/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1129 ;  presto-server/src/main/java/com/facebook/presto/server/StatementResource.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1129 ;  presto-server/src/test/java/com/facebook/presto/server/MockQueryManager.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1129 ;  presto-server/src/test/java/com/facebook/presto/server/MockTaskManager.java ; Refactor failure handling ; - Split FailureInfo into ClientFailureInfo and FailureInfo  so that error codes can be propagated back from workers - Change ErrorCode to a concrete class  instead of an interface  to allow it to be json serialized
1131 ; presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Record  started  counter for queries that fail to parse ; In the last release we started tracking parsing failures for error categorization  but the change was missing the call to increment the started counter.  As a result  the started and completed counters get permanently out of sync and cause the number of running queries to be reported as 0.  Fixes https://github.com/facebook/presto/issues/1130
1132 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Rename HadoopApiStats and move it out of util package ; nan
1132 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientModule.java ; Rename HadoopApiStats and move it out of util package ; nan
1132 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSourceProvider.java ; Rename HadoopApiStats and move it out of util package ; nan
1132 ;  presto-hive/src/main/java/com/facebook/presto/hive/NamenodeStats.java ; Rename HadoopApiStats and move it out of util package ; nan
1132 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java ; Rename HadoopApiStats and move it out of util package ; nan
1132 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Rename HadoopApiStats and move it out of util package ; nan
1132 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClientS3.java ; Rename HadoopApiStats and move it out of util package ; nan
1132 ;  presto-hive/src/test/java/com/facebook/presto/hive/util/TestAsyncRecursiveWalker.java ; Rename HadoopApiStats and move it out of util package ; nan
1134 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/UnixTimeFunctions.java ; Categorize user errors ; - Categorize a bunch of illegal argument exceptions as user errors - Categorize division by zero as a user error
1134 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/Operations.java ; Categorize user errors ; - Categorize a bunch of illegal argument exceptions as user errors - Categorize division by zero as a user error
1134 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Categorize user errors ; - Categorize a bunch of illegal argument exceptions as user errors - Categorize division by zero as a user error
1134 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestConditions.java ; Categorize user errors ; - Categorize a bunch of illegal argument exceptions as user errors - Categorize division by zero as a user error
1134 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Categorize user errors ; - Categorize a bunch of illegal argument exceptions as user errors - Categorize division by zero as a user error
1134 ;  presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java ; Categorize user errors ; - Categorize a bunch of illegal argument exceptions as user errors - Categorize division by zero as a user error
1136 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveMetastoreClientFactory.java ; Include metastore host name in exception message ; nan
1140 ; presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManagerStats.java ; Add counter for total failed queries ; nan
1143 ; presto-main/src/main/java/com/facebook/presto/failureDetector/FailureDetectorModule.java ; Use a private I/O thread pool for failure detector ; nan
1145 ; presto-server/src/main/java/com/facebook/presto/server/testing/TestingPrestoServer.java ; Allow additional modules with TestingPrestoServer ; nan
1145 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Allow additional modules with TestingPrestoServer ; nan
1151 ; presto-main/src/main/java/com/facebook/presto/connector/dual/DualMetadata.java ; Add experimental syntax flag to FunctionRegistry ; - Gate approximate functions with experimental syntax flag - Will also be used to gate future experimental functions  like the ML functions
1151 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Add experimental syntax flag to FunctionRegistry ; - Gate approximate functions with experimental syntax flag - Will also be used to gate future experimental functions  like the ML functions
1151 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Add experimental syntax flag to FunctionRegistry ; - Gate approximate functions with experimental syntax flag - Will also be used to gate future experimental functions  like the ML functions
1151 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Add experimental syntax flag to FunctionRegistry ; - Gate approximate functions with experimental syntax flag - Will also be used to gate future experimental functions  like the ML functions
1151 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlStageExecution.java ; Add experimental syntax flag to FunctionRegistry ; - Gate approximate functions with experimental syntax flag - Will also be used to gate future experimental functions  like the ML functions
1151 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskExecution.java ; Add experimental syntax flag to FunctionRegistry ; - Gate approximate functions with experimental syntax flag - Will also be used to gate future experimental functions  like the ML functions
1151 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Add experimental syntax flag to FunctionRegistry ; - Gate approximate functions with experimental syntax flag - Will also be used to gate future experimental functions  like the ML functions
1151 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestFunctionRegistry.java ; Add experimental syntax flag to FunctionRegistry ; - Gate approximate functions with experimental syntax flag - Will also be used to gate future experimental functions  like the ML functions
1151 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Add experimental syntax flag to FunctionRegistry ; - Gate approximate functions with experimental syntax flag - Will also be used to gate future experimental functions  like the ML functions
1151 ;  presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java ; Add experimental syntax flag to FunctionRegistry ; - Gate approximate functions with experimental syntax flag - Will also be used to gate future experimental functions  like the ML functions
1151 ;  presto-main/src/test/java/com/facebook/presto/util/LocalQueryRunner.java ; Add experimental syntax flag to FunctionRegistry ; - Gate approximate functions with experimental syntax flag - Will also be used to gate future experimental functions  like the ML functions
1153 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/RegexpFunctions.java ; Categorize errors and improve PrestoException message ; nan
1154 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveErrorCode.java ; Categorize partition offline exceptions ; Also preserve their exception type by making PartitionOfflineException extend PrestoException. This fixes our internal tests
1154 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSourceProvider.java ; Categorize partition offline exceptions ; Also preserve their exception type by making PartitionOfflineException extend PrestoException. This fixes our internal tests
1154 ;  presto-hive/src/main/java/com/facebook/presto/hive/PartitionOfflineException.java ; Categorize partition offline exceptions ; Also preserve their exception type by making PartitionOfflineException extend PrestoException. This fixes our internal tests
1156 ; presto-hive/src/main/java/com/facebook/presto/hive/ColumnarBinaryHiveRecordCursor.java ; Rename AbstractHiveRecordCursor to HiveRecordCursor ; nan
1156 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarBinaryHiveRecordCursorProvider.java ; Rename AbstractHiveRecordCursor to HiveRecordCursor ; nan
1156 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarTextHiveRecordCursor.java ; Rename AbstractHiveRecordCursor to HiveRecordCursor ; nan
1156 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarTextHiveRecordCursorProvider.java ; Rename AbstractHiveRecordCursor to HiveRecordCursor ; nan
1156 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Rename AbstractHiveRecordCursor to HiveRecordCursor ; nan
1156 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursorProvider.java ; Rename AbstractHiveRecordCursor to HiveRecordCursor ; nan
1156 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordCursor.java ; Rename AbstractHiveRecordCursor to HiveRecordCursor ; nan
1156 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordCursorProvider.java ; Rename AbstractHiveRecordCursor to HiveRecordCursor ; nan
1156 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Rename AbstractHiveRecordCursor to HiveRecordCursor ; nan
1158 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/UnixTimeFunctions.java ; Categorize bad date parse format string errors ; nan
1158 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestUnixTimeFunctions.java ; Categorize bad date parse format string errors ; nan
1160 ; presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Fix NPE in PlanPrinter ; nan
1162 ; presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/UnaliasSymbolReferences.java ; Rewrite identical projection expressions in terms of the same symbol ; This is an existing gap in our optimizer whereby a projection may have the same deterministic expression being generated for multiple output symbols. This results in the expression being computed and stored multiple times unnecessarily.  For example  consider this query: https://gist.github.com/erichwang/8f9dea33396c2d85869d  Previously our plan would look like this: https://gist.github.com/erichwang/3f5c82c13a9c79f998ef  With the fix it looks like this: https://gist.github.com/erichwang/e08606ae5fe17dc52a6c
1163 ; presto-spi/src/main/java/com/facebook/presto/spi/Range.java ; Fix Range bug in SPI ; This is a nasty one.
1163 ;  presto-spi/src/test/java/com/facebook/presto/spi/TestRange.java ; Fix Range bug in SPI ; This is a nasty one.
1167 ; presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Fix race condition in Hive tests ; nan
1167 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClientS3.java ; Fix race condition in Hive tests ; nan
1168 ; presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximateAverageAggregation.java ; Fix error bounds for approximate SUM and AVG ; nan
1168 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximateDoubleSumAggregation.java ; Fix error bounds for approximate SUM and AVG ; nan
1168 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximateLongSumAggregation.java ; Fix error bounds for approximate SUM and AVG ; nan
1168 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximateUtils.java ; Fix error bounds for approximate SUM and AVG ; nan
1168 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/OnlineVarianceCalculator.java ; Fix error bounds for approximate SUM and AVG ; nan
1168 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/VarianceAggregation.java ; Fix error bounds for approximate SUM and AVG ; nan
1168 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/AbstractTestApproximateAggregationFunction.java ; Fix error bounds for approximate SUM and AVG ; nan
1168 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/AggregationTestUtils.java ; Fix error bounds for approximate SUM and AVG ; nan
1172 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/JsonExtract.java ; Errors ; nan
1172 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestJsonExtract.java ; Errors ; nan
1173 ; presto-main/src/main/java/com/facebook/presto/operator/GroupByHash.java ; Resize group by builder ; nan
1173 ;  presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Resize group by builder ; nan
1178 ; presto-main/src/main/java/com/facebook/presto/execution/DropTableExecution.java ; Add helper methods similar to checkArgument ; nan
1178 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/JsonExtract.java ; Add helper methods similar to checkArgument ; nan
1178 ;  presto-main/src/main/java/com/facebook/presto/util/Failures.java ; Add helper methods similar to checkArgument ; nan
1179 ; presto-main/src/main/java/com/facebook/presto/operator/TableWriterOperator.java ; Fix bug in CREATE TABLE AS SELECT ; nan
1179 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Fix bug in CREATE TABLE AS SELECT ; nan
1179 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Fix bug in CREATE TABLE AS SELECT ; nan
1185 ; presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Fix NPE in SqlTaskExecution.isFinished ; nan
1190 ; presto-parser/src/main/java/com/facebook/presto/sql/tree/LongLiteral.java ; Fix NumberFormatException killing cli bug ; nan
1190 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Fix NumberFormatException killing cli bug ; nan
1194 ; presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Reuse pre computed partitionDomainSummary ; PartitionDomainSummary computation is an expensive operation(250ms for 12k partitions). Instead of computing it every time a new instance of TableScanNode is created  we can use pre computed partitionDomainSummary value.
1194 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SimplifyExpressions.java ; Reuse pre computed partitionDomainSummary ; PartitionDomainSummary computation is an expensive operation(250ms for 12k partitions). Instead of computing it every time a new instance of TableScanNode is created  we can use pre computed partitionDomainSummary value.
1194 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/UnaliasSymbolReferences.java ; Reuse pre computed partitionDomainSummary ; PartitionDomainSummary computation is an expensive operation(250ms for 12k partitions). Instead of computing it every time a new instance of TableScanNode is created  we can use pre computed partitionDomainSummary value.
1194 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/plan/TableScanNode.java ; Reuse pre computed partitionDomainSummary ; PartitionDomainSummary computation is an expensive operation(250ms for 12k partitions). Instead of computing it every time a new instance of TableScanNode is created  we can use pre computed partitionDomainSummary value.
1197 ; presto-hive-cdh4/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive-cdh4/src/test/java/com/facebook/presto/hive/TestSplitIteratorBackpressure.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive-hadoop1/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive-hadoop1/src/test/java/com/facebook/presto/hive/TestSplitIteratorBackpressure.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive-hadoop2/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive-hadoop2/src/test/java/com/facebook/presto/hive/TestSplitIteratorBackpressure.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarBinaryHiveRecordCursorProvider.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarTextHiveRecordCursor.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarTextHiveRecordCursorProvider.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursorProvider.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClientConfig.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordCursorProvider.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordSet.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestSplitIteratorBackpressure.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveClientConfig.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveFileFormats.java ; Allow setting time zone for Hive data ; nan
1197 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveUtil.java ; Allow setting time zone for Hive data ; nan
1201 ; presto-hive/src/main/java/com/facebook/presto/hive/ColumnarBinaryHiveRecordCursor.java ; Full type support updated with feedback ; This included all code from UDT and  full-type-support and has been updated based on feedback from the reviews.
1201 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarTextHiveRecordCursor.java ; Full type support updated with feedback ; This included all code from UDT and  full-type-support and has been updated based on feedback from the reviews.
1201 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Full type support updated with feedback ; This included all code from UDT and  full-type-support and has been updated based on feedback from the reviews.
1201 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/SerDeUtils.java ; Full type support updated with feedback ; This included all code from UDT and  full-type-support and has been updated based on feedback from the reviews.
1201 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Full type support updated with feedback ; This included all code from UDT and  full-type-support and has been updated based on feedback from the reviews.
1201 ;  presto-main/src/test/java/com/facebook/presto/block/BlockCursorAssertions.java ; Full type support updated with feedback ; This included all code from UDT and  full-type-support and has been updated based on feedback from the reviews.
1202 ; presto-main/src/test/java/com/facebook/presto/AbstractTestIndexedQueries.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueryFramework.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/TestLocalQueriesIndexed.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/operator/MaterializedTuple.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/operator/MaterializedTupleRecordSet.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/tpch/AppendingRecordSet.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/tpch/ConcatRecordSet.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/tpch/IndexedTpchConnectorFactory.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/tpch/IndexedTpchPlugin.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchIndex.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchIndexHandle.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchIndexHandleResolver.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchIndexResolver.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchIndexSpec.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchIndexedData.java ; Index joins ; Updated for new type system
1202 ;  presto-main/src/test/java/com/facebook/presto/tpch/TpchScaledTable.java ; Index joins ; Updated for new type system
1202 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueriesIndexed.java ; Index joins ; Updated for new type system
1202 ;  presto-tpch/src/main/java/com/facebook/presto/tpch/TpchMetadata.java ; Index joins ; Updated for new type system
1205 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/DateTimeFunctions.java ; Add date_trunc function ; nan
1205 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/CanonicalizeExpressions.java ; Add date_trunc function ; nan
1205 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestUnixTimeFunctions.java ; Add date_trunc function ; nan
1205 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Add date_trunc function ; nan
1205 ;  presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Add date_trunc function ; nan
1205 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/Extract.java ; Add date_trunc function ; nan
1206 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/ColorFunctions.java ; Add Color type and use it in color functions ; nan
1206 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LiteralInterpreter.java ; Add Color type and use it in color functions ; nan
1206 ;  presto-main/src/main/java/com/facebook/presto/type/ColorType.java ; Add Color type and use it in color functions ; nan
1206 ;  presto-main/src/main/java/com/facebook/presto/type/TypeRegistry.java ; Add Color type and use it in color functions ; nan
1206 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestColorFunctions.java ; Add Color type and use it in color functions ; nan
1206 ;  presto-main/src/test/java/com/facebook/presto/serde/TestingBlockEncodingManager.java ; Add Color type and use it in color functions ; nan
1206 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Add Color type and use it in color functions ; nan
1208 ; presto-main/src/main/java/com/facebook/presto/sql/planner/PlanPrinter.java ; Explain missing column type bug fix ; nan
1210 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Fix regression with VARCHAR partitions in Hive ; Fix the Hive connector to return Slice objects for the values of VARCHAR partition columns instead of String objects. Also fix the Hive tests to use Slice instead of String.
1210 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Fix regression with VARCHAR partitions in Hive ; Fix the Hive connector to return Slice objects for the values of VARCHAR partition columns instead of String objects. Also fix the Hive tests to use Slice instead of String.
1211 ; presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoIntervalDayTime.java ; Jdbc date time types ; nan
1211 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoIntervalYearMonth.java ; Jdbc date time types ; nan
1211 ;  presto-jdbc/src/main/java/com/facebook/presto/jdbc/PrestoResultSet.java ; Jdbc date time types ; nan
1211 ;  presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestDriver.java ; Jdbc date time types ; nan
1213 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Minor fixes ; nan
1216 ; presto-main/src/test/java/com/facebook/presto/util/TestTimeZoneUtils.java ; Spi cleanup ; Remove unnecessary methods Use consistent naming Add javadocs to interfaces Change RecordCursor getString to getSlice returning a Slice Allow plugins to register new Types and BlockEncodingFactories
1216 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/TimeZoneKey.java ; Spi cleanup ; Remove unnecessary methods Use consistent naming Add javadocs to interfaces Change RecordCursor getString to getSlice returning a Slice Allow plugins to register new Types and BlockEncodingFactories
1216 ;  presto-spi/src/test/java/com/facebook/presto/spi/type/TestTimeZoneKey.java ; Spi cleanup ; Remove unnecessary methods Use consistent naming Add javadocs to interfaces Change RecordCursor getString to getSlice returning a Slice Allow plugins to register new Types and BlockEncodingFactories
1218 ; presto-server/src/main/java/com/facebook/presto/server/StatementResource.java ; Fix exchange client leak when queries are abandoned ; The query purger in StatementResource wasn t calling close() on query objects when purging them from the list of active queries. As a result  abandonded queries would result in StatementResource leaking an exchange client
1223 ; presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java ; Fix implicit coercion of aggregates ; nan
1223 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix implicit coercion of aggregates ; nan
1224 ; presto-main/src/main/java/com/facebook/presto/serde/PagesSerde.java ; PagesSerde fixes ; nan
1224 ;  presto-main/src/main/java/com/facebook/presto/serde/PagesWriter.java ; PagesSerde fixes ; nan
1225 ; presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaDataStreamProvider.java ; Fix SHOW PARTITIONS ; Connectors (such as the Hive connector) that return Slices for their TupleDomains ended up with the toString() representation of Slice in SHOW PARTITIONS
1226 ; presto-main/src/main/java/com/facebook/presto/operator/PipelineContext.java ; Fix a few thread-safety/concurrency issues ; nan
1227 ; presto-spi/src/main/java/com/facebook/presto/spi/type/HyperLogLogType.java ; Implement toString for hll ; nan
1230 ; presto-main/src/main/java/com/facebook/presto/connector/ConnectorManager.java ; Fix incorrect output from SHOW SCHEMAS ; There was a bug in the way MetadataManager keeps track and resolves information schema connector registrations that caused the wrong ConnectorMetadata to be picked. As a result  SHOW SCHEMAS would display schemas from another catalog.
1230 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualMetadata.java ; Fix incorrect output from SHOW SCHEMAS ; There was a bug in the way MetadataManager keeps track and resolves information schema connector registrations that caused the wrong ConnectorMetadata to be picked. As a result  SHOW SCHEMAS would display schemas from another catalog.
1230 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Fix incorrect output from SHOW SCHEMAS ; There was a bug in the way MetadataManager keeps track and resolves information schema connector registrations that caused the wrong ConnectorMetadata to be picked. As a result  SHOW SCHEMAS would display schemas from another catalog.
1230 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueryFramework.java ; Fix incorrect output from SHOW SCHEMAS ; There was a bug in the way MetadataManager keeps track and resolves information schema connector registrations that caused the wrong ConnectorMetadata to be picked. As a result  SHOW SCHEMAS would display schemas from another catalog.
1230 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlStageExecution.java ; Fix incorrect output from SHOW SCHEMAS ; There was a bug in the way MetadataManager keeps track and resolves information schema connector registrations that caused the wrong ConnectorMetadata to be picked. As a result  SHOW SCHEMAS would display schemas from another catalog.
1230 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskExecution.java ; Fix incorrect output from SHOW SCHEMAS ; There was a bug in the way MetadataManager keeps track and resolves information schema connector registrations that caused the wrong ConnectorMetadata to be picked. As a result  SHOW SCHEMAS would display schemas from another catalog.
1230 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Fix incorrect output from SHOW SCHEMAS ; There was a bug in the way MetadataManager keeps track and resolves information schema connector registrations that caused the wrong ConnectorMetadata to be picked. As a result  SHOW SCHEMAS would display schemas from another catalog.
1230 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Fix incorrect output from SHOW SCHEMAS ; There was a bug in the way MetadataManager keeps track and resolves information schema connector registrations that caused the wrong ConnectorMetadata to be picked. As a result  SHOW SCHEMAS would display schemas from another catalog.
1232 ; presto-hive/src/main/java/com/facebook/presto/hive/util/SerDeUtils.java ; Cleanup SerDeUtils ; nan
1232 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/Types.java ; Cleanup SerDeUtils ; nan
1232 ;  presto-hive/src/test/java/com/facebook/presto/hive/util/TestSerDeUtils.java ; Cleanup SerDeUtils ; nan
1233 ; presto-main/src/main/java/com/facebook/presto/sql/gen/BootstrapFunctionBinder.java ; Minor improvements to BootstrapFunctionBinder ; nan
1234 ; presto-main/src/main/java/com/facebook/presto/sql/gen/Bootstrap.java ; Fix memory leak in BootstrapFunctionBinder ; Callsites were being registered in a global BootstrapFunctionBinder but were never removed.  In this implementation  we create one BootrapFunctionBinder per dynamic classloader and load an  isolated  version of the Bootstrap class used by invokedynamic calls. When the classloader is garbage-collected (i.e.  the compiled code is no longer needed)  the callsite registrations are collected  too.
1234 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/ExpressionCompiler.java ; Fix memory leak in BootstrapFunctionBinder ; Callsites were being registered in a global BootstrapFunctionBinder but were never removed.  In this implementation  we create one BootrapFunctionBinder per dynamic classloader and load an  isolated  version of the Bootstrap class used by invokedynamic calls. When the classloader is garbage-collected (i.e.  the compiled code is no longer needed)  the callsite registrations are collected  too.
1236 ; presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Use ValuesNode instead of dual table for planning queries w/o FROM ; nan
1236 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java ; Use ValuesNode instead of dual table for planning queries w/o FROM ; nan
1237 ; presto-main/src/main/java/com/facebook/presto/block/BlockEncodingManager.java ; Fix warnings in BlockEncodingManager ; nan
1238 ; presto-main/src/main/java/com/facebook/presto/operator/ExchangeClient.java ; Exchange client improvements ; nan
1238 ;  presto-main/src/main/java/com/facebook/presto/operator/ExchangeClientConfig.java ; Exchange client improvements ; nan
1238 ;  presto-main/src/main/java/com/facebook/presto/operator/ExchangeClientFactory.java ; Exchange client improvements ; nan
1238 ;  presto-main/src/main/java/com/facebook/presto/operator/HttpPageBufferClient.java ; Exchange client improvements ; nan
1238 ;  presto-main/src/main/java/com/facebook/presto/operator/PageTransportTimeoutException.java ; Exchange client improvements ; nan
1238 ;  presto-main/src/test/java/com/facebook/presto/operator/TestExchangeClient.java ; Exchange client improvements ; nan
1238 ;  presto-main/src/test/java/com/facebook/presto/operator/TestExchangeClientConfig.java ; Exchange client improvements ; nan
1238 ;  presto-main/src/test/java/com/facebook/presto/operator/TestExchangeOperator.java ; Exchange client improvements ; nan
1238 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHttpPageBufferClient.java ; Exchange client improvements ; nan
1238 ;  presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java ; Exchange client improvements ; nan
1239 ; presto-main/src/main/java/com/facebook/presto/operator/GroupByHash.java ; Fix memory (estimate) leak and reduce memory usage of GROUP BY and DISTINCT ; nan
1240 ; presto-server/src/main/java/com/facebook/presto/server/PluginManager.java ; Add support for plugins to register new Types and BlockEncodingFactories ; nan
1240 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Add support for plugins to register new Types and BlockEncodingFactories ; nan
1242 ; presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Fix Hive client tests using getSlice as byte array ; nan
1245 ; presto-client/src/main/java/com/facebook/presto/client/PrestoHeaders.java ; Provide locale via X-Presto-Language header ; The expected format is as defined by IETF BCP 47 (http://tools.ietf.org/html/bcp47)
1245 ;  presto-client/src/main/java/com/facebook/presto/client/StatementClient.java ; Provide locale via X-Presto-Language header ; The expected format is as defined by IETF BCP 47 (http://tools.ietf.org/html/bcp47)
1245 ;  presto-server/src/main/java/com/facebook/presto/server/ExecuteResource.java ; Provide locale via X-Presto-Language header ; The expected format is as defined by IETF BCP 47 (http://tools.ietf.org/html/bcp47)
1245 ;  presto-server/src/main/java/com/facebook/presto/server/QueryResource.java ; Provide locale via X-Presto-Language header ; The expected format is as defined by IETF BCP 47 (http://tools.ietf.org/html/bcp47)
1245 ;  presto-server/src/main/java/com/facebook/presto/server/StatementResource.java ; Provide locale via X-Presto-Language header ; The expected format is as defined by IETF BCP 47 (http://tools.ietf.org/html/bcp47)
1247 ; presto-hive/src/main/java/com/facebook/presto/hive/util/SerDeUtils.java ; Hive timestamp fixes ; nan
1248 ;  presto-hive-cdh5/src/main/java/com/facebook/presto/hive/HiveCdh5Plugin.java ; Add Hive plugin for CDH 5 ; nan
1248 ;  presto-hive-cdh5/src/test/java/com/facebook/presto/hive/TestHiveClient.java ; Add Hive plugin for CDH 5 ; nan
1248 ;  presto-hive-cdh5/src/test/java/com/facebook/presto/hive/TestHiveClientS3.java ; Add Hive plugin for CDH 5 ; nan
1248 ;  presto-hive-cdh5/src/test/java/com/facebook/presto/hive/TestSplitIteratorBackpressure.java ; Add Hive plugin for CDH 5 ; nan
1249 ; presto-main/src/main/java/com/facebook/presto/metadata/Metadata.java ; Add support for plugin provided operators ; nan
1249 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Add support for plugin provided operators ; nan
1249 ;  presto-main/src/main/java/com/facebook/presto/metadata/OperatorFactory.java ; Add support for plugin provided operators ; nan
1249 ;  presto-server/src/main/java/com/facebook/presto/server/PluginManager.java ; Add support for plugin provided operators ; nan
1250 ; presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Fix planning issues with non-trivial types and date/time constructs in VALUES  ; nan
1250 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix planning issues with non-trivial types and date/time constructs in VALUES  ; nan
1252 ; presto-main/src/main/java/com/facebook/presto/operator/ExchangeClient.java ; Add backoff for HttpPageBufferClient ; nan
1252 ;  presto-main/src/main/java/com/facebook/presto/operator/HttpPageBufferClient.java ; Add backoff for HttpPageBufferClient ; nan
1253 ; presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Fix tracking of time for splitSource.getNextBatch ; nan
1254 ; presto-main/src/main/java/com/facebook/presto/operator/AggregationOperator.java ; Allow non-grouped aggregations to report their memory usage ; nan
1254 ;  presto-main/src/main/java/com/facebook/presto/operator/HashAggregationOperator.java ; Allow non-grouped aggregations to report their memory usage ; nan
1254 ;  presto-main/src/main/java/com/facebook/presto/operator/MemoryManager.java ; Allow non-grouped aggregations to report their memory usage ; nan
1254 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/Accumulator.java ; Allow non-grouped aggregations to report their memory usage ; nan
1254 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximateCountAggregation.java ; Allow non-grouped aggregations to report their memory usage ; nan
1254 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximatePercentileAggregation.java ; Allow non-grouped aggregations to report their memory usage ; nan
1254 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximatePercentileWeightedAggregation.java ; Allow non-grouped aggregations to report their memory usage ; nan
1254 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/BootstrappedAggregation.java ; Allow non-grouped aggregations to report their memory usage ; nan
1254 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountAggregation.java ; Allow non-grouped aggregations to report their memory usage ; nan
1254 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/SimpleAggregationFunction.java ; Allow non-grouped aggregations to report their memory usage ; nan
1254 ;  presto-main/src/test/java/com/facebook/presto/operator/aggregation/CustomSum.java ; Allow non-grouped aggregations to report their memory usage ; nan
1255 ; presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java ; Add config to disable proximity scheduling ; Add a config parameter to disable scheduling based on proximity. This will enable us to remove a variable and help us drill down into the cause of uneven split distribution. 
1255 ;  presto-main/src/main/java/com/facebook/presto/execution/NodeSchedulerConfig.java ; Add config to disable proximity scheduling ; Add a config parameter to disable scheduling based on proximity. This will enable us to remove a variable and help us drill down into the cause of uneven split distribution. 
1256 ; presto-main/src/main/java/com/facebook/presto/metadata/FunctionInfo.java ; Hide internal functions	 ; nan
1256 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Hide internal functions	 ; nan
1256 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/DateTimeFunctions.java ; Hide internal functions	 ; nan
1256 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/ScalarFunction.java ; Hide internal functions	 ; nan
1256 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Hide internal functions	 ; nan
1256 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestFunctionRegistry.java ; Hide internal functions	 ; nan
1257 ; presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraMetadata.java ; Session cleanups ; nan
1257 ;  presto-cassandra/src/test/java/com/facebook/presto/cassandra/TestCassandraConnector.java ; Session cleanups ; nan
1257 ;  presto-example-http/src/main/java/com/facebook/presto/example/ExampleMetadata.java ; Session cleanups ; nan
1257 ;  presto-example-http/src/test/java/com/facebook/presto/example/TestExampleMetadata.java ; Session cleanups ; nan
1257 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Session cleanups ; nan
1257 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveSplit.java ; Session cleanups ; nan
1257 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSourceProvider.java ; Session cleanups ; nan
1257 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveTableHandle.java ; Session cleanups ; nan
1257 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Session cleanups ; nan
1257 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClientS3.java ; Session cleanups ; nan
1257 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveSplit.java ; Session cleanups ; nan
1257 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestHiveTableHandle.java ; Session cleanups ; nan
1257 ;  presto-hive/src/test/java/com/facebook/presto/hive/TestJsonHiveHandles.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedBlock.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/block/dictionary/DictionaryEncodedBlockCursor.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/block/rle/RunLengthEncodedBlock.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/block/rle/RunLengthEncodedBlockCursor.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualMetadata.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaDataStreamProvider.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaMetadata.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaTableHandle.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/connector/jmx/JmxMetadata.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/connector/system/SystemTablesMetadata.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/execution/DropTableExecution.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/execution/FailedQueryExecution.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryExecution.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryInfo.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryManager.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/execution/QueryStateMachine.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/execution/RemoteTaskFactory.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryExecution.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManager.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlStageExecution.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskExecution.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/execution/SqlTaskManager.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/execution/TaskManager.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/metadata/DatabaseLocalStorageManager.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/metadata/FunctionRegistry.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/metadata/InMemoryMetadata.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/metadata/Metadata.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataUtil.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/metadata/NativeMetadata.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/operator/DriverContext.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/operator/GroupByIdBlock.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/operator/OperatorContext.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/operator/PipelineContext.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/operator/TaskContext.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/PoissonizedBlock.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/operator/scalar/DateTimeFunctions.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/Analyzer.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/ExpressionAnalyzer.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/QueryExplainer.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/DefaultFunctionBinder.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/gen/ExpressionCompiler.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DistributedLogicalPlanner.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/DomainTranslator.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/ExpressionInterpreter.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedFilterFunction.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedProjectionFunction.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LiteralInterpreter.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LogicalPlanner.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/QueryPlanner.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/CanonicalizeExpressions.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/ImplementSampleAsFilter.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/IndexJoinOptimizer.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/LimitPushDown.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/MaterializeSamplePullUp.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/MergeProjections.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PlanOptimizer.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PredicatePushDown.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneRedundantProjections.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/PruneUnreferencedOutputs.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SetFlatteningOptimizer.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/SimplifyExpressions.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/optimizations/UnaliasSymbolReferences.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/type/ColorType.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/type/DateOperators.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/type/DateTimeOperators.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/type/TimeOperators.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/type/TimeWithTimeZoneOperators.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/type/TimestampOperators.java ; Session cleanups ; nan
1257 ;  presto-main/src/main/java/com/facebook/presto/type/UnknownType.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/AbstractTestQueryFramework.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/TestLocalQueries.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/TestLocalQueriesIndexed.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/TestLocalQueriesSampled.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/benchmark/AbstractOperatorBenchmark.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/benchmark/BenchmarkQueryRunner.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/block/BlockAssertions.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/block/BlockCursorAssertions.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlStageExecution.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskExecution.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestDatabaseLocalStorageManager.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestJsonTableHandle.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestNativeMetadata.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/OperatorAssertion.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestAggregationOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestAlignmentOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestDistinctLimitOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestDriver.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestExchangeOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestFilterAndProjectOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashAggregationOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashJoinOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestHashSemiJoinOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestLimitOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestMarkDistinctOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestMaterializeSampleOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestOrderByOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestRecordProjectOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestTopNOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/TestWindowOperator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctions.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/window/TestWindowFunctions.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/operator/window/WindowAssertions.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/split/TestNativeSplitManager.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/sql/TestExpressionInterpreter.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/sql/analyzer/TestAnalyzer.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/sql/gen/TestExpressionCompiler.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/sql/gen/TestJoinProbeCompiler.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestDomainTranslator.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedFilterFunction.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/sql/planner/TestInterpretedProjectionFunction.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/type/TestDate.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/type/TestDateTimeOperators.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/type/TestTime.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/type/TestTimeWithTimeZone.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/type/TestTimestamp.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/type/TestTimestampWithTimeZone.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/util/LocalQueryRunner.java ; Session cleanups ; nan
1257 ;  presto-main/src/test/java/com/facebook/presto/util/MaterializedResult.java ; Session cleanups ; nan
1257 ;  presto-server/src/main/java/com/facebook/presto/server/BasicQueryInfo.java ; Session cleanups ; nan
1257 ;  presto-server/src/main/java/com/facebook/presto/server/HttpRemoteTask.java ; Session cleanups ; nan
1257 ;  presto-server/src/main/java/com/facebook/presto/server/HttpRemoteTaskFactory.java ; Session cleanups ; nan
1257 ;  presto-server/src/main/java/com/facebook/presto/server/QueryResource.java ; Session cleanups ; nan
1257 ;  presto-server/src/main/java/com/facebook/presto/server/StatementResource.java ; Session cleanups ; nan
1257 ;  presto-server/src/main/java/com/facebook/presto/server/TaskUpdateRequest.java ; Session cleanups ; nan
1257 ;  presto-server/src/test/java/com/facebook/presto/server/MockQueryManager.java ; Session cleanups ; nan
1257 ;  presto-server/src/test/java/com/facebook/presto/server/MockTaskManager.java ; Session cleanups ; nan
1257 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Session cleanups ; nan
1257 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueriesIndexed.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/ConnectorMetadata.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/ConnectorSession.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/ReadOnlyConnectorMetadata.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/block/AbstractFixedWidthBlock.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/block/AbstractVariableWidthRandomAccessBlock.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/block/BlockCursor.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/block/FixedWidthBlockCursor.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/block/RandomAccessBlock.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/block/VariableWidthBlockCursor.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/classloader/ClassLoaderSafeConnectorMetadata.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/BigintType.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/BooleanType.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/DateType.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/DoubleType.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/FixedWidthType.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/HyperLogLogType.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/IntervalDayTimeType.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/IntervalYearMonthType.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/TimeType.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/TimeWithTimeZoneType.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/TimestampType.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/TimestampWithTimeZoneType.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/VarcharType.java ; Session cleanups ; nan
1257 ;  presto-spi/src/main/java/com/facebook/presto/spi/type/VariableWidthType.java ; Session cleanups ; nan
1257 ;  presto-tpch/src/main/java/com/facebook/presto/tpch/TpchMetadata.java ; Session cleanups ; nan
1258 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/DateTimeFunctions.java ; Cleanup date time functions ; nan
1259 ; presto-main/src/main/java/com/facebook/presto/operator/HttpPageBufferClient.java ; Use ResponseTooLargeException ; nan
1260 ; presto-main/src/main/java/com/facebook/presto/operator/scalar/DateTimeFunctions.java ; Implement weekyear (%x) in date_parse and date_format ; nan
1260 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctions.java ; Implement weekyear (%x) in date_parse and date_format ; nan
1261 ; presto-cli/src/main/java/com/facebook/presto/cli/Console.java ; CLI and example-http fixes ; nan
1261 ;  presto-cli/src/main/java/com/facebook/presto/cli/QueryRunner.java ; CLI and example-http fixes ; nan
1261 ;  presto-cli/src/main/java/com/facebook/presto/cli/TableNameCompleter.java ; CLI and example-http fixes ; nan
1263 ; presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java ; Add Hive format test for null lists ; nan
1267 ; presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedFilterFunction.java ; Fix invalid expression types ; This can cause a NPE in the FunctionRegistry because we end up with arguments that have no type
1267 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/InterpretedProjectionFunction.java ; Fix invalid expression types ; This can cause a NPE in the FunctionRegistry because we end up with arguments that have no type
1268 ;  presto-server/src/main/java/com/facebook/presto/server/PluginManager.java ; Fixes ; nan
1271 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveSplitSourceProvider.java ; Fix resource leak in HiveSplitSource when queries terminate early ; nan
1271 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/AsyncRecursiveWalker.java ; Fix resource leak in HiveSplitSource when queries terminate early ; nan
1271 ;  presto-hive/src/main/java/com/facebook/presto/hive/util/SetThreadName.java ; Fix resource leak in HiveSplitSource when queries terminate early ; nan
1272 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java ; Minor cleanup ; nan
1272 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveClient.java ; Minor cleanup ; nan
1272 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveColumnHandle.java ; Minor cleanup ; nan
1272 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Minor cleanup ; nan
1272 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClientS3.java ; Minor cleanup ; nan
1273 ; presto-main/src/main/java/com/facebook/presto/type/DateOperators.java ; Categorize invalid VARCHAR casts ; nan
1273 ;  presto-main/src/main/java/com/facebook/presto/type/TimeOperators.java ; Categorize invalid VARCHAR casts ; nan
1273 ;  presto-main/src/main/java/com/facebook/presto/type/TimestampOperators.java ; Categorize invalid VARCHAR casts ; nan
1273 ;  presto-main/src/main/java/com/facebook/presto/type/VarcharOperators.java ; Categorize invalid VARCHAR casts ; nan
1274 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Add formatting for every statement type ; nan
1274 ;  presto-parser/src/main/java/com/facebook/presto/sql/QueryUtil.java ; Add formatting for every statement type ; nan
1274 ;  presto-parser/src/main/java/com/facebook/presto/sql/Serialization.java ; Add formatting for every statement type ; nan
1274 ;  presto-parser/src/main/java/com/facebook/presto/sql/TreePrinter.java ; Add formatting for every statement type ; nan
1274 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Add formatting for every statement type ; nan
1274 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Add formatting for every statement type ; nan
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/AbstractSvmModel.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/Classifier.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/ClassifierFeatureTransformer.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/Dataset.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/EvaluateClassifierPredictionsAggregation.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/FeatureTransformation.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/FeatureVector.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/FeatureVectorUnitNormalizer.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/LearnAggregation.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/MLFunctionFactory.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/MLFunctions.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/MLPlugin.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/Model.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/ModelUtils.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/Regressor.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/RegressorFeatureTransformer.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/SvmClassifier.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/SvmRegressor.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/type/ClassifierType.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/type/ModelType.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/main/java/com/facebook/presto/ml/type/RegressorType.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1275 ;  presto-ml/src/test/java/com/facebook/presto/ml/TestModelSerialization.java ; Add machine learning functions plugin ; Add functions to train and use machine learning models (classifiers and regressors) in Presto. This is currently only a proof of concept  and is not ready for use in production. Example usage is as follows:      sql SELECT evaluate_classifier_predictions(label  classify(features  model)) FROM (     SELECT learn_classifier(label  features) AS model     FROM my_training_data  ) CROSS JOIN my_validation_data     
1276 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java ; Add toString to HiveBucket ; nan
1279 ; presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java ; Categorize more errors ; nan
1279 ;  presto-spi/src/main/java/com/facebook/presto/spi/StandardErrorCode.java ; Categorize more errors ; nan
1280 ; presto-spi/src/main/java/com/facebook/presto/spi/ErrorCode.java ; Error code improvements ; nan
1281 ; presto-spi/src/main/java/com/facebook/presto/spi/TupleDomain.java ; Finish properly parameterizing TupleDomain ; nan
1282 ; presto-hive/src/main/java/com/facebook/presto/hive/ColumnarBinaryHiveRecordCursor.java ; Http500 ; nan
1282 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarTextHiveRecordCursor.java ; Http500 ; nan
1282 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Http500 ; nan
1282 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveRecordCursor.java ; Http500 ; nan
1287 ; presto-main/src/main/java/com/facebook/presto/operator/RecordProjectOperator.java ; Don t double count bytes and rows in RecordProjectOperator ; nan
1289 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarBinaryHiveRecordCursorProvider.java ; Update to Hive 0.13 ; nan
1289 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarTextHiveRecordCursorProvider.java ; Update to Hive 0.13 ; nan
1289 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Update to Hive 0.13 ; nan
1289 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveBucketing.java ; Update to Hive 0.13 ; nan
1289 ;  presto-hive/src/main/java/com/facebook/presto/hive/HiveUtil.java ; Update to Hive 0.13 ; nan
1296 ; presto-main/src/main/java/com/facebook/presto/type/DateTimeOperators.java ; Add timestamp with time zone minus interval year month operator ; nan
1296 ;  presto-main/src/test/java/com/facebook/presto/type/TestDateTimeOperators.java ; Add timestamp with time zone minus interval year month operator ; nan
1297 ; presto-main/src/main/java/com/facebook/presto/metadata/MetadataManager.java ; Various cleanup ; nan
1302 ; presto-ml/src/main/java/com/facebook/presto/ml/AbstractFeatureTransformation.java ; Fix build ; nan
1303 ; presto-main/src/main/java/com/facebook/presto/split/MappedRecordSet.java ; Fix MappedRecordCursor bug ; nan
1305 ; presto-main/src/test/java/com/facebook/presto/operator/scalar/TestDateTimeFunctions.java ; Make TestDateTimeFunctions single threaded ; nan
1306 ; presto-hive/src/main/java/com/facebook/presto/hive/HiveType.java ; Implement varbinary type ; Adds a varbinary type and basic operators/functions
1306 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveFileFormats.java ; Implement varbinary type ; Adds a varbinary type and basic operators/functions
1309 ; presto-main/src/main/java/com/facebook/presto/execution/NodeScheduler.java ; Add option to disable scheduling tasks on coordinator ; nan
1309 ;  presto-main/src/main/java/com/facebook/presto/execution/NodeSchedulerConfig.java ; Add option to disable scheduling tasks on coordinator ; nan
1309 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlStageExecution.java ; Add option to disable scheduling tasks on coordinator ; nan
1310 ;  presto-spi/src/main/java/com/facebook/presto/spi/SortedRangeSet.java ; Simplify SortedRangeSet.Builder and add benchmark ; Collect ranges and do one pass at the end to merge adjacent and overlapping ranges.  This improves performance for this class by about 6x for a synthetic benchmark with 10000 ranges              Benchmark                                            Mode   Samples   Mean  Mean error   Units Before: c.f.p.s.BenchmarkSortedRangeSet.benchmarkBuilder     avgt        10  5.416       0.150   ms/op After:  c.f.p.s.BenchmarkSortedRangeSet.benchmarkBuilder     avgt        10  0.867       0.016   ms/op    
1310 ;  presto-spi/src/test/java/com/facebook/presto/spi/BenchmarkSortedRangeSet.java ; Simplify SortedRangeSet.Builder and add benchmark ; Collect ranges and do one pass at the end to merge adjacent and overlapping ranges.  This improves performance for this class by about 6x for a synthetic benchmark with 10000 ranges              Benchmark                                            Mode   Samples   Mean  Mean error   Units Before: c.f.p.s.BenchmarkSortedRangeSet.benchmarkBuilder     avgt        10  5.416       0.150   ms/op After:  c.f.p.s.BenchmarkSortedRangeSet.benchmarkBuilder     avgt        10  0.867       0.016   ms/op    
1314 ; presto-main/src/main/java/com/facebook/presto/execution/SqlQueryManagerStats.java ; Add jmx stats for abandoned and canceled queries ; nan
1316 ;  presto-main/src/test/java/com/facebook/presto/TestHiddenColumns.java ; Hidden columns ; Allow connectors to expose columns that are hidden.  A hidden column will not appear in describe table or information schema  columns  table  and will not be selected with  * .  The only way to access a hidden column is explicitly by name.  Additionally  I have added a hidden column   row_number   to the tpch connector for testing.
1316 ;  presto-tests/src/main/java/com/facebook/presto/tests/tpch/IndexedTpchConnectorFactory.java ; Hidden columns ; Allow connectors to expose columns that are hidden.  A hidden column will not appear in describe table or information schema  columns  table  and will not be selected with  * .  The only way to access a hidden column is explicitly by name.  Additionally  I have added a hidden column   row_number   to the tpch connector for testing.
1316 ;  presto-tests/src/main/java/com/facebook/presto/tests/tpch/TpchIndexResolver.java ; Hidden columns ; Allow connectors to expose columns that are hidden.  A hidden column will not appear in describe table or information schema  columns  table  and will not be selected with  * .  The only way to access a hidden column is explicitly by name.  Additionally  I have added a hidden column   row_number   to the tpch connector for testing.
1316 ;  presto-tests/src/main/java/com/facebook/presto/tests/tpch/TpchIndexedData.java ; Hidden columns ; Allow connectors to expose columns that are hidden.  A hidden column will not appear in describe table or information schema  columns  table  and will not be selected with  * .  The only way to access a hidden column is explicitly by name.  Additionally  I have added a hidden column   row_number   to the tpch connector for testing.
1316 ;  presto-tpch/src/main/java/com/facebook/presto/tpch/TpchColumnHandle.java ; Hidden columns ; Allow connectors to expose columns that are hidden.  A hidden column will not appear in describe table or information schema  columns  table  and will not be selected with  * .  The only way to access a hidden column is explicitly by name.  Additionally  I have added a hidden column   row_number   to the tpch connector for testing.
1316 ;  presto-tpch/src/main/java/com/facebook/presto/tpch/TpchConnectorFactory.java ; Hidden columns ; Allow connectors to expose columns that are hidden.  A hidden column will not appear in describe table or information schema  columns  table  and will not be selected with  * .  The only way to access a hidden column is explicitly by name.  Additionally  I have added a hidden column   row_number   to the tpch connector for testing.
1316 ;  presto-tpch/src/main/java/com/facebook/presto/tpch/TpchMetadata.java ; Hidden columns ; Allow connectors to expose columns that are hidden.  A hidden column will not appear in describe table or information schema  columns  table  and will not be selected with  * .  The only way to access a hidden column is explicitly by name.  Additionally  I have added a hidden column   row_number   to the tpch connector for testing.
1316 ;  presto-tpch/src/main/java/com/facebook/presto/tpch/TpchRecordSetProvider.java ; Hidden columns ; Allow connectors to expose columns that are hidden.  A hidden column will not appear in describe table or information schema  columns  table  and will not be selected with  * .  The only way to access a hidden column is explicitly by name.  Additionally  I have added a hidden column   row_number   to the tpch connector for testing.
1316 ;  presto-tpch/src/main/java/com/facebook/presto/tpch/testing/SampledTpchRecordSetProvider.java ; Hidden columns ; Allow connectors to expose columns that are hidden.  A hidden column will not appear in describe table or information schema  columns  table  and will not be selected with  * .  The only way to access a hidden column is explicitly by name.  Additionally  I have added a hidden column   row_number   to the tpch connector for testing.
1317 ; presto-main/src/test/java/com/facebook/presto/AbstractTestQueries.java ; Fix varbinary-related test failures ; nan
1319 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/BenchmarkQueryRunner.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-hive/src/main/java/com/facebook/presto/hive/RebindSafeMBeanServer.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-jdbc/src/test/java/com/facebook/presto/jdbc/TestDriver.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-main/src/main/java/com/facebook/presto/connector/NativeConnectorFactory.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-main/src/main/java/com/facebook/presto/execution/DropTableExecution.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-main/src/main/java/com/facebook/presto/metadata/ColumnMetadataMapper.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-main/src/main/java/com/facebook/presto/metadata/MetadataUtil.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-main/src/main/java/com/facebook/presto/metadata/PrestoNode.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-main/src/main/java/com/facebook/presto/metadata/QualifiedTableNameMapper.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-main/src/main/java/com/facebook/presto/metadata/TableColumnMapper.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-main/src/main/java/com/facebook/presto/split/PartitionFunction.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-main/src/main/java/com/facebook/presto/sql/planner/LocalExecutionPlanner.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-main/src/main/java/com/facebook/presto/storage/StorageDao.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-main/src/main/java/com/facebook/presto/testing/LocalQueryRunner.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskExecution.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-main/src/test/java/com/facebook/presto/execution/TestSqlTaskManager.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestJsonTableHandle.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorColumnHandle.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorConnector.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorConnectorFactory.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorConnectorId.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorDataStreamProvider.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorHandleResolver.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorMetadata.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorModule.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorOutputTableHandle.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorPartitionKey.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorPlugin.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorRecordSink.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorRecordSinkProvider.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorSplit.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorSplitManager.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/RaptorTableHandle.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/DatabaseShardManager.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/ForMetadata.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/ForShardCleaner.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/ForShardManager.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/MetadataDao.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/MetadataDaoUtils.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/MetadataModule.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/SchemaTableNameMapper.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/ShardCleaner.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/ShardCleanerConfig.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/ShardManager.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/ShardManagerDao.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/ShardManagerDaoUtils.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/ShardNode.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/SqlUtils.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/Table.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/TableColumn.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/metadata/TablePartition.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/storage/ColumnFileHandle.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/storage/DatabaseLocalStorageManager.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/storage/DatabaseLocalStorageManagerConfig.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/storage/ForLocalStorageManager.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/storage/LocalStorageManager.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/storage/ShardResource.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/storage/StorageManagerDao.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/storage/StorageModule.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/util/CurrentNodeId.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/util/DbiProvider.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/util/RebindSafeMBeanServer.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/main/java/com/facebook/presto/raptor/util/UuidArguments.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/test/java/com/facebook/presto/raptor/TestRaptorPlugin.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestDatabaseShardManager.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorMetadata.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestRaptorSplitManager.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestShardCleanerConfig.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/test/java/com/facebook/presto/raptor/metadata/TestShardManagerDao.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/test/java/com/facebook/presto/raptor/storage/MockLocalStorageManager.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/test/java/com/facebook/presto/raptor/storage/TestDatabaseLocalStorageManager.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-raptor/src/test/java/com/facebook/presto/raptor/storage/TestDatabaseLocalStorageManagerConfig.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-server/src/main/java/com/facebook/presto/server/CoordinatorModule.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-server/src/main/java/com/facebook/presto/server/testing/TestingPrestoServer.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Extract native connector into separate plugin ; nan
1319 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueriesIndexed.java ; Extract native connector into separate plugin ; nan
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AbstractAggregationFunction.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AggregationUtils.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AverageAggregation.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/AverageAggregations.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountColumnAggregation.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/CountColumnAggregations.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleMaxAggregation.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleMinAggregation.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/DoubleSumAggregation.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongMaxAggregation.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongMinAggregation.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/LongSumAggregation.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/state/AccumulatorState.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/state/GroupedAccumulatorState.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/state/GroupedLongAndDoubleState.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/state/GroupedNullableDoubleState.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/state/GroupedNullableLongState.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/state/LongAndDoubleState.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/state/NullableDoubleState.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/state/NullableLongState.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/state/SingleLongAndDoubleState.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/state/SingleNullableDoubleState.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1320 ;  presto-main/src/main/java/com/facebook/presto/operator/aggregation/state/SingleNullableLongState.java ; Refactor aggregations ; Introduce a new base class for aggregation functions that makes them simpler to write.  It looks like there s a small (~3% performance regression)  but given how much this simplifies the code  I think it s worthwhile. We could also try to get that back with byte code generation.  master:                   hand_tpch_query_1 :: 2907.023 cpu ms :: in    6M    361MB    2.06M/s    124MB/s :: out     4     300B        1/s     103B/s                   hand_tpch_query_6 ::  308.901 cpu ms :: in    6M    240MB    19.4M/s    778MB/s :: out     1       9B        3/s      29B/s  my branch:                   hand_tpch_query_1 :: 2937.362 cpu ms :: in    6M    361MB    2.04M/s    123MB/s :: out     4     300B        1/s     102B/s                   hand_tpch_query_6 ::  321.828 cpu ms :: in    6M    240MB    18.6M/s    747MB/s :: out     1       9B        3/s      27B/s
1321 ; presto-main/src/main/java/com/facebook/presto/connector/dual/DualSplitManager.java ; Fix SHOW PARTITIONS and dual catalog with include-coordinator=false ; Mark dual and information schema as system datasources. Also add more unit tests for disabling coordinator work scheduling
1321 ;  presto-main/src/main/java/com/facebook/presto/connector/informationSchema/InformationSchemaSplitManager.java ; Fix SHOW PARTITIONS and dual catalog with include-coordinator=false ; Mark dual and information schema as system datasources. Also add more unit tests for disabling coordinator work scheduling
1321 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Fix SHOW PARTITIONS and dual catalog with include-coordinator=false ; Mark dual and information schema as system datasources. Also add more unit tests for disabling coordinator work scheduling
1321 ;  presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Fix SHOW PARTITIONS and dual catalog with include-coordinator=false ; Mark dual and information schema as system datasources. Also add more unit tests for disabling coordinator work scheduling
1322 ; presto-main/src/main/java/com/facebook/presto/operator/aggregation/ApproximatePercentileAggregation.java ; Categorize invalid argument errors to approx_percentile ; nan
1324 ; presto-ml/src/main/java/com/facebook/presto/ml/AbstractSvmModel.java ; Add more configurable learn methods for ML plugin ; nan
1324 ;  presto-ml/src/main/java/com/facebook/presto/ml/LearnLibSvmAggregation.java ; Add more configurable learn methods for ML plugin ; nan
1324 ;  presto-ml/src/main/java/com/facebook/presto/ml/LibSvmUtils.java ; Add more configurable learn methods for ML plugin ; nan
1324 ;  presto-ml/src/main/java/com/facebook/presto/ml/MLFunctionFactory.java ; Add more configurable learn methods for ML plugin ; nan
1324 ;  presto-ml/src/main/java/com/facebook/presto/ml/SvmClassifier.java ; Add more configurable learn methods for ML plugin ; nan
1324 ;  presto-ml/src/main/java/com/facebook/presto/ml/SvmRegressor.java ; Add more configurable learn methods for ML plugin ; nan
1324 ;  presto-ml/src/test/java/com/facebook/presto/ml/TestLearnAggregations.java ; Add more configurable learn methods for ML plugin ; nan
1325 ;  presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java ; Fix parsing and formatting of sign expressions ; nan
1325 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestSqlParser.java ; Fix parsing and formatting of sign expressions ; nan
1326 ;  presto-server/src/main/java/com/facebook/presto/server/PrestoServer.java ; Deprecate the datasources configuration property ; This property  if not set  is now configured automatically at startup based on the list of installed catalogs.  This will be completely removed later.
1326 ;  presto-server/src/main/java/com/facebook/presto/server/ServerConfig.java ; Deprecate the datasources configuration property ; This property  if not set  is now configured automatically at startup based on the list of installed catalogs.  This will be completely removed later.
1326 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Deprecate the datasources configuration property ; This property  if not set  is now configured automatically at startup based on the list of installed catalogs.  This will be completely removed later.
1326 ;  presto-tpch/src/main/java/com/facebook/presto/tpch/TpchSplitManager.java ; Deprecate the datasources configuration property ; This property  if not set  is now configured automatically at startup based on the list of installed catalogs.  This will be completely removed later.
1327 ; presto-main/src/main/java/com/facebook/presto/connector/dual/DualColumnHandle.java ; Remove dual connector ; nan
1327 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualConnector.java ; Remove dual connector ; nan
1327 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualDataStreamProvider.java ; Remove dual connector ; nan
1327 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualHandleResolver.java ; Remove dual connector ; nan
1327 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualMetadata.java ; Remove dual connector ; nan
1327 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualModule.java ; Remove dual connector ; nan
1327 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualSplit.java ; Remove dual connector ; nan
1327 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualSplitManager.java ; Remove dual connector ; nan
1327 ;  presto-main/src/main/java/com/facebook/presto/connector/dual/DualTableHandle.java ; Remove dual connector ; nan
1327 ;  presto-main/src/main/java/com/facebook/presto/sql/analyzer/TupleAnalyzer.java ; Remove dual connector ; nan
1327 ;  presto-main/src/test/java/com/facebook/presto/metadata/TestJsonTableHandle.java ; Remove dual connector ; nan
1327 ;  presto-server/src/main/java/com/facebook/presto/server/ServerMainModule.java ; Remove dual connector ; nan
1328 ; presto-main/src/main/java/com/facebook/presto/sql/analyzer/StatementAnalyzer.java ; Rewrite EXPLAIN to a VALUES query ; This helps avoid bytecode generation failures when plan string is too large due to max constant pool size being exceeded.
1328 ;  presto-parser/src/main/java/com/facebook/presto/sql/QueryUtil.java ; Rewrite EXPLAIN to a VALUES query ; This helps avoid bytecode generation failures when plan string is too large due to max constant pool size being exceeded.
1329 ; presto-main/src/main/java/com/facebook/presto/metadata/DiscoveryNodeManager.java ; Fix tests for datasources change ; nan
1329 ;  presto-server/src/main/java/com/facebook/presto/server/PrestoServer.java ; Fix tests for datasources change ; nan
1333 ; presto-server/src/test/java/com/facebook/presto/server/TestDistributedQueries.java ; Fix failing unit tests in java 8 ; The user.timezone property for the surefire plugin must match the setting via argLine. The pom was inheriting the property from airbase set to UTC  but argLine was set to Asia/Katmandu.  As far as I can tell  the surefire plugin executes the following steps: - create a VM using the argLine arguments - call setProperty for each systemPropertyVariable - run the tests  Unlike Java 7  calling System.setProperty for user.timezone in Java 8 after the VM is initialized has no effect. See d2fee8d93952054883bf94a65576cead632314cf for additional details
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/BenchmarkQueryRunner.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/BenchmarkSuite.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/CountAggregationBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/CountAggregationSqlBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/CountWithFilterSqlBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/DoubleSumAggregationBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/GroupByAggregationSqlBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/GroupBySumWithArithmeticSqlBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/HandTpchQuery1.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/HandTpchQuery6.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/HashAggregationBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/HashBuildAndJoinBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/HashBuildBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/HashJoinBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/OrderByBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/PredicateFilterBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/PredicateFilterSqlBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/RawStreamingBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/RawStreamingSqlBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlApproximateCountDistinctDoubleBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlApproximateCountDistinctLongBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlApproximateCountDistinctVarBinaryBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlApproximatePercentileBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlBetweenBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlDistinctMultipleFields.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlDistinctSingleField.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlDoubleSumAggregationBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlHashJoinBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlInBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlJoinWithPredicateBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlLikeBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlRegexpLikeBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlSemiJoinInPredicateBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlTpchQuery1.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/SqlTpchQuery6.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/StatisticsBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/Top100Benchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/Top100SqlBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/main/java/com/facebook/presto/benchmark/VarBinaryMaxAggregationSqlBenchmark.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-benchmark/src/test/java/com/facebook/presto/benchmark/TestBenchmarks.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-main/src/main/java/com/facebook/presto/testing/LocalQueryRunner.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-main/src/test/java/com/facebook/presto/operator/scalar/FunctionAssertions.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-main/src/test/java/com/facebook/presto/operator/window/TestWindowFunctions.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-main/src/test/java/com/facebook/presto/operator/window/WindowAssertions.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-tests/src/main/java/com/facebook/presto/tests/AbstractTestQueryFramework.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-tests/src/test/java/com/facebook/presto/tests/TestLocalQueries.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-tests/src/test/java/com/facebook/presto/tests/TestLocalQueriesIndexed.java ; Extract integration tests into separate module for reuse in connectors ; nan
1334 ;  presto-tests/src/test/java/com/facebook/presto/tests/TestLocalQueriesSampled.java ; Extract integration tests into separate module for reuse in connectors ; nan
1335 ; presto-main/src/main/java/com/facebook/presto/util/array/BooleanBigArray.java ; Replace Unsafe constants with Slice SizeOf ; nan
1335 ;  presto-main/src/main/java/com/facebook/presto/util/array/ByteBigArray.java ; Replace Unsafe constants with Slice SizeOf ; nan
1335 ;  presto-main/src/main/java/com/facebook/presto/util/array/DoubleBigArray.java ; Replace Unsafe constants with Slice SizeOf ; nan
1335 ;  presto-main/src/main/java/com/facebook/presto/util/array/LongBigArray.java ; Replace Unsafe constants with Slice SizeOf ; nan
1335 ;  presto-main/src/main/java/com/facebook/presto/util/array/ObjectBigArray.java ; Replace Unsafe constants with Slice SizeOf ; nan
1336 ; presto-main/src/main/java/com/facebook/presto/testing/LocalQueryRunner.java ; Fix SQL formatter ; nan
1336 ;  presto-parser/src/main/java/com/facebook/presto/sql/ExpressionFormatter.java ; Fix SQL formatter ; nan
1336 ;  presto-parser/src/main/java/com/facebook/presto/sql/SqlFormatter.java ; Fix SQL formatter ; nan
1336 ;  presto-parser/src/main/java/com/facebook/presto/sql/testing/TreeAssertions.java ; Fix SQL formatter ; nan
1336 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/AstVisitor.java ; Fix SQL formatter ; nan
1336 ;  presto-parser/src/main/java/com/facebook/presto/sql/tree/DropTable.java ; Fix SQL formatter ; nan
1336 ;  presto-parser/src/test/java/com/facebook/presto/sql/parser/TestStatementBuilder.java ; Fix SQL formatter ; nan
1338 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarBinaryHiveRecordCursor.java ; Replace Unsafe with new Slice ByteArrays utility ; nan
1340 ; presto-main/src/main/java/com/facebook/presto/sql/planner/RelationPlanner.java ; Fix hidden columns in union planning ; nan
1341 ; presto-hive/src/main/java/com/facebook/presto/hive/ColumnarBinaryHiveRecordCursor.java ; Fix Hive tests for VARBINARY ; nan
1341 ;  presto-hive/src/main/java/com/facebook/presto/hive/ColumnarTextHiveRecordCursor.java ; Fix Hive tests for VARBINARY ; nan
1341 ;  presto-hive/src/main/java/com/facebook/presto/hive/GenericHiveRecordCursor.java ; Fix Hive tests for VARBINARY ; nan
1341 ;  presto-hive/src/test/java/com/facebook/presto/hive/AbstractTestHiveClient.java ; Fix Hive tests for VARBINARY ; nan
1342 ;  presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraClientConfig.java ; Cassandra patches ; nan
1342 ;  presto-cassandra/src/main/java/com/facebook/presto/cassandra/CassandraClientModule.java ; Cassandra patches ; nan
1342 ;  presto-cassandra/src/test/java/com/facebook/presto/cassandra/TestCassandraClientConfig.java ; Cassandra patches ; nan
