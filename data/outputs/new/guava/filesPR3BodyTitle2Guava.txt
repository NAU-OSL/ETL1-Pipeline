2942 ; guava-gwt/test/com/google/common/collect/StreamsTest_gwt.java ; Moe sync ; nan
2942 ;  guava-tests/test/com/google/common/collect/StreamsTest.java ; Moe sync ; nan
2942 ;  guava/src/com/google/common/collect/Streams.java ; Moe sync ; nan
3050 ; guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct a typo in ImmutableBiMapTest.  2c5dd53d4a4830bf6cb3a50f26d3d73429932833
3056 ; android/guava-tests/test/com/google/common/reflect/TypeTokenSubtypeTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Traverser.java: add support for multiple start nodes.  Update documentation (in this file and in graphs_explained.md) relating to behavior and definitions of equals() and hashCode().  RELNOTES= common.graph.Traverser : add support for traversing from multiple start nodes.  9dce1c3302ec118f73921c9319e7822114325a2d  -------  <p> Fix List<Foo<?>>.isSubtypeOf(List<Foo<?>>).  This used to return false because isSubtypeOf() does a wildcard capture of the Foo<?> type parameter  turning it into Foo<C>  and then List<Foo<C>> isn t a subtype of List<Foo<?>>.  Wildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters). But for resolving in covariant context  wildcard should remain as is.  I found this when trying to add isSubtypeOf() precondition check in getSubtype()  in response to https://github.com/google/guava/issues/3048.  RELNOTES=TypeToken.isSubtypeOf() bug fix.  9918890013cd07ff00074a28afefd3af2c00c515  -------  <p> Add isSubtypeOf()  pre -condition check before getSubtype() returns.  We have to call it before return because before type variable substitution  isSubtypeOf() can t apply.  See https://github.com/google/guava/issues/3048  RELNOTES=Validate  TypeToken.getSubtype() .  f6d1461e2579f05f1106892c817681a61fc401ae
3056 ;  android/guava/src/com/google/common/reflect/TypeToken.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Traverser.java: add support for multiple start nodes.  Update documentation (in this file and in graphs_explained.md) relating to behavior and definitions of equals() and hashCode().  RELNOTES= common.graph.Traverser : add support for traversing from multiple start nodes.  9dce1c3302ec118f73921c9319e7822114325a2d  -------  <p> Fix List<Foo<?>>.isSubtypeOf(List<Foo<?>>).  This used to return false because isSubtypeOf() does a wildcard capture of the Foo<?> type parameter  turning it into Foo<C>  and then List<Foo<C>> isn t a subtype of List<Foo<?>>.  Wildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters). But for resolving in covariant context  wildcard should remain as is.  I found this when trying to add isSubtypeOf() precondition check in getSubtype()  in response to https://github.com/google/guava/issues/3048.  RELNOTES=TypeToken.isSubtypeOf() bug fix.  9918890013cd07ff00074a28afefd3af2c00c515  -------  <p> Add isSubtypeOf()  pre -condition check before getSubtype() returns.  We have to call it before return because before type variable substitution  isSubtypeOf() can t apply.  See https://github.com/google/guava/issues/3048  RELNOTES=Validate  TypeToken.getSubtype() .  f6d1461e2579f05f1106892c817681a61fc401ae
3056 ;  guava-tests/test/com/google/common/reflect/TypeTokenSubtypeTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Traverser.java: add support for multiple start nodes.  Update documentation (in this file and in graphs_explained.md) relating to behavior and definitions of equals() and hashCode().  RELNOTES= common.graph.Traverser : add support for traversing from multiple start nodes.  9dce1c3302ec118f73921c9319e7822114325a2d  -------  <p> Fix List<Foo<?>>.isSubtypeOf(List<Foo<?>>).  This used to return false because isSubtypeOf() does a wildcard capture of the Foo<?> type parameter  turning it into Foo<C>  and then List<Foo<C>> isn t a subtype of List<Foo<?>>.  Wildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters). But for resolving in covariant context  wildcard should remain as is.  I found this when trying to add isSubtypeOf() precondition check in getSubtype()  in response to https://github.com/google/guava/issues/3048.  RELNOTES=TypeToken.isSubtypeOf() bug fix.  9918890013cd07ff00074a28afefd3af2c00c515  -------  <p> Add isSubtypeOf()  pre -condition check before getSubtype() returns.  We have to call it before return because before type variable substitution  isSubtypeOf() can t apply.  See https://github.com/google/guava/issues/3048  RELNOTES=Validate  TypeToken.getSubtype() .  f6d1461e2579f05f1106892c817681a61fc401ae
3056 ;  guava/src/com/google/common/reflect/TypeToken.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Traverser.java: add support for multiple start nodes.  Update documentation (in this file and in graphs_explained.md) relating to behavior and definitions of equals() and hashCode().  RELNOTES= common.graph.Traverser : add support for traversing from multiple start nodes.  9dce1c3302ec118f73921c9319e7822114325a2d  -------  <p> Fix List<Foo<?>>.isSubtypeOf(List<Foo<?>>).  This used to return false because isSubtypeOf() does a wildcard capture of the Foo<?> type parameter  turning it into Foo<C>  and then List<Foo<C>> isn t a subtype of List<Foo<?>>.  Wildcard capture is needed for resolving types at invariant or contravariant elements (fields and parameters). But for resolving in covariant context  wildcard should remain as is.  I found this when trying to add isSubtypeOf() precondition check in getSubtype()  in response to https://github.com/google/guava/issues/3048.  RELNOTES=TypeToken.isSubtypeOf() bug fix.  9918890013cd07ff00074a28afefd3af2c00c515  -------  <p> Add isSubtypeOf()  pre -condition check before getSubtype() returns.  We have to call it before return because before type variable substitution  isSubtypeOf() can t apply.  See https://github.com/google/guava/issues/3048  RELNOTES=Validate  TypeToken.getSubtype() .  f6d1461e2579f05f1106892c817681a61fc401ae
3057 ; android/guava/src/com/google/thirdparty/publicsuffix/TrieParser.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Change all instances of encoded.subSequence() to use a simple start index offset  which reduces the Java memory footprint for TrieParser by at at least 130 MBs. This is because the original call to subSequence() would generate a new String on the heap for each call  where as just using an offset avoids the need to generate a new String all together.  This memory enhancement was found while investigating flakiness issues for some tests which had the same root cause of: java.lang.OutOfMemoryError: GC overhead limit exceeded  mostly in the TrieParser class.  100-test runs at original code: Memory usage - maximum: 503MiB (527 769 600 bytes) - average: 388MiB (407 225 077 bytes)  100-test runs with my changes: Memory usage - maximum: 316MiB (325 271 552 bytes) - average: 221MiB (239 355 320 bytes)  At maximum: 187 MB saved At average: 167 MB saved  RELNOTES=Reduced heap memory usage when parsing domain names  521c77000b665d5077524842cc0902583015043f
3057 ;  guava/src/com/google/thirdparty/publicsuffix/TrieParser.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Change all instances of encoded.subSequence() to use a simple start index offset  which reduces the Java memory footprint for TrieParser by at at least 130 MBs. This is because the original call to subSequence() would generate a new String on the heap for each call  where as just using an offset avoids the need to generate a new String all together.  This memory enhancement was found while investigating flakiness issues for some tests which had the same root cause of: java.lang.OutOfMemoryError: GC overhead limit exceeded  mostly in the TrieParser class.  100-test runs at original code: Memory usage - maximum: 503MiB (527 769 600 bytes) - average: 388MiB (407 225 077 bytes)  100-test runs with my changes: Memory usage - maximum: 316MiB (325 271 552 bytes) - average: 221MiB (239 355 320 bytes)  At maximum: 187 MB saved At average: 167 MB saved  RELNOTES=Reduced heap memory usage when parsing domain names  521c77000b665d5077524842cc0902583015043f
3070 ; android/guava/src/com/google/common/net/HttpHeaders.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add X-Download-Options header (IE8 header to control the  Open  button on the download dialog).  RELNOTES=Defined an [X-Download-Options](https://blogs.msdn.microsoft.com/ieinternals/2009/06/30/internet-explorer-and-custom-http-headers) header  b3acfc69329e40befab52f50a5ee66e37ad9f602
3070 ;  guava/src/com/google/common/net/HttpHeaders.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add X-Download-Options header (IE8 header to control the  Open  button on the download dialog).  RELNOTES=Defined an [X-Download-Options](https://blogs.msdn.microsoft.com/ieinternals/2009/06/30/internet-explorer-and-custom-http-headers) header  b3acfc69329e40befab52f50a5ee66e37ad9f602
3074 ; android/guava/src/com/google/common/base/Ascii.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> In Ascii  define a constant for the character case bitmask  and use it in place of 0x20 and 0x5f throughout the class.  c58f51bd68f89cd6119131a256e9de9d0f02b45f
3074 ;  guava/src/com/google/common/base/Ascii.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> In Ascii  define a constant for the character case bitmask  and use it in place of 0x20 and 0x5f throughout the class.  c58f51bd68f89cd6119131a256e9de9d0f02b45f
3077 ; android/guava/src/com/google/common/reflect/TypeToken.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Make ByteSource.read() use sizeIfKnown()  if available  to help avoid extra byte array allocations/copies.  Also don t use 32 as the initial ByteArrayOutputStream size in either version of ByteStreams.toByteArray()  just seems way too small. Use the default size for buffers instead  at a minimum.  Also change ConcatenatedByteSource.sizeIfKnown() to return absent if its Iterable of sources is not a Collection  this is to prevent sizeIfKnown() trying to loop over an infinite Iterable  which previous caused an infinite loop. That is also fixed in this CL  ConcatenatedByteSource.size() and sizeIfKnown() now stop and return Long.MAX_VALUE if the result would exceed that rather than going negative and continuing. But looping over an infinite Iterable in sizeIfKnown() seems potentially slow even if it will eventually stop  and as such against the spirit of sizeIfKnown()  which should be fast.  27d33d4fd1bbbf6f5aacd8835633943da33300a3  -------  <p> Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods.  They were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer  then copying from that buffer to a different buffer in the BAOS. Additionally  the way BAOS operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  Instead  read directly from the source into a sequence of buffers. When a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  47530cebb974612862c1e0f12e304ae1773ca9ce  -------  <p> Set serialVersionUID in TypeToken.java  RELNOTES=Add a  serialVersionUID  to  TypeToken   dc8ef1a7ac05b17d3be6e2918809ada5e68b31bc
3077 ;  guava/src/com/google/common/reflect/TypeToken.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Make ByteSource.read() use sizeIfKnown()  if available  to help avoid extra byte array allocations/copies.  Also don t use 32 as the initial ByteArrayOutputStream size in either version of ByteStreams.toByteArray()  just seems way too small. Use the default size for buffers instead  at a minimum.  Also change ConcatenatedByteSource.sizeIfKnown() to return absent if its Iterable of sources is not a Collection  this is to prevent sizeIfKnown() trying to loop over an infinite Iterable  which previous caused an infinite loop. That is also fixed in this CL  ConcatenatedByteSource.size() and sizeIfKnown() now stop and return Long.MAX_VALUE if the result would exceed that rather than going negative and continuing. But looping over an infinite Iterable in sizeIfKnown() seems potentially slow even if it will eventually stop  and as such against the spirit of sizeIfKnown()  which should be fast.  27d33d4fd1bbbf6f5aacd8835633943da33300a3  -------  <p> Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods.  They were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer  then copying from that buffer to a different buffer in the BAOS. Additionally  the way BAOS operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  Instead  read directly from the source into a sequence of buffers. When a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  47530cebb974612862c1e0f12e304ae1773ca9ce  -------  <p> Set serialVersionUID in TypeToken.java  RELNOTES=Add a  serialVersionUID  to  TypeToken   dc8ef1a7ac05b17d3be6e2918809ada5e68b31bc
3079 ; android/guava-tests/test/com/google/common/io/ByteStreamsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128  *** Reason for rollback ***  Causing OutOfMemoryError in some tests.  *** Original change description ***  Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods.  They were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer  then copying from that buffer to a different buffer in the BAOS. Additionally  the way BAOS operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  Instead  read directly from the source into a sequence of buffers. When a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  ***  8e341060fcef24921ecc5a079c256b184ca164f2
3079 ;  android/guava/src/com/google/common/io/ByteStreams.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128  *** Reason for rollback ***  Causing OutOfMemoryError in some tests.  *** Original change description ***  Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods.  They were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer  then copying from that buffer to a different buffer in the BAOS. Additionally  the way BAOS operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  Instead  read directly from the source into a sequence of buffers. When a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  ***  8e341060fcef24921ecc5a079c256b184ca164f2
3079 ;  guava-tests/test/com/google/common/io/ByteStreamsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128  *** Reason for rollback ***  Causing OutOfMemoryError in some tests.  *** Original change description ***  Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods.  They were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer  then copying from that buffer to a different buffer in the BAOS. Additionally  the way BAOS operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  Instead  read directly from the source into a sequence of buffers. When a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  ***  8e341060fcef24921ecc5a079c256b184ca164f2
3079 ;  guava/src/com/google/common/io/ByteStreams.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Automated rollback of e50ce7e7ed79fbce1901081838c8e0f9269d4128  *** Reason for rollback ***  Causing OutOfMemoryError in some tests.  *** Original change description ***  Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods.  They were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer  then copying from that buffer to a different buffer in the BAOS. Additionally  the way BAOS operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  Instead  read directly from the source into a sequence of buffers. When a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  ***  8e341060fcef24921ecc5a079c256b184ca164f2
3080 ; android/guava-tests/test/com/google/common/io/ByteStreamsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> HashBiMap: unnecessary call to rehashIfNecessary  Closes https://github.com/google/guava/pull/3076  532ab835043d451e6884f463e2b97c4416e55cc6  -------  <p> Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods.  They were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer  then copying from that buffer to a different buffer in the BAOS. Additionally  the way BAOS operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  Instead  read directly from the source into a sequence of buffers. When a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  (Roll-forward of previously rolled back e50ce7e7ed79fbce1901081838c8e0f9269d4128 now that the tests failing because they were mocking InputStream are fixed.)  e1b6d117a5b1d688d7e7348c3ce36324f6283c7b
3080 ;  android/guava/src/com/google/common/io/ByteStreams.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> HashBiMap: unnecessary call to rehashIfNecessary  Closes https://github.com/google/guava/pull/3076  532ab835043d451e6884f463e2b97c4416e55cc6  -------  <p> Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods.  They were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer  then copying from that buffer to a different buffer in the BAOS. Additionally  the way BAOS operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  Instead  read directly from the source into a sequence of buffers. When a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  (Roll-forward of previously rolled back e50ce7e7ed79fbce1901081838c8e0f9269d4128 now that the tests failing because they were mocking InputStream are fixed.)  e1b6d117a5b1d688d7e7348c3ce36324f6283c7b
3080 ;  guava-tests/test/com/google/common/io/ByteStreamsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> HashBiMap: unnecessary call to rehashIfNecessary  Closes https://github.com/google/guava/pull/3076  532ab835043d451e6884f463e2b97c4416e55cc6  -------  <p> Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods.  They were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer  then copying from that buffer to a different buffer in the BAOS. Additionally  the way BAOS operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  Instead  read directly from the source into a sequence of buffers. When a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  (Roll-forward of previously rolled back e50ce7e7ed79fbce1901081838c8e0f9269d4128 now that the tests failing because they were mocking InputStream are fixed.)  e1b6d117a5b1d688d7e7348c3ce36324f6283c7b
3080 ;  guava/src/com/google/common/io/ByteStreams.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> HashBiMap: unnecessary call to rehashIfNecessary  Closes https://github.com/google/guava/pull/3076  532ab835043d451e6884f463e2b97c4416e55cc6  -------  <p> Stop using ByteArrayOutputStream in ByteStreams.toByteArray methods.  They were using ByteStreams.copy to copy the source to the BAOS. This meant reading from the source into a buffer  then copying from that buffer to a different buffer in the BAOS. Additionally  the way BAOS operates is not great: whenever it needs more space  it creates a new array twice as large as the previous  copies all bytes from the previous array to the new one  and discards the previous array.  Instead  read directly from the source into a sequence of buffers. When a buffer fills up  don t discard it  but instead create a new  twice as large  buffer and start reading into it.  (Roll-forward of previously rolled back e50ce7e7ed79fbce1901081838c8e0f9269d4128 now that the tests failing because they were mocking InputStream are fixed.)  e1b6d117a5b1d688d7e7348c3ce36324f6283c7b
3087 ; android/guava-tests/test/com/google/common/base/FinalizableReferenceQueueClassLoaderUnloadingTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Supersource nullToEmpty and emptyToNull in Strings.java to native JS.  This allows us to improve performance in docs/xplat code that uses those methods.  RELNOTES=GWT: Supersource  Strings.nullToEmpty()  and  Strings.emptyToNull()   1850b425de37bf017b0fc57dd02e9de3302b08dc  -------  <p> Open source refactorings directory.  This is knowingly very simple  without yet documentation or many refactorings  it s a prototype first.  694060c9ab57a299607f025902ff920fcd438f25  -------  <p> Ignore FinalizableReferenceQueueClassLoaderUnloadingTest in JDK 9.  ae891f29a5ccba8ef90a6733dc26be22eca3426b
3087 ;  android/guava/src/com/google/common/base/FinalizableReferenceQueue.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Supersource nullToEmpty and emptyToNull in Strings.java to native JS.  This allows us to improve performance in docs/xplat code that uses those methods.  RELNOTES=GWT: Supersource  Strings.nullToEmpty()  and  Strings.emptyToNull()   1850b425de37bf017b0fc57dd02e9de3302b08dc  -------  <p> Open source refactorings directory.  This is knowingly very simple  without yet documentation or many refactorings  it s a prototype first.  694060c9ab57a299607f025902ff920fcd438f25  -------  <p> Ignore FinalizableReferenceQueueClassLoaderUnloadingTest in JDK 9.  ae891f29a5ccba8ef90a6733dc26be22eca3426b
3087 ;  guava-tests/test/com/google/common/base/FinalizableReferenceQueueClassLoaderUnloadingTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Supersource nullToEmpty and emptyToNull in Strings.java to native JS.  This allows us to improve performance in docs/xplat code that uses those methods.  RELNOTES=GWT: Supersource  Strings.nullToEmpty()  and  Strings.emptyToNull()   1850b425de37bf017b0fc57dd02e9de3302b08dc  -------  <p> Open source refactorings directory.  This is knowingly very simple  without yet documentation or many refactorings  it s a prototype first.  694060c9ab57a299607f025902ff920fcd438f25  -------  <p> Ignore FinalizableReferenceQueueClassLoaderUnloadingTest in JDK 9.  ae891f29a5ccba8ef90a6733dc26be22eca3426b
3087 ;  guava/src/com/google/common/base/FinalizableReferenceQueue.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Supersource nullToEmpty and emptyToNull in Strings.java to native JS.  This allows us to improve performance in docs/xplat code that uses those methods.  RELNOTES=GWT: Supersource  Strings.nullToEmpty()  and  Strings.emptyToNull()   1850b425de37bf017b0fc57dd02e9de3302b08dc  -------  <p> Open source refactorings directory.  This is knowingly very simple  without yet documentation or many refactorings  it s a prototype first.  694060c9ab57a299607f025902ff920fcd438f25  -------  <p> Ignore FinalizableReferenceQueueClassLoaderUnloadingTest in JDK 9.  ae891f29a5ccba8ef90a6733dc26be22eca3426b
3097 ; guava-tests/test/com/google/common/cache/LocalCacheTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix https://github.com/google/guava/issues/3081.  a446dd1890a324769ef7dc829052d5118e053abb
3097 ;  guava/src/com/google/common/cache/LocalCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix https://github.com/google/guava/issues/3081.  a446dd1890a324769ef7dc829052d5118e053abb
3103 ; guava-gwt/src-super/java/util/super/java/util/concurrent/Future.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Slightly discourage the use of the <long  TimeUnit> overloads on CacheBuilder.  babed10eeb8bc5571bdebecec94d48eb3b4748e8  -------  <p> Fix tests that failed if we couldn t recursively delete securely by using Jimfs and just getting rid of the whole file system each time.  Fixes https://github.com/google/guava/issues/3100  1974d26799780c448ef72c09eee2201dc7812fbb  -------  <p> Fix typo in Future javadoc.  7416b725e7a657cd215783651984217aad0840cc
3109 ; android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove pre-mature optimization of storing a total bit size for ConcatenatedHashFunction.  d7874ed808bad3031796854432c39358894eff08  -------  <p> Update Public Suffix data.  This copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  3c3aedeb600306c689655fc8ca950f662cada625
3109 ;  guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove pre-mature optimization of storing a total bit size for ConcatenatedHashFunction.  d7874ed808bad3031796854432c39358894eff08  -------  <p> Update Public Suffix data.  This copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  3c3aedeb600306c689655fc8ca950f662cada625
3117 ; android/guava/src/com/google/common/hash/LittleEndianByteArray.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix toString of NonSerializableMemoizingSupplier  Fixes #3107  9185822ee16cdd641657c0f8e7ead755c9e9a564  -------  <p> Use Splitter instead of String.split  in InternetDomainName.  e56f1aa3d21b04eed8f5481d4103c05af5c51ec7  -------  <p> Use Splitter for IPv6  too. This eliminates usage of java.util.regex from this file (which is used via String.split  otherwise).  65a2a7de4ef4eea913f769a5cbbce6e35e1fccce  -------  <p> Use Diamond.  27eb336c2a2d9068878edbf49edcca493cd69cd8  -------  <p> Automated rollback of a12ef6b46b26fe178021c099e3db6a8a99f5174e.  It looks like the original change can cause an infinite loop in LocalCache.LoadingValueReference.get().  c2266a6ff8c6f298673688d6779b8b7368fe9147  -------  <p> Don t enable use of Unsafe.getLong() on aarch64 devices.  Android devices may report to run aarch64 while running in 32-bit mode  and then crash when loading 64-bit values at unaligned addresses.  263bbcf6cf0cfae6768ddf9e9f3d749da555e422
3117 ;  guava/src/com/google/common/hash/LittleEndianByteArray.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix toString of NonSerializableMemoizingSupplier  Fixes #3107  9185822ee16cdd641657c0f8e7ead755c9e9a564  -------  <p> Use Splitter instead of String.split  in InternetDomainName.  e56f1aa3d21b04eed8f5481d4103c05af5c51ec7  -------  <p> Use Splitter for IPv6  too. This eliminates usage of java.util.regex from this file (which is used via String.split  otherwise).  65a2a7de4ef4eea913f769a5cbbce6e35e1fccce  -------  <p> Use Diamond.  27eb336c2a2d9068878edbf49edcca493cd69cd8  -------  <p> Automated rollback of a12ef6b46b26fe178021c099e3db6a8a99f5174e.  It looks like the original change can cause an infinite loop in LocalCache.LoadingValueReference.get().  c2266a6ff8c6f298673688d6779b8b7368fe9147  -------  <p> Don t enable use of Unsafe.getLong() on aarch64 devices.  Android devices may report to run aarch64 while running in 32-bit mode  and then crash when loading 64-bit values at unaligned addresses.  263bbcf6cf0cfae6768ddf9e9f3d749da555e422
3121 ; android/guava-tests/test/com/google/common/util/concurrent/StripedTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adding a new (initially internal  pending API Review) static factory to Striped.  This allows for custom Lock injection  which might be useful for cases not covered by the currently existing factories. With this  Striped<Lock> with fair sync is possible.  69a5c285ca6be0e63c521dcb5ecf8782eb1d6379
3121 ;  android/guava/src/com/google/common/util/concurrent/Striped.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adding a new (initially internal  pending API Review) static factory to Striped.  This allows for custom Lock injection  which might be useful for cases not covered by the currently existing factories. With this  Striped<Lock> with fair sync is possible.  69a5c285ca6be0e63c521dcb5ecf8782eb1d6379
3121 ;  guava-tests/test/com/google/common/util/concurrent/StripedTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adding a new (initially internal  pending API Review) static factory to Striped.  This allows for custom Lock injection  which might be useful for cases not covered by the currently existing factories. With this  Striped<Lock> with fair sync is possible.  69a5c285ca6be0e63c521dcb5ecf8782eb1d6379
3121 ;  guava/src/com/google/common/util/concurrent/Striped.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adding a new (initially internal  pending API Review) static factory to Striped.  This allows for custom Lock injection  which might be useful for cases not covered by the currently existing factories. With this  Striped<Lock> with fair sync is possible.  69a5c285ca6be0e63c521dcb5ecf8782eb1d6379
3125 ; android/guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Strip @DoNotMock annotations  RELNOTES=N/A  88134a2ed0b37c219b2912bdbff320e15dbe1a2e
3125 ;  android/guava/src/com/google/common/util/concurrent/FluentFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Strip @DoNotMock annotations  RELNOTES=N/A  88134a2ed0b37c219b2912bdbff320e15dbe1a2e
3125 ;  guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Strip @DoNotMock annotations  RELNOTES=N/A  88134a2ed0b37c219b2912bdbff320e15dbe1a2e
3125 ;  guava/src/com/google/common/util/concurrent/FluentFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Strip @DoNotMock annotations  RELNOTES=N/A  88134a2ed0b37c219b2912bdbff320e15dbe1a2e
3130 ; android/guava/src/com/google/common/collect/Sets.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Use @SafeVarargs annotation for Sets.cartesianProduct().  Fixes https://github.com/google/guava/pull/3127 Fixes https://github.com/google/guava/issues/2724  63a2f5a3928b64f9892f9751269ad1e27a718162
3130 ;  guava/src/com/google/common/collect/Sets.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Use @SafeVarargs annotation for Sets.cartesianProduct().  Fixes https://github.com/google/guava/pull/3127 Fixes https://github.com/google/guava/issues/2724  63a2f5a3928b64f9892f9751269ad1e27a718162
3132 ; android/guava/src/com/google/common/collect/Collections2.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix a few formatting nits  RELNOTES=N/A  6251cc89ad889458ed7ad4911f5b41d9733cc0b1
3132 ;  android/guava/src/com/google/common/collect/Iterators.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix a few formatting nits  RELNOTES=N/A  6251cc89ad889458ed7ad4911f5b41d9733cc0b1
3132 ;  android/guava/src/com/google/common/collect/LinkedListMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix a few formatting nits  RELNOTES=N/A  6251cc89ad889458ed7ad4911f5b41d9733cc0b1
3132 ;  android/guava/src/com/google/common/io/MultiReader.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix a few formatting nits  RELNOTES=N/A  6251cc89ad889458ed7ad4911f5b41d9733cc0b1
3132 ;  android/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix a few formatting nits  RELNOTES=N/A  6251cc89ad889458ed7ad4911f5b41d9733cc0b1
3132 ;  guava/src/com/google/common/collect/Collections2.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix a few formatting nits  RELNOTES=N/A  6251cc89ad889458ed7ad4911f5b41d9733cc0b1
3132 ;  guava/src/com/google/common/collect/ImmutableCollection.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix a few formatting nits  RELNOTES=N/A  6251cc89ad889458ed7ad4911f5b41d9733cc0b1
3132 ;  guava/src/com/google/common/collect/Iterators.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix a few formatting nits  RELNOTES=N/A  6251cc89ad889458ed7ad4911f5b41d9733cc0b1
3132 ;  guava/src/com/google/common/collect/LinkedListMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix a few formatting nits  RELNOTES=N/A  6251cc89ad889458ed7ad4911f5b41d9733cc0b1
3132 ;  guava/src/com/google/common/io/MultiReader.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix a few formatting nits  RELNOTES=N/A  6251cc89ad889458ed7ad4911f5b41d9733cc0b1
3132 ;  guava/src/com/google/common/util/concurrent/AbstractScheduledService.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix a few formatting nits  RELNOTES=N/A  6251cc89ad889458ed7ad4911f5b41d9733cc0b1
3139 ; android/guava-testlib/src/com/google/common/testing/ClassSanityTester.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  android/guava-testlib/src/com/google/common/testing/NullPointerTester.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  android/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  android/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  android/guava/src/com/google/common/collect/LinkedListMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-gwt/src-super/com/google/common/base/super/com/google/common/base/ExtraObjectsMethodsForWeb.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-gwt/src-super/com/google/common/cache/super/com/google/common/cache/LocalCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/AbstractSortedMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingImmutableCollection.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingImmutableList.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingImmutableMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ForwardingImmutableSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableCollection.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-gwt/src/com/google/common/base/GwtSerializationDependencies.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-testlib/src/com/google/common/collect/testing/SpliteratorTester.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-testlib/src/com/google/common/testing/ArbitraryInstances.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-testlib/src/com/google/common/testing/CollectorTester.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-testlib/src/com/google/common/testing/FreshValueGenerator.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-testlib/src/com/google/common/testing/NullPointerTester.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-testlib/src/com/google/common/testing/TestLogHandler.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/benchmark/com/google/common/collect/ConcurrentHashMultisetBenchmark.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/benchmark/com/google/common/util/concurrent/ExecutionListBenchmark.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedArrayBlockingQueue.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/benchmark/com/google/common/util/concurrent/MonitorBasedPriorityBlockingQueue.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/cache/CacheBuilderFactory.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/cache/CacheTesting.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/cache/TestingCacheLoaders.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/FluentIterableTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/ForwardingSortedMultisetTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/ImmutableMapTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/ImmutableMultisetTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/ImmutableSetTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/MapsCollectionTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/MapsTransformValuesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/MapsTransformValuesUnmodifiableIteratorTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/MultimapsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/OrderingTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/SetsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/SimpleAbstractMultisetTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/SynchronizedMultimapTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/SynchronizedSetTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/collect/SynchronizedTableTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/hash/BloomFilterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/io/BaseEncodingTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/io/CloserTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/io/SourceSinkFactories.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/math/QuantilesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/reflect/InvokableTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/util/concurrent/AbstractFutureBenchmarks.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/util/concurrent/FutureCallbackTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/util/concurrent/FuturesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/util/concurrent/ListenableFutureTester.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava-tests/test/com/google/common/util/concurrent/TestThread.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Absent.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/AbstractIterator.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/CaseFormat.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Converter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Defaults.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Enums.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Equivalence.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/FinalizableReferenceQueue.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Function.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/FunctionalEquivalence.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Functions.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Joiner.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/MoreObjects.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Objects.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Optional.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/PairwiseEquivalence.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Preconditions.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Predicate.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Predicates.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Present.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/StandardSystemProperty.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Strings.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Suppliers.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Throwables.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/Verify.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/VerifyException.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/base/internal/Finalizer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/cache/Cache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/cache/CacheBuilderSpec.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/cache/CacheStats.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/cache/ForwardingCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/cache/LocalCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/cache/ReferenceEntry.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/cache/RemovalNotification.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/cache/Striped64.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractBiMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractIterator.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractListMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractMapBasedMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractMapBasedMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractMapEntry.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractNavigableMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractRangeSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractSequentialIterator.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractSetMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractSortedMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractSortedSetMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AbstractTable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/AllEqualOrdering.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ArrayTable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/BiMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ByFunctionOrdering.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/CartesianList.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ClassToInstanceMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/CollectSpliterators.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Collections2.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/CompactHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/CompactHashSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ComparatorOrdering.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ComparisonChain.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ComputationException.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ConcurrentHashMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Count.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Cut.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/DenseImmutableTable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/DescendingImmutableSortedMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/DescendingImmutableSortedSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/EmptyContiguousSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/EnumHashBiMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/EnumMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ExplicitOrdering.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/FilteredEntryMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/FilteredKeyListMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/FilteredKeyMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/FilteredKeySetMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/FilteredMultimapValues.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/FluentIterable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ForwardingCollection.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ForwardingList.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ForwardingListMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ForwardingMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ForwardingMapEntry.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ForwardingMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ForwardingMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ForwardingSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ForwardingSetMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ForwardingSortedMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ForwardingSortedSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ForwardingSortedSetMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/GeneralRange.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/HashBasedTable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/HashBiMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Hashing.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableClassToInstanceMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableCollection.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableEntry.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableEnumMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableList.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableListMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableMapEntry.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableMapEntrySet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableMapKeySet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableMapValues.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableRangeMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableRangeSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableSetMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableSortedAsList.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableSortedMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableSortedSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ImmutableTable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Iterables.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Iterators.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/JdkBackedImmutableBiMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/JdkBackedImmutableMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/JdkBackedImmutableMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/JdkBackedImmutableSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/LexicographicalOrdering.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/LinkedHashMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/LinkedListMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ListMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Lists.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/MapDifference.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/MapMakerInternalMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Maps.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/MinMaxPriorityQueue.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/MoreCollectors.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Multimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Multimaps.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Multiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Multisets.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/NullsFirstOrdering.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/NullsLastOrdering.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ObjectArrays.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Ordering.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Range.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/RangeMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/RangeSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/RegularContiguousSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/RegularImmutableBiMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/RegularImmutableMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/RegularImmutableMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/RegularImmutableSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/RegularImmutableSortedMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/RegularImmutableSortedSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/RegularImmutableTable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/ReverseOrdering.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/SetMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Sets.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/SingletonImmutableBiMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/SortedLists.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/SortedMultisets.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/SortedSetMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/StandardTable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Streams.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Synchronized.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Table.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/Tables.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/TopKSelector.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/TreeBasedTable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/TreeMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/TreeMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/TreeRangeMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/collect/TreeRangeSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/AbstractBaseGraph.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/AbstractGraph.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/AbstractNetwork.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/AbstractValueGraph.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/ConfigurableNetwork.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/ConfigurableValueGraph.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/DirectedGraphConnections.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/EdgesConnecting.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/ElementOrder.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/EndpointPair.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/ForwardingValueGraph.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/Graph.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/GraphConnections.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/Graphs.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/MapIteratorCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/MapRetrievalCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/MultiEdgesConnecting.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/Network.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/Traverser.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/graph/ValueGraph.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/hash/BloomFilter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/hash/BloomFilterStrategies.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/hash/Funnels.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/hash/HashCode.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/hash/Hashing.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/hash/Murmur3_128HashFunction.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/hash/Murmur3_32HashFunction.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/hash/SipHashFunction.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/hash/Striped64.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/io/AppendableWriter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/io/BaseEncoding.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/io/CharSource.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/io/Closeables.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/io/Closer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/io/FileBackedOutputStream.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/io/InsecureRecursiveDeleteException.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/io/LineReader.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/io/MoreFiles.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/io/MultiInputStream.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/io/MultiReader.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/io/PatternFilenameFilter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/math/MathPreconditions.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/math/PairedStats.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/math/Stats.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/primitives/Booleans.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/primitives/Bytes.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/primitives/Chars.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/primitives/Doubles.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/primitives/Floats.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/primitives/ImmutableDoubleArray.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/primitives/ImmutableIntArray.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/primitives/ImmutableLongArray.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/primitives/Ints.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/primitives/Longs.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/primitives/Shorts.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/primitives/UnsignedInteger.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/primitives/UnsignedLong.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/reflect/AbstractInvocationHandler.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/reflect/ClassPath.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/reflect/Element.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/reflect/Invokable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/reflect/MutableTypeToInstanceMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3139 ;  guava/src/com/google/common/reflect/Parameter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Support type annotations in NullPointerTester  RELNOTES=N/A  feefa807349f68c90589aca91d121ba2991fe7f5  -------  <p> Continue type annotation preparations in NullPointerTester  9f4014505d9d368f4fbd607586b7349081e3b021  -------  <p> Add Token Binding HTTP header names to header libraries.  5406f50eb39519a00062ab1e0cf5b1ac0ef76e80  -------  <p> Use the type annotation version of @Nullable in the Java 8 branch  RELNOTES=Use the type annotation version of @Nullable in the Java 8 branch  daa53ccf373aedee90abbceb3a33c2355d189e5c
3142 ; android/guava/src/com/google/common/util/concurrent/FluentFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix a documentation error.  FluentFuture.catchingAsync does not take a future as an argument.  bf25a56ef0d350b2a631536809e4f9b958abf9e3
3142 ;  guava/src/com/google/common/util/concurrent/FluentFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix a documentation error.  FluentFuture.catchingAsync does not take a future as an argument.  bf25a56ef0d350b2a631536809e4f9b958abf9e3
3144 ; android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Update Public Suffix data.  The copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  16cb0383e37d26e1da4b6f7cfb7a9d21078d0912
3144 ;  guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Update Public Suffix data.  The copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  16cb0383e37d26e1da4b6f7cfb7a9d21078d0912
3146 ; android/guava/src/com/google/common/base/AbstractIterator.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  android/guava/src/com/google/common/base/Converter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  android/guava/src/com/google/common/base/Defaults.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  android/guava/src/com/google/common/base/FinalizableReferenceQueue.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  android/guava/src/com/google/common/collect/ImmutableEntry.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  android/guava/src/com/google/common/collect/ImmutableSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  android/guava/src/com/google/common/primitives/Doubles.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  android/guava/src/com/google/common/primitives/Floats.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  android/guava/src/com/google/common/reflect/MutableTypeToInstanceMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  android/guava/src/com/google/common/reflect/TypeToInstanceMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  android/guava/src/com/google/common/reflect/TypeToken.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  android/guava/src/com/google/common/reflect/Types.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/base/Absent.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/base/AbstractIterator.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/base/Converter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/base/Defaults.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/base/Equivalence.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/base/FinalizableReferenceQueue.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/base/Functions.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/base/Optional.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/base/StandardSystemProperty.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/base/Strings.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/base/Suppliers.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/base/Throwables.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/base/internal/Finalizer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/cache/CacheBuilderSpec.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/cache/ForwardingCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/cache/LocalCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/AbstractIterator.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/AbstractMapBasedMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/AbstractNavigableMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/AbstractSequentialIterator.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/ArrayTable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/CollectSpliterators.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/CompactHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/ConcurrentHashMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/Cut.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/DenseImmutableTable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/GeneralRange.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/HashBiMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/ImmutableClassToInstanceMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/ImmutableEntry.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/ImmutableMapEntry.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/ImmutableRangeMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/ImmutableSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/Iterables.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/Iterators.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/LinkedListMultimap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/Lists.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/MapMakerInternalMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/Maps.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/MinMaxPriorityQueue.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/Multisets.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/RegularImmutableBiMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/RegularImmutableMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/RegularImmutableTable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/Sets.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/Tables.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/TopKSelector.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/TreeBasedTable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/TreeMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/TreeRangeMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/collect/TreeRangeSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/graph/AbstractNetwork.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/graph/ConfigurableValueGraph.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/graph/DirectedMultiNetworkConnections.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/graph/EdgesConnecting.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/graph/ElementOrder.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/graph/ForwardingValueGraph.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/graph/Graphs.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/graph/MapIteratorCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/graph/MapRetrievalCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/graph/Traverser.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/graph/UndirectedMultiNetworkConnections.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/io/BaseEncoding.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/io/CharSource.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/io/FileBackedOutputStream.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/io/LineReader.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/io/MoreFiles.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/io/MultiInputStream.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/io/MultiReader.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/primitives/Doubles.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/primitives/Floats.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/primitives/Ints.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/primitives/Longs.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/reflect/MutableTypeToInstanceMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/reflect/Parameter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/reflect/TypeToInstanceMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/reflect/TypeToken.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/reflect/Types.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/util/concurrent/AbstractScheduledService.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/util/concurrent/AbstractService.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/util/concurrent/AggregateFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/util/concurrent/Callables.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/util/concurrent/ExecutionList.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/util/concurrent/FuturesGetChecked.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/util/concurrent/ImmediateFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3146 ;  guava/src/com/google/common/util/concurrent/TimeoutFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move type annotations immediately before the type they apply to  Fixes #3145  RELNOTES=N/A  4270efbda891a947c1bfdb3e5707741a63b40551
3148 ; android/guava-tests/test/com/google/common/base/PreconditionsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Introduce Strings.lenientFormat()  copied from Preconditions.format(). Rewrote documentation but the method body remains unchanged.  RELNOTES=Introduce  Strings.lenientFormat()   copied from  Preconditions.format() .  a728cdc8f254ad9ff5049199e4cf9cee9a573270  -------  <p> Branch eventbus  net  and escape for Java 7  RELNOTES=N/A  eeee4ba1b814f540dcb4516bf1079c3a83bc3e68  -------  <p> Swap Preconditions and Verify over to Strings.lenientFormat.  2299ad25a041dbc7d5ffbdd86d2c4ce1b56c3935
3148 ;  android/guava/src/com/google/common/base/Preconditions.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Introduce Strings.lenientFormat()  copied from Preconditions.format(). Rewrote documentation but the method body remains unchanged.  RELNOTES=Introduce  Strings.lenientFormat()   copied from  Preconditions.format() .  a728cdc8f254ad9ff5049199e4cf9cee9a573270  -------  <p> Branch eventbus  net  and escape for Java 7  RELNOTES=N/A  eeee4ba1b814f540dcb4516bf1079c3a83bc3e68  -------  <p> Swap Preconditions and Verify over to Strings.lenientFormat.  2299ad25a041dbc7d5ffbdd86d2c4ce1b56c3935
3148 ;  android/guava/src/com/google/common/base/Verify.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Introduce Strings.lenientFormat()  copied from Preconditions.format(). Rewrote documentation but the method body remains unchanged.  RELNOTES=Introduce  Strings.lenientFormat()   copied from  Preconditions.format() .  a728cdc8f254ad9ff5049199e4cf9cee9a573270  -------  <p> Branch eventbus  net  and escape for Java 7  RELNOTES=N/A  eeee4ba1b814f540dcb4516bf1079c3a83bc3e68  -------  <p> Swap Preconditions and Verify over to Strings.lenientFormat.  2299ad25a041dbc7d5ffbdd86d2c4ce1b56c3935
3148 ;  guava-gwt/test/com/google/common/base/PreconditionsTest_gwt.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Introduce Strings.lenientFormat()  copied from Preconditions.format(). Rewrote documentation but the method body remains unchanged.  RELNOTES=Introduce  Strings.lenientFormat()   copied from  Preconditions.format() .  a728cdc8f254ad9ff5049199e4cf9cee9a573270  -------  <p> Branch eventbus  net  and escape for Java 7  RELNOTES=N/A  eeee4ba1b814f540dcb4516bf1079c3a83bc3e68  -------  <p> Swap Preconditions and Verify over to Strings.lenientFormat.  2299ad25a041dbc7d5ffbdd86d2c4ce1b56c3935
3148 ;  guava-tests/test/com/google/common/base/PreconditionsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Introduce Strings.lenientFormat()  copied from Preconditions.format(). Rewrote documentation but the method body remains unchanged.  RELNOTES=Introduce  Strings.lenientFormat()   copied from  Preconditions.format() .  a728cdc8f254ad9ff5049199e4cf9cee9a573270  -------  <p> Branch eventbus  net  and escape for Java 7  RELNOTES=N/A  eeee4ba1b814f540dcb4516bf1079c3a83bc3e68  -------  <p> Swap Preconditions and Verify over to Strings.lenientFormat.  2299ad25a041dbc7d5ffbdd86d2c4ce1b56c3935
3148 ;  guava/src/com/google/common/base/Preconditions.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Introduce Strings.lenientFormat()  copied from Preconditions.format(). Rewrote documentation but the method body remains unchanged.  RELNOTES=Introduce  Strings.lenientFormat()   copied from  Preconditions.format() .  a728cdc8f254ad9ff5049199e4cf9cee9a573270  -------  <p> Branch eventbus  net  and escape for Java 7  RELNOTES=N/A  eeee4ba1b814f540dcb4516bf1079c3a83bc3e68  -------  <p> Swap Preconditions and Verify over to Strings.lenientFormat.  2299ad25a041dbc7d5ffbdd86d2c4ce1b56c3935
3148 ;  guava/src/com/google/common/base/Verify.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Introduce Strings.lenientFormat()  copied from Preconditions.format(). Rewrote documentation but the method body remains unchanged.  RELNOTES=Introduce  Strings.lenientFormat()   copied from  Preconditions.format() .  a728cdc8f254ad9ff5049199e4cf9cee9a573270  -------  <p> Branch eventbus  net  and escape for Java 7  RELNOTES=N/A  eeee4ba1b814f540dcb4516bf1079c3a83bc3e68  -------  <p> Swap Preconditions and Verify over to Strings.lenientFormat.  2299ad25a041dbc7d5ffbdd86d2c4ce1b56c3935
3149 ; android/guava-tests/benchmark/com/google/common/base/WhitespaceMatcherBenchmark.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Continue migrating to type annotations for @Nullable  RELNOTES=N/A  f642763e15c2814c2ed6208fb7302235d6518829  -------  <p> Remove usages of CaliperMain from java_benchmarks targets since the deps for java_benchmarks don t need to (and shouldn t) include CaliperMain anymore.  Such benchmarks should be run via the java_benchmarks generated binary directly.  GITHUB_BREAKING_CHANGES=n/a  84d45bc4e1a9b2a87256e30374c517fed329dcae
3149 ;  guava-tests/benchmark/com/google/common/base/WhitespaceMatcherBenchmark.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Continue migrating to type annotations for @Nullable  RELNOTES=N/A  f642763e15c2814c2ed6208fb7302235d6518829  -------  <p> Remove usages of CaliperMain from java_benchmarks targets since the deps for java_benchmarks don t need to (and shouldn t) include CaliperMain anymore.  Such benchmarks should be run via the java_benchmarks generated binary directly.  GITHUB_BREAKING_CHANGES=n/a  84d45bc4e1a9b2a87256e30374c517fed329dcae
3163 ; guava-gwt/test/com/google/common/collect/StreamsTest_gwt.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add duration info to checkArugment() call in Suppliers.memoizeWithExpiration()  RELNOTES=Add duration info to checkArugment() call in Suppliers.memoizeWithExpiration()  3eadb52dcb210704fefa547853b17e7bfa57e06c  -------  <p> Some changes to the Guava README.  Move most information about the latest release to the release badge at the top  which now links to the GitHub release page for the latest release and automatically displays the latest release version number.  Note: I probably would have removed explicit references to the latest version number entirely (meaning no changes to it need to be made when a new release is created) except for the fact that the release process currently relies on there being *some* change made when prepare_release is run so that the release script knows what commit to create the release from. There are ways we could deal with that  but I didn t want to deal with that yet.  0f364779d314470c8855a6c0c805f858ed418c65  -------  <p> Fix https://github.com/google/guava/issues/3156 by implementing a proper CollectSpliterators.flatMapTo{Int Long Double}.  9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  -------  <p> Automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  *** Reason for rollback ***  Appears to tickle a J2CL bug.  *** Original change description ***  Fix https://github.com/google/guava/issues/3156 by implementing a proper CollectSpliterators.flatMapTo{Int Long Double}.  ***  15db5b7f84531a19e7e0ab6f7932208e35b8b068
3163 ;  guava-tests/test/com/google/common/collect/StreamsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add duration info to checkArugment() call in Suppliers.memoizeWithExpiration()  RELNOTES=Add duration info to checkArugment() call in Suppliers.memoizeWithExpiration()  3eadb52dcb210704fefa547853b17e7bfa57e06c  -------  <p> Some changes to the Guava README.  Move most information about the latest release to the release badge at the top  which now links to the GitHub release page for the latest release and automatically displays the latest release version number.  Note: I probably would have removed explicit references to the latest version number entirely (meaning no changes to it need to be made when a new release is created) except for the fact that the release process currently relies on there being *some* change made when prepare_release is run so that the release script knows what commit to create the release from. There are ways we could deal with that  but I didn t want to deal with that yet.  0f364779d314470c8855a6c0c805f858ed418c65  -------  <p> Fix https://github.com/google/guava/issues/3156 by implementing a proper CollectSpliterators.flatMapTo{Int Long Double}.  9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  -------  <p> Automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  *** Reason for rollback ***  Appears to tickle a J2CL bug.  *** Original change description ***  Fix https://github.com/google/guava/issues/3156 by implementing a proper CollectSpliterators.flatMapTo{Int Long Double}.  ***  15db5b7f84531a19e7e0ab6f7932208e35b8b068
3163 ;  guava/src/com/google/common/collect/CollectSpliterators.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add duration info to checkArugment() call in Suppliers.memoizeWithExpiration()  RELNOTES=Add duration info to checkArugment() call in Suppliers.memoizeWithExpiration()  3eadb52dcb210704fefa547853b17e7bfa57e06c  -------  <p> Some changes to the Guava README.  Move most information about the latest release to the release badge at the top  which now links to the GitHub release page for the latest release and automatically displays the latest release version number.  Note: I probably would have removed explicit references to the latest version number entirely (meaning no changes to it need to be made when a new release is created) except for the fact that the release process currently relies on there being *some* change made when prepare_release is run so that the release script knows what commit to create the release from. There are ways we could deal with that  but I didn t want to deal with that yet.  0f364779d314470c8855a6c0c805f858ed418c65  -------  <p> Fix https://github.com/google/guava/issues/3156 by implementing a proper CollectSpliterators.flatMapTo{Int Long Double}.  9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  -------  <p> Automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  *** Reason for rollback ***  Appears to tickle a J2CL bug.  *** Original change description ***  Fix https://github.com/google/guava/issues/3156 by implementing a proper CollectSpliterators.flatMapTo{Int Long Double}.  ***  15db5b7f84531a19e7e0ab6f7932208e35b8b068
3163 ;  guava/src/com/google/common/collect/Streams.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add duration info to checkArugment() call in Suppliers.memoizeWithExpiration()  RELNOTES=Add duration info to checkArugment() call in Suppliers.memoizeWithExpiration()  3eadb52dcb210704fefa547853b17e7bfa57e06c  -------  <p> Some changes to the Guava README.  Move most information about the latest release to the release badge at the top  which now links to the GitHub release page for the latest release and automatically displays the latest release version number.  Note: I probably would have removed explicit references to the latest version number entirely (meaning no changes to it need to be made when a new release is created) except for the fact that the release process currently relies on there being *some* change made when prepare_release is run so that the release script knows what commit to create the release from. There are ways we could deal with that  but I didn t want to deal with that yet.  0f364779d314470c8855a6c0c805f858ed418c65  -------  <p> Fix https://github.com/google/guava/issues/3156 by implementing a proper CollectSpliterators.flatMapTo{Int Long Double}.  9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  -------  <p> Automated rollback of 9e6e1d02faa4ff07f2c5746a1902ae36cd54335b  *** Reason for rollback ***  Appears to tickle a J2CL bug.  *** Original change description ***  Fix https://github.com/google/guava/issues/3156 by implementing a proper CollectSpliterators.flatMapTo{Int Long Double}.  ***  15db5b7f84531a19e7e0ab6f7932208e35b8b068
3170 ; guava-tests/test/com/google/common/cache/LocalCacheMapComputeTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> fix a grammar mistake  Fixes #3161  d60f7f352c7ce8ae031c916b045eb30a6f1a8ab8  -------  <p> In open-source Guava  completely skip trying to discover pluggable PatternCompiler implementations.  It s never been possible to create such implementations externally  anyway  and users are now seeing problems running the useless discovery code under the module system.  Fixes https://github.com/google/guava/issues/3147  RELNOTES= base : Fixed the  ServiceConfigurationError  that some users encountered when using Guava as a JPMS module.  0954b82dc4e3fe400550fcba78ae2878a8604c3b  -------  <p> Suppress exceptions raised from argument s toString methods during lenient formatting - take 2.  60c6e22c0ba9c7b305c787bd72e0fd4f1f005afc  -------  <p> Create an htmlescapers target for people who want to avoid the bulk of i18n identifiers and ICU4J.  e0eae79a5ba94850ca447116cd033447240d489e  -------  <p> Fix b/80241237 to correctly *not* change segment weight  nor report an eviction  when a compute() call does not change the present value.  RELNOTES=Fix a bug where Cache.asMap.compute* methods could cause nonsensical weights to be stored  breaking cache eviction.  21b52f64ceda0119daec68f6be2712bee55f02af
3170 ;  guava/src/com/google/common/cache/LocalCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> fix a grammar mistake  Fixes #3161  d60f7f352c7ce8ae031c916b045eb30a6f1a8ab8  -------  <p> In open-source Guava  completely skip trying to discover pluggable PatternCompiler implementations.  It s never been possible to create such implementations externally  anyway  and users are now seeing problems running the useless discovery code under the module system.  Fixes https://github.com/google/guava/issues/3147  RELNOTES= base : Fixed the  ServiceConfigurationError  that some users encountered when using Guava as a JPMS module.  0954b82dc4e3fe400550fcba78ae2878a8604c3b  -------  <p> Suppress exceptions raised from argument s toString methods during lenient formatting - take 2.  60c6e22c0ba9c7b305c787bd72e0fd4f1f005afc  -------  <p> Create an htmlescapers target for people who want to avoid the bulk of i18n identifiers and ICU4J.  e0eae79a5ba94850ca447116cd033447240d489e  -------  <p> Fix b/80241237 to correctly *not* change segment weight  nor report an eviction  when a compute() call does not change the present value.  RELNOTES=Fix a bug where Cache.asMap.compute* methods could cause nonsensical weights to be stored  breaking cache eviction.  21b52f64ceda0119daec68f6be2712bee55f02af
3171 ; android/guava/src/com/google/common/base/Strings.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a direct dependency from guava-gwt to checker-qual.  The GWT sources (specifically  GwtSerializationDependencies) use @Nullable directly  so we shouldn t rely on relying on it indirectly through guava-jre.  However  what actually prompted this is a strange behavior in Compile-Testing  which Truth uses. This CL should help  though it might not be a fully solution. https://github.com/google/compile-testing/issues/149  5cb6f0a87d75c6b3cd6c79c31d66e3a28620101d  -------  <p> Fix mangled Javadocs.  5928882017809a1d0e57bd1b55dd6abdcf5604d0
3171 ;  guava/src/com/google/common/base/Strings.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a direct dependency from guava-gwt to checker-qual.  The GWT sources (specifically  GwtSerializationDependencies) use @Nullable directly  so we shouldn t rely on relying on it indirectly through guava-jre.  However  what actually prompted this is a strange behavior in Compile-Testing  which Truth uses. This CL should help  though it might not be a fully solution. https://github.com/google/compile-testing/issues/149  5cb6f0a87d75c6b3cd6c79c31d66e3a28620101d  -------  <p> Fix mangled Javadocs.  5928882017809a1d0e57bd1b55dd6abdcf5604d0
3179 ; android/guava-tests/test/com/google/common/base/AndroidIncompatible.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix nonpublic identifiers and documentation that use  whitelist  or  blacklist  to use less problematic terms.  8a21b1c960067ef89e729eeeaeeb3e224692ee37
3179 ;  android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureFallbackAtomicHelperTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix nonpublic identifiers and documentation that use  whitelist  or  blacklist  to use less problematic terms.  8a21b1c960067ef89e729eeeaeeb3e224692ee37
3179 ;  android/guava-tests/test/com/google/common/util/concurrent/AggregateFutureStateFallbackAtomicHelperTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix nonpublic identifiers and documentation that use  whitelist  or  blacklist  to use less problematic terms.  8a21b1c960067ef89e729eeeaeeb3e224692ee37
3179 ;  android/guava/src/com/google/common/base/Throwables.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix nonpublic identifiers and documentation that use  whitelist  or  blacklist  to use less problematic terms.  8a21b1c960067ef89e729eeeaeeb3e224692ee37
3179 ;  guava-tests/test/com/google/common/base/AndroidIncompatible.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix nonpublic identifiers and documentation that use  whitelist  or  blacklist  to use less problematic terms.  8a21b1c960067ef89e729eeeaeeb3e224692ee37
3179 ;  guava-tests/test/com/google/common/util/concurrent/AbstractFutureFallbackAtomicHelperTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix nonpublic identifiers and documentation that use  whitelist  or  blacklist  to use less problematic terms.  8a21b1c960067ef89e729eeeaeeb3e224692ee37
3179 ;  guava-tests/test/com/google/common/util/concurrent/AggregateFutureStateFallbackAtomicHelperTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix nonpublic identifiers and documentation that use  whitelist  or  blacklist  to use less problematic terms.  8a21b1c960067ef89e729eeeaeeb3e224692ee37
3179 ;  guava/src/com/google/common/base/Throwables.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix nonpublic identifiers and documentation that use  whitelist  or  blacklist  to use less problematic terms.  8a21b1c960067ef89e729eeeaeeb3e224692ee37
3191 ; android/guava-testlib/src/com/google/common/collect/testing/google/SetGenerators.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  android/guava-testlib/src/com/google/common/testing/TearDownStack.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  android/guava/src/com/google/common/base/CaseFormat.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  android/guava/src/com/google/common/collect/CompactLinkedHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  android/guava/src/com/google/common/collect/MapMakerInternalMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  android/guava/src/com/google/common/collect/RegularContiguousSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  android/guava/src/com/google/common/hash/BloomFilter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  android/guava/src/com/google/common/hash/Hashing.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  android/guava/src/com/google/common/math/DoubleUtils.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  android/guava/src/com/google/common/math/PairedStats.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  guava-testlib/src/com/google/common/collect/testing/google/SetGenerators.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  guava-testlib/src/com/google/common/collect/testing/testers/ListReplaceAllTester.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  guava-testlib/src/com/google/common/testing/TearDownStack.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  guava/src/com/google/common/base/CaseFormat.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  guava/src/com/google/common/collect/CollectSpliterators.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  guava/src/com/google/common/collect/CompactLinkedHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  guava/src/com/google/common/collect/MapMakerInternalMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  guava/src/com/google/common/collect/RegularContiguousSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  guava/src/com/google/common/hash/BloomFilter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  guava/src/com/google/common/hash/Hashing.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  guava/src/com/google/common/math/DoubleUtils.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3191 ;  guava/src/com/google/common/math/PairedStats.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3197 ; android/guava/src/com/google/common/io/Files.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3197 ;  guava/src/com/google/common/io/Files.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3204 ; android/guava-tests/test/com/google/common/base/SplitterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for Sec-Metadata header.  https://github.com/mikewest/sec-metadata  RELNOTES=Adds constants for Sec-Metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> Update Public Suffix data.  This copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> Add @Nullable to AbstractSequentialIterator s computeNext() method return value so that [] doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> Internally  use PatternCompiler from Doubles.tryParse.  (Redo of CL 202132002  which was partially rolled back in CL 202139691.)  This time including tests to cover the RE2J approach. To avoid the errors of last time  I had to remove the possessive quantifiers under RE2J and replace \p{XDigit} with [0-9a-fA-F] (which is equivalent  see the Pattern Javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd
3204 ;  android/guava/src/com/google/common/base/CommonPattern.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for Sec-Metadata header.  https://github.com/mikewest/sec-metadata  RELNOTES=Adds constants for Sec-Metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> Update Public Suffix data.  This copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> Add @Nullable to AbstractSequentialIterator s computeNext() method return value so that [] doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> Internally  use PatternCompiler from Doubles.tryParse.  (Redo of CL 202132002  which was partially rolled back in CL 202139691.)  This time including tests to cover the RE2J approach. To avoid the errors of last time  I had to remove the possessive quantifiers under RE2J and replace \p{XDigit} with [0-9a-fA-F] (which is equivalent  see the Pattern Javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd
3204 ;  android/guava/src/com/google/common/base/PatternCompiler.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for Sec-Metadata header.  https://github.com/mikewest/sec-metadata  RELNOTES=Adds constants for Sec-Metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> Update Public Suffix data.  This copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> Add @Nullable to AbstractSequentialIterator s computeNext() method return value so that [] doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> Internally  use PatternCompiler from Doubles.tryParse.  (Redo of CL 202132002  which was partially rolled back in CL 202139691.)  This time including tests to cover the RE2J approach. To avoid the errors of last time  I had to remove the possessive quantifiers under RE2J and replace \p{XDigit} with [0-9a-fA-F] (which is equivalent  see the Pattern Javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd
3204 ;  android/guava/src/com/google/common/base/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for Sec-Metadata header.  https://github.com/mikewest/sec-metadata  RELNOTES=Adds constants for Sec-Metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> Update Public Suffix data.  This copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> Add @Nullable to AbstractSequentialIterator s computeNext() method return value so that [] doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> Internally  use PatternCompiler from Doubles.tryParse.  (Redo of CL 202132002  which was partially rolled back in CL 202139691.)  This time including tests to cover the RE2J approach. To avoid the errors of last time  I had to remove the possessive quantifiers under RE2J and replace \p{XDigit} with [0-9a-fA-F] (which is equivalent  see the Pattern Javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd
3204 ;  android/guava/src/com/google/common/primitives/Doubles.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for Sec-Metadata header.  https://github.com/mikewest/sec-metadata  RELNOTES=Adds constants for Sec-Metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> Update Public Suffix data.  This copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> Add @Nullable to AbstractSequentialIterator s computeNext() method return value so that [] doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> Internally  use PatternCompiler from Doubles.tryParse.  (Redo of CL 202132002  which was partially rolled back in CL 202139691.)  This time including tests to cover the RE2J approach. To avoid the errors of last time  I had to remove the possessive quantifiers under RE2J and replace \p{XDigit} with [0-9a-fA-F] (which is equivalent  see the Pattern Javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd
3204 ;  guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for Sec-Metadata header.  https://github.com/mikewest/sec-metadata  RELNOTES=Adds constants for Sec-Metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> Update Public Suffix data.  This copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> Add @Nullable to AbstractSequentialIterator s computeNext() method return value so that [] doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> Internally  use PatternCompiler from Doubles.tryParse.  (Redo of CL 202132002  which was partially rolled back in CL 202139691.)  This time including tests to cover the RE2J approach. To avoid the errors of last time  I had to remove the possessive quantifiers under RE2J and replace \p{XDigit} with [0-9a-fA-F] (which is equivalent  see the Pattern Javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd
3204 ;  guava-tests/test/com/google/common/base/SplitterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for Sec-Metadata header.  https://github.com/mikewest/sec-metadata  RELNOTES=Adds constants for Sec-Metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> Update Public Suffix data.  This copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> Add @Nullable to AbstractSequentialIterator s computeNext() method return value so that [] doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> Internally  use PatternCompiler from Doubles.tryParse.  (Redo of CL 202132002  which was partially rolled back in CL 202139691.)  This time including tests to cover the RE2J approach. To avoid the errors of last time  I had to remove the possessive quantifiers under RE2J and replace \p{XDigit} with [0-9a-fA-F] (which is equivalent  see the Pattern Javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd
3204 ;  guava/src/com/google/common/base/CommonPattern.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for Sec-Metadata header.  https://github.com/mikewest/sec-metadata  RELNOTES=Adds constants for Sec-Metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> Update Public Suffix data.  This copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> Add @Nullable to AbstractSequentialIterator s computeNext() method return value so that [] doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> Internally  use PatternCompiler from Doubles.tryParse.  (Redo of CL 202132002  which was partially rolled back in CL 202139691.)  This time including tests to cover the RE2J approach. To avoid the errors of last time  I had to remove the possessive quantifiers under RE2J and replace \p{XDigit} with [0-9a-fA-F] (which is equivalent  see the Pattern Javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd
3204 ;  guava/src/com/google/common/base/PatternCompiler.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for Sec-Metadata header.  https://github.com/mikewest/sec-metadata  RELNOTES=Adds constants for Sec-Metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> Update Public Suffix data.  This copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> Add @Nullable to AbstractSequentialIterator s computeNext() method return value so that [] doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> Internally  use PatternCompiler from Doubles.tryParse.  (Redo of CL 202132002  which was partially rolled back in CL 202139691.)  This time including tests to cover the RE2J approach. To avoid the errors of last time  I had to remove the possessive quantifiers under RE2J and replace \p{XDigit} with [0-9a-fA-F] (which is equivalent  see the Pattern Javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd
3204 ;  guava/src/com/google/common/base/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for Sec-Metadata header.  https://github.com/mikewest/sec-metadata  RELNOTES=Adds constants for Sec-Metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> Update Public Suffix data.  This copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> Add @Nullable to AbstractSequentialIterator s computeNext() method return value so that [] doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> Internally  use PatternCompiler from Doubles.tryParse.  (Redo of CL 202132002  which was partially rolled back in CL 202139691.)  This time including tests to cover the RE2J approach. To avoid the errors of last time  I had to remove the possessive quantifiers under RE2J and replace \p{XDigit} with [0-9a-fA-F] (which is equivalent  see the Pattern Javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd
3204 ;  guava/src/com/google/common/primitives/Doubles.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for Sec-Metadata header.  https://github.com/mikewest/sec-metadata  RELNOTES=Adds constants for Sec-Metadata header.  2035a276dcecb354dcf68b41f11480786cdeb109  -------  <p> Update Public Suffix data.  This copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  0dc71528308c0ff43961b4869df55b0f582c963b  -------  <p> Add @Nullable to AbstractSequentialIterator s computeNext() method return value so that [] doesn t complain  e59ed3d738accabf895ede47ae07b9cf320b6c8a  -------  <p> Internally  use PatternCompiler from Doubles.tryParse.  (Redo of CL 202132002  which was partially rolled back in CL 202139691.)  This time including tests to cover the RE2J approach. To avoid the errors of last time  I had to remove the possessive quantifiers under RE2J and replace \p{XDigit} with [0-9a-fA-F] (which is equivalent  see the Pattern Javadoc).  e51afe5a60f68c169e1aec6d30112bb77e423fdd
3205 ; android/guava-tests/test/com/google/common/net/HostAndPortTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Change HostAndPort equals() and hashCode() to stop depending on whether brackets were included  Now they depend only on host and port.  Useful for storing IPv6 addresses in Set and Map  RELNOTES= net.HostAndPort : Changed equals() and hashCode() to stop depending on whether brackets were included. Now they depend only on host and port.  6684d0f68ae91d41eac67873d87e13e2ae2b1db0
3205 ;  android/guava/src/com/google/common/net/HostAndPort.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Change HostAndPort equals() and hashCode() to stop depending on whether brackets were included  Now they depend only on host and port.  Useful for storing IPv6 addresses in Set and Map  RELNOTES= net.HostAndPort : Changed equals() and hashCode() to stop depending on whether brackets were included. Now they depend only on host and port.  6684d0f68ae91d41eac67873d87e13e2ae2b1db0
3205 ;  guava-tests/test/com/google/common/net/HostAndPortTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Change HostAndPort equals() and hashCode() to stop depending on whether brackets were included  Now they depend only on host and port.  Useful for storing IPv6 addresses in Set and Map  RELNOTES= net.HostAndPort : Changed equals() and hashCode() to stop depending on whether brackets were included. Now they depend only on host and port.  6684d0f68ae91d41eac67873d87e13e2ae2b1db0
3205 ;  guava/src/com/google/common/net/HostAndPort.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Change HostAndPort equals() and hashCode() to stop depending on whether brackets were included  Now they depend only on host and port.  Useful for storing IPv6 addresses in Set and Map  RELNOTES= net.HostAndPort : Changed equals() and hashCode() to stop depending on whether brackets were included. Now they depend only on host and port.  6684d0f68ae91d41eac67873d87e13e2ae2b1db0
3218 ; android/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix initialCapacity calculation for a maximum size over Integer.MAX_VALUE.  Noticed during discussion of https://github.com/google/guava/issues/3202  813ebd6909096797c6587487a1c67931e73b2bc5  -------  <p> Remove Futures methods that implicitly use directExecutor().  RELNOTES=Removed the  Futures  methods that implicitly use  directExecutor() .  52fa8683024d7093bb90df2789ac0a8ebf5aea04  -------  <p> Reduce ProGuard retained code from usages of Multimaps.synchronizedXYZMultimap.  Effects on MultimapSynchronizedProGuard: JAR bytes: 148295 bytes => 50236 bytes (-66%) Classes: 67 classes => 28 classes (-58%) Methods: 458 methods => 155 methods (-66%)  b42b6d20bb20ff239a361d990fc3f42048a4d217  -------  <p> Remove deprecated CharMatcher constants.  RELNOTES=Removed deprecated  public static  fields from  CharMatcher . Use the equivalent  public static  methods instead.  2786afac3ef177232a2e543703c97d42a277c2d8  -------  <p> Move ExecutionSequencer into guava as @Beta.  RELNOTES=Added  ExecutionSequencer   a new utility to run a series of asynchronous operations serially.  3b25fe7882459991f2336c5021c46f0c374a152b  -------  <p> Automated rollback of c7aa4671cd70853515171333c823e3cdece92918.  *** Original change description ***  Move ExecutionSequencer into guava as @Beta.  ***  35aa102cfe256bdf8a23aa89d259ba4916f50c62
3218 ;  android/guava/src/com/google/common/util/concurrent/ExecutionSequencer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix initialCapacity calculation for a maximum size over Integer.MAX_VALUE.  Noticed during discussion of https://github.com/google/guava/issues/3202  813ebd6909096797c6587487a1c67931e73b2bc5  -------  <p> Remove Futures methods that implicitly use directExecutor().  RELNOTES=Removed the  Futures  methods that implicitly use  directExecutor() .  52fa8683024d7093bb90df2789ac0a8ebf5aea04  -------  <p> Reduce ProGuard retained code from usages of Multimaps.synchronizedXYZMultimap.  Effects on MultimapSynchronizedProGuard: JAR bytes: 148295 bytes => 50236 bytes (-66%) Classes: 67 classes => 28 classes (-58%) Methods: 458 methods => 155 methods (-66%)  b42b6d20bb20ff239a361d990fc3f42048a4d217  -------  <p> Remove deprecated CharMatcher constants.  RELNOTES=Removed deprecated  public static  fields from  CharMatcher . Use the equivalent  public static  methods instead.  2786afac3ef177232a2e543703c97d42a277c2d8  -------  <p> Move ExecutionSequencer into guava as @Beta.  RELNOTES=Added  ExecutionSequencer   a new utility to run a series of asynchronous operations serially.  3b25fe7882459991f2336c5021c46f0c374a152b  -------  <p> Automated rollback of c7aa4671cd70853515171333c823e3cdece92918.  *** Original change description ***  Move ExecutionSequencer into guava as @Beta.  ***  35aa102cfe256bdf8a23aa89d259ba4916f50c62
3218 ;  guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix initialCapacity calculation for a maximum size over Integer.MAX_VALUE.  Noticed during discussion of https://github.com/google/guava/issues/3202  813ebd6909096797c6587487a1c67931e73b2bc5  -------  <p> Remove Futures methods that implicitly use directExecutor().  RELNOTES=Removed the  Futures  methods that implicitly use  directExecutor() .  52fa8683024d7093bb90df2789ac0a8ebf5aea04  -------  <p> Reduce ProGuard retained code from usages of Multimaps.synchronizedXYZMultimap.  Effects on MultimapSynchronizedProGuard: JAR bytes: 148295 bytes => 50236 bytes (-66%) Classes: 67 classes => 28 classes (-58%) Methods: 458 methods => 155 methods (-66%)  b42b6d20bb20ff239a361d990fc3f42048a4d217  -------  <p> Remove deprecated CharMatcher constants.  RELNOTES=Removed deprecated  public static  fields from  CharMatcher . Use the equivalent  public static  methods instead.  2786afac3ef177232a2e543703c97d42a277c2d8  -------  <p> Move ExecutionSequencer into guava as @Beta.  RELNOTES=Added  ExecutionSequencer   a new utility to run a series of asynchronous operations serially.  3b25fe7882459991f2336c5021c46f0c374a152b  -------  <p> Automated rollback of c7aa4671cd70853515171333c823e3cdece92918.  *** Original change description ***  Move ExecutionSequencer into guava as @Beta.  ***  35aa102cfe256bdf8a23aa89d259ba4916f50c62
3218 ;  guava/src/com/google/common/util/concurrent/ExecutionSequencer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix initialCapacity calculation for a maximum size over Integer.MAX_VALUE.  Noticed during discussion of https://github.com/google/guava/issues/3202  813ebd6909096797c6587487a1c67931e73b2bc5  -------  <p> Remove Futures methods that implicitly use directExecutor().  RELNOTES=Removed the  Futures  methods that implicitly use  directExecutor() .  52fa8683024d7093bb90df2789ac0a8ebf5aea04  -------  <p> Reduce ProGuard retained code from usages of Multimaps.synchronizedXYZMultimap.  Effects on MultimapSynchronizedProGuard: JAR bytes: 148295 bytes => 50236 bytes (-66%) Classes: 67 classes => 28 classes (-58%) Methods: 458 methods => 155 methods (-66%)  b42b6d20bb20ff239a361d990fc3f42048a4d217  -------  <p> Remove deprecated CharMatcher constants.  RELNOTES=Removed deprecated  public static  fields from  CharMatcher . Use the equivalent  public static  methods instead.  2786afac3ef177232a2e543703c97d42a277c2d8  -------  <p> Move ExecutionSequencer into guava as @Beta.  RELNOTES=Added  ExecutionSequencer   a new utility to run a series of asynchronous operations serially.  3b25fe7882459991f2336c5021c46f0c374a152b  -------  <p> Automated rollback of c7aa4671cd70853515171333c823e3cdece92918.  *** Original change description ***  Move ExecutionSequencer into guava as @Beta.  ***  35aa102cfe256bdf8a23aa89d259ba4916f50c62
3226 ; android/guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a note about the relative ordering of afterDone and listener execution  25ab9de6336c2040a36aff7bed96b20fc5c30111  -------  <p> Insulate AbstractFuture from Futures.java/MoreExecutors.java dependency  Made DirectExecutor package-private so that we can refer to it directly in AbstractFuture.  660d9154e553b97df367979ccfe19971c9154bff  -------  <p> Remove reference to Strings.isNullOrEmpty from AbstractFuture.  c72e9c73cf468c2c55092912a0178a668f975e2e  -------  <p> Introduce Trusted interface.  So we can create FluentFuture.Trusted without introduction of a dependency on FluentFuture in AbstractFuture.  227d67fc6600a6041a3a3881f1e1b6652d3cf75c  -------  <p> Automated rollback of 227d67fc6600a6041a3a3881f1e1b6652d3cf75c  *** Original change description ***  Introduce Trusted interface.  So we can create FluentFuture.Trusted without introduction of a dependency on FluentFuture in AbstractFuture.  ***  e058d91f7d676a8791cba1bdda6b745ccc44f8b8
3226 ;  guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a note about the relative ordering of afterDone and listener execution  25ab9de6336c2040a36aff7bed96b20fc5c30111  -------  <p> Insulate AbstractFuture from Futures.java/MoreExecutors.java dependency  Made DirectExecutor package-private so that we can refer to it directly in AbstractFuture.  660d9154e553b97df367979ccfe19971c9154bff  -------  <p> Remove reference to Strings.isNullOrEmpty from AbstractFuture.  c72e9c73cf468c2c55092912a0178a668f975e2e  -------  <p> Introduce Trusted interface.  So we can create FluentFuture.Trusted without introduction of a dependency on FluentFuture in AbstractFuture.  227d67fc6600a6041a3a3881f1e1b6652d3cf75c  -------  <p> Automated rollback of 227d67fc6600a6041a3a3881f1e1b6652d3cf75c  *** Original change description ***  Introduce Trusted interface.  So we can create FluentFuture.Trusted without introduction of a dependency on FluentFuture in AbstractFuture.  ***  e058d91f7d676a8791cba1bdda6b745ccc44f8b8
3229 ; android/guava/src/com/google/common/primitives/Primitives.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Automated rollback of 45ca38358cac4368877650e591daf9650f5eaae1  *** Reason for rollback ***  The test that caused the inital rollback is buggy  *** Original change description ***  Introduce Trusted interface.  So we can create FluentFuture.Trusted without introduction of a dependency on FluentFuture in AbstractFuture.  ***  683eb054a0c9846e73aa9a4f1a47d4821ea5ef60  -------  <p> Optimize ImmutableCollection.toArray(T[]) as per https://shipilev.net/blog/2016/arrays-wisdom-ancients/  the key goal being to avoid the necessity of zeroing a newly created array where possible.  Addresses https://github.com/google/guava/issues/3209.  f5a3541fd118d370488b9f9c15facd408e180b17  -------  <p> Adds WASM as a supported Media type to Google Java utilities. Adds WASM support to the StaticFileAction in devserver (so that it is served with the correct Content Type).  RELNOTES=Adds WASM as a supported Media type to Google Java utilities.  67bb79e4ea2e0f6da956c29dd700ad7d756948b7  -------  <p> Allow Service to transition from STARTING to TERMINATED. Add a new  doCancelStart  method that is called when a service is stopped while still starting. This gives implementations a chance to abort code which may be preventing the service from starting.  RELNOTES=Added  doCancelStart  protected method to  AbstractService   6cdea3a7b0fe3953e181cb9660df5834550ba498  -------  <p> Fix javadoc typo in LinkedListMultimap  Fixes https://github.com/google/guava/issues/3228  1d0eeee14d09912362695e6e1c847fc50bc96ebf  -------  <p> Add callable s toString to null failure message.  I find this happens in mock-heavy tests  and this makes it easier to identify the source of the bad mock call.  9c03abcca29fb267ed55fc80e668327e5d46e230  -------  <p> Enhance toString() for futures returned from ExecutionSequencer.  Also make tests for ExecutionSequencer actually run  by porting them to junit3 :-(  0c2b6fb916214ffe092edc8577bd7818d58fe664  -------  <p> Make ordering of Primitives#all{Wrapper Primitive}Types deterministic  RELNOTES=N/A  c8ad64d04071f0fc20cbcba0bb9ee944746b5ef2
3229 ;  guava/src/com/google/common/primitives/Primitives.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Automated rollback of 45ca38358cac4368877650e591daf9650f5eaae1  *** Reason for rollback ***  The test that caused the inital rollback is buggy  *** Original change description ***  Introduce Trusted interface.  So we can create FluentFuture.Trusted without introduction of a dependency on FluentFuture in AbstractFuture.  ***  683eb054a0c9846e73aa9a4f1a47d4821ea5ef60  -------  <p> Optimize ImmutableCollection.toArray(T[]) as per https://shipilev.net/blog/2016/arrays-wisdom-ancients/  the key goal being to avoid the necessity of zeroing a newly created array where possible.  Addresses https://github.com/google/guava/issues/3209.  f5a3541fd118d370488b9f9c15facd408e180b17  -------  <p> Adds WASM as a supported Media type to Google Java utilities. Adds WASM support to the StaticFileAction in devserver (so that it is served with the correct Content Type).  RELNOTES=Adds WASM as a supported Media type to Google Java utilities.  67bb79e4ea2e0f6da956c29dd700ad7d756948b7  -------  <p> Allow Service to transition from STARTING to TERMINATED. Add a new  doCancelStart  method that is called when a service is stopped while still starting. This gives implementations a chance to abort code which may be preventing the service from starting.  RELNOTES=Added  doCancelStart  protected method to  AbstractService   6cdea3a7b0fe3953e181cb9660df5834550ba498  -------  <p> Fix javadoc typo in LinkedListMultimap  Fixes https://github.com/google/guava/issues/3228  1d0eeee14d09912362695e6e1c847fc50bc96ebf  -------  <p> Add callable s toString to null failure message.  I find this happens in mock-heavy tests  and this makes it easier to identify the source of the bad mock call.  9c03abcca29fb267ed55fc80e668327e5d46e230  -------  <p> Enhance toString() for futures returned from ExecutionSequencer.  Also make tests for ExecutionSequencer actually run  by porting them to junit3 :-(  0c2b6fb916214ffe092edc8577bd7818d58fe664  -------  <p> Make ordering of Primitives#all{Wrapper Primitive}Types deterministic  RELNOTES=N/A  c8ad64d04071f0fc20cbcba0bb9ee944746b5ef2
3238 ; android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  android/guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  android/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  android/guava/src/com/google/common/util/concurrent/FluentFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  android/guava/src/com/google/common/util/concurrent/GwtFluentFutureCatchingSpecialization.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  android/guava/src/com/google/common/util/concurrent/ImmediateFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  android/guava/src/com/google/common/util/concurrent/TimeoutFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  android/guava/src/com/google/common/util/concurrent/TrustedListenableFutureTask.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/GwtFluentFutureCatchingSpecialization.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  guava/src/com/google/common/util/concurrent/FluentFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  guava/src/com/google/common/util/concurrent/GwtFluentFutureCatchingSpecialization.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  guava/src/com/google/common/util/concurrent/ImmediateFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  guava/src/com/google/common/util/concurrent/TimeoutFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3238 ;  guava/src/com/google/common/util/concurrent/TrustedListenableFutureTask.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a gap method to Range which computes the range that lies between two ranges. This operation is particularly useful as a replacement for Joda Time s Interval.gap when migrating to Java Time which has no Interval class.  Joda Time: Interval interval = ...  Interval gap = interval.gap(interval)   Java Time (after this CL): Range<Instant> interval = ...  Range<Instant> gap = interval.gap(otherInterval)   RELNOTES=Adds a gap() method to Range that computes the Range that lies between them.  856f3bc431f7f145f35c6a42a07e1f7158964467  -------  <p> Use gradle formatting  Fixes https://github.com/google/guava/pull/3216  44abd86cf18afa64d1776b19a7bedabda395877f  -------  <p> Add missing @since tag.  https://google.github.io/guava/releases/21.0/api/diffs/changes/com.google.common.util.concurrent.Monitor.html#com.google.common.util.concurrent.Monitor.newGuard_added(java.util.function.BooleanSupplier)  Noticed because of https://github.com/google/guava/issues/2853#issuecomment-412360793  2e93145e51699a3e533c72db2633456f65542ad7  -------  <p> Add information about thread wakeup or scheduling delays to TimeoutExceptions thrown from guava futures.  b155e35606632c756e8db2c414145237a02ef9ca  -------  <p> Remove unnecessary local.  It is a holdover from when we used the value locally  rather than just returned it: 353ae349a24fb6c9b3e233ca03e4012761c7f3d8  94134ff0559baefa9ecc8df2a7c61945b6dfc523  -------  <p> Make delayed get() test more resilient to thread scheduling delays.  cc18f991f9934b4cd06d8d7fc0dbd1cc7ea1b83f  -------  <p> Switch FluentFuture and AbstractFuture in inheritance chain  RELNOTES=AbstractFuture doesn t expose FluentFuture APIs anymore.  4d8e0a81d78cea279441625adc96467a5b7d0879
3245 ; android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t allocate a CancellationException if cancellation causes are not enabled.  99393cf80ba7a5c861b564b3289debbf5dbbeb51
3245 ;  android/guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t allocate a CancellationException if cancellation causes are not enabled.  99393cf80ba7a5c861b564b3289debbf5dbbeb51
3245 ;  guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t allocate a CancellationException if cancellation causes are not enabled.  99393cf80ba7a5c861b564b3289debbf5dbbeb51
3245 ;  guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t allocate a CancellationException if cancellation causes are not enabled.  99393cf80ba7a5c861b564b3289debbf5dbbeb51
3247 ; android/guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Javadoc for MediaType.KML+KMZ+MBOX  Via https://github.com/google/guava/pull/3244  Original Author=Simon Legner (simon04)  7ac917c8d73768129499bd76fe41aa651391ba93  -------  <p> [guava concurrent] Inlined getDone() and getUninterruptibly() to break the source dependency from AbstractFuture to other classes in /util/concurrent.  b6726e17f9aa455ff5aa8ee7cee6089d37feb1ba
3247 ;  guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Javadoc for MediaType.KML+KMZ+MBOX  Via https://github.com/google/guava/pull/3244  Original Author=Simon Legner (simon04)  7ac917c8d73768129499bd76fe41aa651391ba93  -------  <p> [guava concurrent] Inlined getDone() and getUninterruptibly() to break the source dependency from AbstractFuture to other classes in /util/concurrent.  b6726e17f9aa455ff5aa8ee7cee6089d37feb1ba
3248 ; android/guava/src/com/google/common/net/InternetDomainName.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix parameter name in Javadoc   name  doesn t exist in the current context.  #CodeHealth  RELNOTES=Fix parameter name in Javadoc  9dbaf13b31c58b67ecc7d1ae3950534cdf04a344
3248 ;  guava/src/com/google/common/net/InternetDomainName.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix parameter name in Javadoc   name  doesn t exist in the current context.  #CodeHealth  RELNOTES=Fix parameter name in Javadoc  9dbaf13b31c58b67ecc7d1ae3950534cdf04a344
3254 ; android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add more validation to AbstractFuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  f380040f0041f94c83d24623c10f32de58d436c4  -------  <p> Suppress warnings on thread suspending test.  d51037de530cfe76884271f164b3fbe914493fdb  -------  <p> Suppress violation of MissingEqualsCall for EqualsTesterTest  given it quite legitimately fails to call #testEquals.  16e6fcebf07c0f2ce92411604bd3c9d03407374c  -------  <p> Automated rollback of changelist f380040f0041f94c83d24623c10f32de58d436c4  *** Reason for rollback ***  Test depends on incorrect Future implementation  *** Original change description ***  Add more validation to AbstractFuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  ***  47d758e506f838ebc14da5cb85b7f3150efe00fb  -------  <p> Update Public Suffix data.  The copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  5fafe7832579ab221804480a7545d486a14d083d
3254 ;  guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add more validation to AbstractFuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  f380040f0041f94c83d24623c10f32de58d436c4  -------  <p> Suppress warnings on thread suspending test.  d51037de530cfe76884271f164b3fbe914493fdb  -------  <p> Suppress violation of MissingEqualsCall for EqualsTesterTest  given it quite legitimately fails to call #testEquals.  16e6fcebf07c0f2ce92411604bd3c9d03407374c  -------  <p> Automated rollback of changelist f380040f0041f94c83d24623c10f32de58d436c4  *** Reason for rollback ***  Test depends on incorrect Future implementation  *** Original change description ***  Add more validation to AbstractFuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  ***  47d758e506f838ebc14da5cb85b7f3150efe00fb  -------  <p> Update Public Suffix data.  The copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  5fafe7832579ab221804480a7545d486a14d083d
3256 ; android/guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add more validation to AbstractFuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  49c73aaf7aef734e1f488aa0eb8d1b1bfebf5255  -------  <p> Bail early without a CancellationException in AbstractTransformFuture.  2ba14fdad20628de9eb7ea537af22e198d4d31a0
3256 ;  guava/src/com/google/common/util/concurrent/AbstractTransformFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add more validation to AbstractFuture when cancellation causes are enabled  so that it matches the behavior when they are disabled.  49c73aaf7aef734e1f488aa0eb8d1b1bfebf5255  -------  <p> Bail early without a CancellationException in AbstractTransformFuture.  2ba14fdad20628de9eb7ea537af22e198d4d31a0
3257 ; android/guava/src/com/google/common/util/concurrent/MoreExecutors.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Use TrustedFuture where possible  5f1436678dc0a28d78b8d8b4fa9e1d4b50313cdf
3257 ;  guava/src/com/google/common/util/concurrent/MoreExecutors.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Use TrustedFuture where possible  5f1436678dc0a28d78b8d8b4fa9e1d4b50313cdf
3261 ; android/guava/src/com/google/common/util/concurrent/Monitor.java ; Moe Sync ; nan
3261 ;  guava/src/com/google/common/util/concurrent/Monitor.java ; Moe Sync ; nan
3262 ; android/guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove trustedGetException()  tryInternalFastPathGetFailure gives access to similar fast-path  RELNOTES=N/A  9d9d4d253c377a41919542ac65c5fa7205bd7f52
3262 ;  android/guava/src/com/google/common/util/concurrent/AggregateFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove trustedGetException()  tryInternalFastPathGetFailure gives access to similar fast-path  RELNOTES=N/A  9d9d4d253c377a41919542ac65c5fa7205bd7f52
3262 ;  guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove trustedGetException()  tryInternalFastPathGetFailure gives access to similar fast-path  RELNOTES=N/A  9d9d4d253c377a41919542ac65c5fa7205bd7f52
3262 ;  guava/src/com/google/common/util/concurrent/AggregateFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove trustedGetException()  tryInternalFastPathGetFailure gives access to similar fast-path  RELNOTES=N/A  9d9d4d253c377a41919542ac65c5fa7205bd7f52
3270 ; android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java ; Moe Sync ; nan
3270 ;  android/guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java ; Moe Sync ; nan
3270 ;  guava-tests/test/com/google/common/util/concurrent/FuturesTest.java ; Moe Sync ; nan
3270 ;  guava/src/com/google/common/util/concurrent/AbstractCatchingFuture.java ; Moe Sync ; nan
3281 ; android/guava/src/com/google/common/util/concurrent/Futures.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3281 ;  guava/src/com/google/common/util/concurrent/Futures.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3298 ; android/guava/src/com/google/common/base/Suppliers.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  android/guava/src/com/google/common/cache/CacheBuilder.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  android/guava/src/com/google/common/collect/Queues.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  android/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  android/guava/src/com/google/common/util/concurrent/FluentFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  android/guava/src/com/google/common/util/concurrent/Futures.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  android/guava/src/com/google/common/util/concurrent/Monitor.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  android/guava/src/com/google/common/util/concurrent/MoreExecutors.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  android/guava/src/com/google/common/util/concurrent/RateLimiter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  android/guava/src/com/google/common/util/concurrent/Service.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  android/guava/src/com/google/common/util/concurrent/ServiceManager.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  android/guava/src/com/google/common/util/concurrent/TimeLimiter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  android/guava/src/com/google/common/util/concurrent/Uninterruptibles.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  guava/src/com/google/common/base/Suppliers.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  guava/src/com/google/common/cache/CacheBuilder.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  guava/src/com/google/common/collect/Queues.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  guava/src/com/google/common/util/concurrent/AbstractScheduledService.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  guava/src/com/google/common/util/concurrent/FluentFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  guava/src/com/google/common/util/concurrent/Futures.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  guava/src/com/google/common/util/concurrent/Monitor.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  guava/src/com/google/common/util/concurrent/MoreExecutors.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  guava/src/com/google/common/util/concurrent/RateLimiter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  guava/src/com/google/common/util/concurrent/Service.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  guava/src/com/google/common/util/concurrent/ServiceManager.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  guava/src/com/google/common/util/concurrent/TimeLimiter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3298 ;  guava/src/com/google/common/util/concurrent/Uninterruptibles.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable GoodTime API checker for Guava  753e1d5be8e1cc4c5ebaa080b095c7ef24117cba
3305 ; android/guava-testlib/test/com/google/common/testing/EqualsTesterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable goodtime-api for Guava (with some exceptions).  603ecca60c11d9a343423ae908bbc325521a7f50  -------  <p> *Builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.  This is in response to (and should resolve) https://github.com/google/guava/issues/3299.  9db70c6519ef588697a9c522ee36aea439f36241  -------  <p> Suppress warnings in classes that implement equals() without also implementing hashCode().  The contract for Object.hashCode states that if two objects are equal  then calling the hashCode() method on each of the two objects must produce the same result. Implementing equals() but not hashCode() causes broken behaviour when trying to store the object in a collection.  73f7e84a345805dc4fcc9927201e03fdbf408c5f
3305 ;  android/guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable goodtime-api for Guava (with some exceptions).  603ecca60c11d9a343423ae908bbc325521a7f50  -------  <p> *Builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.  This is in response to (and should resolve) https://github.com/google/guava/issues/3299.  9db70c6519ef588697a9c522ee36aea439f36241  -------  <p> Suppress warnings in classes that implement equals() without also implementing hashCode().  The contract for Object.hashCode states that if two objects are equal  then calling the hashCode() method on each of the two objects must produce the same result. Implementing equals() but not hashCode() causes broken behaviour when trying to store the object in a collection.  73f7e84a345805dc4fcc9927201e03fdbf408c5f
3305 ;  android/guava-testlib/test/com/google/common/testing/SerializableTesterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable goodtime-api for Guava (with some exceptions).  603ecca60c11d9a343423ae908bbc325521a7f50  -------  <p> *Builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.  This is in response to (and should resolve) https://github.com/google/guava/issues/3299.  9db70c6519ef588697a9c522ee36aea439f36241  -------  <p> Suppress warnings in classes that implement equals() without also implementing hashCode().  The contract for Object.hashCode states that if two objects are equal  then calling the hashCode() method on each of the two objects must produce the same result. Implementing equals() but not hashCode() causes broken behaviour when trying to store the object in a collection.  73f7e84a345805dc4fcc9927201e03fdbf408c5f
3305 ;  android/guava-testlib/test/com/google/common/testing/anotherpackage/ForwardingWrapperTesterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable goodtime-api for Guava (with some exceptions).  603ecca60c11d9a343423ae908bbc325521a7f50  -------  <p> *Builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.  This is in response to (and should resolve) https://github.com/google/guava/issues/3299.  9db70c6519ef588697a9c522ee36aea439f36241  -------  <p> Suppress warnings in classes that implement equals() without also implementing hashCode().  The contract for Object.hashCode states that if two objects are equal  then calling the hashCode() method on each of the two objects must produce the same result. Implementing equals() but not hashCode() causes broken behaviour when trying to store the object in a collection.  73f7e84a345805dc4fcc9927201e03fdbf408c5f
3305 ;  guava-testlib/test/com/google/common/testing/EqualsTesterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable goodtime-api for Guava (with some exceptions).  603ecca60c11d9a343423ae908bbc325521a7f50  -------  <p> *Builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.  This is in response to (and should resolve) https://github.com/google/guava/issues/3299.  9db70c6519ef588697a9c522ee36aea439f36241  -------  <p> Suppress warnings in classes that implement equals() without also implementing hashCode().  The contract for Object.hashCode states that if two objects are equal  then calling the hashCode() method on each of the two objects must produce the same result. Implementing equals() but not hashCode() causes broken behaviour when trying to store the object in a collection.  73f7e84a345805dc4fcc9927201e03fdbf408c5f
3305 ;  guava-testlib/test/com/google/common/testing/NullPointerTesterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable goodtime-api for Guava (with some exceptions).  603ecca60c11d9a343423ae908bbc325521a7f50  -------  <p> *Builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.  This is in response to (and should resolve) https://github.com/google/guava/issues/3299.  9db70c6519ef588697a9c522ee36aea439f36241  -------  <p> Suppress warnings in classes that implement equals() without also implementing hashCode().  The contract for Object.hashCode states that if two objects are equal  then calling the hashCode() method on each of the two objects must produce the same result. Implementing equals() but not hashCode() causes broken behaviour when trying to store the object in a collection.  73f7e84a345805dc4fcc9927201e03fdbf408c5f
3305 ;  guava-testlib/test/com/google/common/testing/SerializableTesterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable goodtime-api for Guava (with some exceptions).  603ecca60c11d9a343423ae908bbc325521a7f50  -------  <p> *Builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.  This is in response to (and should resolve) https://github.com/google/guava/issues/3299.  9db70c6519ef588697a9c522ee36aea439f36241  -------  <p> Suppress warnings in classes that implement equals() without also implementing hashCode().  The contract for Object.hashCode states that if two objects are equal  then calling the hashCode() method on each of the two objects must produce the same result. Implementing equals() but not hashCode() causes broken behaviour when trying to store the object in a collection.  73f7e84a345805dc4fcc9927201e03fdbf408c5f
3305 ;  guava-testlib/test/com/google/common/testing/anotherpackage/ForwardingWrapperTesterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Enable goodtime-api for Guava (with some exceptions).  603ecca60c11d9a343423ae908bbc325521a7f50  -------  <p> *Builder.java: add @param documentation for the node/value/edge types that clarifies their behavior.  This is in response to (and should resolve) https://github.com/google/guava/issues/3299.  9db70c6519ef588697a9c522ee36aea439f36241  -------  <p> Suppress warnings in classes that implement equals() without also implementing hashCode().  The contract for Object.hashCode states that if two objects are equal  then calling the hashCode() method on each of the two objects must produce the same result. Implementing equals() but not hashCode() causes broken behaviour when trying to store the object in a collection.  73f7e84a345805dc4fcc9927201e03fdbf408c5f
3306 ; android/guava/src/com/google/common/primitives/Chars.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Document that Chars.lexicographicalOrdering is different than Alphabetical ordering  which is more appropriate for user text.  5377565bc5be4bcce52a07952595b50c11c75f1a
3306 ;  guava/src/com/google/common/primitives/Chars.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Document that Chars.lexicographicalOrdering is different than Alphabetical ordering  which is more appropriate for user text.  5377565bc5be4bcce52a07952595b50c11c75f1a
3313 ; android/guava-tests/test/com/google/common/graph/PackageSanityTests.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct documentation for Splitter#withKeyValueSeparator(Splitter)  8340e5a770401494da5194e33153079754381006  -------  <p> Standardise message format for  duplicate key  IllegalArgumentException thrown from ImmutableTable.Builder.build().  Internally  ImmutableTable.Builder.build() delegates to two classes  {Dense Sparse}ImmutableTable and these currently have inconsistent error messages when a duplicate key is detected.  Prior to this CL  SparseImmutableTable had a message formatted like:    Duplicate value for row=%rowKey%  column=%columnKey%: %newValue%  %oldValue%  Whereas DenseImmutableTable had:    duplicate key: (%rowKey%  %columnKey%)   After this CL both classes will format the message like:    Duplicate key: (row=%rowKey%  column=%columnKey%)  values: [%newValue%  %oldValue%].   RELNOTES=Standardise message format for  duplicate key  IllegalArgumentException thrown from ImmutableTable.Builder.build().  96e21ae4f9fce2dc622658cff322b01f1721012e  -------  <p> common.graph PackageSanityTests: specify a default object for EndpointPair inputs. This should resolve a few internal flaky test issues  4210f57678985b51439b0fa37779ec5b369024b8
3313 ;  guava-tests/test/com/google/common/graph/PackageSanityTests.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct documentation for Splitter#withKeyValueSeparator(Splitter)  8340e5a770401494da5194e33153079754381006  -------  <p> Standardise message format for  duplicate key  IllegalArgumentException thrown from ImmutableTable.Builder.build().  Internally  ImmutableTable.Builder.build() delegates to two classes  {Dense Sparse}ImmutableTable and these currently have inconsistent error messages when a duplicate key is detected.  Prior to this CL  SparseImmutableTable had a message formatted like:    Duplicate value for row=%rowKey%  column=%columnKey%: %newValue%  %oldValue%  Whereas DenseImmutableTable had:    duplicate key: (%rowKey%  %columnKey%)   After this CL both classes will format the message like:    Duplicate key: (row=%rowKey%  column=%columnKey%)  values: [%newValue%  %oldValue%].   RELNOTES=Standardise message format for  duplicate key  IllegalArgumentException thrown from ImmutableTable.Builder.build().  96e21ae4f9fce2dc622658cff322b01f1721012e  -------  <p> common.graph PackageSanityTests: specify a default object for EndpointPair inputs. This should resolve a few internal flaky test issues  4210f57678985b51439b0fa37779ec5b369024b8
3318 ; android/guava/src/com/google/common/net/HttpHeaders.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address why users should prefer our immutable collections to things like Collections.emptyList().  2b9f74c16acbb9bbe18bc20e171996c79a476e31  -------  <p> Add the Origin-Trial HTTP response header.  229188e18e6504ffa9747e8bd00622d28e460477
3318 ;  guava/src/com/google/common/net/HttpHeaders.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address why users should prefer our immutable collections to things like Collections.emptyList().  2b9f74c16acbb9bbe18bc20e171996c79a476e31  -------  <p> Add the Origin-Trial HTTP response header.  229188e18e6504ffa9747e8bd00622d28e460477
3325 ; android/guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-testlib/test/com/google/common/testing/GcFinalizationTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-testlib/test/com/google/common/testing/TearDownStackTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/base/PreconditionsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/base/SuppliersTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/base/ThrowablesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/base/Utf8Test.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/base/VerifyTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/cache/AbstractLoadingCacheTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/cache/CacheLoadingTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/cache/NullCacheTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/collect/ArrayTableTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/collect/IteratorsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/eventbus/SubscriberTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/graph/PackageSanityTests.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/hash/BloomFilterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/io/BaseEncodingTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/io/ByteStreamsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/io/CountingInputStreamTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/io/LittleEndianDataInputStreamTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/io/ResourcesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/net/HostSpecifierTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/net/PercentEscaperTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/AbstractExecutionThreadServiceTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/AbstractIdleServiceTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/CallablesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/FuturesGetCheckedTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/FuturesGetDoneTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/ListenableFutureTester.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/SettableFutureTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  android/guava-tests/test/com/google/common/util/concurrent/TrustedListenableFutureTaskTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-gwt/test-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/TestPlatform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-testlib/test/com/google/common/testing/ClassSanityTesterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-testlib/test/com/google/common/testing/GcFinalizationTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-testlib/test/com/google/common/testing/TearDownStackTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/base/PreconditionsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/base/SuppliersTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/base/ThrowablesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/base/Utf8Test.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/base/VerifyTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/cache/AbstractLoadingCacheTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/cache/CacheLoadingTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/cache/NullCacheTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/collect/ArrayTableTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/collect/IteratorsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/eventbus/SubscriberTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/graph/PackageSanityTests.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/hash/BloomFilterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/io/BaseEncodingTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/io/ByteStreamsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/io/CountingInputStreamTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/io/LittleEndianDataInputStreamTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/io/ResourcesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/net/HostSpecifierTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/net/PercentEscaperTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/AbstractAbstractFutureTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/AbstractExecutionThreadServiceTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/AbstractIdleServiceTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/AbstractScheduledServiceTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/CallablesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/FluentFutureTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/FuturesGetCheckedTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/FuturesGetDoneTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/FuturesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/ListenableFutureTester.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/MoreExecutorsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/SettableFutureTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3325 ;  guava-tests/test/com/google/common/util/concurrent/TrustedListenableFutureTaskTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.
3327 ; android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Update Public Suffix data.  The copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  When that bug is not updated  the copy is updated 3 weeks before the Estimated Week of Stable:  https://www.chromium.org/developers/calendar#TOC-Estimated-Stable-Dates  648071f0c529c87cb28537488f27f971bce3c3c5
3327 ;  guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Update Public Suffix data.  The copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  When that bug is not updated  the copy is updated 3 weeks before the Estimated Week of Stable:  https://www.chromium.org/developers/calendar#TOC-Estimated-Stable-Dates  648071f0c529c87cb28537488f27f971bce3c3c5
3330 ; android/guava/src/com/google/common/collect/ImmutableClassToInstanceMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change  3e74359d4e0479bf6c461d031bb4761b06cf2e66  -------  <p> Add the @Immutable a few more classes. Both annotations enforce at compile-time that the annotated class meets the annotation’s requirements.  16001aae5eb8c4be0b7aa160970d22e6ef5b8ed0
3330 ;  guava/src/com/google/common/collect/ImmutableClassToInstanceMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change  3e74359d4e0479bf6c461d031bb4761b06cf2e66  -------  <p> Add the @Immutable a few more classes. Both annotations enforce at compile-time that the annotated class meets the annotation’s requirements.  16001aae5eb8c4be0b7aa160970d22e6ef5b8ed0
3332 ; android/guava/src/com/google/common/net/MediaType.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add missing documentation and @since tags to MediaType entries that were added after its initial relase of 12.0  b545d0ed1066906d238852f2f510132cbfcc4af8  -------  <p> Remove  Media type for  or similar phrasing for visible constants in the MediaType class.  172bb45c149601a52e45bff8b2e3aa409f66d658
3332 ;  guava/src/com/google/common/net/MediaType.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add missing documentation and @since tags to MediaType entries that were added after its initial relase of 12.0  b545d0ed1066906d238852f2f510132cbfcc4af8  -------  <p> Remove  Media type for  or similar phrasing for visible constants in the MediaType class.  172bb45c149601a52e45bff8b2e3aa409f66d658
3334 ; android/guava/src/com/google/common/io/Files.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Make example compile (i.e. supply a Path/File) and use depth first instead of breadth first.  Reason: Depth first is more common for file traversal.  RELNOTES=N/A  e7b80454e4d463af61fc81c3beb96b5e46b07312
3334 ;  guava/src/com/google/common/io/Files.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Make example compile (i.e. supply a Path/File) and use depth first instead of breadth first.  Reason: Depth first is more common for file traversal.  RELNOTES=N/A  e7b80454e4d463af61fc81c3beb96b5e46b07312
3334 ;  guava/src/com/google/common/io/MoreFiles.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Make example compile (i.e. supply a Path/File) and use depth first instead of breadth first.  Reason: Depth first is more common for file traversal.  RELNOTES=N/A  e7b80454e4d463af61fc81c3beb96b5e46b07312
3337 ; guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Use the primitive  number  type instead of the object counterpart  Number  to avoid a jscompiler error.  An upcoming change to J2CL that simplifies how casting logic is transpiled will make the code  (Number) (Object) 3  here transpile to just  /** @type {Number} */ (3)  and jscompiler will see the  invalid cast  since  3  is not  Number  in the closure type system.  065a831ca171767dcc73b7b74c996029a5f286e3
3339 ; android/guava/src/com/google/common/cache/AbstractCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add the application/jose and application/jose+json media types.  https://www.iana.org/assignments/media-types/application/jose https://www.iana.org/assignments/media-types/application/jose+json https://tools.ietf.org/html/rfc7515#section-9.2  RELNOTES=Add MediaType for  application/jose  and  application/jose+json .  e846cdf26bb7cc52b664e8f78e670222da88ac51  -------  <p> Suppress soon to be GoodTime errors ( time  is now considered a keyword).  2705b06e3c61dfe16eb14befe52de2c37d9e0313
3339 ;  android/guava/src/com/google/common/cache/CacheStats.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add the application/jose and application/jose+json media types.  https://www.iana.org/assignments/media-types/application/jose https://www.iana.org/assignments/media-types/application/jose+json https://tools.ietf.org/html/rfc7515#section-9.2  RELNOTES=Add MediaType for  application/jose  and  application/jose+json .  e846cdf26bb7cc52b664e8f78e670222da88ac51  -------  <p> Suppress soon to be GoodTime errors ( time  is now considered a keyword).  2705b06e3c61dfe16eb14befe52de2c37d9e0313
3339 ;  guava/src/com/google/common/cache/AbstractCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add the application/jose and application/jose+json media types.  https://www.iana.org/assignments/media-types/application/jose https://www.iana.org/assignments/media-types/application/jose+json https://tools.ietf.org/html/rfc7515#section-9.2  RELNOTES=Add MediaType for  application/jose  and  application/jose+json .  e846cdf26bb7cc52b664e8f78e670222da88ac51  -------  <p> Suppress soon to be GoodTime errors ( time  is now considered a keyword).  2705b06e3c61dfe16eb14befe52de2c37d9e0313
3339 ;  guava/src/com/google/common/cache/CacheStats.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add the application/jose and application/jose+json media types.  https://www.iana.org/assignments/media-types/application/jose https://www.iana.org/assignments/media-types/application/jose+json https://tools.ietf.org/html/rfc7515#section-9.2  RELNOTES=Add MediaType for  application/jose  and  application/jose+json .  e846cdf26bb7cc52b664e8f78e670222da88ac51  -------  <p> Suppress soon to be GoodTime errors ( time  is now considered a keyword).  2705b06e3c61dfe16eb14befe52de2c37d9e0313
3350 ; android/guava/src/com/google/common/io/Files.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Hide Files methods that are @Deprecated internally  cf8ea79dc50d7c0441045b020873561a4bb3791b
3350 ;  guava/src/com/google/common/io/Files.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Hide Files methods that are @Deprecated internally  cf8ea79dc50d7c0441045b020873561a4bb3791b
3359 ; android/guava/src/com/google/common/collect/Range.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Specify that Range static factories can throw ClassCastException if the provided endpoints are not mutually comparable.  Fixes https://github.com/google/guava/issues/3343  RELNOTES=Specify that Range static factories can throw ClassCastException if the provided endpoints are not mutually comparable.  7b8f8bd9aa435b742079eb7e3fc7d56f122c3bd4
3359 ;  guava/src/com/google/common/collect/Range.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Specify that Range static factories can throw ClassCastException if the provided endpoints are not mutually comparable.  Fixes https://github.com/google/guava/issues/3343  RELNOTES=Specify that Range static factories can throw ClassCastException if the provided endpoints are not mutually comparable.  7b8f8bd9aa435b742079eb7e3fc7d56f122c3bd4
3393 ;  guava-gwt/src-super/java/lang/super/java/lang/InterruptedException.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/Callable.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/CancellationException.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/ConcurrentHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/ConcurrentMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/Delayed.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/ExecutionException.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/Executor.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/Executors.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/Future.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/RejectedExecutionException.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/RunnableFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/ScheduledFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/TimeUnit.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/TimeoutException.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/atomic/AtomicBoolean.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/atomic/AtomicInteger.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3393 ;  guava-gwt/src-super/java/util/super/java/util/concurrent/atomic/AtomicLong.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Report-To header.  https://www.w3.org/TR/reporting/  504978f1032ab9b6284ffadd1f94bdb7c870557a  -------  <p> Remove unused imports and warnings.  Fixes #3356  f0945a2ca741ead2a435cf52ddae2217763cc092  -------  <p> Reformat with google-java-format  RELNOTES=N/A  7809097021927058b21523e7b4d24d1f7fdb91b8  -------  <p> Add missing @Override annotations  8843b6ca39c8baddcf01991ea34ad91f87b30d82  -------  <p> Document the retention of listeners added to Guava implementations of ListenableFuture.  RELNOTES=Document the retention of listeners added to Guava implementations of  ListenableFuture .  f6287e1b85eb4daf5678d252aaaf215a82f4fd2d  -------  <p> Reformat with google-java-format  RELNOTES=N/A  28cff42bc92b7685937c5771868167e0c03155d3  -------  <p> Name the method parameter  unused  for ImmutableSortedSet.readObject(ObjectInputStream) (so the static analysis doesn t complain)  0967c796d6e6be72b0d9e8d68af66d6a7b524b54  -------  <p> Remove @Beta from APIs:  collect - most Collectors (aside from BloomFilter and ImmutableRange*  as those whole classes are @Beta (though I did remove the redundant @Beta annotation from the Collector-returning methods for clarity)) - Maps: asConverter  immutableEnumMap - MultimapBuilder - Streams: stream(Iterable)  concat  io - ByteStreams: copy  toByteArray - CharStreams: copy  toString - Files: as(Char|Byte)(Source|Sink)  util.concurrent - Futures: addCallback  getDone  getUnchecked  immediateCancelledFuture  immediateFailedFuture  immediateFuture - ListeningScheduledExecutorService - Uninterruptibles  other - HtmlEscapers - Splitter.splitToList - Ticker  Fixes https://github.com/google/guava/pull/3287 Fixes https://github.com/google/guava/issues/3251 (aside from ImmutableRange*  but those whole classes are @Beta  anyway) Addresses the main concerns of https://github.com/google/guava/issues/3285 but doesn t cover the broader request Fixes https://github.com/google/guava/issues/3340 Partially addresses https://github.com/google/guava/issues/3239  RELNOTES=Removed  @Beta  from a number of frequently used APIs.  068cb9005cc701ed98e31df9b56117b86df21d0f  -------  <p> Add some known UTF-8 hash values to Murmur3_32 tests. UTF-8 is more comparable between platforms than relying on Java s internal encoding.  e7ec53773bcf89533496de1611ac4dddd876fb54  -------  <p> Remove @CanIgnoreReturnValue from Ordering.sortedCopy() and immutableSortedCopy().  RELNOTES=Remove  @CanIgnoreReturnValue  from  Ordering.sortedCopy()  and  immutableSortedCopy() .  da2895f5c3a55b84771488e0f8a38c67e0f63543  -------  <p> Make a constructor private.  (I m looking into EnumMap stuff for other reasons  and I got to wondering if this was used outside the file. Nope.)  b1933ce7d8c8ff0fac90b494b33ab8af159e1906  -------  <p> Delete WellBehavedMap.  The bug it worked around was fixed in Java 7: https://bugs.java.com/bugdatabase/view_bug.do?bug_id=6312706  And I don t believe it was ever present under Android: https://android.googlesource.com/platform/libcore/+/fdb2704414a9ed92394ada0d1395e4db86889465/luni/src/main/java/java/util/EnumMap.java#146  I haven t looked for the absolute first version ever of GWT  but the still very old GWT file doesn t have the bug  either.  Deleting this class will simplify some work I m doing around our EnumMap usage for j2cl.  2115c74c21ab47c3a41c2fb73a16aa6d051bf784  -------  <p> Internal GWT change  1d49ade94c3e7d2c056893a630739c8a6b897f66  -------  <p> Automated rollback of commit 1d49ade94c3e7d2c056893a630739c8a6b897f66  *** Original change description ***  Internal GWT change  ***  46a2123f4b077840b4b466fe6344579ac4b52bad  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.keySet to prevent crashes on iOS.  TESTED=Created a map inside a autorelease pool and saved a reference to the keyset. Checked that the keyset functions correctly outside the autorelease pool. Checked that both the keyset and the map are deallocated by the autorelease pool when not holding a reference to the keyset. Did this test with both ImmutableMap.of(<2 entries>) and ImmutableBiMap.of(<2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.keySet() .  76c954518752acb36256009840ed004eef412291  -------  <p> Annotate checkNotNull s input and output as @NonNull.  We don t want to go down the road of annotating most things @NonNull  as we eventually want to use tools that assume that that s the default. However  it s pretty weird for checkNotNull() to return a @Nullable value in the minds of some tools  so let s annotate just that method and see how it goes.  RELNOTES=Annotated  checkNotNull  s input and output as  @NonNull .  63d0b31e62b4d4da33ec61a1d84d026391ffd126  -------  <p> Document the JDK 9+ alternative to  Maps#immutableEntry   Fixes #3385  998858f9abd06b3774bf72a3b4f2fdaa18a88ceb  -------  <p> Modernize book reference.  7eafede7552490351956e8038bb07596b227e3ef  -------  <p> Create constants for the SourceMap header  None of the tests like this header name  so each required some workarounds.  RELNOTES=Add the SourceMap header to HttpHeaders  81f191e80265001b3dc8b4544cd0bb277a05ba7b  -------  <p> Internal GWT change  db6ada7b4f9db07b8de6ec549ca7e2ab6079b354  -------  <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.values to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the values collection. Checked that the values collection functions correctly outside the autorelease pool. Checked that both the values collection and the map are deallocated by the autorelease pool when not holding a strong reference to the values collection. Did this test with ImmutableMap.of(<2 entries>) and ImmutableMap.copyOf(<EnumMap with 2 entries>).  RELNOTES=J2ObjC: Fixes crashes from use of  ImmutableMap.values() .  05ac56322f6c3a4b0109aab2b46671716f109cb5  -------  <p> Fix Javadoc breakage under JDK11 canary.  https://bugs.openjdk.java.net/browse/JDK-8212233 https://bugs.openjdk.java.net/browse/JDK-8193030  d8bdef58d54712286d86a9146778d25614fd3c9a  -------  <p> Remove GWT emulations that are no longer needed as of GWT 2.8.2.  RELNOTES=Removed GWT emulations that are no longer needed as of GWT 2.8.2. This means that GWT projects that use this version of Guava must use GWT 2.8.2 or higher.  be02df5ad4a530d5cb206a7042de8c2f5dbbff32
3399 ; android/guava/src/com/google/common/collect/ImmutableMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.entrySet() to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the entry set. Checked that the entry set functions correctly outside the autorelease pool. Checked that both the entry set and the are deallocated by the autorelease pool when not holding a strong reference to the entry set. Did this test with the following constructions to cover all entry set implementations: - ImmutableMap.of(<2 entries>) - ImmutableMap.copyOf(<EnumMap with 2 entries>) - ImmutableSortedMap.of(<2 entries>) - ImmutableBiMap.of(<2 entries>).inverse()  RELNOTES=J2ObjC: Fixes crashes from use of ImmutableMap.entrySet().  c4eef3f4fa8f30fef8061d3ea2197fb427ee3cfd
3399 ;  android/guava/src/com/google/common/collect/ImmutableMapEntrySet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.entrySet() to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the entry set. Checked that the entry set functions correctly outside the autorelease pool. Checked that both the entry set and the are deallocated by the autorelease pool when not holding a strong reference to the entry set. Did this test with the following constructions to cover all entry set implementations: - ImmutableMap.of(<2 entries>) - ImmutableMap.copyOf(<EnumMap with 2 entries>) - ImmutableSortedMap.of(<2 entries>) - ImmutableBiMap.of(<2 entries>).inverse()  RELNOTES=J2ObjC: Fixes crashes from use of ImmutableMap.entrySet().  c4eef3f4fa8f30fef8061d3ea2197fb427ee3cfd
3399 ;  android/guava/src/com/google/common/collect/ImmutableSortedMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.entrySet() to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the entry set. Checked that the entry set functions correctly outside the autorelease pool. Checked that both the entry set and the are deallocated by the autorelease pool when not holding a strong reference to the entry set. Did this test with the following constructions to cover all entry set implementations: - ImmutableMap.of(<2 entries>) - ImmutableMap.copyOf(<EnumMap with 2 entries>) - ImmutableSortedMap.of(<2 entries>) - ImmutableBiMap.of(<2 entries>).inverse()  RELNOTES=J2ObjC: Fixes crashes from use of ImmutableMap.entrySet().  c4eef3f4fa8f30fef8061d3ea2197fb427ee3cfd
3399 ;  guava/src/com/google/common/collect/ImmutableMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.entrySet() to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the entry set. Checked that the entry set functions correctly outside the autorelease pool. Checked that both the entry set and the are deallocated by the autorelease pool when not holding a strong reference to the entry set. Did this test with the following constructions to cover all entry set implementations: - ImmutableMap.of(<2 entries>) - ImmutableMap.copyOf(<EnumMap with 2 entries>) - ImmutableSortedMap.of(<2 entries>) - ImmutableBiMap.of(<2 entries>).inverse()  RELNOTES=J2ObjC: Fixes crashes from use of ImmutableMap.entrySet().  c4eef3f4fa8f30fef8061d3ea2197fb427ee3cfd
3399 ;  guava/src/com/google/common/collect/ImmutableMapEntrySet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.entrySet() to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the entry set. Checked that the entry set functions correctly outside the autorelease pool. Checked that both the entry set and the are deallocated by the autorelease pool when not holding a strong reference to the entry set. Did this test with the following constructions to cover all entry set implementations: - ImmutableMap.of(<2 entries>) - ImmutableMap.copyOf(<EnumMap with 2 entries>) - ImmutableSortedMap.of(<2 entries>) - ImmutableBiMap.of(<2 entries>).inverse()  RELNOTES=J2ObjC: Fixes crashes from use of ImmutableMap.entrySet().  c4eef3f4fa8f30fef8061d3ea2197fb427ee3cfd
3399 ;  guava/src/com/google/common/collect/ImmutableSortedMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.entrySet() to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the entry set. Checked that the entry set functions correctly outside the autorelease pool. Checked that both the entry set and the are deallocated by the autorelease pool when not holding a strong reference to the entry set. Did this test with the following constructions to cover all entry set implementations: - ImmutableMap.of(<2 entries>) - ImmutableMap.copyOf(<EnumMap with 2 entries>) - ImmutableSortedMap.of(<2 entries>) - ImmutableBiMap.of(<2 entries>).inverse()  RELNOTES=J2ObjC: Fixes crashes from use of ImmutableMap.entrySet().  c4eef3f4fa8f30fef8061d3ea2197fb427ee3cfd
3399 ;  guava/src/com/google/common/collect/RegularImmutableBiMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Use J2ObjC s @RetainedWith annotation instead of @Weak on ImmutableMap.entrySet() to prevent crashes on iOS.  TESTED=Created a map inside an autorelease pool and saved a reference to the entry set. Checked that the entry set functions correctly outside the autorelease pool. Checked that both the entry set and the are deallocated by the autorelease pool when not holding a strong reference to the entry set. Did this test with the following constructions to cover all entry set implementations: - ImmutableMap.of(<2 entries>) - ImmutableMap.copyOf(<EnumMap with 2 entries>) - ImmutableSortedMap.of(<2 entries>) - ImmutableBiMap.of(<2 entries>).inverse()  RELNOTES=J2ObjC: Fixes crashes from use of ImmutableMap.entrySet().  c4eef3f4fa8f30fef8061d3ea2197fb427ee3cfd
3404 ; android/guava-tests/test/com/google/common/collect/CompactHashMapTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  android/guava-tests/test/com/google/common/collect/CompactHashSetTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  android/guava-tests/test/com/google/common/collect/CompactLinkedHashMapTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  android/guava-tests/test/com/google/common/collect/CompactLinkedHashSetTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  android/guava/src/com/google/common/collect/CompactHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  android/guava/src/com/google/common/collect/CompactHashSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  android/guava/src/com/google/common/collect/CompactLinkedHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  android/guava/src/com/google/common/collect/CompactLinkedHashSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  guava-tests/test/com/google/common/collect/CompactHashMapTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  guava-tests/test/com/google/common/collect/CompactHashSetTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  guava-tests/test/com/google/common/collect/CompactLinkedHashMapTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  guava-tests/test/com/google/common/collect/CompactLinkedHashSetTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  guava/src/com/google/common/collect/CompactHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  guava/src/com/google/common/collect/CompactHashSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  guava/src/com/google/common/collect/CompactLinkedHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3404 ;  guava/src/com/google/common/collect/CompactLinkedHashSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Lazily allocate CompactHash backing arrays on first write  Empty maps/sets are extremely common. Lazily allocating the backing arrays can save hundreds of KB of heap and reduce load on the garbage collector.  While here: - Use serialized size to pre-size the arrays - Respect ordering during serialization (without using an iterator) - Consistently mark unused links as UNSET  Memory savings before first write (bytes): - CompactHashMap.create(): 184 -> 64 - CompactLinkedHashMap.create(): 240 -> 80 - CompactHashSet.create(): 136 -> 40 - CompactLinkedHashSet.create(): 200 -> 56 - CompactHashMap.createWithExpectedSize(0): 136 -> 64 - CompactLinkedHashMap.createWithExpectedSize(0): 168 -> 80 - CompactHashSet.createWithExpectedSize(0): 96 -> 40 - CompactLinkedHashSet.createWithExpectedSize(0): 144 -> 56  801e018184d2f5196c80e2b2168a883c093ffe5a
3428 ; android/guava-tests/test/com/google/common/graph/ImmutableNetworkTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add (unimplemented) API for GrapbBuilder.immutable() and ImmutableGraph.Builder.  50eddd03e92dc2855a3ae05c3b8d93de18e6bddd  -------  <p> Adds constants for prefetch headers.  Of note  X-Purpose is NOT just a google specific header as previously defined.  https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ#As_a_server_admin.2C_can_I_distinguish_prefetch_requests_from_normal_requests.3F  https://developers.google.com/web/updates/2018/07/nostate-prefetch  RELNOTES=Adds constants for prefetch headers.  966879ff982425a4418341c9ccbe9a7249bb0a4d  -------  <p> Implement GraphBuilder.immutable().  RELNOTES= graph : Added  GraphBuilder.immutable()  for building immutable graphs in a fluent way  7998dc473efbfa7ec7d57ece8b4c527fa9e11b9b  -------  <p> Add FluentFuture.from(FluentFuture) factory method.  This follows the steps of FluentIterable.from(FluentIterable) and other “migration aid” methods that are deprecated from inception and are just here to point out code that is no longer needed.  RELNOTES=Added deprecated  FluentFuture.from(FluentFuture)  to point out redundant code.  2d060028e9d99f798a29fd1ec09c844f4fc58a1d  -------  <p> Use byte[]/short[]/int[] for hashtable depending on size  The hashtable is stored as an Object and cast to the correct type using instanceof checks.  Memory: byte[] sizes (2-89): 12-41% better (average: 32% better) short[] sizes (90-22937): 20-29% better (average: 24% better) int[] sizes (22938+): unchanged  Runtime on a Pixel 2: createAndPopulate: 9% better to 6% worse (average: 4.3% better) get: 1% better to 8% worse (average: 3.5% worse) iterateWithKeySetAndGet: 9% better to 13% worse (average: 3.2% worse) iterateWithEntrySet: unchanged (doesn t use hashtable)  Effects on ImmutableMapProGuard: 59105 bytes => 60369 bytes (+2.1%) 21 classes => 21 classes (0%) 200 methods => 201 methods (+0.5%)  Effects on ImmutableBiMapProGuard: 68893 bytes => 70235 bytes (+1.9%) 25 classes => 25 classes (0%) 232 methods => 233 methods (+0.4%)  b1a11396bd731ddcd1efd60850b0aa004c9f874b  -------  <p> Add ValueGraphBuilder.immutable().  RELNOTES= graph : Added  ValueGraphBuilder.immutable()  for building immutable value graphs in a fluent way  79e0a573fc00db17f0916426ce2107d3bf63d481  -------  <p> Remove unnecessary Type parameter  6f0b66d172a9532aaa82dac8a1add496c916ad97  -------  <p> Add NetworkBuilder.immutable().  RELNOTES= graph : Added  NetworkBuilder.immutable()  for building immutable networks in a fluent way  a812af75ee14d8cb01a1a180b2c369c2f16311a3
3428 ;  android/guava/src/com/google/common/graph/ImmutableNetwork.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add (unimplemented) API for GrapbBuilder.immutable() and ImmutableGraph.Builder.  50eddd03e92dc2855a3ae05c3b8d93de18e6bddd  -------  <p> Adds constants for prefetch headers.  Of note  X-Purpose is NOT just a google specific header as previously defined.  https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ#As_a_server_admin.2C_can_I_distinguish_prefetch_requests_from_normal_requests.3F  https://developers.google.com/web/updates/2018/07/nostate-prefetch  RELNOTES=Adds constants for prefetch headers.  966879ff982425a4418341c9ccbe9a7249bb0a4d  -------  <p> Implement GraphBuilder.immutable().  RELNOTES= graph : Added  GraphBuilder.immutable()  for building immutable graphs in a fluent way  7998dc473efbfa7ec7d57ece8b4c527fa9e11b9b  -------  <p> Add FluentFuture.from(FluentFuture) factory method.  This follows the steps of FluentIterable.from(FluentIterable) and other “migration aid” methods that are deprecated from inception and are just here to point out code that is no longer needed.  RELNOTES=Added deprecated  FluentFuture.from(FluentFuture)  to point out redundant code.  2d060028e9d99f798a29fd1ec09c844f4fc58a1d  -------  <p> Use byte[]/short[]/int[] for hashtable depending on size  The hashtable is stored as an Object and cast to the correct type using instanceof checks.  Memory: byte[] sizes (2-89): 12-41% better (average: 32% better) short[] sizes (90-22937): 20-29% better (average: 24% better) int[] sizes (22938+): unchanged  Runtime on a Pixel 2: createAndPopulate: 9% better to 6% worse (average: 4.3% better) get: 1% better to 8% worse (average: 3.5% worse) iterateWithKeySetAndGet: 9% better to 13% worse (average: 3.2% worse) iterateWithEntrySet: unchanged (doesn t use hashtable)  Effects on ImmutableMapProGuard: 59105 bytes => 60369 bytes (+2.1%) 21 classes => 21 classes (0%) 200 methods => 201 methods (+0.5%)  Effects on ImmutableBiMapProGuard: 68893 bytes => 70235 bytes (+1.9%) 25 classes => 25 classes (0%) 232 methods => 233 methods (+0.4%)  b1a11396bd731ddcd1efd60850b0aa004c9f874b  -------  <p> Add ValueGraphBuilder.immutable().  RELNOTES= graph : Added  ValueGraphBuilder.immutable()  for building immutable value graphs in a fluent way  79e0a573fc00db17f0916426ce2107d3bf63d481  -------  <p> Remove unnecessary Type parameter  6f0b66d172a9532aaa82dac8a1add496c916ad97  -------  <p> Add NetworkBuilder.immutable().  RELNOTES= graph : Added  NetworkBuilder.immutable()  for building immutable networks in a fluent way  a812af75ee14d8cb01a1a180b2c369c2f16311a3
3428 ;  android/guava/src/com/google/common/graph/NetworkBuilder.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add (unimplemented) API for GrapbBuilder.immutable() and ImmutableGraph.Builder.  50eddd03e92dc2855a3ae05c3b8d93de18e6bddd  -------  <p> Adds constants for prefetch headers.  Of note  X-Purpose is NOT just a google specific header as previously defined.  https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ#As_a_server_admin.2C_can_I_distinguish_prefetch_requests_from_normal_requests.3F  https://developers.google.com/web/updates/2018/07/nostate-prefetch  RELNOTES=Adds constants for prefetch headers.  966879ff982425a4418341c9ccbe9a7249bb0a4d  -------  <p> Implement GraphBuilder.immutable().  RELNOTES= graph : Added  GraphBuilder.immutable()  for building immutable graphs in a fluent way  7998dc473efbfa7ec7d57ece8b4c527fa9e11b9b  -------  <p> Add FluentFuture.from(FluentFuture) factory method.  This follows the steps of FluentIterable.from(FluentIterable) and other “migration aid” methods that are deprecated from inception and are just here to point out code that is no longer needed.  RELNOTES=Added deprecated  FluentFuture.from(FluentFuture)  to point out redundant code.  2d060028e9d99f798a29fd1ec09c844f4fc58a1d  -------  <p> Use byte[]/short[]/int[] for hashtable depending on size  The hashtable is stored as an Object and cast to the correct type using instanceof checks.  Memory: byte[] sizes (2-89): 12-41% better (average: 32% better) short[] sizes (90-22937): 20-29% better (average: 24% better) int[] sizes (22938+): unchanged  Runtime on a Pixel 2: createAndPopulate: 9% better to 6% worse (average: 4.3% better) get: 1% better to 8% worse (average: 3.5% worse) iterateWithKeySetAndGet: 9% better to 13% worse (average: 3.2% worse) iterateWithEntrySet: unchanged (doesn t use hashtable)  Effects on ImmutableMapProGuard: 59105 bytes => 60369 bytes (+2.1%) 21 classes => 21 classes (0%) 200 methods => 201 methods (+0.5%)  Effects on ImmutableBiMapProGuard: 68893 bytes => 70235 bytes (+1.9%) 25 classes => 25 classes (0%) 232 methods => 233 methods (+0.4%)  b1a11396bd731ddcd1efd60850b0aa004c9f874b  -------  <p> Add ValueGraphBuilder.immutable().  RELNOTES= graph : Added  ValueGraphBuilder.immutable()  for building immutable value graphs in a fluent way  79e0a573fc00db17f0916426ce2107d3bf63d481  -------  <p> Remove unnecessary Type parameter  6f0b66d172a9532aaa82dac8a1add496c916ad97  -------  <p> Add NetworkBuilder.immutable().  RELNOTES= graph : Added  NetworkBuilder.immutable()  for building immutable networks in a fluent way  a812af75ee14d8cb01a1a180b2c369c2f16311a3
3428 ;  guava-tests/test/com/google/common/graph/ImmutableNetworkTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add (unimplemented) API for GrapbBuilder.immutable() and ImmutableGraph.Builder.  50eddd03e92dc2855a3ae05c3b8d93de18e6bddd  -------  <p> Adds constants for prefetch headers.  Of note  X-Purpose is NOT just a google specific header as previously defined.  https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ#As_a_server_admin.2C_can_I_distinguish_prefetch_requests_from_normal_requests.3F  https://developers.google.com/web/updates/2018/07/nostate-prefetch  RELNOTES=Adds constants for prefetch headers.  966879ff982425a4418341c9ccbe9a7249bb0a4d  -------  <p> Implement GraphBuilder.immutable().  RELNOTES= graph : Added  GraphBuilder.immutable()  for building immutable graphs in a fluent way  7998dc473efbfa7ec7d57ece8b4c527fa9e11b9b  -------  <p> Add FluentFuture.from(FluentFuture) factory method.  This follows the steps of FluentIterable.from(FluentIterable) and other “migration aid” methods that are deprecated from inception and are just here to point out code that is no longer needed.  RELNOTES=Added deprecated  FluentFuture.from(FluentFuture)  to point out redundant code.  2d060028e9d99f798a29fd1ec09c844f4fc58a1d  -------  <p> Use byte[]/short[]/int[] for hashtable depending on size  The hashtable is stored as an Object and cast to the correct type using instanceof checks.  Memory: byte[] sizes (2-89): 12-41% better (average: 32% better) short[] sizes (90-22937): 20-29% better (average: 24% better) int[] sizes (22938+): unchanged  Runtime on a Pixel 2: createAndPopulate: 9% better to 6% worse (average: 4.3% better) get: 1% better to 8% worse (average: 3.5% worse) iterateWithKeySetAndGet: 9% better to 13% worse (average: 3.2% worse) iterateWithEntrySet: unchanged (doesn t use hashtable)  Effects on ImmutableMapProGuard: 59105 bytes => 60369 bytes (+2.1%) 21 classes => 21 classes (0%) 200 methods => 201 methods (+0.5%)  Effects on ImmutableBiMapProGuard: 68893 bytes => 70235 bytes (+1.9%) 25 classes => 25 classes (0%) 232 methods => 233 methods (+0.4%)  b1a11396bd731ddcd1efd60850b0aa004c9f874b  -------  <p> Add ValueGraphBuilder.immutable().  RELNOTES= graph : Added  ValueGraphBuilder.immutable()  for building immutable value graphs in a fluent way  79e0a573fc00db17f0916426ce2107d3bf63d481  -------  <p> Remove unnecessary Type parameter  6f0b66d172a9532aaa82dac8a1add496c916ad97  -------  <p> Add NetworkBuilder.immutable().  RELNOTES= graph : Added  NetworkBuilder.immutable()  for building immutable networks in a fluent way  a812af75ee14d8cb01a1a180b2c369c2f16311a3
3428 ;  guava/src/com/google/common/graph/ImmutableNetwork.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add (unimplemented) API for GrapbBuilder.immutable() and ImmutableGraph.Builder.  50eddd03e92dc2855a3ae05c3b8d93de18e6bddd  -------  <p> Adds constants for prefetch headers.  Of note  X-Purpose is NOT just a google specific header as previously defined.  https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ#As_a_server_admin.2C_can_I_distinguish_prefetch_requests_from_normal_requests.3F  https://developers.google.com/web/updates/2018/07/nostate-prefetch  RELNOTES=Adds constants for prefetch headers.  966879ff982425a4418341c9ccbe9a7249bb0a4d  -------  <p> Implement GraphBuilder.immutable().  RELNOTES= graph : Added  GraphBuilder.immutable()  for building immutable graphs in a fluent way  7998dc473efbfa7ec7d57ece8b4c527fa9e11b9b  -------  <p> Add FluentFuture.from(FluentFuture) factory method.  This follows the steps of FluentIterable.from(FluentIterable) and other “migration aid” methods that are deprecated from inception and are just here to point out code that is no longer needed.  RELNOTES=Added deprecated  FluentFuture.from(FluentFuture)  to point out redundant code.  2d060028e9d99f798a29fd1ec09c844f4fc58a1d  -------  <p> Use byte[]/short[]/int[] for hashtable depending on size  The hashtable is stored as an Object and cast to the correct type using instanceof checks.  Memory: byte[] sizes (2-89): 12-41% better (average: 32% better) short[] sizes (90-22937): 20-29% better (average: 24% better) int[] sizes (22938+): unchanged  Runtime on a Pixel 2: createAndPopulate: 9% better to 6% worse (average: 4.3% better) get: 1% better to 8% worse (average: 3.5% worse) iterateWithKeySetAndGet: 9% better to 13% worse (average: 3.2% worse) iterateWithEntrySet: unchanged (doesn t use hashtable)  Effects on ImmutableMapProGuard: 59105 bytes => 60369 bytes (+2.1%) 21 classes => 21 classes (0%) 200 methods => 201 methods (+0.5%)  Effects on ImmutableBiMapProGuard: 68893 bytes => 70235 bytes (+1.9%) 25 classes => 25 classes (0%) 232 methods => 233 methods (+0.4%)  b1a11396bd731ddcd1efd60850b0aa004c9f874b  -------  <p> Add ValueGraphBuilder.immutable().  RELNOTES= graph : Added  ValueGraphBuilder.immutable()  for building immutable value graphs in a fluent way  79e0a573fc00db17f0916426ce2107d3bf63d481  -------  <p> Remove unnecessary Type parameter  6f0b66d172a9532aaa82dac8a1add496c916ad97  -------  <p> Add NetworkBuilder.immutable().  RELNOTES= graph : Added  NetworkBuilder.immutable()  for building immutable networks in a fluent way  a812af75ee14d8cb01a1a180b2c369c2f16311a3
3428 ;  guava/src/com/google/common/graph/NetworkBuilder.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add (unimplemented) API for GrapbBuilder.immutable() and ImmutableGraph.Builder.  50eddd03e92dc2855a3ae05c3b8d93de18e6bddd  -------  <p> Adds constants for prefetch headers.  Of note  X-Purpose is NOT just a google specific header as previously defined.  https://developer.mozilla.org/en-US/docs/Web/HTTP/Link_prefetching_FAQ#As_a_server_admin.2C_can_I_distinguish_prefetch_requests_from_normal_requests.3F  https://developers.google.com/web/updates/2018/07/nostate-prefetch  RELNOTES=Adds constants for prefetch headers.  966879ff982425a4418341c9ccbe9a7249bb0a4d  -------  <p> Implement GraphBuilder.immutable().  RELNOTES= graph : Added  GraphBuilder.immutable()  for building immutable graphs in a fluent way  7998dc473efbfa7ec7d57ece8b4c527fa9e11b9b  -------  <p> Add FluentFuture.from(FluentFuture) factory method.  This follows the steps of FluentIterable.from(FluentIterable) and other “migration aid” methods that are deprecated from inception and are just here to point out code that is no longer needed.  RELNOTES=Added deprecated  FluentFuture.from(FluentFuture)  to point out redundant code.  2d060028e9d99f798a29fd1ec09c844f4fc58a1d  -------  <p> Use byte[]/short[]/int[] for hashtable depending on size  The hashtable is stored as an Object and cast to the correct type using instanceof checks.  Memory: byte[] sizes (2-89): 12-41% better (average: 32% better) short[] sizes (90-22937): 20-29% better (average: 24% better) int[] sizes (22938+): unchanged  Runtime on a Pixel 2: createAndPopulate: 9% better to 6% worse (average: 4.3% better) get: 1% better to 8% worse (average: 3.5% worse) iterateWithKeySetAndGet: 9% better to 13% worse (average: 3.2% worse) iterateWithEntrySet: unchanged (doesn t use hashtable)  Effects on ImmutableMapProGuard: 59105 bytes => 60369 bytes (+2.1%) 21 classes => 21 classes (0%) 200 methods => 201 methods (+0.5%)  Effects on ImmutableBiMapProGuard: 68893 bytes => 70235 bytes (+1.9%) 25 classes => 25 classes (0%) 232 methods => 233 methods (+0.4%)  b1a11396bd731ddcd1efd60850b0aa004c9f874b  -------  <p> Add ValueGraphBuilder.immutable().  RELNOTES= graph : Added  ValueGraphBuilder.immutable()  for building immutable value graphs in a fluent way  79e0a573fc00db17f0916426ce2107d3bf63d481  -------  <p> Remove unnecessary Type parameter  6f0b66d172a9532aaa82dac8a1add496c916ad97  -------  <p> Add NetworkBuilder.immutable().  RELNOTES= graph : Added  NetworkBuilder.immutable()  for building immutable networks in a fluent way  a812af75ee14d8cb01a1a180b2c369c2f16311a3
3431 ; android/guava/src/com/google/common/collect/CompactHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove unused configuration of load factor  This allows removal of loadFactor/threshold which saves 8 bytes per object.  While here: - Reduce diff between Map/Set classes - Make base forEach() work for Linked classes  Shallow object size (bytes): - CompactHashMap: 64 -> 56 - CompactLinkedHashMap: 80 -> 72 - CompactHashSet: 40 -> 32 - CompactLinkedHashSet: 56 -> 48  062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7
3431 ;  android/guava/src/com/google/common/collect/CompactHashSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove unused configuration of load factor  This allows removal of loadFactor/threshold which saves 8 bytes per object.  While here: - Reduce diff between Map/Set classes - Make base forEach() work for Linked classes  Shallow object size (bytes): - CompactHashMap: 64 -> 56 - CompactLinkedHashMap: 80 -> 72 - CompactHashSet: 40 -> 32 - CompactLinkedHashSet: 56 -> 48  062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7
3431 ;  android/guava/src/com/google/common/collect/CompactLinkedHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove unused configuration of load factor  This allows removal of loadFactor/threshold which saves 8 bytes per object.  While here: - Reduce diff between Map/Set classes - Make base forEach() work for Linked classes  Shallow object size (bytes): - CompactHashMap: 64 -> 56 - CompactLinkedHashMap: 80 -> 72 - CompactHashSet: 40 -> 32 - CompactLinkedHashSet: 56 -> 48  062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7
3431 ;  android/guava/src/com/google/common/collect/CompactLinkedHashSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove unused configuration of load factor  This allows removal of loadFactor/threshold which saves 8 bytes per object.  While here: - Reduce diff between Map/Set classes - Make base forEach() work for Linked classes  Shallow object size (bytes): - CompactHashMap: 64 -> 56 - CompactLinkedHashMap: 80 -> 72 - CompactHashSet: 40 -> 32 - CompactLinkedHashSet: 56 -> 48  062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7
3431 ;  guava/src/com/google/common/collect/CompactHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove unused configuration of load factor  This allows removal of loadFactor/threshold which saves 8 bytes per object.  While here: - Reduce diff between Map/Set classes - Make base forEach() work for Linked classes  Shallow object size (bytes): - CompactHashMap: 64 -> 56 - CompactLinkedHashMap: 80 -> 72 - CompactHashSet: 40 -> 32 - CompactLinkedHashSet: 56 -> 48  062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7
3431 ;  guava/src/com/google/common/collect/CompactHashSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove unused configuration of load factor  This allows removal of loadFactor/threshold which saves 8 bytes per object.  While here: - Reduce diff between Map/Set classes - Make base forEach() work for Linked classes  Shallow object size (bytes): - CompactHashMap: 64 -> 56 - CompactLinkedHashMap: 80 -> 72 - CompactHashSet: 40 -> 32 - CompactLinkedHashSet: 56 -> 48  062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7
3431 ;  guava/src/com/google/common/collect/CompactLinkedHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove unused configuration of load factor  This allows removal of loadFactor/threshold which saves 8 bytes per object.  While here: - Reduce diff between Map/Set classes - Make base forEach() work for Linked classes  Shallow object size (bytes): - CompactHashMap: 64 -> 56 - CompactLinkedHashMap: 80 -> 72 - CompactHashSet: 40 -> 32 - CompactLinkedHashSet: 56 -> 48  062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7
3431 ;  guava/src/com/google/common/collect/CompactLinkedHashSet.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove unused configuration of load factor  This allows removal of loadFactor/threshold which saves 8 bytes per object.  While here: - Reduce diff between Map/Set classes - Make base forEach() work for Linked classes  Shallow object size (bytes): - CompactHashMap: 64 -> 56 - CompactLinkedHashMap: 80 -> 72 - CompactHashSet: 40 -> 32 - CompactLinkedHashSet: 56 -> 48  062afc318cc7f60f6d681d6a3fa6cdc4f437a2d7
3434 ; android/guava/src/com/google/common/collect/CompactHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix @param tag as per https://github.com/google/guava/pull/3431#pullrequestreview-221507095  cc @jbduncan  c691708b4c214b5caf9a92826cdfa07b19485f6e
3434 ;  guava/src/com/google/common/collect/CompactHashMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix @param tag as per https://github.com/google/guava/pull/3431#pullrequestreview-221507095  cc @jbduncan  c691708b4c214b5caf9a92826cdfa07b19485f6e
3436 ; android/guava-tests/test/com/google/common/hash/BloomFilterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Bumped the FPP to prevent OOMs on JDK 11.  8acb5b990f7fe0467dd318e262dd423b19b710b7
3436 ;  guava-tests/test/com/google/common/hash/BloomFilterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Bumped the FPP to prevent OOMs on JDK 11.  8acb5b990f7fe0467dd318e262dd423b19b710b7
3440 ; android/guava/src/com/google/common/net/HttpHeaders.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add websocket headers to HTTP header listings.  This adds five headers  as defined in RFC 6455: Sec-WebSocket-Accept  Sec-WebSocket-Extensions  Sec-WebSocket-Key  Sec-WebSocket-Protocol  and Sec-WebSocket-Versions.  This also changes the C++ per-header unit test so that it can recognize the alternate capitalization of WebSocket  instead of adding five special cases. The Go and Java versions use the  Websocket  capitalization instead.  78fe31027ec67c0648667582e40d49351757cfe9
3440 ;  guava/src/com/google/common/net/HttpHeaders.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add websocket headers to HTTP header listings.  This adds five headers  as defined in RFC 6455: Sec-WebSocket-Accept  Sec-WebSocket-Extensions  Sec-WebSocket-Key  Sec-WebSocket-Protocol  and Sec-WebSocket-Versions.  This also changes the C++ per-header unit test so that it can recognize the alternate capitalization of WebSocket  instead of adding five special cases. The Go and Java versions use the  Websocket  capitalization instead.  78fe31027ec67c0648667582e40d49351757cfe9
3449 ; android/guava-tests/test/com/google/common/graph/MapCacheTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Override a method instead of special-casing it.  75e7b296f6530a9f58b501822457fc3be03e7948  -------  <p> Mitigate https://github.com/google/guava/issues/3223 by guessing that Sets are already deduplicated and making  half and half  expectations about un-duplicated inputs in ImmutableSet creation.  RELNOTES=Mitigate https://github.com/google/guava/issues/3223.  f1aa0f6194814b9b8821e5438216098c850a2ed9  -------  <p> Update ValueGraphBuilder documentation with option of building an immutable graph.  5879ed3133f4154ccca013941166be8c61f1ed97  -------  <p> Update NetworkBuilder documentation with option of building an immutable graph.  cdb288c576ff3c1e71e0315cde03cc68e4af33f3  -------  <p> Enable GoodTime-API  b34102f9b9ea11187de8f9961d02ab4d7e603fae  -------  <p> Fix misspelled Sec-WebSocket-Version header.  The correct name is Sec-WebSocket-Version  not Sec-WebSocket-Versions.  86ffa6e267b88db547b7aab9587d3e8a19081bf0  -------  <p> Match the casing of the WebSocket HTTP headers to the RFC directly.  RELNOTES=Match the casing of the WebSocket HTTP headers to the RFC directly.  517b59607597d659fb54bc6c71e33e974c41c494  -------  <p> Update Public Suffix data.  646d0e06333a3b64b101fdbe0ef93fa948b62c49  -------  <p> Remove outdated references to the  next release of Guava .  f2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237  -------  <p> Update to Truth 0.44.  b61237ca571489a0a0ac738f707a4a0359c59e86  -------  <p> Migrate from isNotSameAs to isNotSameInstanceAs.  The two behave identically  and isNotSameAs is being removed.  8c4225f652e289025040f2454fefeaa90671310f
3449 ;  android/guava-tests/test/com/google/common/primitives/ImmutableDoubleArrayTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Override a method instead of special-casing it.  75e7b296f6530a9f58b501822457fc3be03e7948  -------  <p> Mitigate https://github.com/google/guava/issues/3223 by guessing that Sets are already deduplicated and making  half and half  expectations about un-duplicated inputs in ImmutableSet creation.  RELNOTES=Mitigate https://github.com/google/guava/issues/3223.  f1aa0f6194814b9b8821e5438216098c850a2ed9  -------  <p> Update ValueGraphBuilder documentation with option of building an immutable graph.  5879ed3133f4154ccca013941166be8c61f1ed97  -------  <p> Update NetworkBuilder documentation with option of building an immutable graph.  cdb288c576ff3c1e71e0315cde03cc68e4af33f3  -------  <p> Enable GoodTime-API  b34102f9b9ea11187de8f9961d02ab4d7e603fae  -------  <p> Fix misspelled Sec-WebSocket-Version header.  The correct name is Sec-WebSocket-Version  not Sec-WebSocket-Versions.  86ffa6e267b88db547b7aab9587d3e8a19081bf0  -------  <p> Match the casing of the WebSocket HTTP headers to the RFC directly.  RELNOTES=Match the casing of the WebSocket HTTP headers to the RFC directly.  517b59607597d659fb54bc6c71e33e974c41c494  -------  <p> Update Public Suffix data.  646d0e06333a3b64b101fdbe0ef93fa948b62c49  -------  <p> Remove outdated references to the  next release of Guava .  f2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237  -------  <p> Update to Truth 0.44.  b61237ca571489a0a0ac738f707a4a0359c59e86  -------  <p> Migrate from isNotSameAs to isNotSameInstanceAs.  The two behave identically  and isNotSameAs is being removed.  8c4225f652e289025040f2454fefeaa90671310f
3449 ;  android/guava-tests/test/com/google/common/primitives/ImmutableIntArrayTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Override a method instead of special-casing it.  75e7b296f6530a9f58b501822457fc3be03e7948  -------  <p> Mitigate https://github.com/google/guava/issues/3223 by guessing that Sets are already deduplicated and making  half and half  expectations about un-duplicated inputs in ImmutableSet creation.  RELNOTES=Mitigate https://github.com/google/guava/issues/3223.  f1aa0f6194814b9b8821e5438216098c850a2ed9  -------  <p> Update ValueGraphBuilder documentation with option of building an immutable graph.  5879ed3133f4154ccca013941166be8c61f1ed97  -------  <p> Update NetworkBuilder documentation with option of building an immutable graph.  cdb288c576ff3c1e71e0315cde03cc68e4af33f3  -------  <p> Enable GoodTime-API  b34102f9b9ea11187de8f9961d02ab4d7e603fae  -------  <p> Fix misspelled Sec-WebSocket-Version header.  The correct name is Sec-WebSocket-Version  not Sec-WebSocket-Versions.  86ffa6e267b88db547b7aab9587d3e8a19081bf0  -------  <p> Match the casing of the WebSocket HTTP headers to the RFC directly.  RELNOTES=Match the casing of the WebSocket HTTP headers to the RFC directly.  517b59607597d659fb54bc6c71e33e974c41c494  -------  <p> Update Public Suffix data.  646d0e06333a3b64b101fdbe0ef93fa948b62c49  -------  <p> Remove outdated references to the  next release of Guava .  f2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237  -------  <p> Update to Truth 0.44.  b61237ca571489a0a0ac738f707a4a0359c59e86  -------  <p> Migrate from isNotSameAs to isNotSameInstanceAs.  The two behave identically  and isNotSameAs is being removed.  8c4225f652e289025040f2454fefeaa90671310f
3449 ;  android/guava-tests/test/com/google/common/primitives/ImmutableLongArrayTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Override a method instead of special-casing it.  75e7b296f6530a9f58b501822457fc3be03e7948  -------  <p> Mitigate https://github.com/google/guava/issues/3223 by guessing that Sets are already deduplicated and making  half and half  expectations about un-duplicated inputs in ImmutableSet creation.  RELNOTES=Mitigate https://github.com/google/guava/issues/3223.  f1aa0f6194814b9b8821e5438216098c850a2ed9  -------  <p> Update ValueGraphBuilder documentation with option of building an immutable graph.  5879ed3133f4154ccca013941166be8c61f1ed97  -------  <p> Update NetworkBuilder documentation with option of building an immutable graph.  cdb288c576ff3c1e71e0315cde03cc68e4af33f3  -------  <p> Enable GoodTime-API  b34102f9b9ea11187de8f9961d02ab4d7e603fae  -------  <p> Fix misspelled Sec-WebSocket-Version header.  The correct name is Sec-WebSocket-Version  not Sec-WebSocket-Versions.  86ffa6e267b88db547b7aab9587d3e8a19081bf0  -------  <p> Match the casing of the WebSocket HTTP headers to the RFC directly.  RELNOTES=Match the casing of the WebSocket HTTP headers to the RFC directly.  517b59607597d659fb54bc6c71e33e974c41c494  -------  <p> Update Public Suffix data.  646d0e06333a3b64b101fdbe0ef93fa948b62c49  -------  <p> Remove outdated references to the  next release of Guava .  f2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237  -------  <p> Update to Truth 0.44.  b61237ca571489a0a0ac738f707a4a0359c59e86  -------  <p> Migrate from isNotSameAs to isNotSameInstanceAs.  The two behave identically  and isNotSameAs is being removed.  8c4225f652e289025040f2454fefeaa90671310f
3449 ;  guava-tests/test/com/google/common/graph/MapCacheTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Override a method instead of special-casing it.  75e7b296f6530a9f58b501822457fc3be03e7948  -------  <p> Mitigate https://github.com/google/guava/issues/3223 by guessing that Sets are already deduplicated and making  half and half  expectations about un-duplicated inputs in ImmutableSet creation.  RELNOTES=Mitigate https://github.com/google/guava/issues/3223.  f1aa0f6194814b9b8821e5438216098c850a2ed9  -------  <p> Update ValueGraphBuilder documentation with option of building an immutable graph.  5879ed3133f4154ccca013941166be8c61f1ed97  -------  <p> Update NetworkBuilder documentation with option of building an immutable graph.  cdb288c576ff3c1e71e0315cde03cc68e4af33f3  -------  <p> Enable GoodTime-API  b34102f9b9ea11187de8f9961d02ab4d7e603fae  -------  <p> Fix misspelled Sec-WebSocket-Version header.  The correct name is Sec-WebSocket-Version  not Sec-WebSocket-Versions.  86ffa6e267b88db547b7aab9587d3e8a19081bf0  -------  <p> Match the casing of the WebSocket HTTP headers to the RFC directly.  RELNOTES=Match the casing of the WebSocket HTTP headers to the RFC directly.  517b59607597d659fb54bc6c71e33e974c41c494  -------  <p> Update Public Suffix data.  646d0e06333a3b64b101fdbe0ef93fa948b62c49  -------  <p> Remove outdated references to the  next release of Guava .  f2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237  -------  <p> Update to Truth 0.44.  b61237ca571489a0a0ac738f707a4a0359c59e86  -------  <p> Migrate from isNotSameAs to isNotSameInstanceAs.  The two behave identically  and isNotSameAs is being removed.  8c4225f652e289025040f2454fefeaa90671310f
3449 ;  guava-tests/test/com/google/common/primitives/ImmutableDoubleArrayTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Override a method instead of special-casing it.  75e7b296f6530a9f58b501822457fc3be03e7948  -------  <p> Mitigate https://github.com/google/guava/issues/3223 by guessing that Sets are already deduplicated and making  half and half  expectations about un-duplicated inputs in ImmutableSet creation.  RELNOTES=Mitigate https://github.com/google/guava/issues/3223.  f1aa0f6194814b9b8821e5438216098c850a2ed9  -------  <p> Update ValueGraphBuilder documentation with option of building an immutable graph.  5879ed3133f4154ccca013941166be8c61f1ed97  -------  <p> Update NetworkBuilder documentation with option of building an immutable graph.  cdb288c576ff3c1e71e0315cde03cc68e4af33f3  -------  <p> Enable GoodTime-API  b34102f9b9ea11187de8f9961d02ab4d7e603fae  -------  <p> Fix misspelled Sec-WebSocket-Version header.  The correct name is Sec-WebSocket-Version  not Sec-WebSocket-Versions.  86ffa6e267b88db547b7aab9587d3e8a19081bf0  -------  <p> Match the casing of the WebSocket HTTP headers to the RFC directly.  RELNOTES=Match the casing of the WebSocket HTTP headers to the RFC directly.  517b59607597d659fb54bc6c71e33e974c41c494  -------  <p> Update Public Suffix data.  646d0e06333a3b64b101fdbe0ef93fa948b62c49  -------  <p> Remove outdated references to the  next release of Guava .  f2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237  -------  <p> Update to Truth 0.44.  b61237ca571489a0a0ac738f707a4a0359c59e86  -------  <p> Migrate from isNotSameAs to isNotSameInstanceAs.  The two behave identically  and isNotSameAs is being removed.  8c4225f652e289025040f2454fefeaa90671310f
3449 ;  guava-tests/test/com/google/common/primitives/ImmutableIntArrayTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Override a method instead of special-casing it.  75e7b296f6530a9f58b501822457fc3be03e7948  -------  <p> Mitigate https://github.com/google/guava/issues/3223 by guessing that Sets are already deduplicated and making  half and half  expectations about un-duplicated inputs in ImmutableSet creation.  RELNOTES=Mitigate https://github.com/google/guava/issues/3223.  f1aa0f6194814b9b8821e5438216098c850a2ed9  -------  <p> Update ValueGraphBuilder documentation with option of building an immutable graph.  5879ed3133f4154ccca013941166be8c61f1ed97  -------  <p> Update NetworkBuilder documentation with option of building an immutable graph.  cdb288c576ff3c1e71e0315cde03cc68e4af33f3  -------  <p> Enable GoodTime-API  b34102f9b9ea11187de8f9961d02ab4d7e603fae  -------  <p> Fix misspelled Sec-WebSocket-Version header.  The correct name is Sec-WebSocket-Version  not Sec-WebSocket-Versions.  86ffa6e267b88db547b7aab9587d3e8a19081bf0  -------  <p> Match the casing of the WebSocket HTTP headers to the RFC directly.  RELNOTES=Match the casing of the WebSocket HTTP headers to the RFC directly.  517b59607597d659fb54bc6c71e33e974c41c494  -------  <p> Update Public Suffix data.  646d0e06333a3b64b101fdbe0ef93fa948b62c49  -------  <p> Remove outdated references to the  next release of Guava .  f2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237  -------  <p> Update to Truth 0.44.  b61237ca571489a0a0ac738f707a4a0359c59e86  -------  <p> Migrate from isNotSameAs to isNotSameInstanceAs.  The two behave identically  and isNotSameAs is being removed.  8c4225f652e289025040f2454fefeaa90671310f
3449 ;  guava-tests/test/com/google/common/primitives/ImmutableLongArrayTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Override a method instead of special-casing it.  75e7b296f6530a9f58b501822457fc3be03e7948  -------  <p> Mitigate https://github.com/google/guava/issues/3223 by guessing that Sets are already deduplicated and making  half and half  expectations about un-duplicated inputs in ImmutableSet creation.  RELNOTES=Mitigate https://github.com/google/guava/issues/3223.  f1aa0f6194814b9b8821e5438216098c850a2ed9  -------  <p> Update ValueGraphBuilder documentation with option of building an immutable graph.  5879ed3133f4154ccca013941166be8c61f1ed97  -------  <p> Update NetworkBuilder documentation with option of building an immutable graph.  cdb288c576ff3c1e71e0315cde03cc68e4af33f3  -------  <p> Enable GoodTime-API  b34102f9b9ea11187de8f9961d02ab4d7e603fae  -------  <p> Fix misspelled Sec-WebSocket-Version header.  The correct name is Sec-WebSocket-Version  not Sec-WebSocket-Versions.  86ffa6e267b88db547b7aab9587d3e8a19081bf0  -------  <p> Match the casing of the WebSocket HTTP headers to the RFC directly.  RELNOTES=Match the casing of the WebSocket HTTP headers to the RFC directly.  517b59607597d659fb54bc6c71e33e974c41c494  -------  <p> Update Public Suffix data.  646d0e06333a3b64b101fdbe0ef93fa948b62c49  -------  <p> Remove outdated references to the  next release of Guava .  f2591b5c2a67b89b8c1cc1303b3a3cef5a9aa237  -------  <p> Update to Truth 0.44.  b61237ca571489a0a0ac738f707a4a0359c59e86  -------  <p> Migrate from isNotSameAs to isNotSameInstanceAs.  The two behave identically  and isNotSameAs is being removed.  8c4225f652e289025040f2454fefeaa90671310f
3455 ; guava-tests/test/com/google/common/collect/ImmutableBiMapTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fixed some links.  The comparisons to the Android Hash* classes haven t been accurate since at least CL 81367572  so I ve removed them entirely.  Fixes #3398  1dc514b56a0fa213baa242acf9e58163638abef8  -------  <p> Migrate from assertThat(foo).named( foo ) to assertWithMessage( foo ).that(foo).  (The exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named(...) to [assert]WithMessage(...).)  named(...) is being removed.  This CL may slightly modify the failure messages produced  but all the old information will still be present.  e70a2f9e53583c1c508a0f7b16bdcad8c3f2f740  -------  <p> Migrate from is(Not)SameAs to is(Not)SameInstanceAs.  They behave identically  and the old names are being removed.  Open-source note: The new methods are available in Truth as of version 0.44.  c19256717b493127a355fabf1eeb827fd0c64973  -------  <p> A few more doc tweaks  caught by @jbduncan in f2591b5c2a  414084c20aeb4b74fb85eab5cf0a787d76234939  -------  <p> Remove CheckedFuture from Guava.  RELNOTES=Removed deprecated  CheckedFuture  and related utilities.  cae1b9190e4bad3b6c01afbb08d9b0a366813c99  -------  <p> Migrate from assertThat(foo).named( foo ) to assertWithMessage( foo ).that(foo).  (The exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named(...) to [assert]WithMessage(...).)  named(...) is being removed.  This CL may slightly modify the failure messages produced  but all the old information will still be present.  1f5c4780e522c32f9412e29cd2880124c81275e7
3455 ;  guava-tests/test/com/google/common/collect/ImmutableMapTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fixed some links.  The comparisons to the Android Hash* classes haven t been accurate since at least CL 81367572  so I ve removed them entirely.  Fixes #3398  1dc514b56a0fa213baa242acf9e58163638abef8  -------  <p> Migrate from assertThat(foo).named( foo ) to assertWithMessage( foo ).that(foo).  (The exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named(...) to [assert]WithMessage(...).)  named(...) is being removed.  This CL may slightly modify the failure messages produced  but all the old information will still be present.  e70a2f9e53583c1c508a0f7b16bdcad8c3f2f740  -------  <p> Migrate from is(Not)SameAs to is(Not)SameInstanceAs.  They behave identically  and the old names are being removed.  Open-source note: The new methods are available in Truth as of version 0.44.  c19256717b493127a355fabf1eeb827fd0c64973  -------  <p> A few more doc tweaks  caught by @jbduncan in f2591b5c2a  414084c20aeb4b74fb85eab5cf0a787d76234939  -------  <p> Remove CheckedFuture from Guava.  RELNOTES=Removed deprecated  CheckedFuture  and related utilities.  cae1b9190e4bad3b6c01afbb08d9b0a366813c99  -------  <p> Migrate from assertThat(foo).named( foo ) to assertWithMessage( foo ).that(foo).  (The exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named(...) to [assert]WithMessage(...).)  named(...) is being removed.  This CL may slightly modify the failure messages produced  but all the old information will still be present.  1f5c4780e522c32f9412e29cd2880124c81275e7
3455 ;  guava-tests/test/com/google/common/collect/ImmutableMultisetTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fixed some links.  The comparisons to the Android Hash* classes haven t been accurate since at least CL 81367572  so I ve removed them entirely.  Fixes #3398  1dc514b56a0fa213baa242acf9e58163638abef8  -------  <p> Migrate from assertThat(foo).named( foo ) to assertWithMessage( foo ).that(foo).  (The exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named(...) to [assert]WithMessage(...).)  named(...) is being removed.  This CL may slightly modify the failure messages produced  but all the old information will still be present.  e70a2f9e53583c1c508a0f7b16bdcad8c3f2f740  -------  <p> Migrate from is(Not)SameAs to is(Not)SameInstanceAs.  They behave identically  and the old names are being removed.  Open-source note: The new methods are available in Truth as of version 0.44.  c19256717b493127a355fabf1eeb827fd0c64973  -------  <p> A few more doc tweaks  caught by @jbduncan in f2591b5c2a  414084c20aeb4b74fb85eab5cf0a787d76234939  -------  <p> Remove CheckedFuture from Guava.  RELNOTES=Removed deprecated  CheckedFuture  and related utilities.  cae1b9190e4bad3b6c01afbb08d9b0a366813c99  -------  <p> Migrate from assertThat(foo).named( foo ) to assertWithMessage( foo ).that(foo).  (The exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named(...) to [assert]WithMessage(...).)  named(...) is being removed.  This CL may slightly modify the failure messages produced  but all the old information will still be present.  1f5c4780e522c32f9412e29cd2880124c81275e7
3455 ;  guava-tests/test/com/google/common/collect/ImmutableSetTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fixed some links.  The comparisons to the Android Hash* classes haven t been accurate since at least CL 81367572  so I ve removed them entirely.  Fixes #3398  1dc514b56a0fa213baa242acf9e58163638abef8  -------  <p> Migrate from assertThat(foo).named( foo ) to assertWithMessage( foo ).that(foo).  (The exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named(...) to [assert]WithMessage(...).)  named(...) is being removed.  This CL may slightly modify the failure messages produced  but all the old information will still be present.  e70a2f9e53583c1c508a0f7b16bdcad8c3f2f740  -------  <p> Migrate from is(Not)SameAs to is(Not)SameInstanceAs.  They behave identically  and the old names are being removed.  Open-source note: The new methods are available in Truth as of version 0.44.  c19256717b493127a355fabf1eeb827fd0c64973  -------  <p> A few more doc tweaks  caught by @jbduncan in f2591b5c2a  414084c20aeb4b74fb85eab5cf0a787d76234939  -------  <p> Remove CheckedFuture from Guava.  RELNOTES=Removed deprecated  CheckedFuture  and related utilities.  cae1b9190e4bad3b6c01afbb08d9b0a366813c99  -------  <p> Migrate from assertThat(foo).named( foo ) to assertWithMessage( foo ).that(foo).  (The exact change is slightly different in some cases  like when using custom subjects or check()  but it s always a migration from named(...) to [assert]WithMessage(...).)  named(...) is being removed.  This CL may slightly modify the failure messages produced  but all the old information will still be present.  1f5c4780e522c32f9412e29cd2880124c81275e7
3474 ; android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add FakeTicker.advance(Duration) and setAutoIncrementStep(Duration).  #goodtime  RELNOTES=Add FakeTicker.advance(Duration) and setAutoIncrementStep(Duration).  dcb5d431e288374666b70214de836ee09053b425  -------  <p> Add Queues.drain(BlockingQueue  Collection  int  Duration) and drainUninterruptibly(BlockingQueue  Collection  int  Duration).  RELNOTES=add Duration-based Queues drain methods.  5963112d7548abb44f5502d0bec1edda91d530fc  -------  <p> Add a new header field  CDN-Loop  to httputils.  More details: https://tools.ietf.org/html/rfc8586  RELNOTES=Add CDN-Loop header to library according to RFC8586.  d9f85b46fd5d85c3f4db91fd1d7387f6befa90ae  -------  <p> Remove app.link from the Public Suffix List.  8fa55701cc99c3016e9bda5b2807921c0e8b39cd
3474 ;  guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add FakeTicker.advance(Duration) and setAutoIncrementStep(Duration).  #goodtime  RELNOTES=Add FakeTicker.advance(Duration) and setAutoIncrementStep(Duration).  dcb5d431e288374666b70214de836ee09053b425  -------  <p> Add Queues.drain(BlockingQueue  Collection  int  Duration) and drainUninterruptibly(BlockingQueue  Collection  int  Duration).  RELNOTES=add Duration-based Queues drain methods.  5963112d7548abb44f5502d0bec1edda91d530fc  -------  <p> Add a new header field  CDN-Loop  to httputils.  More details: https://tools.ietf.org/html/rfc8586  RELNOTES=Add CDN-Loop header to library according to RFC8586.  d9f85b46fd5d85c3f4db91fd1d7387f6befa90ae  -------  <p> Remove app.link from the Public Suffix List.  8fa55701cc99c3016e9bda5b2807921c0e8b39cd
3486 ; android/guava/src/com/google/common/base/Functions.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a link back to the goodtime rate bug.  5750fb6c05d0f8b32060f56b0a94a12a52c89260  -------  <p> Copy Durations.saturatedToNanos(Duration) to package-private c.g.c.u.c.Internal so it can be used by the concurrent package (and in Guava).  #goodtime  568cbb67101fdb56436e75467a23de8d027b1089  -------  <p> Tighten the GoodTime suppression locations in RateLimiter.  #goodtime  0df55a98cf54e2c3ccf1c1180ad4a20419d69a55  -------  <p> Add Duration-based overloads to Uninterruptibles.  #goodtime  RELNOTES=Add Duration-based overloads to Uninterruptibles.  e194e7578e5e8fea2edddd5a9544ebdeac961141  -------  <p> Always complete TimeoutFuture  even if toString() throws  6c09c1732c040050752b5a087a1070ebf899ae9f  -------  <p> Add Duration-based overloads to MoreExecutors.  #goodtime  RELNOTES=Add Duration-based overloads to MoreExecutors.  e2da132822d1e62d000564e51816c789dc823998  -------  <p> Add Duration-based overloads to FluentFuture.  #goodtime  RELNOTES=Add Duration-based overloads to FluentFuture.  7f5390dcb99c6930facb2a91cca056a25b8581a4  -------  <p> Add Duration-based overloads to Futures.  #goodtime  RELNOTES=Add Duration-based overloads to Futures.  070e07da83e8320f2c368709cb773f08a383797f  -------  <p> Add Duration-based overloads to AbstractScheduledService.  #goodtime  RELNOTES=Add Duration-based overloads to AbstractScheduledService.  e7a7a1f0c4962231d73f72d101deeaa2c2b0144c  -------  <p> Add Duration-based overloads to Service.  #goodtime  RELNOTES=Add Duration-based overloads to Service.  76718f4617a2d4daea00a578f808cae59c5cdc59  -------  <p> Add Duration-based overloads to ServiceManager.  #goodtime  RELNOTES=Add Duration-based overloads to ServiceManager.  6c6edfa0b24148d5665a8e31a1811df7045b9460  -------  <p> Remove CheckedFuture utilities from util.concurrent.Futures.  d3dcc67f6da3cbd5be687e2cddec6fb13a68dd8b  -------  <p> Add Duration-based overloads to RateLimiter.  #goodtime  RELNOTES=Add Duration-based overloads to RateLimiter.  7aee4f5c283e501c854ae06aaa201fc5328ebe4f  -------  <p> Add Duration-based overload to Monitor.  #goodtime  RELNOTES=Add Duration-based overload to Monitor.  ac540c41979ade6931d9d604eff1e6223e247a9a  -------  <p> Define project build source encoding as UTF-8  Closes https://github.com/google/guava/pull/3465  196dd9edd4a8d7caa2f5f073268fab759d91b3e2  -------  <p> Fix  Apache License  Version 2.0  spelling  There are many Java libraries licensed under  Apache License  Version 2.0  that do not use its official spelling. This causes issues like https://issues.apache.org/jira/browse/MPIR-382: with every library defining its own spelling  it s difficult in large projects to have a clear view of all licenses in use. This PR changes the license spelling to the official one  as advised by Maven developers.  Closes https://github.com/google/guava/pull/3471  eb8695c81d20d83871ddd105954bd5ac3528de71  -------  <p> Fix Streams.zip documentation typo.  8cc9e91bafa0b90360b6972fca23f9d4f8dd3f65  -------  <p> Add MediaType for  application/geo+json .  via https://github.com/google/guava/pull/3243  RELNOTES=Add MediaType for  application/geo+json .  b47e9ba4e2efa318a0cc44cd9acdb1c215d41c42  -------  <p> Upgrade maven-javadoc-plugin to 3.1.0.  Fixes https://github.com/google/guava/pull/3478.  34b7a1eff5091a14ed3a325a5966c9c43b219754  -------  <p> Add Cross-Origin-Resource-Policy header name constants.  Details https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header  RELNOTES=Add Cross-Origin-Resource-Policy header to library.  161241d58e93dfdba5a9021d2ee8dc64e3cd3937  -------  <p> Fix Javadoc links.  Fixes https://github.com/google/guava/pull/3481  86be2d13b5677207cbc49bfb4431142b119647e6  -------  <p> Update documentation to refer correct method name.  https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#getOrDefault-java.lang.Object-V-  RELNOTES=N/A  a6f7253500de9a6a88c56e94858759c437dee20b
3486 ;  guava/src/com/google/common/base/Functions.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a link back to the goodtime rate bug.  5750fb6c05d0f8b32060f56b0a94a12a52c89260  -------  <p> Copy Durations.saturatedToNanos(Duration) to package-private c.g.c.u.c.Internal so it can be used by the concurrent package (and in Guava).  #goodtime  568cbb67101fdb56436e75467a23de8d027b1089  -------  <p> Tighten the GoodTime suppression locations in RateLimiter.  #goodtime  0df55a98cf54e2c3ccf1c1180ad4a20419d69a55  -------  <p> Add Duration-based overloads to Uninterruptibles.  #goodtime  RELNOTES=Add Duration-based overloads to Uninterruptibles.  e194e7578e5e8fea2edddd5a9544ebdeac961141  -------  <p> Always complete TimeoutFuture  even if toString() throws  6c09c1732c040050752b5a087a1070ebf899ae9f  -------  <p> Add Duration-based overloads to MoreExecutors.  #goodtime  RELNOTES=Add Duration-based overloads to MoreExecutors.  e2da132822d1e62d000564e51816c789dc823998  -------  <p> Add Duration-based overloads to FluentFuture.  #goodtime  RELNOTES=Add Duration-based overloads to FluentFuture.  7f5390dcb99c6930facb2a91cca056a25b8581a4  -------  <p> Add Duration-based overloads to Futures.  #goodtime  RELNOTES=Add Duration-based overloads to Futures.  070e07da83e8320f2c368709cb773f08a383797f  -------  <p> Add Duration-based overloads to AbstractScheduledService.  #goodtime  RELNOTES=Add Duration-based overloads to AbstractScheduledService.  e7a7a1f0c4962231d73f72d101deeaa2c2b0144c  -------  <p> Add Duration-based overloads to Service.  #goodtime  RELNOTES=Add Duration-based overloads to Service.  76718f4617a2d4daea00a578f808cae59c5cdc59  -------  <p> Add Duration-based overloads to ServiceManager.  #goodtime  RELNOTES=Add Duration-based overloads to ServiceManager.  6c6edfa0b24148d5665a8e31a1811df7045b9460  -------  <p> Remove CheckedFuture utilities from util.concurrent.Futures.  d3dcc67f6da3cbd5be687e2cddec6fb13a68dd8b  -------  <p> Add Duration-based overloads to RateLimiter.  #goodtime  RELNOTES=Add Duration-based overloads to RateLimiter.  7aee4f5c283e501c854ae06aaa201fc5328ebe4f  -------  <p> Add Duration-based overload to Monitor.  #goodtime  RELNOTES=Add Duration-based overload to Monitor.  ac540c41979ade6931d9d604eff1e6223e247a9a  -------  <p> Define project build source encoding as UTF-8  Closes https://github.com/google/guava/pull/3465  196dd9edd4a8d7caa2f5f073268fab759d91b3e2  -------  <p> Fix  Apache License  Version 2.0  spelling  There are many Java libraries licensed under  Apache License  Version 2.0  that do not use its official spelling. This causes issues like https://issues.apache.org/jira/browse/MPIR-382: with every library defining its own spelling  it s difficult in large projects to have a clear view of all licenses in use. This PR changes the license spelling to the official one  as advised by Maven developers.  Closes https://github.com/google/guava/pull/3471  eb8695c81d20d83871ddd105954bd5ac3528de71  -------  <p> Fix Streams.zip documentation typo.  8cc9e91bafa0b90360b6972fca23f9d4f8dd3f65  -------  <p> Add MediaType for  application/geo+json .  via https://github.com/google/guava/pull/3243  RELNOTES=Add MediaType for  application/geo+json .  b47e9ba4e2efa318a0cc44cd9acdb1c215d41c42  -------  <p> Upgrade maven-javadoc-plugin to 3.1.0.  Fixes https://github.com/google/guava/pull/3478.  34b7a1eff5091a14ed3a325a5966c9c43b219754  -------  <p> Add Cross-Origin-Resource-Policy header name constants.  Details https://fetch.spec.whatwg.org/#cross-origin-resource-policy-header  RELNOTES=Add Cross-Origin-Resource-Policy header to library.  161241d58e93dfdba5a9021d2ee8dc64e3cd3937  -------  <p> Fix Javadoc links.  Fixes https://github.com/google/guava/pull/3481  86be2d13b5677207cbc49bfb4431142b119647e6  -------  <p> Update documentation to refer correct method name.  https://docs.oracle.com/javase/8/docs/api/java/util/Map.html#getOrDefault-java.lang.Object-V-  RELNOTES=N/A  a6f7253500de9a6a88c56e94858759c437dee20b
3495 ; android/guava/src/com/google/common/util/concurrent/SimpleTimeLimiter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove  @Beta  from  setFuture .  RELNOTES=Removed  @Beta  from  setFuture .  2c717c0092ad5abbbe6a34d426e084623c651354  -------  <p> Upgrade maven-gpg-plugin to 1.6  Fixes github.com/google/guava/pull/3490  c10a1647ffa968a96273d0961a6f9e0181a4fe70  -------  <p> Clarify behavior of  ImmutableList#copyOf  for null argument.  Fixes #3485  6f655fb940809499719ba7679a425961e39a8feb  -------  <p> Make the incidentEdges() documentation a little bit more clear.  b0a05097900ab2decf17681d3dcd9154f225d91f  -------  <p> Simplify implementation of Graphs.reachableNodes()  b917492c31401a2e6092c8f3f6bc60040c1dcebe  -------  <p> Make the adjacentNodes() documentation a little bit more clear.  7a5a43b66a4f0a22077918404fa95a165ede2811  -------  <p> Delete deprecated callWithTimeout().  fa13235f2c8edff9cd6c434f8a164250decf0249
3495 ;  guava/src/com/google/common/util/concurrent/SimpleTimeLimiter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove  @Beta  from  setFuture .  RELNOTES=Removed  @Beta  from  setFuture .  2c717c0092ad5abbbe6a34d426e084623c651354  -------  <p> Upgrade maven-gpg-plugin to 1.6  Fixes github.com/google/guava/pull/3490  c10a1647ffa968a96273d0961a6f9e0181a4fe70  -------  <p> Clarify behavior of  ImmutableList#copyOf  for null argument.  Fixes #3485  6f655fb940809499719ba7679a425961e39a8feb  -------  <p> Make the incidentEdges() documentation a little bit more clear.  b0a05097900ab2decf17681d3dcd9154f225d91f  -------  <p> Simplify implementation of Graphs.reachableNodes()  b917492c31401a2e6092c8f3f6bc60040c1dcebe  -------  <p> Make the adjacentNodes() documentation a little bit more clear.  7a5a43b66a4f0a22077918404fa95a165ede2811  -------  <p> Delete deprecated callWithTimeout().  fa13235f2c8edff9cd6c434f8a164250decf0249
3525 ; guava-tests/test/com/google/common/collect/TreeRangeMapTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix typo in ImmutableList.java.  922214b3068213d28b20316997a9bbab77080d52  -------  <p> Update Fetch Metadata (formerly Sec-Metadata) headers to point to w3c documentation now it s been adopted by WebAppSec.  RELNOTES=Update Fetch Metadata (formerly Sec-Metadata) headers to point to w3c documentation now it s been adopted by WebAppSec.  2ae2f73318946f99f05af4e0867fb04495ee66bf  -------  <p> Add a test for LongAdder overflow behavior.  See https://github.com/google/guava/issues/3503  558321c2ba739f1b7d0a7bf5046e6867e4aea9d5  -------  <p> Fix some rawtypes in com.google.common.cache.  310de86d74c2c77924c1a69d22c7acdf286bd258  -------  <p> Saturate LongAdder.sum() results to Long.MAX_VALUE during an overflow.  Fixes https://github.com/google/guava/issues/3503  RELNOTES=Fix potential overflow/IAE during cache stats calculations.  b28a260a3b847b627cc4c33dd4fd6bed05d4e2f6  -------  <p> Add RangeMap#merge  analogous to Map#merge.  8dc46a72fa5417d02063052f05fd0355703411fc  -------  <p> Automated rollback of 8dc46a72fa5417d02063052f05fd0355703411fc  *** Reason for rollback ***  Breaking a number of projects  *** Original change description ***  Add RangeMap#merge  analogous to Map#merge.  ***  44d0870b7e4d6a9fa8cca847bf35652111bd7539
3525 ;  guava/src/com/google/common/collect/ImmutableRangeMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix typo in ImmutableList.java.  922214b3068213d28b20316997a9bbab77080d52  -------  <p> Update Fetch Metadata (formerly Sec-Metadata) headers to point to w3c documentation now it s been adopted by WebAppSec.  RELNOTES=Update Fetch Metadata (formerly Sec-Metadata) headers to point to w3c documentation now it s been adopted by WebAppSec.  2ae2f73318946f99f05af4e0867fb04495ee66bf  -------  <p> Add a test for LongAdder overflow behavior.  See https://github.com/google/guava/issues/3503  558321c2ba739f1b7d0a7bf5046e6867e4aea9d5  -------  <p> Fix some rawtypes in com.google.common.cache.  310de86d74c2c77924c1a69d22c7acdf286bd258  -------  <p> Saturate LongAdder.sum() results to Long.MAX_VALUE during an overflow.  Fixes https://github.com/google/guava/issues/3503  RELNOTES=Fix potential overflow/IAE during cache stats calculations.  b28a260a3b847b627cc4c33dd4fd6bed05d4e2f6  -------  <p> Add RangeMap#merge  analogous to Map#merge.  8dc46a72fa5417d02063052f05fd0355703411fc  -------  <p> Automated rollback of 8dc46a72fa5417d02063052f05fd0355703411fc  *** Reason for rollback ***  Breaking a number of projects  *** Original change description ***  Add RangeMap#merge  analogous to Map#merge.  ***  44d0870b7e4d6a9fa8cca847bf35652111bd7539
3525 ;  guava/src/com/google/common/collect/RangeMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix typo in ImmutableList.java.  922214b3068213d28b20316997a9bbab77080d52  -------  <p> Update Fetch Metadata (formerly Sec-Metadata) headers to point to w3c documentation now it s been adopted by WebAppSec.  RELNOTES=Update Fetch Metadata (formerly Sec-Metadata) headers to point to w3c documentation now it s been adopted by WebAppSec.  2ae2f73318946f99f05af4e0867fb04495ee66bf  -------  <p> Add a test for LongAdder overflow behavior.  See https://github.com/google/guava/issues/3503  558321c2ba739f1b7d0a7bf5046e6867e4aea9d5  -------  <p> Fix some rawtypes in com.google.common.cache.  310de86d74c2c77924c1a69d22c7acdf286bd258  -------  <p> Saturate LongAdder.sum() results to Long.MAX_VALUE during an overflow.  Fixes https://github.com/google/guava/issues/3503  RELNOTES=Fix potential overflow/IAE during cache stats calculations.  b28a260a3b847b627cc4c33dd4fd6bed05d4e2f6  -------  <p> Add RangeMap#merge  analogous to Map#merge.  8dc46a72fa5417d02063052f05fd0355703411fc  -------  <p> Automated rollback of 8dc46a72fa5417d02063052f05fd0355703411fc  *** Reason for rollback ***  Breaking a number of projects  *** Original change description ***  Add RangeMap#merge  analogous to Map#merge.  ***  44d0870b7e4d6a9fa8cca847bf35652111bd7539
3525 ;  guava/src/com/google/common/collect/TreeRangeMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix typo in ImmutableList.java.  922214b3068213d28b20316997a9bbab77080d52  -------  <p> Update Fetch Metadata (formerly Sec-Metadata) headers to point to w3c documentation now it s been adopted by WebAppSec.  RELNOTES=Update Fetch Metadata (formerly Sec-Metadata) headers to point to w3c documentation now it s been adopted by WebAppSec.  2ae2f73318946f99f05af4e0867fb04495ee66bf  -------  <p> Add a test for LongAdder overflow behavior.  See https://github.com/google/guava/issues/3503  558321c2ba739f1b7d0a7bf5046e6867e4aea9d5  -------  <p> Fix some rawtypes in com.google.common.cache.  310de86d74c2c77924c1a69d22c7acdf286bd258  -------  <p> Saturate LongAdder.sum() results to Long.MAX_VALUE during an overflow.  Fixes https://github.com/google/guava/issues/3503  RELNOTES=Fix potential overflow/IAE during cache stats calculations.  b28a260a3b847b627cc4c33dd4fd6bed05d4e2f6  -------  <p> Add RangeMap#merge  analogous to Map#merge.  8dc46a72fa5417d02063052f05fd0355703411fc  -------  <p> Automated rollback of 8dc46a72fa5417d02063052f05fd0355703411fc  *** Reason for rollback ***  Breaking a number of projects  *** Original change description ***  Add RangeMap#merge  analogous to Map#merge.  ***  44d0870b7e4d6a9fa8cca847bf35652111bd7539
3531 ; android/guava/src/com/google/common/io/Closer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify that SortedSetMultimap exposes the values for a key in sorted order but does *not* necessarily expose the keys in sorted order.  09bf107763561ae37ddd99cf024d6c5604eedfff  -------  <p> Remove unneeded @SuppressWarnings from @Benchmark methods.  RELNOTES=none  3c3f7c9f7bfd997c5528a4ce7dd0c802c3aeb26f  -------  <p> Rename a method to avoid J2ObjC collisions  Prevent J2ObjC from treating  getAddSuppressed  as a getter by renaming it  generateAddSuppressed . This silences a -Wobjc-property-implementation warning  soon  such warnings will become errors. See the referenced bug for full context.  cc5a55e487791db6ab2b7a98bcfd1be69d7a3638
3531 ;  guava/src/com/google/common/io/Closer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify that SortedSetMultimap exposes the values for a key in sorted order but does *not* necessarily expose the keys in sorted order.  09bf107763561ae37ddd99cf024d6c5604eedfff  -------  <p> Remove unneeded @SuppressWarnings from @Benchmark methods.  RELNOTES=none  3c3f7c9f7bfd997c5528a4ce7dd0c802c3aeb26f  -------  <p> Rename a method to avoid J2ObjC collisions  Prevent J2ObjC from treating  getAddSuppressed  as a getter by renaming it  generateAddSuppressed . This silences a -Wobjc-property-implementation warning  soon  such warnings will become errors. See the referenced bug for full context.  cc5a55e487791db6ab2b7a98bcfd1be69d7a3638
3533 ; guava-tests/test/com/google/common/collect/TreeRangeMapTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add RangeMap#merge  analogous to Map#merge.  Rollback of 8000dc992d0124372972729b20df40a42b27a849  cebc1985b8d64f3960e363b5641428447e6d33ae
3533 ;  guava/src/com/google/common/collect/ImmutableRangeMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add RangeMap#merge  analogous to Map#merge.  Rollback of 8000dc992d0124372972729b20df40a42b27a849  cebc1985b8d64f3960e363b5641428447e6d33ae
3533 ;  guava/src/com/google/common/collect/RangeMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add RangeMap#merge  analogous to Map#merge.  Rollback of 8000dc992d0124372972729b20df40a42b27a849  cebc1985b8d64f3960e363b5641428447e6d33ae
3533 ;  guava/src/com/google/common/collect/TreeRangeMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add RangeMap#merge  analogous to Map#merge.  Rollback of 8000dc992d0124372972729b20df40a42b27a849  cebc1985b8d64f3960e363b5641428447e6d33ae
3551 ; guava-testlib/src/com/google/common/collect/testing/SpliteratorTester.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove inaccurate comment.  2cc9ccd8f58402927f4903ebf40f19a63f47c789  -------  <p> Change the Splitter::limit arg to maxItems  for IDE usage.  The old name of  limit  was uninformative when presented in e.g. IDE autocompletions.  maxItems  will help distinguish it from the alternative meaning of max number of splits to make.  013d0f1b058f7c6e3ac159745fcead5f481f5b66  -------  <p> gwt.xml change from internal change.  a13896bd6b55883dbe1f4ae71603597f3831a89d  -------  <p> Add MediaType for  image/heif  and  image/jp2   RELNOTES=Add MediaType for  image/heif  and  image/jp2   4c70d7f3c3083946aa74e59098b51f521da27239  -------  <p> Change a use of Iterable.forEach  which isn t available under Desugar.  6508a374b7483ea2ec7f5170b94489cb9dc3537d
3560 ; android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix an issue where the InputStream returned by BaseEncoding.decodingStream(Reader) could fail to throw DecodingException while decoding an invalid string.  This was caused by the default behavior of InputStream.read(byte[]  int  int)  which swallows any IOException thrown by any call to the single-byte read() method other than the first. To fix it  just override that method with an implementation that does not swallow any exceptions.  Fixes https://github.com/google/guava/issues/3542  4e6478d4bec284f047a686b8a16dc2b32628639a  -------  <p> Add more clarification on what  access  means in expireAfterAccess(). Previous comment doesn t mention  containsKey()   Copied from https://github.com/google/guava/wiki/CachesExplained#asmap  RELNOTES=comment change  f2bd7744e575393f065253c8f1bc2a512d452b63  -------  <p> Document that HashBiMap.containsValue() tends to run in faster-than-linear time (overriding the default documentation from AbstractMap.containsValue()).  Fixes #1973  7d57c233c9922ca9adbbef552b5f8f66bd7856f0  -------  <p> Add note about {@code ByteSource.wrap} s use of the given byte array.  Fixes https://github.com/google/guava/issues/2603  9276a79f6e9b012935b791a3e6d0b7f3d00b715b  -------  <p> Fix https://github.com/google/guava/issues/3156 by implementing a proper  CollectSpliterators.flatMapTo{Int Long Double} .  Also  modify the existing  CollectSpliterators.flatMap  to accept  null  from its  function  by treating it as an empty  Stream   like  Stream.flatMap  does. Add tests for this behavior.  To test that the new methods also accept  null  through both their  {Int Long Double}Consumer  APIs and their  Consumer  APIs  add  of{Int Long Double}  methods to  SpliteratorTester . They test the given  Spliterator.of{Int Long Double}  through both APIs.  0763099e769963bd0d93f865a4e7c3a5b320085a  -------  <p> Temporarily update public_suffix to include web.app  Without this  developers are not able to set up Google OAuth clients with URLs in Firebase Hosting web.app domain.  41b8aeaeb71cab1a151d4359a409bfd54bb81262
3560 ;  guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix an issue where the InputStream returned by BaseEncoding.decodingStream(Reader) could fail to throw DecodingException while decoding an invalid string.  This was caused by the default behavior of InputStream.read(byte[]  int  int)  which swallows any IOException thrown by any call to the single-byte read() method other than the first. To fix it  just override that method with an implementation that does not swallow any exceptions.  Fixes https://github.com/google/guava/issues/3542  4e6478d4bec284f047a686b8a16dc2b32628639a  -------  <p> Add more clarification on what  access  means in expireAfterAccess(). Previous comment doesn t mention  containsKey()   Copied from https://github.com/google/guava/wiki/CachesExplained#asmap  RELNOTES=comment change  f2bd7744e575393f065253c8f1bc2a512d452b63  -------  <p> Document that HashBiMap.containsValue() tends to run in faster-than-linear time (overriding the default documentation from AbstractMap.containsValue()).  Fixes #1973  7d57c233c9922ca9adbbef552b5f8f66bd7856f0  -------  <p> Add note about {@code ByteSource.wrap} s use of the given byte array.  Fixes https://github.com/google/guava/issues/2603  9276a79f6e9b012935b791a3e6d0b7f3d00b715b  -------  <p> Fix https://github.com/google/guava/issues/3156 by implementing a proper  CollectSpliterators.flatMapTo{Int Long Double} .  Also  modify the existing  CollectSpliterators.flatMap  to accept  null  from its  function  by treating it as an empty  Stream   like  Stream.flatMap  does. Add tests for this behavior.  To test that the new methods also accept  null  through both their  {Int Long Double}Consumer  APIs and their  Consumer  APIs  add  of{Int Long Double}  methods to  SpliteratorTester . They test the given  Spliterator.of{Int Long Double}  through both APIs.  0763099e769963bd0d93f865a4e7c3a5b320085a  -------  <p> Temporarily update public_suffix to include web.app  Without this  developers are not able to set up Google OAuth clients with URLs in Firebase Hosting web.app domain.  41b8aeaeb71cab1a151d4359a409bfd54bb81262
3572 ; android/guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add toString() to ForwardingFluentFuture  to match ForwardingFuture  RELNOTES=N/A  cedfa4a718a128d30f9af953f304b425b52b6f94
3572 ;  guava/src/com/google/common/util/concurrent/ForwardingFluentFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add toString() to ForwardingFluentFuture  to match ForwardingFuture  RELNOTES=N/A  cedfa4a718a128d30f9af953f304b425b52b6f94
3573 ; android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; MOE sync ; nan
3573 ;  guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; MOE sync ; nan
3575 ; android/guava/src/com/google/common/net/HttpHeaders.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constant for the Upgrade-Insecure-Requests header.  https://w3c.github.io/webappsec-upgrade-insecure-requests/#preference  RELNOTES=Adds constant for the Upgrade-Insecure-Requests header.  7e5aa662985c6e54396b1e751149bef17236bc27
3575 ;  guava/src/com/google/common/net/HttpHeaders.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constant for the Upgrade-Insecure-Requests header.  https://w3c.github.io/webappsec-upgrade-insecure-requests/#preference  RELNOTES=Adds constant for the Upgrade-Insecure-Requests header.  7e5aa662985c6e54396b1e751149bef17236bc27
3578 ; android/guava/src/com/google/common/net/HttpHeaders.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Restore Javadoc unintentionally lost in CL 264984423.  https://github.com/google/guava/pull/3575#issuecomment-524440221  0a9ddbca861d787f2b1d110905e043c25dacfc89
3578 ;  guava/src/com/google/common/net/HttpHeaders.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Restore Javadoc unintentionally lost in CL 264984423.  https://github.com/google/guava/pull/3575#issuecomment-524440221  0a9ddbca861d787f2b1d110905e043c25dacfc89
3579 ; android/guava/src/com/google/common/base/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  android/guava/src/com/google/common/collect/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  android/guava/src/com/google/common/primitives/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src-super/com/google/common/base/super/com/google/common/base/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/base/Absent_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/base/PairwiseEquivalence_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/base/Present_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/AllEqualOrdering_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/ArrayListMultimap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/ByFunctionOrdering_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/ComparatorOrdering_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/CompoundOrdering_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/DenseImmutableTable_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/EmptyImmutableListMultimap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/EmptyImmutableSetMultimap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/ExplicitOrdering_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/HashBasedTable_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/HashMultimap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/HashMultiset_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/ImmutableEntry_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/ImmutableEnumMap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/ImmutableEnumSet_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/ImmutableListMultimap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/ImmutableSetMultimap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/ImmutableSortedMap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/JdkBackedImmutableBiMap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/JdkBackedImmutableMap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/JdkBackedImmutableMultiset_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/JdkBackedImmutableSet_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/LexicographicalOrdering_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/LinkedHashMultimap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/LinkedHashMultiset_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/LinkedListMultimap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/NaturalOrdering_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/NullsFirstOrdering_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/NullsLastOrdering_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/Range_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/RegularImmutableAsList_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/RegularImmutableBiMap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/RegularImmutableList_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/RegularImmutableMap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/RegularImmutableMultiset_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/RegularImmutableSet_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/RegularImmutableSortedSet_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/ReverseNaturalOrdering_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/ReverseOrdering_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/SingletonImmutableBiMap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/SingletonImmutableList_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/SingletonImmutableSet_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/SingletonImmutableTable_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/SparseImmutableTable_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/TreeBasedTable_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/TreeMultimap_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/collect/UsingToStringOrdering_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava-gwt/src/com/google/common/primitives/UnsignedLong_CustomFieldSerializer.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava/src/com/google/common/base/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava/src/com/google/common/collect/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3579 ;  guava/src/com/google/common/primitives/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix  bug  link that was actually a CL.  4c5e8a226a1c4a963d6041f7ee6aa32076fa2ac8  -------  <p> Simplify while+break into do-while.  Fixes #3577  39aadb3531f7d73ed634780abe2679c9e42bcb17  -------  <p> Release resources of whenAllSucceed/whenAllComplete once input futures are complete.  RELNOTES=Fixes potential memory leak in Futures.whenAllSucceed/whenAllComplete  a840d5bec35b56a6a6e195477e35a1b0e92d3681  -------  <p> Prepare for removing GWT-RPC support for Guava types by adding a system property that disables it.  When the time comes  we ll flip the default value  and users who didn t see our earlier warnings can use a system property to restore support until they can stop serializing our types.  []  967010aa4d5ecf35fd3861913c3f17c10c4f6d40
3583 ; android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Release the input futures as soon as we submit the combiner task. But really  redo how we release resources in general.  This is a followup to CL 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn t if the combiner returned a Future that was still pending). That CL was good enough for practical purposes  but I wanted to better understand how we release resources.  This CL standardizes on AggregateFuture.releaseResources() as the way to null out all fields[*]  merging logic from releaseResources()  releaseResourcesAfterFailure()  and AsyncCallableInterruptibleTask.setValue(...). As part of that  it merges AggregateFuture and AggregateFutureState/RunningState into a single object.  [*] OK  except seenExceptions  which gets its own handling. As a bonus  I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case. Specifically  it clears it when all inputs are done  rather than when the combiner task has finished running.  It turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. CombinedFuture.releaseResources() can t null out  task  until the future is done or the task is done running. That s because it may need to interrupt the task. To handle this  I don t null out  task  in releaseResources() unless isDone(). To ensure that  task  still gets nulled out as soon as it s done running  I null it out directly in afterRanInterruptibly(). (OK  this is another exception to my claim that releaseResources() handles nulling out  all  fields....)  2. Even if the output future is done  processCompleted() sometimes needs access to the original futures in order to see whether any of them failed. To handle this  I store them in the listener and pass them through to processCompleted() (when necessary).  The changes to prod code are net negative in line count  at least ignoring the added comments. I ve also added a couple tests  only one of which passed before this CL. And I think the model for when fields are nulled out is overall clearer after this CL. So hopefully this CL is a step forward  despite the complexity of the changes and the remaining complexity in the code. (I also included a few unrelated simplifications  like not bothering to check collectsValues before calling collectOneValue(...).)  (Aside: This CL s releaseResources() is like our proposed afterCommit() API but different. First  releaseResources() may be called even before set() or setAsync() in the CombinedFuture case. Second  CombinedFuture may rely on the fact that it s called twice in some cases: It s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . But that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so CombinedFuture is unlikely to hold the final reference to it. Anyway  for more discussion of afterCommit()  see https://github.com/google/guava/issues/2886)  []  41a8adb81e2ebf27e9d85f70671ff8f97fd7721b
3583 ;  android/guava/src/com/google/common/util/concurrent/AggregateFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Release the input futures as soon as we submit the combiner task. But really  redo how we release resources in general.  This is a followup to CL 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn t if the combiner returned a Future that was still pending). That CL was good enough for practical purposes  but I wanted to better understand how we release resources.  This CL standardizes on AggregateFuture.releaseResources() as the way to null out all fields[*]  merging logic from releaseResources()  releaseResourcesAfterFailure()  and AsyncCallableInterruptibleTask.setValue(...). As part of that  it merges AggregateFuture and AggregateFutureState/RunningState into a single object.  [*] OK  except seenExceptions  which gets its own handling. As a bonus  I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case. Specifically  it clears it when all inputs are done  rather than when the combiner task has finished running.  It turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. CombinedFuture.releaseResources() can t null out  task  until the future is done or the task is done running. That s because it may need to interrupt the task. To handle this  I don t null out  task  in releaseResources() unless isDone(). To ensure that  task  still gets nulled out as soon as it s done running  I null it out directly in afterRanInterruptibly(). (OK  this is another exception to my claim that releaseResources() handles nulling out  all  fields....)  2. Even if the output future is done  processCompleted() sometimes needs access to the original futures in order to see whether any of them failed. To handle this  I store them in the listener and pass them through to processCompleted() (when necessary).  The changes to prod code are net negative in line count  at least ignoring the added comments. I ve also added a couple tests  only one of which passed before this CL. And I think the model for when fields are nulled out is overall clearer after this CL. So hopefully this CL is a step forward  despite the complexity of the changes and the remaining complexity in the code. (I also included a few unrelated simplifications  like not bothering to check collectsValues before calling collectOneValue(...).)  (Aside: This CL s releaseResources() is like our proposed afterCommit() API but different. First  releaseResources() may be called even before set() or setAsync() in the CombinedFuture case. Second  CombinedFuture may rely on the fact that it s called twice in some cases: It s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . But that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so CombinedFuture is unlikely to hold the final reference to it. Anyway  for more discussion of afterCommit()  see https://github.com/google/guava/issues/2886)  []  41a8adb81e2ebf27e9d85f70671ff8f97fd7721b
3583 ;  android/guava/src/com/google/common/util/concurrent/AggregateFutureState.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Release the input futures as soon as we submit the combiner task. But really  redo how we release resources in general.  This is a followup to CL 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn t if the combiner returned a Future that was still pending). That CL was good enough for practical purposes  but I wanted to better understand how we release resources.  This CL standardizes on AggregateFuture.releaseResources() as the way to null out all fields[*]  merging logic from releaseResources()  releaseResourcesAfterFailure()  and AsyncCallableInterruptibleTask.setValue(...). As part of that  it merges AggregateFuture and AggregateFutureState/RunningState into a single object.  [*] OK  except seenExceptions  which gets its own handling. As a bonus  I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case. Specifically  it clears it when all inputs are done  rather than when the combiner task has finished running.  It turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. CombinedFuture.releaseResources() can t null out  task  until the future is done or the task is done running. That s because it may need to interrupt the task. To handle this  I don t null out  task  in releaseResources() unless isDone(). To ensure that  task  still gets nulled out as soon as it s done running  I null it out directly in afterRanInterruptibly(). (OK  this is another exception to my claim that releaseResources() handles nulling out  all  fields....)  2. Even if the output future is done  processCompleted() sometimes needs access to the original futures in order to see whether any of them failed. To handle this  I store them in the listener and pass them through to processCompleted() (when necessary).  The changes to prod code are net negative in line count  at least ignoring the added comments. I ve also added a couple tests  only one of which passed before this CL. And I think the model for when fields are nulled out is overall clearer after this CL. So hopefully this CL is a step forward  despite the complexity of the changes and the remaining complexity in the code. (I also included a few unrelated simplifications  like not bothering to check collectsValues before calling collectOneValue(...).)  (Aside: This CL s releaseResources() is like our proposed afterCommit() API but different. First  releaseResources() may be called even before set() or setAsync() in the CombinedFuture case. Second  CombinedFuture may rely on the fact that it s called twice in some cases: It s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . But that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so CombinedFuture is unlikely to hold the final reference to it. Anyway  for more discussion of afterCommit()  see https://github.com/google/guava/issues/2886)  []  41a8adb81e2ebf27e9d85f70671ff8f97fd7721b
3583 ;  android/guava/src/com/google/common/util/concurrent/CollectionFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Release the input futures as soon as we submit the combiner task. But really  redo how we release resources in general.  This is a followup to CL 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn t if the combiner returned a Future that was still pending). That CL was good enough for practical purposes  but I wanted to better understand how we release resources.  This CL standardizes on AggregateFuture.releaseResources() as the way to null out all fields[*]  merging logic from releaseResources()  releaseResourcesAfterFailure()  and AsyncCallableInterruptibleTask.setValue(...). As part of that  it merges AggregateFuture and AggregateFutureState/RunningState into a single object.  [*] OK  except seenExceptions  which gets its own handling. As a bonus  I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case. Specifically  it clears it when all inputs are done  rather than when the combiner task has finished running.  It turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. CombinedFuture.releaseResources() can t null out  task  until the future is done or the task is done running. That s because it may need to interrupt the task. To handle this  I don t null out  task  in releaseResources() unless isDone(). To ensure that  task  still gets nulled out as soon as it s done running  I null it out directly in afterRanInterruptibly(). (OK  this is another exception to my claim that releaseResources() handles nulling out  all  fields....)  2. Even if the output future is done  processCompleted() sometimes needs access to the original futures in order to see whether any of them failed. To handle this  I store them in the listener and pass them through to processCompleted() (when necessary).  The changes to prod code are net negative in line count  at least ignoring the added comments. I ve also added a couple tests  only one of which passed before this CL. And I think the model for when fields are nulled out is overall clearer after this CL. So hopefully this CL is a step forward  despite the complexity of the changes and the remaining complexity in the code. (I also included a few unrelated simplifications  like not bothering to check collectsValues before calling collectOneValue(...).)  (Aside: This CL s releaseResources() is like our proposed afterCommit() API but different. First  releaseResources() may be called even before set() or setAsync() in the CombinedFuture case. Second  CombinedFuture may rely on the fact that it s called twice in some cases: It s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . But that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so CombinedFuture is unlikely to hold the final reference to it. Anyway  for more discussion of afterCommit()  see https://github.com/google/guava/issues/2886)  []  41a8adb81e2ebf27e9d85f70671ff8f97fd7721b
3583 ;  android/guava/src/com/google/common/util/concurrent/CombinedFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Release the input futures as soon as we submit the combiner task. But really  redo how we release resources in general.  This is a followup to CL 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn t if the combiner returned a Future that was still pending). That CL was good enough for practical purposes  but I wanted to better understand how we release resources.  This CL standardizes on AggregateFuture.releaseResources() as the way to null out all fields[*]  merging logic from releaseResources()  releaseResourcesAfterFailure()  and AsyncCallableInterruptibleTask.setValue(...). As part of that  it merges AggregateFuture and AggregateFutureState/RunningState into a single object.  [*] OK  except seenExceptions  which gets its own handling. As a bonus  I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case. Specifically  it clears it when all inputs are done  rather than when the combiner task has finished running.  It turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. CombinedFuture.releaseResources() can t null out  task  until the future is done or the task is done running. That s because it may need to interrupt the task. To handle this  I don t null out  task  in releaseResources() unless isDone(). To ensure that  task  still gets nulled out as soon as it s done running  I null it out directly in afterRanInterruptibly(). (OK  this is another exception to my claim that releaseResources() handles nulling out  all  fields....)  2. Even if the output future is done  processCompleted() sometimes needs access to the original futures in order to see whether any of them failed. To handle this  I store them in the listener and pass them through to processCompleted() (when necessary).  The changes to prod code are net negative in line count  at least ignoring the added comments. I ve also added a couple tests  only one of which passed before this CL. And I think the model for when fields are nulled out is overall clearer after this CL. So hopefully this CL is a step forward  despite the complexity of the changes and the remaining complexity in the code. (I also included a few unrelated simplifications  like not bothering to check collectsValues before calling collectOneValue(...).)  (Aside: This CL s releaseResources() is like our proposed afterCommit() API but different. First  releaseResources() may be called even before set() or setAsync() in the CombinedFuture case. Second  CombinedFuture may rely on the fact that it s called twice in some cases: It s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . But that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so CombinedFuture is unlikely to hold the final reference to it. Anyway  for more discussion of afterCommit()  see https://github.com/google/guava/issues/2886)  []  41a8adb81e2ebf27e9d85f70671ff8f97fd7721b
3583 ;  guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/AggregateFutureState.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Release the input futures as soon as we submit the combiner task. But really  redo how we release resources in general.  This is a followup to CL 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn t if the combiner returned a Future that was still pending). That CL was good enough for practical purposes  but I wanted to better understand how we release resources.  This CL standardizes on AggregateFuture.releaseResources() as the way to null out all fields[*]  merging logic from releaseResources()  releaseResourcesAfterFailure()  and AsyncCallableInterruptibleTask.setValue(...). As part of that  it merges AggregateFuture and AggregateFutureState/RunningState into a single object.  [*] OK  except seenExceptions  which gets its own handling. As a bonus  I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case. Specifically  it clears it when all inputs are done  rather than when the combiner task has finished running.  It turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. CombinedFuture.releaseResources() can t null out  task  until the future is done or the task is done running. That s because it may need to interrupt the task. To handle this  I don t null out  task  in releaseResources() unless isDone(). To ensure that  task  still gets nulled out as soon as it s done running  I null it out directly in afterRanInterruptibly(). (OK  this is another exception to my claim that releaseResources() handles nulling out  all  fields....)  2. Even if the output future is done  processCompleted() sometimes needs access to the original futures in order to see whether any of them failed. To handle this  I store them in the listener and pass them through to processCompleted() (when necessary).  The changes to prod code are net negative in line count  at least ignoring the added comments. I ve also added a couple tests  only one of which passed before this CL. And I think the model for when fields are nulled out is overall clearer after this CL. So hopefully this CL is a step forward  despite the complexity of the changes and the remaining complexity in the code. (I also included a few unrelated simplifications  like not bothering to check collectsValues before calling collectOneValue(...).)  (Aside: This CL s releaseResources() is like our proposed afterCommit() API but different. First  releaseResources() may be called even before set() or setAsync() in the CombinedFuture case. Second  CombinedFuture may rely on the fact that it s called twice in some cases: It s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . But that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so CombinedFuture is unlikely to hold the final reference to it. Anyway  for more discussion of afterCommit()  see https://github.com/google/guava/issues/2886)  []  41a8adb81e2ebf27e9d85f70671ff8f97fd7721b
3583 ;  guava-gwt/test/com/google/common/util/concurrent/FuturesTest_gwt.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Release the input futures as soon as we submit the combiner task. But really  redo how we release resources in general.  This is a followup to CL 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn t if the combiner returned a Future that was still pending). That CL was good enough for practical purposes  but I wanted to better understand how we release resources.  This CL standardizes on AggregateFuture.releaseResources() as the way to null out all fields[*]  merging logic from releaseResources()  releaseResourcesAfterFailure()  and AsyncCallableInterruptibleTask.setValue(...). As part of that  it merges AggregateFuture and AggregateFutureState/RunningState into a single object.  [*] OK  except seenExceptions  which gets its own handling. As a bonus  I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case. Specifically  it clears it when all inputs are done  rather than when the combiner task has finished running.  It turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. CombinedFuture.releaseResources() can t null out  task  until the future is done or the task is done running. That s because it may need to interrupt the task. To handle this  I don t null out  task  in releaseResources() unless isDone(). To ensure that  task  still gets nulled out as soon as it s done running  I null it out directly in afterRanInterruptibly(). (OK  this is another exception to my claim that releaseResources() handles nulling out  all  fields....)  2. Even if the output future is done  processCompleted() sometimes needs access to the original futures in order to see whether any of them failed. To handle this  I store them in the listener and pass them through to processCompleted() (when necessary).  The changes to prod code are net negative in line count  at least ignoring the added comments. I ve also added a couple tests  only one of which passed before this CL. And I think the model for when fields are nulled out is overall clearer after this CL. So hopefully this CL is a step forward  despite the complexity of the changes and the remaining complexity in the code. (I also included a few unrelated simplifications  like not bothering to check collectsValues before calling collectOneValue(...).)  (Aside: This CL s releaseResources() is like our proposed afterCommit() API but different. First  releaseResources() may be called even before set() or setAsync() in the CombinedFuture case. Second  CombinedFuture may rely on the fact that it s called twice in some cases: It s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . But that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so CombinedFuture is unlikely to hold the final reference to it. Anyway  for more discussion of afterCommit()  see https://github.com/google/guava/issues/2886)  []  41a8adb81e2ebf27e9d85f70671ff8f97fd7721b
3583 ;  guava-tests/test/com/google/common/util/concurrent/FuturesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Release the input futures as soon as we submit the combiner task. But really  redo how we release resources in general.  This is a followup to CL 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn t if the combiner returned a Future that was still pending). That CL was good enough for practical purposes  but I wanted to better understand how we release resources.  This CL standardizes on AggregateFuture.releaseResources() as the way to null out all fields[*]  merging logic from releaseResources()  releaseResourcesAfterFailure()  and AsyncCallableInterruptibleTask.setValue(...). As part of that  it merges AggregateFuture and AggregateFutureState/RunningState into a single object.  [*] OK  except seenExceptions  which gets its own handling. As a bonus  I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case. Specifically  it clears it when all inputs are done  rather than when the combiner task has finished running.  It turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. CombinedFuture.releaseResources() can t null out  task  until the future is done or the task is done running. That s because it may need to interrupt the task. To handle this  I don t null out  task  in releaseResources() unless isDone(). To ensure that  task  still gets nulled out as soon as it s done running  I null it out directly in afterRanInterruptibly(). (OK  this is another exception to my claim that releaseResources() handles nulling out  all  fields....)  2. Even if the output future is done  processCompleted() sometimes needs access to the original futures in order to see whether any of them failed. To handle this  I store them in the listener and pass them through to processCompleted() (when necessary).  The changes to prod code are net negative in line count  at least ignoring the added comments. I ve also added a couple tests  only one of which passed before this CL. And I think the model for when fields are nulled out is overall clearer after this CL. So hopefully this CL is a step forward  despite the complexity of the changes and the remaining complexity in the code. (I also included a few unrelated simplifications  like not bothering to check collectsValues before calling collectOneValue(...).)  (Aside: This CL s releaseResources() is like our proposed afterCommit() API but different. First  releaseResources() may be called even before set() or setAsync() in the CombinedFuture case. Second  CombinedFuture may rely on the fact that it s called twice in some cases: It s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . But that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so CombinedFuture is unlikely to hold the final reference to it. Anyway  for more discussion of afterCommit()  see https://github.com/google/guava/issues/2886)  []  41a8adb81e2ebf27e9d85f70671ff8f97fd7721b
3583 ;  guava/src/com/google/common/util/concurrent/AggregateFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Release the input futures as soon as we submit the combiner task. But really  redo how we release resources in general.  This is a followup to CL 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn t if the combiner returned a Future that was still pending). That CL was good enough for practical purposes  but I wanted to better understand how we release resources.  This CL standardizes on AggregateFuture.releaseResources() as the way to null out all fields[*]  merging logic from releaseResources()  releaseResourcesAfterFailure()  and AsyncCallableInterruptibleTask.setValue(...). As part of that  it merges AggregateFuture and AggregateFutureState/RunningState into a single object.  [*] OK  except seenExceptions  which gets its own handling. As a bonus  I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case. Specifically  it clears it when all inputs are done  rather than when the combiner task has finished running.  It turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. CombinedFuture.releaseResources() can t null out  task  until the future is done or the task is done running. That s because it may need to interrupt the task. To handle this  I don t null out  task  in releaseResources() unless isDone(). To ensure that  task  still gets nulled out as soon as it s done running  I null it out directly in afterRanInterruptibly(). (OK  this is another exception to my claim that releaseResources() handles nulling out  all  fields....)  2. Even if the output future is done  processCompleted() sometimes needs access to the original futures in order to see whether any of them failed. To handle this  I store them in the listener and pass them through to processCompleted() (when necessary).  The changes to prod code are net negative in line count  at least ignoring the added comments. I ve also added a couple tests  only one of which passed before this CL. And I think the model for when fields are nulled out is overall clearer after this CL. So hopefully this CL is a step forward  despite the complexity of the changes and the remaining complexity in the code. (I also included a few unrelated simplifications  like not bothering to check collectsValues before calling collectOneValue(...).)  (Aside: This CL s releaseResources() is like our proposed afterCommit() API but different. First  releaseResources() may be called even before set() or setAsync() in the CombinedFuture case. Second  CombinedFuture may rely on the fact that it s called twice in some cases: It s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . But that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so CombinedFuture is unlikely to hold the final reference to it. Anyway  for more discussion of afterCommit()  see https://github.com/google/guava/issues/2886)  []  41a8adb81e2ebf27e9d85f70671ff8f97fd7721b
3583 ;  guava/src/com/google/common/util/concurrent/AggregateFutureState.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Release the input futures as soon as we submit the combiner task. But really  redo how we release resources in general.  This is a followup to CL 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn t if the combiner returned a Future that was still pending). That CL was good enough for practical purposes  but I wanted to better understand how we release resources.  This CL standardizes on AggregateFuture.releaseResources() as the way to null out all fields[*]  merging logic from releaseResources()  releaseResourcesAfterFailure()  and AsyncCallableInterruptibleTask.setValue(...). As part of that  it merges AggregateFuture and AggregateFutureState/RunningState into a single object.  [*] OK  except seenExceptions  which gets its own handling. As a bonus  I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case. Specifically  it clears it when all inputs are done  rather than when the combiner task has finished running.  It turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. CombinedFuture.releaseResources() can t null out  task  until the future is done or the task is done running. That s because it may need to interrupt the task. To handle this  I don t null out  task  in releaseResources() unless isDone(). To ensure that  task  still gets nulled out as soon as it s done running  I null it out directly in afterRanInterruptibly(). (OK  this is another exception to my claim that releaseResources() handles nulling out  all  fields....)  2. Even if the output future is done  processCompleted() sometimes needs access to the original futures in order to see whether any of them failed. To handle this  I store them in the listener and pass them through to processCompleted() (when necessary).  The changes to prod code are net negative in line count  at least ignoring the added comments. I ve also added a couple tests  only one of which passed before this CL. And I think the model for when fields are nulled out is overall clearer after this CL. So hopefully this CL is a step forward  despite the complexity of the changes and the remaining complexity in the code. (I also included a few unrelated simplifications  like not bothering to check collectsValues before calling collectOneValue(...).)  (Aside: This CL s releaseResources() is like our proposed afterCommit() API but different. First  releaseResources() may be called even before set() or setAsync() in the CombinedFuture case. Second  CombinedFuture may rely on the fact that it s called twice in some cases: It s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . But that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so CombinedFuture is unlikely to hold the final reference to it. Anyway  for more discussion of afterCommit()  see https://github.com/google/guava/issues/2886)  []  41a8adb81e2ebf27e9d85f70671ff8f97fd7721b
3583 ;  guava/src/com/google/common/util/concurrent/CollectionFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Release the input futures as soon as we submit the combiner task. But really  redo how we release resources in general.  This is a followup to CL 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn t if the combiner returned a Future that was still pending). That CL was good enough for practical purposes  but I wanted to better understand how we release resources.  This CL standardizes on AggregateFuture.releaseResources() as the way to null out all fields[*]  merging logic from releaseResources()  releaseResourcesAfterFailure()  and AsyncCallableInterruptibleTask.setValue(...). As part of that  it merges AggregateFuture and AggregateFutureState/RunningState into a single object.  [*] OK  except seenExceptions  which gets its own handling. As a bonus  I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case. Specifically  it clears it when all inputs are done  rather than when the combiner task has finished running.  It turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. CombinedFuture.releaseResources() can t null out  task  until the future is done or the task is done running. That s because it may need to interrupt the task. To handle this  I don t null out  task  in releaseResources() unless isDone(). To ensure that  task  still gets nulled out as soon as it s done running  I null it out directly in afterRanInterruptibly(). (OK  this is another exception to my claim that releaseResources() handles nulling out  all  fields....)  2. Even if the output future is done  processCompleted() sometimes needs access to the original futures in order to see whether any of them failed. To handle this  I store them in the listener and pass them through to processCompleted() (when necessary).  The changes to prod code are net negative in line count  at least ignoring the added comments. I ve also added a couple tests  only one of which passed before this CL. And I think the model for when fields are nulled out is overall clearer after this CL. So hopefully this CL is a step forward  despite the complexity of the changes and the remaining complexity in the code. (I also included a few unrelated simplifications  like not bothering to check collectsValues before calling collectOneValue(...).)  (Aside: This CL s releaseResources() is like our proposed afterCommit() API but different. First  releaseResources() may be called even before set() or setAsync() in the CombinedFuture case. Second  CombinedFuture may rely on the fact that it s called twice in some cases: It s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . But that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so CombinedFuture is unlikely to hold the final reference to it. Anyway  for more discussion of afterCommit()  see https://github.com/google/guava/issues/2886)  []  41a8adb81e2ebf27e9d85f70671ff8f97fd7721b
3583 ;  guava/src/com/google/common/util/concurrent/CombinedFuture.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Release the input futures as soon as we submit the combiner task. But really  redo how we release resources in general.  This is a followup to CL 265489523  which  only  released the input futures as soon as the combiner task finished running (which had often happened even before that CL but hadn t if the combiner returned a Future that was still pending). That CL was good enough for practical purposes  but I wanted to better understand how we release resources.  This CL standardizes on AggregateFuture.releaseResources() as the way to null out all fields[*]  merging logic from releaseResources()  releaseResourcesAfterFailure()  and AsyncCallableInterruptibleTask.setValue(...). As part of that  it merges AggregateFuture and AggregateFutureState/RunningState into a single object.  [*] OK  except seenExceptions  which gets its own handling. As a bonus  I believe that this CL clears seenExceptions earlier than it used to be cleared in the CombinedFuture case. Specifically  it clears it when all inputs are done  rather than when the combiner task has finished running.  It turns out that blindly nulling out fields is too aggressive  so we need to be careful in 2 cases:  1. CombinedFuture.releaseResources() can t null out  task  until the future is done or the task is done running. That s because it may need to interrupt the task. To handle this  I don t null out  task  in releaseResources() unless isDone(). To ensure that  task  still gets nulled out as soon as it s done running  I null it out directly in afterRanInterruptibly(). (OK  this is another exception to my claim that releaseResources() handles nulling out  all  fields....)  2. Even if the output future is done  processCompleted() sometimes needs access to the original futures in order to see whether any of them failed. To handle this  I store them in the listener and pass them through to processCompleted() (when necessary).  The changes to prod code are net negative in line count  at least ignoring the added comments. I ve also added a couple tests  only one of which passed before this CL. And I think the model for when fields are nulled out is overall clearer after this CL. So hopefully this CL is a step forward  despite the complexity of the changes and the remaining complexity in the code. (I also included a few unrelated simplifications  like not bothering to check collectsValues before calling collectOneValue(...).)  (Aside: This CL s releaseResources() is like our proposed afterCommit() API but different. First  releaseResources() may be called even before set() or setAsync() in the CombinedFuture case. Second  CombinedFuture may rely on the fact that it s called twice in some cases: It s called once when all inputs complete  but it doesn t null out  task   and then it can be called again if the output is cancelled  at which point it *does* null out  task . But that probably doesn t matter too much because the task was probably handed to an executor in the meantime  so CombinedFuture is unlikely to hold the final reference to it. Anyway  for more discussion of afterCommit()  see https://github.com/google/guava/issues/2886)  []  41a8adb81e2ebf27e9d85f70671ff8f97fd7721b
3586 ; android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Let ListenableFuture implement thenable via a default interface method in J2CL  RELNOTES=Let ListenableFuture implement thenable via a default interface method in J2CL  f6bb300d5fe145486dbeb28c544867f562ddc185  -------  <p> Let ListenableFuture implement thenable via a default interface method in J2CL  ***  f45705983f8dbaf48896b8ec783b4d56e7b1f184  -------  <p> Update Public Suffix data.  The copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  When that bug is not updated  the copy is updated 3 weeks before the Estimated Week of Stable:  https://www.chromium.org/developers/calendar#TOC-Estimated-Stable-Dates  a793784ba71562cdabf41ba87aad849440b145a7
3586 ;  guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Let ListenableFuture implement thenable via a default interface method in J2CL  RELNOTES=Let ListenableFuture implement thenable via a default interface method in J2CL  f6bb300d5fe145486dbeb28c544867f562ddc185  -------  <p> Let ListenableFuture implement thenable via a default interface method in J2CL  ***  f45705983f8dbaf48896b8ec783b4d56e7b1f184  -------  <p> Update Public Suffix data.  The copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  When that bug is not updated  the copy is updated 3 weeks before the Estimated Week of Stable:  https://www.chromium.org/developers/calendar#TOC-Estimated-Stable-Dates  a793784ba71562cdabf41ba87aad849440b145a7
3588 ; android/guava/src/com/google/common/net/PercentEscaper.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Modify comment about safeOctets.length to be consistent with code.  f7012fc03d4a3c0337e6f45a7f81052bfa0718b9
3588 ;  guava/src/com/google/common/net/PercentEscaper.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Modify comment about safeOctets.length to be consistent with code.  f7012fc03d4a3c0337e6f45a7f81052bfa0718b9
3597 ; android/guava/src/com/google/common/util/concurrent/Futures.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Explicitly document that whenAllComplete will swallow failures (in contrast to waiting for all futures to complete and then propagating the first failure).  98971ae01e62ed36f99c8bb5c4e897eac8cb1988
3597 ;  guava/src/com/google/common/util/concurrent/Futures.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Explicitly document that whenAllComplete will swallow failures (in contrast to waiting for all futures to complete and then propagating the first failure).  98971ae01e62ed36f99c8bb5c4e897eac8cb1988
3605 ; android/guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Combine ImmediateSuccessfulFuture into ImmediateFuture.  ImmediateFuture used to have other implementations  but we switched those to extend TrustedFuture instead.  d780cd5f2b0ccc2610c039c30c04e987771dd0a5  -------  <p> Rollback previous commit.  0812745bec6e345b232154d815ad242cbb4fda37  -------  <p> Roll forward previous rollback  but without making the type final.  4c984c649e1f4665a7dbee5f568cfa25def76727  -------  <p> Fix (and in one case  suppress) low-hanging rawtypes warnings.  It looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact  I had to revert one similar change because it broke a GWT build. I m hoping that that means that the others are safe.  cabc402dbf3805f04e19ba9d72e7f8802ab6bb75  -------  <p> Increase various tests  timeouts.  25842ed29c2c13b949836082552c5fee0cdcb0d5
3605 ;  android/guava-tests/test/com/google/common/util/concurrent/AtomicLongMapTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Combine ImmediateSuccessfulFuture into ImmediateFuture.  ImmediateFuture used to have other implementations  but we switched those to extend TrustedFuture instead.  d780cd5f2b0ccc2610c039c30c04e987771dd0a5  -------  <p> Rollback previous commit.  0812745bec6e345b232154d815ad242cbb4fda37  -------  <p> Roll forward previous rollback  but without making the type final.  4c984c649e1f4665a7dbee5f568cfa25def76727  -------  <p> Fix (and in one case  suppress) low-hanging rawtypes warnings.  It looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact  I had to revert one similar change because it broke a GWT build. I m hoping that that means that the others are safe.  cabc402dbf3805f04e19ba9d72e7f8802ab6bb75  -------  <p> Increase various tests  timeouts.  25842ed29c2c13b949836082552c5fee0cdcb0d5
3605 ;  android/guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Combine ImmediateSuccessfulFuture into ImmediateFuture.  ImmediateFuture used to have other implementations  but we switched those to extend TrustedFuture instead.  d780cd5f2b0ccc2610c039c30c04e987771dd0a5  -------  <p> Rollback previous commit.  0812745bec6e345b232154d815ad242cbb4fda37  -------  <p> Roll forward previous rollback  but without making the type final.  4c984c649e1f4665a7dbee5f568cfa25def76727  -------  <p> Fix (and in one case  suppress) low-hanging rawtypes warnings.  It looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact  I had to revert one similar change because it broke a GWT build. I m hoping that that means that the others are safe.  cabc402dbf3805f04e19ba9d72e7f8802ab6bb75  -------  <p> Increase various tests  timeouts.  25842ed29c2c13b949836082552c5fee0cdcb0d5
3605 ;  android/guava-tests/test/com/google/common/util/concurrent/SimpleTimeLimiterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Combine ImmediateSuccessfulFuture into ImmediateFuture.  ImmediateFuture used to have other implementations  but we switched those to extend TrustedFuture instead.  d780cd5f2b0ccc2610c039c30c04e987771dd0a5  -------  <p> Rollback previous commit.  0812745bec6e345b232154d815ad242cbb4fda37  -------  <p> Roll forward previous rollback  but without making the type final.  4c984c649e1f4665a7dbee5f568cfa25def76727  -------  <p> Fix (and in one case  suppress) low-hanging rawtypes warnings.  It looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact  I had to revert one similar change because it broke a GWT build. I m hoping that that means that the others are safe.  cabc402dbf3805f04e19ba9d72e7f8802ab6bb75  -------  <p> Increase various tests  timeouts.  25842ed29c2c13b949836082552c5fee0cdcb0d5
3605 ;  android/guava-tests/test/com/google/common/util/concurrent/UninterruptibleFutureTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Combine ImmediateSuccessfulFuture into ImmediateFuture.  ImmediateFuture used to have other implementations  but we switched those to extend TrustedFuture instead.  d780cd5f2b0ccc2610c039c30c04e987771dd0a5  -------  <p> Rollback previous commit.  0812745bec6e345b232154d815ad242cbb4fda37  -------  <p> Roll forward previous rollback  but without making the type final.  4c984c649e1f4665a7dbee5f568cfa25def76727  -------  <p> Fix (and in one case  suppress) low-hanging rawtypes warnings.  It looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact  I had to revert one similar change because it broke a GWT build. I m hoping that that means that the others are safe.  cabc402dbf3805f04e19ba9d72e7f8802ab6bb75  -------  <p> Increase various tests  timeouts.  25842ed29c2c13b949836082552c5fee0cdcb0d5
3605 ;  guava-tests/test/com/google/common/util/concurrent/AbstractServiceTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Combine ImmediateSuccessfulFuture into ImmediateFuture.  ImmediateFuture used to have other implementations  but we switched those to extend TrustedFuture instead.  d780cd5f2b0ccc2610c039c30c04e987771dd0a5  -------  <p> Rollback previous commit.  0812745bec6e345b232154d815ad242cbb4fda37  -------  <p> Roll forward previous rollback  but without making the type final.  4c984c649e1f4665a7dbee5f568cfa25def76727  -------  <p> Fix (and in one case  suppress) low-hanging rawtypes warnings.  It looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact  I had to revert one similar change because it broke a GWT build. I m hoping that that means that the others are safe.  cabc402dbf3805f04e19ba9d72e7f8802ab6bb75  -------  <p> Increase various tests  timeouts.  25842ed29c2c13b949836082552c5fee0cdcb0d5
3605 ;  guava-tests/test/com/google/common/util/concurrent/AtomicLongMapTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Combine ImmediateSuccessfulFuture into ImmediateFuture.  ImmediateFuture used to have other implementations  but we switched those to extend TrustedFuture instead.  d780cd5f2b0ccc2610c039c30c04e987771dd0a5  -------  <p> Rollback previous commit.  0812745bec6e345b232154d815ad242cbb4fda37  -------  <p> Roll forward previous rollback  but without making the type final.  4c984c649e1f4665a7dbee5f568cfa25def76727  -------  <p> Fix (and in one case  suppress) low-hanging rawtypes warnings.  It looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact  I had to revert one similar change because it broke a GWT build. I m hoping that that means that the others are safe.  cabc402dbf3805f04e19ba9d72e7f8802ab6bb75  -------  <p> Increase various tests  timeouts.  25842ed29c2c13b949836082552c5fee0cdcb0d5
3605 ;  guava-tests/test/com/google/common/util/concurrent/ServiceManagerTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Combine ImmediateSuccessfulFuture into ImmediateFuture.  ImmediateFuture used to have other implementations  but we switched those to extend TrustedFuture instead.  d780cd5f2b0ccc2610c039c30c04e987771dd0a5  -------  <p> Rollback previous commit.  0812745bec6e345b232154d815ad242cbb4fda37  -------  <p> Roll forward previous rollback  but without making the type final.  4c984c649e1f4665a7dbee5f568cfa25def76727  -------  <p> Fix (and in one case  suppress) low-hanging rawtypes warnings.  It looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact  I had to revert one similar change because it broke a GWT build. I m hoping that that means that the others are safe.  cabc402dbf3805f04e19ba9d72e7f8802ab6bb75  -------  <p> Increase various tests  timeouts.  25842ed29c2c13b949836082552c5fee0cdcb0d5
3605 ;  guava-tests/test/com/google/common/util/concurrent/SimpleTimeLimiterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Combine ImmediateSuccessfulFuture into ImmediateFuture.  ImmediateFuture used to have other implementations  but we switched those to extend TrustedFuture instead.  d780cd5f2b0ccc2610c039c30c04e987771dd0a5  -------  <p> Rollback previous commit.  0812745bec6e345b232154d815ad242cbb4fda37  -------  <p> Roll forward previous rollback  but without making the type final.  4c984c649e1f4665a7dbee5f568cfa25def76727  -------  <p> Fix (and in one case  suppress) low-hanging rawtypes warnings.  It looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact  I had to revert one similar change because it broke a GWT build. I m hoping that that means that the others are safe.  cabc402dbf3805f04e19ba9d72e7f8802ab6bb75  -------  <p> Increase various tests  timeouts.  25842ed29c2c13b949836082552c5fee0cdcb0d5
3605 ;  guava-tests/test/com/google/common/util/concurrent/UninterruptibleFutureTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Combine ImmediateSuccessfulFuture into ImmediateFuture.  ImmediateFuture used to have other implementations  but we switched those to extend TrustedFuture instead.  d780cd5f2b0ccc2610c039c30c04e987771dd0a5  -------  <p> Rollback previous commit.  0812745bec6e345b232154d815ad242cbb4fda37  -------  <p> Roll forward previous rollback  but without making the type final.  4c984c649e1f4665a7dbee5f568cfa25def76727  -------  <p> Fix (and in one case  suppress) low-hanging rawtypes warnings.  It looks like at least some of these may once have been necessary for the Eclipse compiler (used by GWT). In fact  I had to revert one similar change because it broke a GWT build. I m hoping that that means that the others are safe.  cabc402dbf3805f04e19ba9d72e7f8802ab6bb75  -------  <p> Increase various tests  timeouts.  25842ed29c2c13b949836082552c5fee0cdcb0d5
3618 ; android/guava/src/com/google/common/collect/ComputationException.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Export new AtomicLongMapBasherTest to open-source repo.  https://github.com/google/guava/pull/3605#discussion_r324303026  704c08989c9c2c21b4e2cb0ab285a7d84ee0fc3f  -------  <p> Add @LazyInit and @RetainedWith annotations to the lazily calculated  entries  field of ImmutableSetMultimap.  This field is lazily evaluated by entries() without holding a lock  but multiple concurrent calls to entries() will produce idempotent results at the cost of some performance.  996369d89362e0ec93f7dd6e9a6860aa08858c80  -------  <p> Let ListenableFuture implement thenable via a default interface method in J2CL.  This is a second attempt after problems in e0bac74571b81756c4acf767e3ad186b7473a4f8 were fixed.  44909d9d5fc5b394c710a6b8b0d6c3786c765af5  -------  <p> Add test for behavior described in #1900  7329a66694d59bb22e2589eb9a2f620c98a881f9  -------  <p> Undo test CL 9a50815df26be7416be0fac489e29feee7a3c220.  It produces a tiny diff between the common.base and common.collect copies of AbstractIterator.  c82f7916879a46539a1e53ac98dda90e9c5537b8  -------  <p> Add Splitter.splitToStream().  6c984121f74d5cea97ac1ffabfe98938bc7c96c4  -------  <p> Add comment explaining TABLE and MULTIPLIER in CharMatcher.Whitespace  Fixes #1661  5430b140cae37b078fd4dda9b1a57a025664cfe1  -------  <p> Rollback of adding Splitter.splitToStream().  *** Reason for rollback ***  My guess is that this change somehow upsets an allowed list of one-definition violations.  3f49efe9f00a2ed9dd3bd1cde1d5d596833b7391  -------  <p> Rollback of change to let ListenableFuture implement thenable via a default interface method in J2CL.  38c9a029e6cc538bcc46b9ad23fe03a62739d433  -------  <p> Clean up leftovers from MapMaker.makeComputingMap:  - Remove makeComputingMap from the GWT emulation. - Deprecate ComputationException.  0b93365c2440981c04a94f6e5596d3f723549ea3
3618 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/MapMaker.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Export new AtomicLongMapBasherTest to open-source repo.  https://github.com/google/guava/pull/3605#discussion_r324303026  704c08989c9c2c21b4e2cb0ab285a7d84ee0fc3f  -------  <p> Add @LazyInit and @RetainedWith annotations to the lazily calculated  entries  field of ImmutableSetMultimap.  This field is lazily evaluated by entries() without holding a lock  but multiple concurrent calls to entries() will produce idempotent results at the cost of some performance.  996369d89362e0ec93f7dd6e9a6860aa08858c80  -------  <p> Let ListenableFuture implement thenable via a default interface method in J2CL.  This is a second attempt after problems in e0bac74571b81756c4acf767e3ad186b7473a4f8 were fixed.  44909d9d5fc5b394c710a6b8b0d6c3786c765af5  -------  <p> Add test for behavior described in #1900  7329a66694d59bb22e2589eb9a2f620c98a881f9  -------  <p> Undo test CL 9a50815df26be7416be0fac489e29feee7a3c220.  It produces a tiny diff between the common.base and common.collect copies of AbstractIterator.  c82f7916879a46539a1e53ac98dda90e9c5537b8  -------  <p> Add Splitter.splitToStream().  6c984121f74d5cea97ac1ffabfe98938bc7c96c4  -------  <p> Add comment explaining TABLE and MULTIPLIER in CharMatcher.Whitespace  Fixes #1661  5430b140cae37b078fd4dda9b1a57a025664cfe1  -------  <p> Rollback of adding Splitter.splitToStream().  *** Reason for rollback ***  My guess is that this change somehow upsets an allowed list of one-definition violations.  3f49efe9f00a2ed9dd3bd1cde1d5d596833b7391  -------  <p> Rollback of change to let ListenableFuture implement thenable via a default interface method in J2CL.  38c9a029e6cc538bcc46b9ad23fe03a62739d433  -------  <p> Clean up leftovers from MapMaker.makeComputingMap:  - Remove makeComputingMap from the GWT emulation. - Deprecate ComputationException.  0b93365c2440981c04a94f6e5596d3f723549ea3
3618 ;  guava/src/com/google/common/collect/ComputationException.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Export new AtomicLongMapBasherTest to open-source repo.  https://github.com/google/guava/pull/3605#discussion_r324303026  704c08989c9c2c21b4e2cb0ab285a7d84ee0fc3f  -------  <p> Add @LazyInit and @RetainedWith annotations to the lazily calculated  entries  field of ImmutableSetMultimap.  This field is lazily evaluated by entries() without holding a lock  but multiple concurrent calls to entries() will produce idempotent results at the cost of some performance.  996369d89362e0ec93f7dd6e9a6860aa08858c80  -------  <p> Let ListenableFuture implement thenable via a default interface method in J2CL.  This is a second attempt after problems in e0bac74571b81756c4acf767e3ad186b7473a4f8 were fixed.  44909d9d5fc5b394c710a6b8b0d6c3786c765af5  -------  <p> Add test for behavior described in #1900  7329a66694d59bb22e2589eb9a2f620c98a881f9  -------  <p> Undo test CL 9a50815df26be7416be0fac489e29feee7a3c220.  It produces a tiny diff between the common.base and common.collect copies of AbstractIterator.  c82f7916879a46539a1e53ac98dda90e9c5537b8  -------  <p> Add Splitter.splitToStream().  6c984121f74d5cea97ac1ffabfe98938bc7c96c4  -------  <p> Add comment explaining TABLE and MULTIPLIER in CharMatcher.Whitespace  Fixes #1661  5430b140cae37b078fd4dda9b1a57a025664cfe1  -------  <p> Rollback of adding Splitter.splitToStream().  *** Reason for rollback ***  My guess is that this change somehow upsets an allowed list of one-definition violations.  3f49efe9f00a2ed9dd3bd1cde1d5d596833b7391  -------  <p> Rollback of change to let ListenableFuture implement thenable via a default interface method in J2CL.  38c9a029e6cc538bcc46b9ad23fe03a62739d433  -------  <p> Clean up leftovers from MapMaker.makeComputingMap:  - Remove makeComputingMap from the GWT emulation. - Deprecate ComputationException.  0b93365c2440981c04a94f6e5596d3f723549ea3
3621 ; android/guava-testlib/src/com/google/common/collect/testing/testers/CollectionIteratorTester.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Test iteration over a collection containing null.  f9675a07e0fa21ce705626cdcc95101b95f46531
3621 ;  guava-testlib/src/com/google/common/collect/testing/testers/CollectionIteratorTester.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Test iteration over a collection containing null.  f9675a07e0fa21ce705626cdcc95101b95f46531
3623 ; guava-gwt/test/com/google/common/base/SplitterTest_gwt.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> s/a/an/  e2564c321bd3bc71cbb77a6af7ccac1be30e9b46  -------  <p> Add Splitter.splitToStream().  61affd0d3d70fdadf90100d54e1a83425b717f56
3623 ;  guava-tests/test/com/google/common/base/SplitterTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> s/a/an/  e2564c321bd3bc71cbb77a6af7ccac1be30e9b46  -------  <p> Add Splitter.splitToStream().  61affd0d3d70fdadf90100d54e1a83425b717f56
3623 ;  guava/src/com/google/common/base/Splitter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> s/a/an/  e2564c321bd3bc71cbb77a6af7ccac1be30e9b46  -------  <p> Add Splitter.splitToStream().  61affd0d3d70fdadf90100d54e1a83425b717f56
3627 ; android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Futures.submit().  RELNOTES= util.concurrent : Added  Futures.submit()   479c41dab94cbc6a6a1bb952c56a90b89f793ecc
3627 ;  android/guava/src/com/google/common/util/concurrent/Futures.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Futures.submit().  RELNOTES= util.concurrent : Added  Futures.submit()   479c41dab94cbc6a6a1bb952c56a90b89f793ecc
3627 ;  guava-gwt/test/com/google/common/util/concurrent/FuturesTest_gwt.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Futures.submit().  RELNOTES= util.concurrent : Added  Futures.submit()   479c41dab94cbc6a6a1bb952c56a90b89f793ecc
3627 ;  guava-tests/test/com/google/common/util/concurrent/FuturesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Futures.submit().  RELNOTES= util.concurrent : Added  Futures.submit()   479c41dab94cbc6a6a1bb952c56a90b89f793ecc
3627 ;  guava/src/com/google/common/util/concurrent/Futures.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Futures.submit().  RELNOTES= util.concurrent : Added  Futures.submit()   479c41dab94cbc6a6a1bb952c56a90b89f793ecc
3630 ; android/guava-tests/test/com/google/common/net/MediaTypeTest.java ; MOE sync ; nan
3630 ;  android/guava/src/com/google/common/net/MediaType.java ; MOE sync ; nan
3630 ;  guava-gwt/test/com/google/common/net/MediaTypeTest_gwt.java ; MOE sync ; nan
3630 ;  guava-tests/test/com/google/common/net/MediaTypeTest.java ; MOE sync ; nan
3630 ;  guava/src/com/google/common/net/MediaType.java ; MOE sync ; nan
3634 ; android/guava/src/com/google/common/net/HttpHeaders.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add missing @since 20.0.  52ba7eb195ad4c1f8095d99216610df39ce4e644  -------  <p> Add constant for the Cross-Origin-Opener-Policy header.  []  RELNOTES=Adds constant for the Cross-Origin-Opener-Policy header.  aa77f3ce06cfb78c8ecea8d97c8b0d1beefe2466
3634 ;  guava/src/com/google/common/net/HttpHeaders.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add missing @since 20.0.  52ba7eb195ad4c1f8095d99216610df39ce4e644  -------  <p> Add constant for the Cross-Origin-Opener-Policy header.  []  RELNOTES=Adds constant for the Cross-Origin-Opener-Policy header.  aa77f3ce06cfb78c8ecea8d97c8b0d1beefe2466
3635 ; android/guava/src/com/google/common/util/concurrent/Callables.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Check the array indexes in Quantiles.ScaleAndIndexes is non empty.  Fixes #3210 Fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> Simplify some code.  Fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> Document the JDK 9+ alternative to  Iterators#forEnumeration   Fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> Add a MIME type MPEG-DASH (mpd files)  Fixes #2677  RELNOTES= net : Added the  MediaType  constant for MPEG-DASH.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> Fix the logic that decides whether to use currentRequestThreadFactory() under App Engine.  While there  also support thread renaming under App Engine.  Fixes https://github.com/google/guava/issues/3598 Relevant to https://github.com/google/guava/issues/3606 (also  the CL in which I experimented with https://github.com/google/guava/issues/3569 before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33
3635 ;  android/guava/src/com/google/common/util/concurrent/MoreExecutors.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Check the array indexes in Quantiles.ScaleAndIndexes is non empty.  Fixes #3210 Fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> Simplify some code.  Fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> Document the JDK 9+ alternative to  Iterators#forEnumeration   Fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> Add a MIME type MPEG-DASH (mpd files)  Fixes #2677  RELNOTES= net : Added the  MediaType  constant for MPEG-DASH.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> Fix the logic that decides whether to use currentRequestThreadFactory() under App Engine.  While there  also support thread renaming under App Engine.  Fixes https://github.com/google/guava/issues/3598 Relevant to https://github.com/google/guava/issues/3606 (also  the CL in which I experimented with https://github.com/google/guava/issues/3569 before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33
3635 ;  guava/src/com/google/common/util/concurrent/Callables.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Check the array indexes in Quantiles.ScaleAndIndexes is non empty.  Fixes #3210 Fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> Simplify some code.  Fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> Document the JDK 9+ alternative to  Iterators#forEnumeration   Fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> Add a MIME type MPEG-DASH (mpd files)  Fixes #2677  RELNOTES= net : Added the  MediaType  constant for MPEG-DASH.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> Fix the logic that decides whether to use currentRequestThreadFactory() under App Engine.  While there  also support thread renaming under App Engine.  Fixes https://github.com/google/guava/issues/3598 Relevant to https://github.com/google/guava/issues/3606 (also  the CL in which I experimented with https://github.com/google/guava/issues/3569 before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33
3635 ;  guava/src/com/google/common/util/concurrent/MoreExecutors.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Check the array indexes in Quantiles.ScaleAndIndexes is non empty.  Fixes #3210 Fixes #3211  823a432ddaa2d274b539e12ed2bb46e5be0658ee  -------  <p> Simplify some code.  Fixes #3580  e2362def3408478a4a74d24671aef39171a1e93f  -------  <p> Document the JDK 9+ alternative to  Iterators#forEnumeration   Fixes #3382  e432be553038b4c67f22abb8c27f82ab6d480f3d  -------  <p> Add a MIME type MPEG-DASH (mpd files)  Fixes #2677  RELNOTES= net : Added the  MediaType  constant for MPEG-DASH.  579ccf6c0181097be7b895ec145f04502234ef0e  -------  <p> Fix the logic that decides whether to use currentRequestThreadFactory() under App Engine.  While there  also support thread renaming under App Engine.  Fixes https://github.com/google/guava/issues/3598 Relevant to https://github.com/google/guava/issues/3606 (also  the CL in which I experimented with https://github.com/google/guava/issues/3569 before backing it out)  7bd4b2351c1483f34e7192768b4f3e7a10447c33
3636 ; android/guava-tests/test/com/google/common/math/QuantilesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add testlib readme.  Fixes #3453  3b0f1e580b4e0bde8fd4806c832389d0aade4063  -------  <p> Change Quantiles  compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes().  Fixes https://github.com/google/guava/pull/2989  RELNOTES= math :  Quantiles   compute()  methods which return a  Map  now return a map with entries in the same order in which the indexes were provided.  6a2d070ac268c138d6ad039605de54f535d5f5f3
3636 ;  android/guava/src/com/google/common/math/Quantiles.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add testlib readme.  Fixes #3453  3b0f1e580b4e0bde8fd4806c832389d0aade4063  -------  <p> Change Quantiles  compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes().  Fixes https://github.com/google/guava/pull/2989  RELNOTES= math :  Quantiles   compute()  methods which return a  Map  now return a map with entries in the same order in which the indexes were provided.  6a2d070ac268c138d6ad039605de54f535d5f5f3
3636 ;  guava-tests/test/com/google/common/math/QuantilesTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add testlib readme.  Fixes #3453  3b0f1e580b4e0bde8fd4806c832389d0aade4063  -------  <p> Change Quantiles  compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes().  Fixes https://github.com/google/guava/pull/2989  RELNOTES= math :  Quantiles   compute()  methods which return a  Map  now return a map with entries in the same order in which the indexes were provided.  6a2d070ac268c138d6ad039605de54f535d5f5f3
3636 ;  guava/src/com/google/common/math/Quantiles.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add testlib readme.  Fixes #3453  3b0f1e580b4e0bde8fd4806c832389d0aade4063  -------  <p> Change Quantiles  compute() methods for multiple indexes to return a map with entries in the order in which the indexes were provided in the call to indexes().  Fixes https://github.com/google/guava/pull/2989  RELNOTES= math :  Quantiles   compute()  methods which return a  Map  now return a map with entries in the same order in which the indexes were provided.  6a2d070ac268c138d6ad039605de54f535d5f5f3
3637 ; android/guava/src/com/google/common/base/MoreObjects.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Bump version  which went out of date since the previous CL was created.  90f4a1c88941d1d68ec2fc68397a5e11fefa7355  -------  <p> Use if statement instead of for statement for a single item.  Fixes #3633  020621e474e228b4b9c12dbd24badd9590b0af8e  -------  <p> Upgrade maven source plugin from 2.1.2 to 3.1.0  Fixes https://github.com/google/guava/pull/3466  e87b8807798808d5a526a6fd2f49b484bb4a846a  -------  <p> Document the JDK 9+ alternative to  MoreObjects#firstNonNull   Fixes https://github.com/google/guava/pull/3383  145da12d85b536d6f2a527e1ccf2430147fa6b83
3637 ;  guava/src/com/google/common/base/MoreObjects.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Bump version  which went out of date since the previous CL was created.  90f4a1c88941d1d68ec2fc68397a5e11fefa7355  -------  <p> Use if statement instead of for statement for a single item.  Fixes #3633  020621e474e228b4b9c12dbd24badd9590b0af8e  -------  <p> Upgrade maven source plugin from 2.1.2 to 3.1.0  Fixes https://github.com/google/guava/pull/3466  e87b8807798808d5a526a6fd2f49b484bb4a846a  -------  <p> Document the JDK 9+ alternative to  MoreObjects#firstNonNull   Fixes https://github.com/google/guava/pull/3383  145da12d85b536d6f2a527e1ccf2430147fa6b83
3640 ; android/guava/src/com/google/common/primitives/Doubles.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Change tryParse methods to explicitly document that they throw NPE if the input is null.  This is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception  if parsing fails .  Fixes https://github.com/google/guava/issues/1259  995c07eb95d5e5fac35f3f1219dbb4e4bed83d11
3640 ;  android/guava/src/com/google/common/primitives/Floats.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Change tryParse methods to explicitly document that they throw NPE if the input is null.  This is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception  if parsing fails .  Fixes https://github.com/google/guava/issues/1259  995c07eb95d5e5fac35f3f1219dbb4e4bed83d11
3640 ;  android/guava/src/com/google/common/primitives/Ints.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Change tryParse methods to explicitly document that they throw NPE if the input is null.  This is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception  if parsing fails .  Fixes https://github.com/google/guava/issues/1259  995c07eb95d5e5fac35f3f1219dbb4e4bed83d11
3640 ;  android/guava/src/com/google/common/primitives/Longs.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Change tryParse methods to explicitly document that they throw NPE if the input is null.  This is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception  if parsing fails .  Fixes https://github.com/google/guava/issues/1259  995c07eb95d5e5fac35f3f1219dbb4e4bed83d11
3640 ;  guava/src/com/google/common/primitives/Doubles.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Change tryParse methods to explicitly document that they throw NPE if the input is null.  This is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception  if parsing fails .  Fixes https://github.com/google/guava/issues/1259  995c07eb95d5e5fac35f3f1219dbb4e4bed83d11
3640 ;  guava/src/com/google/common/primitives/Floats.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Change tryParse methods to explicitly document that they throw NPE if the input is null.  This is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception  if parsing fails .  Fixes https://github.com/google/guava/issues/1259  995c07eb95d5e5fac35f3f1219dbb4e4bed83d11
3640 ;  guava/src/com/google/common/primitives/Ints.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Change tryParse methods to explicitly document that they throw NPE if the input is null.  This is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception  if parsing fails .  Fixes https://github.com/google/guava/issues/1259  995c07eb95d5e5fac35f3f1219dbb4e4bed83d11
3640 ;  guava/src/com/google/common/primitives/Longs.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Change tryParse methods to explicitly document that they throw NPE if the input is null.  This is to hopefully reduce the chance of confusion based on the fact that the methods say that they do not throw an exception  if parsing fails .  Fixes https://github.com/google/guava/issues/1259  995c07eb95d5e5fac35f3f1219dbb4e4bed83d11
3644 ; android/guava/src/com/google/common/collect/EnumMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove duplicate null check from EnumMultiset.  Fixes https://github.com/google/guava/pull/3559  079d1732c6740da9d499b2ff4c94fb37b1b66b57
3644 ;  guava/src/com/google/common/collect/EnumMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove duplicate null check from EnumMultiset.  Fixes https://github.com/google/guava/pull/3559  079d1732c6740da9d499b2ff4c94fb37b1b66b57
3648 ; android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address TSAN errors:  1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse  which inherits AbstractBiMap s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily.  2. Mark some graph  cache  fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...))  the graph stores the entry in a field. That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. But this caching isn t implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. But because of the racy reads of the cached entry fields  I don t think this is guaranteed to be safe.  RELNOTES= graph : Fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac
3648 ;  android/guava-tests/test/com/google/common/graph/ConfigurableSimpleDirectedSortedNetworkTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address TSAN errors:  1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse  which inherits AbstractBiMap s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily.  2. Mark some graph  cache  fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...))  the graph stores the entry in a field. That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. But this caching isn t implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. But because of the racy reads of the cached entry fields  I don t think this is guaranteed to be safe.  RELNOTES= graph : Fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac
3648 ;  android/guava-tests/test/com/google/common/graph/ValueGraphTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address TSAN errors:  1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse  which inherits AbstractBiMap s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily.  2. Mark some graph  cache  fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...))  the graph stores the entry in a field. That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. But this caching isn t implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. But because of the racy reads of the cached entry fields  I don t think this is guaranteed to be safe.  RELNOTES= graph : Fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac
3648 ;  android/guava/src/com/google/common/collect/AbstractMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address TSAN errors:  1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse  which inherits AbstractBiMap s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily.  2. Mark some graph  cache  fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...))  the graph stores the entry in a field. That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. But this caching isn t implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. But because of the racy reads of the cached entry fields  I don t think this is guaranteed to be safe.  RELNOTES= graph : Fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac
3648 ;  android/guava/src/com/google/common/collect/HashBiMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address TSAN errors:  1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse  which inherits AbstractBiMap s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily.  2. Mark some graph  cache  fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...))  the graph stores the entry in a field. That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. But this caching isn t implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. But because of the racy reads of the cached entry fields  I don t think this is guaranteed to be safe.  RELNOTES= graph : Fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac
3648 ;  android/guava/src/com/google/common/graph/MapIteratorCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address TSAN errors:  1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse  which inherits AbstractBiMap s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily.  2. Mark some graph  cache  fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...))  the graph stores the entry in a field. That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. But this caching isn t implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. But because of the racy reads of the cached entry fields  I don t think this is guaranteed to be safe.  RELNOTES= graph : Fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac
3648 ;  android/guava/src/com/google/common/graph/MapRetrievalCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address TSAN errors:  1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse  which inherits AbstractBiMap s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily.  2. Mark some graph  cache  fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...))  the graph stores the entry in a field. That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. But this caching isn t implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. But because of the racy reads of the cached entry fields  I don t think this is guaranteed to be safe.  RELNOTES= graph : Fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac
3648 ;  guava-tests/test/com/google/common/graph/AbstractNetworkTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address TSAN errors:  1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse  which inherits AbstractBiMap s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily.  2. Mark some graph  cache  fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...))  the graph stores the entry in a field. That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. But this caching isn t implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. But because of the racy reads of the cached entry fields  I don t think this is guaranteed to be safe.  RELNOTES= graph : Fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac
3648 ;  guava-tests/test/com/google/common/graph/ConfigurableSimpleDirectedSortedNetworkTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address TSAN errors:  1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse  which inherits AbstractBiMap s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily.  2. Mark some graph  cache  fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...))  the graph stores the entry in a field. That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. But this caching isn t implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. But because of the racy reads of the cached entry fields  I don t think this is guaranteed to be safe.  RELNOTES= graph : Fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac
3648 ;  guava-tests/test/com/google/common/graph/ValueGraphTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address TSAN errors:  1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse  which inherits AbstractBiMap s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily.  2. Mark some graph  cache  fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...))  the graph stores the entry in a field. That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. But this caching isn t implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. But because of the racy reads of the cached entry fields  I don t think this is guaranteed to be safe.  RELNOTES= graph : Fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac
3648 ;  guava/src/com/google/common/collect/AbstractMultiset.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address TSAN errors:  1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse  which inherits AbstractBiMap s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily.  2. Mark some graph  cache  fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...))  the graph stores the entry in a field. That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. But this caching isn t implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. But because of the racy reads of the cached entry fields  I don t think this is guaranteed to be safe.  RELNOTES= graph : Fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac
3648 ;  guava/src/com/google/common/collect/HashBiMap.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address TSAN errors:  1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse  which inherits AbstractBiMap s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily.  2. Mark some graph  cache  fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...))  the graph stores the entry in a field. That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. But this caching isn t implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. But because of the racy reads of the cached entry fields  I don t think this is guaranteed to be safe.  RELNOTES= graph : Fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac
3648 ;  guava/src/com/google/common/graph/MapIteratorCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address TSAN errors:  1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse  which inherits AbstractBiMap s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily.  2. Mark some graph  cache  fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...))  the graph stores the entry in a field. That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. But this caching isn t implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. But because of the racy reads of the cached entry fields  I don t think this is guaranteed to be safe.  RELNOTES= graph : Fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac
3648 ;  guava/src/com/google/common/graph/MapRetrievalCache.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Address TSAN errors:  1. Suppress safe racy init in AbstractMultiset and HashBiMap. All the classes that are stored in the newly annotated fields have only final fields (except HashBiMap.Inverse  which inherits AbstractBiMap s keySet and values fields  which are themselves @LazyInit)  so they are safe to read racily.  2. Mark some graph  cache  fields as volatile. These fields are an optimization: When the user accesses an entry through iteration (and sometimes through get(...))  the graph stores the entry in a field. That way  if the user then queries it again (such as to look up the value associated with a key during iteration)  the graph doesn t have to perform a potentially mildly expensive lookup. But this caching isn t implemented in a thread-safe way. It *ought* to be safe to initialize a graph in one thread  safely publish it  and then read it concurrently from other threads. But because of the racy reads of the cached entry fields  I don t think this is guaranteed to be safe.  RELNOTES= graph : Fixed data race.  07eba15451f7d0dc10ab8328a6d595ab1e68abac
3650 ; guava/src/com/google/common/base/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Require tokens to be non-empty.  Followup to CL 272190935.  Fixes https://github.com/google/guava/issues/3626 (again :))  b080067280ab22f262880d222c0a75d043962f4f  -------  <p> Log warnings for users who send Guava types over GWT-RPC.  I ve left this change out of the Android branch. For starters  it s not necessary there  since we don t support GWT. But normally we d include it anyway to minimize diffs. However  doing so increases the number of classes retained after running Proguard (thanks  I assume  to the Logger field). There are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  RELNOTES=***Warning to users of GWT-RPC:*** The first Guava release of 2020 will [remove support for GWT-serializing Guava types](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ). To test ahead of time with GWT-RPC support for Guava types disabled  set the  guava.gwt.emergency_reenable_rpc  system property to  false .  750db498a0108802f3de1905a2a56d956cd9cda3  -------  <p> Steam -> Stream in the names of certain locals in ByteStream.  0ee31e21a41be3f87831446374e323c7f08f0011  -------  <p> [OpenSearch] Add MediaType for  application/opensearchdescription+xml   RELNOTES=Add MediaType for  application/opensearchdescription+xml   6be97d88570e0990fbe5a91326620df9f2a09853  -------  <p> Revert previous CL:  ============ Log warnings for users who send Guava types over GWT-RPC.  I ve left this change out of the Android branch. For starters  it s not necessary there  since we don t support GWT. But normally we d include it anyway to minimize diffs. However  doing so increases the number of classes retained after running Proguard (thanks  I assume  to the Logger field). There are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  82838c5a9a161937c4ac91f3abd3bf7a26202f53
3650 ;  guava/src/com/google/common/collect/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Require tokens to be non-empty.  Followup to CL 272190935.  Fixes https://github.com/google/guava/issues/3626 (again :))  b080067280ab22f262880d222c0a75d043962f4f  -------  <p> Log warnings for users who send Guava types over GWT-RPC.  I ve left this change out of the Android branch. For starters  it s not necessary there  since we don t support GWT. But normally we d include it anyway to minimize diffs. However  doing so increases the number of classes retained after running Proguard (thanks  I assume  to the Logger field). There are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  RELNOTES=***Warning to users of GWT-RPC:*** The first Guava release of 2020 will [remove support for GWT-serializing Guava types](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ). To test ahead of time with GWT-RPC support for Guava types disabled  set the  guava.gwt.emergency_reenable_rpc  system property to  false .  750db498a0108802f3de1905a2a56d956cd9cda3  -------  <p> Steam -> Stream in the names of certain locals in ByteStream.  0ee31e21a41be3f87831446374e323c7f08f0011  -------  <p> [OpenSearch] Add MediaType for  application/opensearchdescription+xml   RELNOTES=Add MediaType for  application/opensearchdescription+xml   6be97d88570e0990fbe5a91326620df9f2a09853  -------  <p> Revert previous CL:  ============ Log warnings for users who send Guava types over GWT-RPC.  I ve left this change out of the Android branch. For starters  it s not necessary there  since we don t support GWT. But normally we d include it anyway to minimize diffs. However  doing so increases the number of classes retained after running Proguard (thanks  I assume  to the Logger field). There are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  82838c5a9a161937c4ac91f3abd3bf7a26202f53
3650 ;  guava/src/com/google/common/primitives/Platform.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Require tokens to be non-empty.  Followup to CL 272190935.  Fixes https://github.com/google/guava/issues/3626 (again :))  b080067280ab22f262880d222c0a75d043962f4f  -------  <p> Log warnings for users who send Guava types over GWT-RPC.  I ve left this change out of the Android branch. For starters  it s not necessary there  since we don t support GWT. But normally we d include it anyway to minimize diffs. However  doing so increases the number of classes retained after running Proguard (thanks  I assume  to the Logger field). There are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  RELNOTES=***Warning to users of GWT-RPC:*** The first Guava release of 2020 will [remove support for GWT-serializing Guava types](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ). To test ahead of time with GWT-RPC support for Guava types disabled  set the  guava.gwt.emergency_reenable_rpc  system property to  false .  750db498a0108802f3de1905a2a56d956cd9cda3  -------  <p> Steam -> Stream in the names of certain locals in ByteStream.  0ee31e21a41be3f87831446374e323c7f08f0011  -------  <p> [OpenSearch] Add MediaType for  application/opensearchdescription+xml   RELNOTES=Add MediaType for  application/opensearchdescription+xml   6be97d88570e0990fbe5a91326620df9f2a09853  -------  <p> Revert previous CL:  ============ Log warnings for users who send Guava types over GWT-RPC.  I ve left this change out of the Android branch. For starters  it s not necessary there  since we don t support GWT. But normally we d include it anyway to minimize diffs. However  doing so increases the number of classes retained after running Proguard (thanks  I assume  to the Logger field). There are other ways of getting around this  but for a temporary feature  the diffs seem tolerable.  82838c5a9a161937c4ac91f3abd3bf7a26202f53
3654 ; android/guava/src/com/google/common/cache/CacheBuilder.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> switch to an internal annotation for ignoring JRE requirements  Fixes #3652  RELNOTES=Removed dependency on  animal-sniffer-annotations .  3324ce6af9d672b4a1e4431ebaf84b0e22d7ca86  -------  <p> Rename package-private Duration APIs:   saturatedToNanos() -> toNanosSaturated()   saturatedToMillis() -> toMillisSaturated()  #goodtime  f3a053ea12ae808ddd52094d36fcd88fe95881f2  -------  <p> Suppress more GoodTime errors.  9e885c85265c3686aa876acebe6bb6bda18de1f3
3654 ;  android/guava/src/com/google/common/cache/ReferenceEntry.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> switch to an internal annotation for ignoring JRE requirements  Fixes #3652  RELNOTES=Removed dependency on  animal-sniffer-annotations .  3324ce6af9d672b4a1e4431ebaf84b0e22d7ca86  -------  <p> Rename package-private Duration APIs:   saturatedToNanos() -> toNanosSaturated()   saturatedToMillis() -> toMillisSaturated()  #goodtime  f3a053ea12ae808ddd52094d36fcd88fe95881f2  -------  <p> Suppress more GoodTime errors.  9e885c85265c3686aa876acebe6bb6bda18de1f3
3654 ;  guava/src/com/google/common/cache/CacheBuilder.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> switch to an internal annotation for ignoring JRE requirements  Fixes #3652  RELNOTES=Removed dependency on  animal-sniffer-annotations .  3324ce6af9d672b4a1e4431ebaf84b0e22d7ca86  -------  <p> Rename package-private Duration APIs:   saturatedToNanos() -> toNanosSaturated()   saturatedToMillis() -> toMillisSaturated()  #goodtime  f3a053ea12ae808ddd52094d36fcd88fe95881f2  -------  <p> Suppress more GoodTime errors.  9e885c85265c3686aa876acebe6bb6bda18de1f3
3654 ;  guava/src/com/google/common/cache/ReferenceEntry.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> switch to an internal annotation for ignoring JRE requirements  Fixes #3652  RELNOTES=Removed dependency on  animal-sniffer-annotations .  3324ce6af9d672b4a1e4431ebaf84b0e22d7ca86  -------  <p> Rename package-private Duration APIs:   saturatedToNanos() -> toNanosSaturated()   saturatedToMillis() -> toMillisSaturated()  #goodtime  f3a053ea12ae808ddd52094d36fcd88fe95881f2  -------  <p> Suppress more GoodTime errors.  9e885c85265c3686aa876acebe6bb6bda18de1f3
3657 ; android/guava-tests/test/com/google/common/math/StatsAccumulatorTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Stream support to Stats and StatsAccumulator.  This adds:  - A static method Stats.toStats() that returns a Collector<Number  StatsAccumulator  Stats>.  - Stats.of overloads and StatsAccumulator.addAll overloads that take DoubleStream  IntStream  and LongStream.  - A StatsAccumulator.addAll overload that takes StatsAccumulator.  (In passing  this also improves the tests in a couple of ways. It removes the use of static initializer blocks in StatsTesting  which is contrary to best practice. And it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with INTEGER_MANY_VALUES and LONG_MANY_VALUES should scale up the tolerance to match the order of magnitude of the values. This latter change fixes the ErrorProne warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. It just happened that everything was close enough before.)  RELNOTES=Add Stream support to Stats and StatsAccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d
3657 ;  android/guava-tests/test/com/google/common/math/StatsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Stream support to Stats and StatsAccumulator.  This adds:  - A static method Stats.toStats() that returns a Collector<Number  StatsAccumulator  Stats>.  - Stats.of overloads and StatsAccumulator.addAll overloads that take DoubleStream  IntStream  and LongStream.  - A StatsAccumulator.addAll overload that takes StatsAccumulator.  (In passing  this also improves the tests in a couple of ways. It removes the use of static initializer blocks in StatsTesting  which is contrary to best practice. And it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with INTEGER_MANY_VALUES and LONG_MANY_VALUES should scale up the tolerance to match the order of magnitude of the values. This latter change fixes the ErrorProne warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. It just happened that everything was close enough before.)  RELNOTES=Add Stream support to Stats and StatsAccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d
3657 ;  android/guava-tests/test/com/google/common/math/StatsTesting.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Stream support to Stats and StatsAccumulator.  This adds:  - A static method Stats.toStats() that returns a Collector<Number  StatsAccumulator  Stats>.  - Stats.of overloads and StatsAccumulator.addAll overloads that take DoubleStream  IntStream  and LongStream.  - A StatsAccumulator.addAll overload that takes StatsAccumulator.  (In passing  this also improves the tests in a couple of ways. It removes the use of static initializer blocks in StatsTesting  which is contrary to best practice. And it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with INTEGER_MANY_VALUES and LONG_MANY_VALUES should scale up the tolerance to match the order of magnitude of the values. This latter change fixes the ErrorProne warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. It just happened that everything was close enough before.)  RELNOTES=Add Stream support to Stats and StatsAccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d
3657 ;  android/guava/src/com/google/common/math/Stats.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Stream support to Stats and StatsAccumulator.  This adds:  - A static method Stats.toStats() that returns a Collector<Number  StatsAccumulator  Stats>.  - Stats.of overloads and StatsAccumulator.addAll overloads that take DoubleStream  IntStream  and LongStream.  - A StatsAccumulator.addAll overload that takes StatsAccumulator.  (In passing  this also improves the tests in a couple of ways. It removes the use of static initializer blocks in StatsTesting  which is contrary to best practice. And it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with INTEGER_MANY_VALUES and LONG_MANY_VALUES should scale up the tolerance to match the order of magnitude of the values. This latter change fixes the ErrorProne warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. It just happened that everything was close enough before.)  RELNOTES=Add Stream support to Stats and StatsAccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d
3657 ;  android/guava/src/com/google/common/math/StatsAccumulator.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Stream support to Stats and StatsAccumulator.  This adds:  - A static method Stats.toStats() that returns a Collector<Number  StatsAccumulator  Stats>.  - Stats.of overloads and StatsAccumulator.addAll overloads that take DoubleStream  IntStream  and LongStream.  - A StatsAccumulator.addAll overload that takes StatsAccumulator.  (In passing  this also improves the tests in a couple of ways. It removes the use of static initializer blocks in StatsTesting  which is contrary to best practice. And it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with INTEGER_MANY_VALUES and LONG_MANY_VALUES should scale up the tolerance to match the order of magnitude of the values. This latter change fixes the ErrorProne warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. It just happened that everything was close enough before.)  RELNOTES=Add Stream support to Stats and StatsAccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d
3657 ;  guava-tests/test/com/google/common/math/StatsAccumulatorTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Stream support to Stats and StatsAccumulator.  This adds:  - A static method Stats.toStats() that returns a Collector<Number  StatsAccumulator  Stats>.  - Stats.of overloads and StatsAccumulator.addAll overloads that take DoubleStream  IntStream  and LongStream.  - A StatsAccumulator.addAll overload that takes StatsAccumulator.  (In passing  this also improves the tests in a couple of ways. It removes the use of static initializer blocks in StatsTesting  which is contrary to best practice. And it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with INTEGER_MANY_VALUES and LONG_MANY_VALUES should scale up the tolerance to match the order of magnitude of the values. This latter change fixes the ErrorProne warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. It just happened that everything was close enough before.)  RELNOTES=Add Stream support to Stats and StatsAccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d
3657 ;  guava-tests/test/com/google/common/math/StatsTest.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Stream support to Stats and StatsAccumulator.  This adds:  - A static method Stats.toStats() that returns a Collector<Number  StatsAccumulator  Stats>.  - Stats.of overloads and StatsAccumulator.addAll overloads that take DoubleStream  IntStream  and LongStream.  - A StatsAccumulator.addAll overload that takes StatsAccumulator.  (In passing  this also improves the tests in a couple of ways. It removes the use of static initializer blocks in StatsTesting  which is contrary to best practice. And it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with INTEGER_MANY_VALUES and LONG_MANY_VALUES should scale up the tolerance to match the order of magnitude of the values. This latter change fixes the ErrorProne warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. It just happened that everything was close enough before.)  RELNOTES=Add Stream support to Stats and StatsAccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d
3657 ;  guava-tests/test/com/google/common/math/StatsTesting.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Stream support to Stats and StatsAccumulator.  This adds:  - A static method Stats.toStats() that returns a Collector<Number  StatsAccumulator  Stats>.  - Stats.of overloads and StatsAccumulator.addAll overloads that take DoubleStream  IntStream  and LongStream.  - A StatsAccumulator.addAll overload that takes StatsAccumulator.  (In passing  this also improves the tests in a couple of ways. It removes the use of static initializer blocks in StatsTesting  which is contrary to best practice. And it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with INTEGER_MANY_VALUES and LONG_MANY_VALUES should scale up the tolerance to match the order of magnitude of the values. This latter change fixes the ErrorProne warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. It just happened that everything was close enough before.)  RELNOTES=Add Stream support to Stats and StatsAccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d
3657 ;  guava/src/com/google/common/math/Stats.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Stream support to Stats and StatsAccumulator.  This adds:  - A static method Stats.toStats() that returns a Collector<Number  StatsAccumulator  Stats>.  - Stats.of overloads and StatsAccumulator.addAll overloads that take DoubleStream  IntStream  and LongStream.  - A StatsAccumulator.addAll overload that takes StatsAccumulator.  (In passing  this also improves the tests in a couple of ways. It removes the use of static initializer blocks in StatsTesting  which is contrary to best practice. And it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with INTEGER_MANY_VALUES and LONG_MANY_VALUES should scale up the tolerance to match the order of magnitude of the values. This latter change fixes the ErrorProne warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. It just happened that everything was close enough before.)  RELNOTES=Add Stream support to Stats and StatsAccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d
3657 ;  guava/src/com/google/common/math/StatsAccumulator.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Add Stream support to Stats and StatsAccumulator.  This adds:  - A static method Stats.toStats() that returns a Collector<Number  StatsAccumulator  Stats>.  - Stats.of overloads and StatsAccumulator.addAll overloads that take DoubleStream  IntStream  and LongStream.  - A StatsAccumulator.addAll overload that takes StatsAccumulator.  (In passing  this also improves the tests in a couple of ways. It removes the use of static initializer blocks in StatsTesting  which is contrary to best practice. And it fixes some tolerances on the assertions: the min() and max() ones should use exact equality  and the ones with INTEGER_MANY_VALUES and LONG_MANY_VALUES should scale up the tolerance to match the order of magnitude of the values. This latter change fixes the ErrorProne warnings that  in some cases  the tolerance was actually less than the difference between the expected value and the next nearest double. It just happened that everything was close enough before.)  RELNOTES=Add Stream support to Stats and StatsAccumulator.  a59e12a3cdfb3d6cd11343aa5bd7aa3de27ed30d
3658 ; android/guava/src/com/google/common/base/Converter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Resolve some rawtypes warnings in Converter  4e37244fb859e1f99ce3356ffab5b2e8333ad268
3658 ;  guava/src/com/google/common/base/Converter.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Resolve some rawtypes warnings in Converter  4e37244fb859e1f99ce3356ffab5b2e8333ad268
3664 ; android/guava/src/com/google/common/io/ByteStreams.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix ByteStreams.skipUpTo to avoid making unnecessary allocations.  - Fixes https://github.com/google/guava/issues/3662 - Closes https://github.com/google/guava/issues/3663  cb0ac2bf8a3a95862b1209fe11a35403554ca611
3664 ;  guava/src/com/google/common/io/ByteStreams.java ; Moe Sync ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix ByteStreams.skipUpTo to avoid making unnecessary allocations.  - Fixes https://github.com/google/guava/issues/3662 - Closes https://github.com/google/guava/issues/3663  cb0ac2bf8a3a95862b1209fe11a35403554ca611
3675 ; android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureFallbackAtomicHelperTest.java ; MOE Sync 2019-10-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the SetFuture check into AbstractFuture.toString() and out of pendingToString()  so that even if the latter is overriden we can include the SetFuture detail.  This is useful for futures that initially do some of their own work  but then delegate to setFuture()  as FutureCombiner.callAsync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485
3675 ;  android/guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java ; MOE Sync 2019-10-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the SetFuture check into AbstractFuture.toString() and out of pendingToString()  so that even if the latter is overriden we can include the SetFuture detail.  This is useful for futures that initially do some of their own work  but then delegate to setFuture()  as FutureCombiner.callAsync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485
3675 ;  android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java ; MOE Sync 2019-10-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the SetFuture check into AbstractFuture.toString() and out of pendingToString()  so that even if the latter is overriden we can include the SetFuture detail.  This is useful for futures that initially do some of their own work  but then delegate to setFuture()  as FutureCombiner.callAsync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485
3675 ;  android/guava/src/com/google/common/util/concurrent/AbstractFuture.java ; MOE Sync 2019-10-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the SetFuture check into AbstractFuture.toString() and out of pendingToString()  so that even if the latter is overriden we can include the SetFuture detail.  This is useful for futures that initially do some of their own work  but then delegate to setFuture()  as FutureCombiner.callAsync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485
3675 ;  android/guava/src/com/google/common/util/concurrent/AggregateFuture.java ; MOE Sync 2019-10-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the SetFuture check into AbstractFuture.toString() and out of pendingToString()  so that even if the latter is overriden we can include the SetFuture detail.  This is useful for futures that initially do some of their own work  but then delegate to setFuture()  as FutureCombiner.callAsync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485
3675 ;  android/guava/src/com/google/common/util/concurrent/CombinedFuture.java ; MOE Sync 2019-10-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the SetFuture check into AbstractFuture.toString() and out of pendingToString()  so that even if the latter is overriden we can include the SetFuture detail.  This is useful for futures that initially do some of their own work  but then delegate to setFuture()  as FutureCombiner.callAsync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485
3675 ;  guava-gwt/test/com/google/common/util/concurrent/FuturesTest_gwt.java ; MOE Sync 2019-10-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the SetFuture check into AbstractFuture.toString() and out of pendingToString()  so that even if the latter is overriden we can include the SetFuture detail.  This is useful for futures that initially do some of their own work  but then delegate to setFuture()  as FutureCombiner.callAsync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485
3675 ;  guava-tests/test/com/google/common/util/concurrent/AbstractFutureFallbackAtomicHelperTest.java ; MOE Sync 2019-10-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the SetFuture check into AbstractFuture.toString() and out of pendingToString()  so that even if the latter is overriden we can include the SetFuture detail.  This is useful for futures that initially do some of their own work  but then delegate to setFuture()  as FutureCombiner.callAsync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485
3675 ;  guava-tests/test/com/google/common/util/concurrent/AbstractFutureTest.java ; MOE Sync 2019-10-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the SetFuture check into AbstractFuture.toString() and out of pendingToString()  so that even if the latter is overriden we can include the SetFuture detail.  This is useful for futures that initially do some of their own work  but then delegate to setFuture()  as FutureCombiner.callAsync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485
3675 ;  guava-tests/test/com/google/common/util/concurrent/FuturesTest.java ; MOE Sync 2019-10-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the SetFuture check into AbstractFuture.toString() and out of pendingToString()  so that even if the latter is overriden we can include the SetFuture detail.  This is useful for futures that initially do some of their own work  but then delegate to setFuture()  as FutureCombiner.callAsync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485
3675 ;  guava/src/com/google/common/util/concurrent/AbstractFuture.java ; MOE Sync 2019-10-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the SetFuture check into AbstractFuture.toString() and out of pendingToString()  so that even if the latter is overriden we can include the SetFuture detail.  This is useful for futures that initially do some of their own work  but then delegate to setFuture()  as FutureCombiner.callAsync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485
3675 ;  guava/src/com/google/common/util/concurrent/AggregateFuture.java ; MOE Sync 2019-10-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the SetFuture check into AbstractFuture.toString() and out of pendingToString()  so that even if the latter is overriden we can include the SetFuture detail.  This is useful for futures that initially do some of their own work  but then delegate to setFuture()  as FutureCombiner.callAsync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485
3675 ;  guava/src/com/google/common/util/concurrent/CombinedFuture.java ; MOE Sync 2019-10-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the SetFuture check into AbstractFuture.toString() and out of pendingToString()  so that even if the latter is overriden we can include the SetFuture detail.  This is useful for futures that initially do some of their own work  but then delegate to setFuture()  as FutureCombiner.callAsync() does.  68bdc31a5cc1ff0dfb3af4003703d93d09ef6485
3677 ; android/guava/src/com/google/common/primitives/UnsignedBytes.java ; MOE Sync 2019-10-31 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix toString exception handling change from 957c37116fb2cc52b2f8b405871b65a84917f2ca.  This is not an ideal code fix but it restores the previous functionality and adds a test that verifies the exception handling logic.  82b7589dfbfc5f2b6f68d6a6a1bb34e4633f4f3c  -------  <p> Handle StackOverflowError from both pendingToString and appendUserObject.  Adds a bunch of tests to validate error handling in toString code - Verify that a future completing during the toString call results in a done formatted string - Verify that an exception thrown by pendingToString doesn t cause toString to fail - Verify that cycles don t cause toString to fail - Verify that deep chains of SetFuture don t cause toString to fail  RELNOTES=Catch StackOverflowError in AbstractFuture.toString to prevent long chains of futures from failing toString calls.  29981d416d6b4214e65360ad3d932ba0881a4c8f  -------  <p> Update Documentation  Fixes #3507  8a0d6bb345341fc0ba91781070da5b522d4b714b
3677 ;  guava/src/com/google/common/primitives/UnsignedBytes.java ; MOE Sync 2019-10-31 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix toString exception handling change from 957c37116fb2cc52b2f8b405871b65a84917f2ca.  This is not an ideal code fix but it restores the previous functionality and adds a test that verifies the exception handling logic.  82b7589dfbfc5f2b6f68d6a6a1bb34e4633f4f3c  -------  <p> Handle StackOverflowError from both pendingToString and appendUserObject.  Adds a bunch of tests to validate error handling in toString code - Verify that a future completing during the toString call results in a done formatted string - Verify that an exception thrown by pendingToString doesn t cause toString to fail - Verify that cycles don t cause toString to fail - Verify that deep chains of SetFuture don t cause toString to fail  RELNOTES=Catch StackOverflowError in AbstractFuture.toString to prevent long chains of futures from failing toString calls.  29981d416d6b4214e65360ad3d932ba0881a4c8f  -------  <p> Update Documentation  Fixes #3507  8a0d6bb345341fc0ba91781070da5b522d4b714b
3684 ; android/guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java ; MOE Sync 2019-11-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add @SuppressWarnings( DoNotMock ) to mocked com.google.common types  @DoNotMock will be added to these types. This change suppresses warnings for current cases where these types are mocked.  13ed6d3846bb3765b19ec06819a215ae93644b6c  -------  <p> Add GraphBuilder.incidentEdgeOrder().  2c1db61cfae457a58554f4390c3907f18f406b6a  -------  <p> Remove usages of deprecated CharMatcher functions  Fixes #3565  213ec90d8647412c4d25870fbc1c8bb3a44798ff  -------  <p> Have ImmutableGraph.Builder set incidentEdgeOrder to stable().  c43a2bf57ccc089bb64f2704321e175a611cdc4b  -------  <p> Migrate org.mockito.Matchers#any* to org.mockito.ArgumentMatchers  The former is deprecated and replaced by the latter in Mockito 2. However  there is a functional difference: ArgumentMatchers will reject  null  and check the type if the matcher specified a type (e.g.  any(Class)  or  anyInt() ).  any()  will remain to accept anything.  All remaining  any(Class)  references are migrated to  nulllable(Class)  to maintain the functionality of Mockito 1. All remaining  anyString()  references are migrated to  nullable(String.class)  to maintain the functionality of Mockito 1.  3e96e06575ea0bb1e8be61ce2edd57ac9427c71d
3684 ;  android/guava-tests/test/com/google/common/collect/ForwardingMapTest.java ; MOE Sync 2019-11-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add @SuppressWarnings( DoNotMock ) to mocked com.google.common types  @DoNotMock will be added to these types. This change suppresses warnings for current cases where these types are mocked.  13ed6d3846bb3765b19ec06819a215ae93644b6c  -------  <p> Add GraphBuilder.incidentEdgeOrder().  2c1db61cfae457a58554f4390c3907f18f406b6a  -------  <p> Remove usages of deprecated CharMatcher functions  Fixes #3565  213ec90d8647412c4d25870fbc1c8bb3a44798ff  -------  <p> Have ImmutableGraph.Builder set incidentEdgeOrder to stable().  c43a2bf57ccc089bb64f2704321e175a611cdc4b  -------  <p> Migrate org.mockito.Matchers#any* to org.mockito.ArgumentMatchers  The former is deprecated and replaced by the latter in Mockito 2. However  there is a functional difference: ArgumentMatchers will reject  null  and check the type if the matcher specified a type (e.g.  any(Class)  or  anyInt() ).  any()  will remain to accept anything.  All remaining  any(Class)  references are migrated to  nulllable(Class)  to maintain the functionality of Mockito 1. All remaining  anyString()  references are migrated to  nullable(String.class)  to maintain the functionality of Mockito 1.  3e96e06575ea0bb1e8be61ce2edd57ac9427c71d
3684 ;  guava-tests/test/com/google/common/collect/ConcurrentHashMultisetTest.java ; MOE Sync 2019-11-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add @SuppressWarnings( DoNotMock ) to mocked com.google.common types  @DoNotMock will be added to these types. This change suppresses warnings for current cases where these types are mocked.  13ed6d3846bb3765b19ec06819a215ae93644b6c  -------  <p> Add GraphBuilder.incidentEdgeOrder().  2c1db61cfae457a58554f4390c3907f18f406b6a  -------  <p> Remove usages of deprecated CharMatcher functions  Fixes #3565  213ec90d8647412c4d25870fbc1c8bb3a44798ff  -------  <p> Have ImmutableGraph.Builder set incidentEdgeOrder to stable().  c43a2bf57ccc089bb64f2704321e175a611cdc4b  -------  <p> Migrate org.mockito.Matchers#any* to org.mockito.ArgumentMatchers  The former is deprecated and replaced by the latter in Mockito 2. However  there is a functional difference: ArgumentMatchers will reject  null  and check the type if the matcher specified a type (e.g.  any(Class)  or  anyInt() ).  any()  will remain to accept anything.  All remaining  any(Class)  references are migrated to  nulllable(Class)  to maintain the functionality of Mockito 1. All remaining  anyString()  references are migrated to  nullable(String.class)  to maintain the functionality of Mockito 1.  3e96e06575ea0bb1e8be61ce2edd57ac9427c71d
3684 ;  guava-tests/test/com/google/common/collect/ForwardingMapTest.java ; MOE Sync 2019-11-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add @SuppressWarnings( DoNotMock ) to mocked com.google.common types  @DoNotMock will be added to these types. This change suppresses warnings for current cases where these types are mocked.  13ed6d3846bb3765b19ec06819a215ae93644b6c  -------  <p> Add GraphBuilder.incidentEdgeOrder().  2c1db61cfae457a58554f4390c3907f18f406b6a  -------  <p> Remove usages of deprecated CharMatcher functions  Fixes #3565  213ec90d8647412c4d25870fbc1c8bb3a44798ff  -------  <p> Have ImmutableGraph.Builder set incidentEdgeOrder to stable().  c43a2bf57ccc089bb64f2704321e175a611cdc4b  -------  <p> Migrate org.mockito.Matchers#any* to org.mockito.ArgumentMatchers  The former is deprecated and replaced by the latter in Mockito 2. However  there is a functional difference: ArgumentMatchers will reject  null  and check the type if the matcher specified a type (e.g.  any(Class)  or  anyInt() ).  any()  will remain to accept anything.  All remaining  any(Class)  references are migrated to  nulllable(Class)  to maintain the functionality of Mockito 1. All remaining  anyString()  references are migrated to  nullable(String.class)  to maintain the functionality of Mockito 1.  3e96e06575ea0bb1e8be61ce2edd57ac9427c71d
3690 ; android/guava/src/com/google/common/util/concurrent/AtomicDouble.java ; MOE Sync 2019-11-07 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify some range constraints.  Fixes https://github.com/google/guava/pull/3607.  88ef8691008d0c8c65f06a8eeb6a4e253a7a4868  -------  <p> Add javadoc in attempt to help readers differentiate Futures.allAsList() vs Futures.successfulAsList().  980e6e68b72c1adb89b01862b12fdf554b1d5f33  -------  <p> Fix broken links in AtomicDouble.  See https://github.com/google/guava/pull/3689  6c501c499020db010dd96918c26b3a07a655a1dd
3690 ;  guava/src/com/google/common/util/concurrent/AtomicDouble.java ; MOE Sync 2019-11-07 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify some range constraints.  Fixes https://github.com/google/guava/pull/3607.  88ef8691008d0c8c65f06a8eeb6a4e253a7a4868  -------  <p> Add javadoc in attempt to help readers differentiate Futures.allAsList() vs Futures.successfulAsList().  980e6e68b72c1adb89b01862b12fdf554b1d5f33  -------  <p> Fix broken links in AtomicDouble.  See https://github.com/google/guava/pull/3689  6c501c499020db010dd96918c26b3a07a655a1dd
3695 ;  guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/ListenableFuture.java ; MOE Sync 2019-11-11 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Roll forward CL 269313299.  *** Original change description ***  Let ListenableFuture implement thenable via a default interface method in J2CL  639d873cc139a32b270ba5a11a7ceb87cf8460c0
3695 ;  guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Thenable.java ; MOE Sync 2019-11-11 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Roll forward CL 269313299.  *** Original change description ***  Let ListenableFuture implement thenable via a default interface method in J2CL  639d873cc139a32b270ba5a11a7ceb87cf8460c0
3698 ; android/guava-tests/test/com/google/common/net/InetAddressesTest.java ; MOE Sync 2019-11-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Migrate from arrays to ImmutableSets in InetAddressesTest.  b827d92dbdd949550ecdf975111e4e0a4a4c7740
3698 ;  guava-tests/test/com/google/common/net/InetAddressesTest.java ; MOE Sync 2019-11-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Migrate from arrays to ImmutableSets in InetAddressesTest.  b827d92dbdd949550ecdf975111e4e0a4a4c7740
3699 ; android/guava-tests/test/com/google/common/net/InetAddressesTest.java ; MOE Sync 2019-11-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clean up some unnecessary initializations.  df0d13f964c729a3e0311f0b9db7e42fea70945e
3699 ;  guava-tests/test/com/google/common/net/InetAddressesTest.java ; MOE Sync 2019-11-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clean up some unnecessary initializations.  df0d13f964c729a3e0311f0b9db7e42fea70945e
3703 ; android/guava/src/com/google/common/net/InetAddresses.java ; MOE Sync 2019-11-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the big integer conversion code into InetAddresses  RELNOTES=Add toBigInteger and fromIpv4BigInteger/fromIpv6BigInteger to InetAddresses for manipulating InetAddresses as BigIntegers  a544e97d10572d0a71c481e2b833ad19a3a7de4f  -------  <p> Add support for scope IDs to InetAddresses.isInetAddress().  Fixes https://github.com/google/guava/issues/2587  1d3780724431da91b28bbf50fcb13f27459f4710  -------  <p> Format with Locale.ROOT.  This guarantees that the message matches across locales  including hi-IN  which we test with under Maven: https://travis-ci.org/google/guava/jobs/611945191 https://github.com/google/guava/blob/cc6cff2df9d66d4d9cd18f378cb75d03f7002852/pom.xml#L212  b29efa54b23b3cb28f4e150d045b83b8196d9050
3703 ;  guava/src/com/google/common/net/InetAddresses.java ; MOE Sync 2019-11-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Move the big integer conversion code into InetAddresses  RELNOTES=Add toBigInteger and fromIpv4BigInteger/fromIpv6BigInteger to InetAddresses for manipulating InetAddresses as BigIntegers  a544e97d10572d0a71c481e2b833ad19a3a7de4f  -------  <p> Add support for scope IDs to InetAddresses.isInetAddress().  Fixes https://github.com/google/guava/issues/2587  1d3780724431da91b28bbf50fcb13f27459f4710  -------  <p> Format with Locale.ROOT.  This guarantees that the message matches across locales  including hi-IN  which we test with under Maven: https://travis-ci.org/google/guava/jobs/611945191 https://github.com/google/guava/blob/cc6cff2df9d66d4d9cd18f378cb75d03f7002852/pom.xml#L212  b29efa54b23b3cb28f4e150d045b83b8196d9050
3704 ; android/guava/src/com/google/common/net/InetAddresses.java ; MOE Sync 2019-11-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use Truth assertions instead of JUnit assertions in InetAddressesTest.  Make assertions stronger if possible (check object equality instead of reference equality).  79e2c4efcbebf40ad651fddb107273b960874841  -------  <p> Correct documentation of getCoercedIPv4Address.  848d95b7e9e998cf9d8c952aeaf661902c364eb5
3704 ;  guava/src/com/google/common/net/InetAddresses.java ; MOE Sync 2019-11-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use Truth assertions instead of JUnit assertions in InetAddressesTest.  Make assertions stronger if possible (check object equality instead of reference equality).  79e2c4efcbebf40ad651fddb107273b960874841  -------  <p> Correct documentation of getCoercedIPv4Address.  848d95b7e9e998cf9d8c952aeaf661902c364eb5
3711 ; android/guava-tests/test/com/google/common/math/LongMathTest.java ; MOE Sync 2019-11-19 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Update Public Suffix data.  The [] copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  When that bug is not updated  the [] copy is updated 3 weeks before the Estimated Week of Stable:  https://www.chromium.org/developers/calendar#TOC-Estimated-Stable-Dates  For this update  []  d6c3cd99a466583651a7058505371fab8b76e554  -------  <p> Update to Truth 1.0  e6225a652e1a4651541fdeed15a400cdcba29b7a
3711 ;  guava-tests/test/com/google/common/math/LongMathTest.java ; MOE Sync 2019-11-19 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Update Public Suffix data.  The [] copy is updated whenever Chrome s copy is updated  which is typically every 6 weeks. Star the following to watch Chrome s updates:  https://bugs.chromium.org/p/chromium/issues/detail?id=610495  When that bug is not updated  the [] copy is updated 3 weeks before the Estimated Week of Stable:  https://www.chromium.org/developers/calendar#TOC-Estimated-Stable-Dates  For this update  []  d6c3cd99a466583651a7058505371fab8b76e554  -------  <p> Update to Truth 1.0  e6225a652e1a4651541fdeed15a400cdcba29b7a
3723 ; guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/ListenableFuture.java ; MOE Sync 2019-11-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use internal fast path for getting failure without allocating a wrapper ExecutionException  Also fix GWT AbstractFuture so that it respects the trusted interface. (More motivation for https://github.com/google/guava/issues/2934)  RELNOTES=N/A  736b09299f7ce844fdf28c5675eb126ea6b43e02  -------  <p> Support incidentEdgeOrder for directed Graphs  fd2255edf013f6592b83ee17432d0997d8db74d5  -------  <p> Add @JsOptional annotations to the 2nd parameter of the  then  method  since the second parameter is actually optional. This satisfies JsCompiler type checking.  73be65bd36e498f133549ddc24523176152aa8dc
3723 ;  guava-gwt/src-super/com/google/common/util/concurrent/super/com/google/common/util/concurrent/Thenable.java ; MOE Sync 2019-11-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use internal fast path for getting failure without allocating a wrapper ExecutionException  Also fix GWT AbstractFuture so that it respects the trusted interface. (More motivation for https://github.com/google/guava/issues/2934)  RELNOTES=N/A  736b09299f7ce844fdf28c5675eb126ea6b43e02  -------  <p> Support incidentEdgeOrder for directed Graphs  fd2255edf013f6592b83ee17432d0997d8db74d5  -------  <p> Add @JsOptional annotations to the 2nd parameter of the  then  method  since the second parameter is actually optional. This satisfies JsCompiler type checking.  73be65bd36e498f133549ddc24523176152aa8dc
3726 ; android/guava/src/com/google/common/collect/AbstractTable.java ; MOE Sync 2019-12-01 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make incidentEdges() return edges in insertion order  df2c5527d5fe4a50135239f0b6b516058a37c5fa  -------  <p> AbstractNetwork: fix bug in AbstractNetwork.hasEdgeConnecting() causing it to throw if either endpoint was not in the graph.  RELNOTES=Fix bug in AbstractNetwork.hasEdgeConnecting() causing it to throw if either endpoint was not in the graph.  Originally reported as GitHub issue #3721.  8e0f821430acaa5b77c5c2c05380e3d29f18e410  -------  <p> Refactor AbstractGraphTest to allow for tests with ImmutableGraph.  Reason: ImmutableGraph implementations are undertested compared to MutableGraph implementations. The current tests didn t catch a bug I deliberately introduced in [] Also  it would be nice to be able to share the incident edge order tests.  Note about design: I started out by making an AbstractGraphTest subclass for mutable graphs. However  that would lead to a duplication of all 7 subclasses and most of their tests. The issue is that directed/undirected and mutable/immutable are orthogonal and we also want to test allowSelfLoops=true/false and incidentEdgeOrder=unordered/stable. The proposed solution is somewhat unconventional  but at least allows us to share much more code between the tests.  a6d0db50f6d678839f17c82a76341bb0d3d60b29  -------  <p> Merge AbstractXGraphTest and ConfigurableSimpleXGraphTest  thus removing one layer from the AbstractGraphTest tree.  Reason: Nobody in [] is using these abstract test classes (even though they are designed for general purpose graphs). However  even though they aren t used  these classes add a layer of complexity to an already complex class tree that is going to become more complex with the addition of ImmutableGraph tests and stable incident edge order tests.  ce50502b9bd6fbd909abed1afd1de2976246eef9  -------  <p> Make the AbstractGraphTest tree more sane with only leaf nodes non-abstract and merge the tests for with and without self-loops.  f5ac328e048606d0b40c7e0b1b55bccd6ff177eb  -------  <p> Merge StandardMutableDirectedGraphTest and its variant with stable order.  This is in preparation for adding an Immutable version that also needs tests for the stable order.  a0ebd7b6d2789a168df5e3e0a224513dfe1257ee  -------  <p> Add StandardImmutableDirectedGraphTest  033535490cf36040b4c2aba6a94e9b0f3e59564e  -------  <p> Annotate benign race in AbstractTable so as to avoid TSAN issues.  a4c3bcd7d1c8438d02d368a18c46c1b39f27e80d
3726 ;  guava/src/com/google/common/collect/AbstractTable.java ; MOE Sync 2019-12-01 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make incidentEdges() return edges in insertion order  df2c5527d5fe4a50135239f0b6b516058a37c5fa  -------  <p> AbstractNetwork: fix bug in AbstractNetwork.hasEdgeConnecting() causing it to throw if either endpoint was not in the graph.  RELNOTES=Fix bug in AbstractNetwork.hasEdgeConnecting() causing it to throw if either endpoint was not in the graph.  Originally reported as GitHub issue #3721.  8e0f821430acaa5b77c5c2c05380e3d29f18e410  -------  <p> Refactor AbstractGraphTest to allow for tests with ImmutableGraph.  Reason: ImmutableGraph implementations are undertested compared to MutableGraph implementations. The current tests didn t catch a bug I deliberately introduced in [] Also  it would be nice to be able to share the incident edge order tests.  Note about design: I started out by making an AbstractGraphTest subclass for mutable graphs. However  that would lead to a duplication of all 7 subclasses and most of their tests. The issue is that directed/undirected and mutable/immutable are orthogonal and we also want to test allowSelfLoops=true/false and incidentEdgeOrder=unordered/stable. The proposed solution is somewhat unconventional  but at least allows us to share much more code between the tests.  a6d0db50f6d678839f17c82a76341bb0d3d60b29  -------  <p> Merge AbstractXGraphTest and ConfigurableSimpleXGraphTest  thus removing one layer from the AbstractGraphTest tree.  Reason: Nobody in [] is using these abstract test classes (even though they are designed for general purpose graphs). However  even though they aren t used  these classes add a layer of complexity to an already complex class tree that is going to become more complex with the addition of ImmutableGraph tests and stable incident edge order tests.  ce50502b9bd6fbd909abed1afd1de2976246eef9  -------  <p> Make the AbstractGraphTest tree more sane with only leaf nodes non-abstract and merge the tests for with and without self-loops.  f5ac328e048606d0b40c7e0b1b55bccd6ff177eb  -------  <p> Merge StandardMutableDirectedGraphTest and its variant with stable order.  This is in preparation for adding an Immutable version that also needs tests for the stable order.  a0ebd7b6d2789a168df5e3e0a224513dfe1257ee  -------  <p> Add StandardImmutableDirectedGraphTest  033535490cf36040b4c2aba6a94e9b0f3e59564e  -------  <p> Annotate benign race in AbstractTable so as to avoid TSAN issues.  a4c3bcd7d1c8438d02d368a18c46c1b39f27e80d
3732 ; android/guava-tests/test/com/google/common/graph/AbstractGraphTest.java ; MOE Sync 2019-12-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use  IPv4  instead of  Ipv4  for consistency.  This CL goes against the style guide  but we should be consistent within the file. We could instead rename the existing  lightly used methods to match the style guide  but I don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> Make equally named putEdge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> Support stable incident edge order for directed Immutable[Value]Graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76
3732 ;  android/guava-tests/test/com/google/common/graph/StandardImmutableDirectedGraphTest.java ; MOE Sync 2019-12-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use  IPv4  instead of  Ipv4  for consistency.  This CL goes against the style guide  but we should be consistent within the file. We could instead rename the existing  lightly used methods to match the style guide  but I don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> Make equally named putEdge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> Support stable incident edge order for directed Immutable[Value]Graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76
3732 ;  android/guava-tests/test/com/google/common/graph/StandardMutableDirectedGraphTest.java ; MOE Sync 2019-12-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use  IPv4  instead of  Ipv4  for consistency.  This CL goes against the style guide  but we should be consistent within the file. We could instead rename the existing  lightly used methods to match the style guide  but I don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> Make equally named putEdge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> Support stable incident edge order for directed Immutable[Value]Graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76
3732 ;  android/guava-tests/test/com/google/common/graph/StandardMutableUndirectedGraphTest.java ; MOE Sync 2019-12-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use  IPv4  instead of  Ipv4  for consistency.  This CL goes against the style guide  but we should be consistent within the file. We could instead rename the existing  lightly used methods to match the style guide  but I don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> Make equally named putEdge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> Support stable incident edge order for directed Immutable[Value]Graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76
3732 ;  android/guava/src/com/google/common/graph/DirectedGraphConnections.java ; MOE Sync 2019-12-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use  IPv4  instead of  Ipv4  for consistency.  This CL goes against the style guide  but we should be consistent within the file. We could instead rename the existing  lightly used methods to match the style guide  but I don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> Make equally named putEdge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> Support stable incident edge order for directed Immutable[Value]Graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76
3732 ;  android/guava/src/com/google/common/graph/ImmutableGraph.java ; MOE Sync 2019-12-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use  IPv4  instead of  Ipv4  for consistency.  This CL goes against the style guide  but we should be consistent within the file. We could instead rename the existing  lightly used methods to match the style guide  but I don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> Make equally named putEdge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> Support stable incident edge order for directed Immutable[Value]Graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76
3732 ;  android/guava/src/com/google/common/graph/ImmutableValueGraph.java ; MOE Sync 2019-12-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use  IPv4  instead of  Ipv4  for consistency.  This CL goes against the style guide  but we should be consistent within the file. We could instead rename the existing  lightly used methods to match the style guide  but I don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> Make equally named putEdge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> Support stable incident edge order for directed Immutable[Value]Graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76
3732 ;  guava-tests/test/com/google/common/graph/AbstractGraphTest.java ; MOE Sync 2019-12-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use  IPv4  instead of  Ipv4  for consistency.  This CL goes against the style guide  but we should be consistent within the file. We could instead rename the existing  lightly used methods to match the style guide  but I don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> Make equally named putEdge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> Support stable incident edge order for directed Immutable[Value]Graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76
3732 ;  guava-tests/test/com/google/common/graph/StandardImmutableDirectedGraphTest.java ; MOE Sync 2019-12-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use  IPv4  instead of  Ipv4  for consistency.  This CL goes against the style guide  but we should be consistent within the file. We could instead rename the existing  lightly used methods to match the style guide  but I don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> Make equally named putEdge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> Support stable incident edge order for directed Immutable[Value]Graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76
3732 ;  guava-tests/test/com/google/common/graph/StandardMutableDirectedGraphTest.java ; MOE Sync 2019-12-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use  IPv4  instead of  Ipv4  for consistency.  This CL goes against the style guide  but we should be consistent within the file. We could instead rename the existing  lightly used methods to match the style guide  but I don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> Make equally named putEdge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> Support stable incident edge order for directed Immutable[Value]Graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76
3732 ;  guava-tests/test/com/google/common/graph/StandardMutableUndirectedGraphTest.java ; MOE Sync 2019-12-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use  IPv4  instead of  Ipv4  for consistency.  This CL goes against the style guide  but we should be consistent within the file. We could instead rename the existing  lightly used methods to match the style guide  but I don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> Make equally named putEdge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> Support stable incident edge order for directed Immutable[Value]Graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76
3732 ;  guava/src/com/google/common/graph/DirectedGraphConnections.java ; MOE Sync 2019-12-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use  IPv4  instead of  Ipv4  for consistency.  This CL goes against the style guide  but we should be consistent within the file. We could instead rename the existing  lightly used methods to match the style guide  but I don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> Make equally named putEdge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> Support stable incident edge order for directed Immutable[Value]Graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76
3732 ;  guava/src/com/google/common/graph/ImmutableGraph.java ; MOE Sync 2019-12-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use  IPv4  instead of  Ipv4  for consistency.  This CL goes against the style guide  but we should be consistent within the file. We could instead rename the existing  lightly used methods to match the style guide  but I don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> Make equally named putEdge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> Support stable incident edge order for directed Immutable[Value]Graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76
3732 ;  guava/src/com/google/common/graph/ImmutableValueGraph.java ; MOE Sync 2019-12-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Use  IPv4  instead of  Ipv4  for consistency.  This CL goes against the style guide  but we should be consistent within the file. We could instead rename the existing  lightly used methods to match the style guide  but I don t think this will be the best use of someone s time.  4a627d3ea2ac16e7e970f78939df6a163335df1c  -------  <p> Add @SuppressWarnings( GoodTime ) to GWT supersource for LocalCache operating in primitive millis.  95e7e1af8ef059e874f4c00230b010f651322e71  -------  <p> The Graph tests now consistently call graphAsMutableGraph.foo() when testing foo()  rather than proxy methods  1fc1f11779159183f0b4daeb388c6def36a4a2e3  -------  <p> Make equally named putEdge() method adjacent  9a1f2e28f76a623501e8178262359202055139c2  -------  <p> Support stable incident edge order for directed Immutable[Value]Graphs.  2608ca43cf15c4b2a7ad21a900550358f5e6fc76
3734 ; android/guava/src/com/google/common/base/CaseFormat.java ; MOE Sync 2019-12-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add @DoNotMock to several com.google.common types  Relnotes:   - Add @DoNotMock to several com.google.common types.  dbd97473cab26185e48620b7916159915621bb14  -------  <p> Add @DoNotMock to ListenableFuture  Remove @DoNotMock from AbstractFuture  as it is now covered by @DoNotMock on ListenableFuture  RELNOTES=N/A  ad9d3eae25e3f7a8bb07a0b00105ec4426beab88  -------  <p> Fix small error with how CaseFormat calculates the StringBuilder size when converting one format to another.  Fixes https://github.com/google/guava/pull/3730  0dc680192f18b7664f900304576736c1914d14ba
3734 ;  guava/src/com/google/common/base/CaseFormat.java ; MOE Sync 2019-12-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add @DoNotMock to several com.google.common types  Relnotes:   - Add @DoNotMock to several com.google.common types.  dbd97473cab26185e48620b7916159915621bb14  -------  <p> Add @DoNotMock to ListenableFuture  Remove @DoNotMock from AbstractFuture  as it is now covered by @DoNotMock on ListenableFuture  RELNOTES=N/A  ad9d3eae25e3f7a8bb07a0b00105ec4426beab88  -------  <p> Fix small error with how CaseFormat calculates the StringBuilder size when converting one format to another.  Fixes https://github.com/google/guava/pull/3730  0dc680192f18b7664f900304576736c1914d14ba
3739 ; android/guava/src/com/google/common/hash/HashFunction.java ; MOE Sync 2019-12-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove @DoNotMock from HashFunction.  Users need some kind of way to  e.g.  easily produce collisions in cases in which collisions should be rare. Maybe we can provide a better way to do this  but for now  let s at least not forbid using mocking frameworks.  c9ae0d314031ac9521d57aab8743ddba0c5f4717
3739 ;  guava/src/com/google/common/hash/HashFunction.java ; MOE Sync 2019-12-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove @DoNotMock from HashFunction.  Users need some kind of way to  e.g.  easily produce collisions in cases in which collisions should be rare. Maybe we can provide a better way to do this  but for now  let s at least not forbid using mocking frameworks.  c9ae0d314031ac9521d57aab8743ddba0c5f4717
3740 ; android/guava/src/com/google/common/io/ByteStreams.java ; MOE Sync 2019-12-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Format the Javadoc of ByteStreams.read() with @throw tags.  Fixes https://github.com/google/guava/pull/3735  907ec2ea8655ba1c69d8b003c3e51689ec02b864
3740 ;  guava/src/com/google/common/io/ByteStreams.java ; MOE Sync 2019-12-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Format the Javadoc of ByteStreams.read() with @throw tags.  Fixes https://github.com/google/guava/pull/3735  907ec2ea8655ba1c69d8b003c3e51689ec02b864
3741 ; android/guava/src/com/google/common/io/FileBackedOutputStream.java ; MOE Sync 2019-12-18 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Actually map Thenable helper interface to JS IThenable. The name is different to avoid a clash with elemental2 IThenable.  8207e996f569381719eff09ee836509136734cc0  -------  <p> Use Error Prone s @GuardedBy enforcement to make sure that mutable state is appropriately synchronized.  f6d239520285c399978597c4a6665bf41fe8395d
3741 ;  guava/src/com/google/common/io/FileBackedOutputStream.java ; MOE Sync 2019-12-18 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Actually map Thenable helper interface to JS IThenable. The name is different to avoid a clash with elemental2 IThenable.  8207e996f569381719eff09ee836509136734cc0  -------  <p> Use Error Prone s @GuardedBy enforcement to make sure that mutable state is appropriately synchronized.  f6d239520285c399978597c4a6665bf41fe8395d
3743 ; android/guava-tests/benchmark/com/google/common/collect/MapsMemoryBenchmark.java ; MOE Sync 2019-12-20 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Expand Android access to Compact*Hash*  Also rename newCompactHashMapWithExpectedSize(int) to newCompactHashMap(int) to match newCompactHashSet(int).  b2723ea162d6c4d7df62722e87f609f70478840a
3747 ; android/guava-tests/benchmark/com/google/common/cache/ChainBenchmark.java ; MOE Sync 2019-12-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashMap fall back to a java.util.LinkedHashMap if hash flooding is detected  just as the immutable collections do.  5dffec12c07ea23bcba653198036e55df27792f0  -------  <p> Fix Maven test failures from CL 286604248: - Make  abstract  class abstract. (And make its constructor package-private while we re at it.) - Add a dummy test method (similar to what FilteredCollectionsTest already has).  These should fix: - warning(junit.framework.TestSuite$1): Class com.google.common.collect.AbstractHashFloodingTest has no public constructor TestCase(String name) or TestCase() - warning(junit.framework.TestSuite$1): No tests found in com.google.common.collect.ImmutableBiMapTest  https://travis-ci.org/google/guava/jobs/628734577  (Also  address a review comment: https://github.com/google/guava/pull/3746/files/40d75c94d568935159ce838c61940430fce54249#r360917786)  8ccd51880e63c487af858c6de57a2d37eb2cf4ac  -------  <p> Add @SuppressWarnings for new violations of the GuardedBy checker.  98736425927413862c058d11f1aaeae53bbe0f91
3747 ;  android/guava-tests/benchmark/com/google/common/cache/SegmentBenchmark.java ; MOE Sync 2019-12-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashMap fall back to a java.util.LinkedHashMap if hash flooding is detected  just as the immutable collections do.  5dffec12c07ea23bcba653198036e55df27792f0  -------  <p> Fix Maven test failures from CL 286604248: - Make  abstract  class abstract. (And make its constructor package-private while we re at it.) - Add a dummy test method (similar to what FilteredCollectionsTest already has).  These should fix: - warning(junit.framework.TestSuite$1): Class com.google.common.collect.AbstractHashFloodingTest has no public constructor TestCase(String name) or TestCase() - warning(junit.framework.TestSuite$1): No tests found in com.google.common.collect.ImmutableBiMapTest  https://travis-ci.org/google/guava/jobs/628734577  (Also  address a review comment: https://github.com/google/guava/pull/3746/files/40d75c94d568935159ce838c61940430fce54249#r360917786)  8ccd51880e63c487af858c6de57a2d37eb2cf4ac  -------  <p> Add @SuppressWarnings for new violations of the GuardedBy checker.  98736425927413862c058d11f1aaeae53bbe0f91
3747 ;  android/guava-tests/test/com/google/common/collect/MapMakerInternalMapTest.java ; MOE Sync 2019-12-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashMap fall back to a java.util.LinkedHashMap if hash flooding is detected  just as the immutable collections do.  5dffec12c07ea23bcba653198036e55df27792f0  -------  <p> Fix Maven test failures from CL 286604248: - Make  abstract  class abstract. (And make its constructor package-private while we re at it.) - Add a dummy test method (similar to what FilteredCollectionsTest already has).  These should fix: - warning(junit.framework.TestSuite$1): Class com.google.common.collect.AbstractHashFloodingTest has no public constructor TestCase(String name) or TestCase() - warning(junit.framework.TestSuite$1): No tests found in com.google.common.collect.ImmutableBiMapTest  https://travis-ci.org/google/guava/jobs/628734577  (Also  address a review comment: https://github.com/google/guava/pull/3746/files/40d75c94d568935159ce838c61940430fce54249#r360917786)  8ccd51880e63c487af858c6de57a2d37eb2cf4ac  -------  <p> Add @SuppressWarnings for new violations of the GuardedBy checker.  98736425927413862c058d11f1aaeae53bbe0f91
3747 ;  guava-tests/benchmark/com/google/common/cache/ChainBenchmark.java ; MOE Sync 2019-12-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashMap fall back to a java.util.LinkedHashMap if hash flooding is detected  just as the immutable collections do.  5dffec12c07ea23bcba653198036e55df27792f0  -------  <p> Fix Maven test failures from CL 286604248: - Make  abstract  class abstract. (And make its constructor package-private while we re at it.) - Add a dummy test method (similar to what FilteredCollectionsTest already has).  These should fix: - warning(junit.framework.TestSuite$1): Class com.google.common.collect.AbstractHashFloodingTest has no public constructor TestCase(String name) or TestCase() - warning(junit.framework.TestSuite$1): No tests found in com.google.common.collect.ImmutableBiMapTest  https://travis-ci.org/google/guava/jobs/628734577  (Also  address a review comment: https://github.com/google/guava/pull/3746/files/40d75c94d568935159ce838c61940430fce54249#r360917786)  8ccd51880e63c487af858c6de57a2d37eb2cf4ac  -------  <p> Add @SuppressWarnings for new violations of the GuardedBy checker.  98736425927413862c058d11f1aaeae53bbe0f91
3747 ;  guava-tests/benchmark/com/google/common/cache/SegmentBenchmark.java ; MOE Sync 2019-12-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashMap fall back to a java.util.LinkedHashMap if hash flooding is detected  just as the immutable collections do.  5dffec12c07ea23bcba653198036e55df27792f0  -------  <p> Fix Maven test failures from CL 286604248: - Make  abstract  class abstract. (And make its constructor package-private while we re at it.) - Add a dummy test method (similar to what FilteredCollectionsTest already has).  These should fix: - warning(junit.framework.TestSuite$1): Class com.google.common.collect.AbstractHashFloodingTest has no public constructor TestCase(String name) or TestCase() - warning(junit.framework.TestSuite$1): No tests found in com.google.common.collect.ImmutableBiMapTest  https://travis-ci.org/google/guava/jobs/628734577  (Also  address a review comment: https://github.com/google/guava/pull/3746/files/40d75c94d568935159ce838c61940430fce54249#r360917786)  8ccd51880e63c487af858c6de57a2d37eb2cf4ac  -------  <p> Add @SuppressWarnings for new violations of the GuardedBy checker.  98736425927413862c058d11f1aaeae53bbe0f91
3747 ;  guava-tests/test/com/google/common/collect/MapMakerInternalMapTest.java ; MOE Sync 2019-12-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashMap fall back to a java.util.LinkedHashMap if hash flooding is detected  just as the immutable collections do.  5dffec12c07ea23bcba653198036e55df27792f0  -------  <p> Fix Maven test failures from CL 286604248: - Make  abstract  class abstract. (And make its constructor package-private while we re at it.) - Add a dummy test method (similar to what FilteredCollectionsTest already has).  These should fix: - warning(junit.framework.TestSuite$1): Class com.google.common.collect.AbstractHashFloodingTest has no public constructor TestCase(String name) or TestCase() - warning(junit.framework.TestSuite$1): No tests found in com.google.common.collect.ImmutableBiMapTest  https://travis-ci.org/google/guava/jobs/628734577  (Also  address a review comment: https://github.com/google/guava/pull/3746/files/40d75c94d568935159ce838c61940430fce54249#r360917786)  8ccd51880e63c487af858c6de57a2d37eb2cf4ac  -------  <p> Add @SuppressWarnings for new violations of the GuardedBy checker.  98736425927413862c058d11f1aaeae53bbe0f91
3748 ; guava/src/com/google/common/collect/ImmutableTable.java ; MOE Sync 2019-12-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> refactor: Lambda can be replaced method reference  Fixes #3745  1d8ab4f96855dcb9a7cd3990a671f4e5696faa4e
3752 ; android/guava/src/com/google/common/collect/CompactHashMap.java ; MOE Sync 2019-12-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct @Nullable and use Ints.constrainToRange()  5d9fc397a80618ea90786f026962f208b979bece
3752 ;  android/guava/src/com/google/common/collect/CompactLinkedHashMap.java ; MOE Sync 2019-12-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct @Nullable and use Ints.constrainToRange()  5d9fc397a80618ea90786f026962f208b979bece
3752 ;  guava/src/com/google/common/collect/CompactHashMap.java ; MOE Sync 2019-12-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct @Nullable and use Ints.constrainToRange()  5d9fc397a80618ea90786f026962f208b979bece
3752 ;  guava/src/com/google/common/collect/CompactLinkedHashMap.java ; MOE Sync 2019-12-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct @Nullable and use Ints.constrainToRange()  5d9fc397a80618ea90786f026962f208b979bece
3755 ; guava-gwt/test/com/google/common/collect/AbstractHashFloodingTest_gwt.java ; MOE Sync 2019-12-26 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Stop classifying AbstractHashFloodingTest as a test to be run directly.  When it s classified as a test to be run directly  our custom infrastructure generates AbstractHashFloodingTest_gwt  and Maven tries to run it  failing with:   No tests found in com.google.common.collect.AbstractHashFloodingTest_gwt  Ideally  our infrastructure would recognize that an abstract class could never be run directly  at which point we wouldn t need to manually classify tests like this. But I don t remember seeing this problem in a long time  so we probably won t bother.  55e4929f978eec17a829fb0a7c6f338710720b19
3757 ; android/guava-tests/test/com/google/common/collect/SynchronizedDequeTest.java ; MOE Sync 2019-12-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Assign the result of contains() and containsAll() to a variable.  This satisfies the CheckReturnValue checker. []  d99aad23b74bf91eb3084b2b40625e787e758ff3
3757 ;  android/guava-tests/test/com/google/common/collect/SynchronizedQueueTest.java ; MOE Sync 2019-12-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Assign the result of contains() and containsAll() to a variable.  This satisfies the CheckReturnValue checker. []  d99aad23b74bf91eb3084b2b40625e787e758ff3
3757 ;  guava-tests/test/com/google/common/collect/SynchronizedDequeTest.java ; MOE Sync 2019-12-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Assign the result of contains() and containsAll() to a variable.  This satisfies the CheckReturnValue checker. []  d99aad23b74bf91eb3084b2b40625e787e758ff3
3757 ;  guava-tests/test/com/google/common/collect/SynchronizedQueueTest.java ; MOE Sync 2019-12-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Assign the result of contains() and containsAll() to a variable.  This satisfies the CheckReturnValue checker. []  d99aad23b74bf91eb3084b2b40625e787e758ff3
3758 ; android/guava/src/com/google/common/math/Stats.java ; MOE Sync 2020-01-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix instances of {#foo} in Javadoc.  31b05b7c67b4a6fe620dc14f33cc9818f7ee107c
3758 ;  android/guava/src/com/google/common/util/concurrent/AbstractService.java ; MOE Sync 2020-01-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix instances of {#foo} in Javadoc.  31b05b7c67b4a6fe620dc14f33cc9818f7ee107c
3758 ;  guava/src/com/google/common/math/Stats.java ; MOE Sync 2020-01-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix instances of {#foo} in Javadoc.  31b05b7c67b4a6fe620dc14f33cc9818f7ee107c
3758 ;  guava/src/com/google/common/util/concurrent/AbstractService.java ; MOE Sync 2020-01-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix instances of {#foo} in Javadoc.  31b05b7c67b4a6fe620dc14f33cc9818f7ee107c
3763 ; android/guava-testlib/src/com/google/common/collect/testing/MapInterfaceTest.java ; MOE Sync 2020-01-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Update to JUnit 4.13  15262018825b31559b39e1ea84cccb29903f44e0  -------  <p> Note another case in which our implementation of TypeVariable throws UnsupportedOperationException.  55fdde6aee4878820e8fc7615c05ec8d0e365b5f  -------  <p> Suppress ignored return values from Collection#contains*.  I think this is all of them!  b574bfaead6951521ba9d174c935b55309fa51b8
3763 ;  android/guava-tests/test/com/google/common/collect/SynchronizedMapTest.java ; MOE Sync 2020-01-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Update to JUnit 4.13  15262018825b31559b39e1ea84cccb29903f44e0  -------  <p> Note another case in which our implementation of TypeVariable throws UnsupportedOperationException.  55fdde6aee4878820e8fc7615c05ec8d0e365b5f  -------  <p> Suppress ignored return values from Collection#contains*.  I think this is all of them!  b574bfaead6951521ba9d174c935b55309fa51b8
3763 ;  guava-testlib/src/com/google/common/collect/testing/MapInterfaceTest.java ; MOE Sync 2020-01-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Update to JUnit 4.13  15262018825b31559b39e1ea84cccb29903f44e0  -------  <p> Note another case in which our implementation of TypeVariable throws UnsupportedOperationException.  55fdde6aee4878820e8fc7615c05ec8d0e365b5f  -------  <p> Suppress ignored return values from Collection#contains*.  I think this is all of them!  b574bfaead6951521ba9d174c935b55309fa51b8
3763 ;  guava-tests/test/com/google/common/collect/ImmutableSetTest.java ; MOE Sync 2020-01-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Update to JUnit 4.13  15262018825b31559b39e1ea84cccb29903f44e0  -------  <p> Note another case in which our implementation of TypeVariable throws UnsupportedOperationException.  55fdde6aee4878820e8fc7615c05ec8d0e365b5f  -------  <p> Suppress ignored return values from Collection#contains*.  I think this is all of them!  b574bfaead6951521ba9d174c935b55309fa51b8
3763 ;  guava-tests/test/com/google/common/collect/SynchronizedMapTest.java ; MOE Sync 2020-01-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Update to JUnit 4.13  15262018825b31559b39e1ea84cccb29903f44e0  -------  <p> Note another case in which our implementation of TypeVariable throws UnsupportedOperationException.  55fdde6aee4878820e8fc7615c05ec8d0e365b5f  -------  <p> Suppress ignored return values from Collection#contains*.  I think this is all of them!  b574bfaead6951521ba9d174c935b55309fa51b8
3764 ; android/guava/src/com/google/common/cache/LocalCache.java ; MOE Sync 2020-01-07 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that we generate a non-empty Javadoc jar for guava-gwt.  Without it  we get an error during Sonatype deployment:   Missing: no javadoc jar found in folder  /com/google/guava/guava-gwt/28.2-jre   I hacked around this on the GitHub release branch for 28.2 by reenabling Javadoc: https://github.com/google/guava/commit/a1b3c06876803a0b0e5d2f16708e1328da1bac09  But as you may recall from CL 276327335  we re soon going to have no classes to generate Javadoc for (after we remove GWT-RPC support). So even with Javadoc generation enabled  we d end up with no jar.  To ensure that we get a jar  I ve introduced a package-private dummy class (and then excluded it from the other steps in which source files are used).  80210f266950156ccd1eb56d18af7552f41dd274  -------  <p> ValueGraph: Support incidentEdgeOrder=stable  f05442beb167e9e7953022983f3885cb219d9968  -------  <p> ImmutableValueGraph: Support incidentEdgeOrder=stable  RELNOTES=N/A  12b0521095bde73b06c13ccd9558be10cd648d4f  -------  <p> Graph: Support stable incidentEdgeOrder for undirected graphs  e541ab5ee31f86733a0bfa0caa11f872292f51cd  -------  <p> Add StandardImmutableUndirectedGraphTest  5fddc483ad638b46badddcc44ca0501b9a185c5c  -------  <p> Suppress GuardedBy violation in LocalCache.  This looks like it s just for testing  which I think makes it /probably OK/  but feel free to suggest otherwise.  db04af06932fe7ff009a7903e44471e945ea057d
3764 ;  guava/src/com/google/common/cache/LocalCache.java ; MOE Sync 2020-01-07 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that we generate a non-empty Javadoc jar for guava-gwt.  Without it  we get an error during Sonatype deployment:   Missing: no javadoc jar found in folder  /com/google/guava/guava-gwt/28.2-jre   I hacked around this on the GitHub release branch for 28.2 by reenabling Javadoc: https://github.com/google/guava/commit/a1b3c06876803a0b0e5d2f16708e1328da1bac09  But as you may recall from CL 276327335  we re soon going to have no classes to generate Javadoc for (after we remove GWT-RPC support). So even with Javadoc generation enabled  we d end up with no jar.  To ensure that we get a jar  I ve introduced a package-private dummy class (and then excluded it from the other steps in which source files are used).  80210f266950156ccd1eb56d18af7552f41dd274  -------  <p> ValueGraph: Support incidentEdgeOrder=stable  f05442beb167e9e7953022983f3885cb219d9968  -------  <p> ImmutableValueGraph: Support incidentEdgeOrder=stable  RELNOTES=N/A  12b0521095bde73b06c13ccd9558be10cd648d4f  -------  <p> Graph: Support stable incidentEdgeOrder for undirected graphs  e541ab5ee31f86733a0bfa0caa11f872292f51cd  -------  <p> Add StandardImmutableUndirectedGraphTest  5fddc483ad638b46badddcc44ca0501b9a185c5c  -------  <p> Suppress GuardedBy violation in LocalCache.  This looks like it s just for testing  which I think makes it /probably OK/  but feel free to suggest otherwise.  db04af06932fe7ff009a7903e44471e945ea057d
3765 ; android/guava/src/com/google/common/base/Platform.java ; MOE Sync 2020-01-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add test case stable incidentEdgeOrder with a self loop to AbstractStandard[Un]directedGraphTest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> Add test for stable incidentEdgeOrder support for mutable undirected valuegraphs in ValueGraphTest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> Fix off-by-one error in AsciiDigits.asciiDigits initialization.  Fixes #3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> Disable GWT-RPC by default in the open-source release.  RELNOTES=[Guava types can no longer be sent over GWT-RPC.](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ) To _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f
3765 ;  android/guava/src/com/google/common/collect/Platform.java ; MOE Sync 2020-01-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add test case stable incidentEdgeOrder with a self loop to AbstractStandard[Un]directedGraphTest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> Add test for stable incidentEdgeOrder support for mutable undirected valuegraphs in ValueGraphTest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> Fix off-by-one error in AsciiDigits.asciiDigits initialization.  Fixes #3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> Disable GWT-RPC by default in the open-source release.  RELNOTES=[Guava types can no longer be sent over GWT-RPC.](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ) To _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f
3765 ;  android/guava/src/com/google/common/primitives/Platform.java ; MOE Sync 2020-01-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add test case stable incidentEdgeOrder with a self loop to AbstractStandard[Un]directedGraphTest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> Add test for stable incidentEdgeOrder support for mutable undirected valuegraphs in ValueGraphTest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> Fix off-by-one error in AsciiDigits.asciiDigits initialization.  Fixes #3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> Disable GWT-RPC by default in the open-source release.  RELNOTES=[Guava types can no longer be sent over GWT-RPC.](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ) To _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f
3765 ;  guava/src/com/google/common/base/Platform.java ; MOE Sync 2020-01-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add test case stable incidentEdgeOrder with a self loop to AbstractStandard[Un]directedGraphTest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> Add test for stable incidentEdgeOrder support for mutable undirected valuegraphs in ValueGraphTest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> Fix off-by-one error in AsciiDigits.asciiDigits initialization.  Fixes #3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> Disable GWT-RPC by default in the open-source release.  RELNOTES=[Guava types can no longer be sent over GWT-RPC.](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ) To _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f
3765 ;  guava/src/com/google/common/collect/Platform.java ; MOE Sync 2020-01-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add test case stable incidentEdgeOrder with a self loop to AbstractStandard[Un]directedGraphTest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> Add test for stable incidentEdgeOrder support for mutable undirected valuegraphs in ValueGraphTest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> Fix off-by-one error in AsciiDigits.asciiDigits initialization.  Fixes #3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> Disable GWT-RPC by default in the open-source release.  RELNOTES=[Guava types can no longer be sent over GWT-RPC.](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ) To _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f
3765 ;  guava/src/com/google/common/primitives/Platform.java ; MOE Sync 2020-01-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add test case stable incidentEdgeOrder with a self loop to AbstractStandard[Un]directedGraphTest.  aee54682770a3166c231bbfecced91f31c55d32a  -------  <p> Add test for stable incidentEdgeOrder support for mutable undirected valuegraphs in ValueGraphTest  0aba85dd247e254e10fcd84e7b2940fa0383e14e  -------  <p> Fix off-by-one error in AsciiDigits.asciiDigits initialization.  Fixes #3761.  2b27d9f906e18ae1105766d41e0940122ce686a0  -------  <p> Disable GWT-RPC by default in the open-source release.  RELNOTES=[Guava types can no longer be sent over GWT-RPC.](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ) To _temporarily_ reenable support  set the  guava.gwt.emergency_reenable_rpc  system property to  true .  ff0cd947f82d24611e39fb3d86e3d19da4af801f
3767 ; android/guava/src/com/google/common/graph/ElementOrder.java ; MOE Sync 2020-01-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add incidentEdgeOrder() to the [Value]Graph interface  RELNOTES= graph : Add  incidentEdgeOrder()  to the  [Value]Graph  interfaces  ae2710e8cb1d0ab80e247334273695da0c7b3afb  -------  <p> Make incidentEdgeOrder() public for [Value]Graph  RELNOTES= graph : Allow setting a stable incident edge order by calling the newly added method  [Value]Graph.Builder.incidentEdgeOrder(ElementOrder.stable()) .  0ceaed084bb7e52d8fa3b0760cb0ffe486918a00
3767 ;  android/guava/src/com/google/common/graph/GraphBuilder.java ; MOE Sync 2020-01-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add incidentEdgeOrder() to the [Value]Graph interface  RELNOTES= graph : Add  incidentEdgeOrder()  to the  [Value]Graph  interfaces  ae2710e8cb1d0ab80e247334273695da0c7b3afb  -------  <p> Make incidentEdgeOrder() public for [Value]Graph  RELNOTES= graph : Allow setting a stable incident edge order by calling the newly added method  [Value]Graph.Builder.incidentEdgeOrder(ElementOrder.stable()) .  0ceaed084bb7e52d8fa3b0760cb0ffe486918a00
3767 ;  android/guava/src/com/google/common/graph/ValueGraphBuilder.java ; MOE Sync 2020-01-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add incidentEdgeOrder() to the [Value]Graph interface  RELNOTES= graph : Add  incidentEdgeOrder()  to the  [Value]Graph  interfaces  ae2710e8cb1d0ab80e247334273695da0c7b3afb  -------  <p> Make incidentEdgeOrder() public for [Value]Graph  RELNOTES= graph : Allow setting a stable incident edge order by calling the newly added method  [Value]Graph.Builder.incidentEdgeOrder(ElementOrder.stable()) .  0ceaed084bb7e52d8fa3b0760cb0ffe486918a00
3767 ;  guava/src/com/google/common/graph/ElementOrder.java ; MOE Sync 2020-01-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add incidentEdgeOrder() to the [Value]Graph interface  RELNOTES= graph : Add  incidentEdgeOrder()  to the  [Value]Graph  interfaces  ae2710e8cb1d0ab80e247334273695da0c7b3afb  -------  <p> Make incidentEdgeOrder() public for [Value]Graph  RELNOTES= graph : Allow setting a stable incident edge order by calling the newly added method  [Value]Graph.Builder.incidentEdgeOrder(ElementOrder.stable()) .  0ceaed084bb7e52d8fa3b0760cb0ffe486918a00
3767 ;  guava/src/com/google/common/graph/GraphBuilder.java ; MOE Sync 2020-01-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add incidentEdgeOrder() to the [Value]Graph interface  RELNOTES= graph : Add  incidentEdgeOrder()  to the  [Value]Graph  interfaces  ae2710e8cb1d0ab80e247334273695da0c7b3afb  -------  <p> Make incidentEdgeOrder() public for [Value]Graph  RELNOTES= graph : Allow setting a stable incident edge order by calling the newly added method  [Value]Graph.Builder.incidentEdgeOrder(ElementOrder.stable()) .  0ceaed084bb7e52d8fa3b0760cb0ffe486918a00
3767 ;  guava/src/com/google/common/graph/ValueGraphBuilder.java ; MOE Sync 2020-01-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add incidentEdgeOrder() to the [Value]Graph interface  RELNOTES= graph : Add  incidentEdgeOrder()  to the  [Value]Graph  interfaces  ae2710e8cb1d0ab80e247334273695da0c7b3afb  -------  <p> Make incidentEdgeOrder() public for [Value]Graph  RELNOTES= graph : Allow setting a stable incident edge order by calling the newly added method  [Value]Graph.Builder.incidentEdgeOrder(ElementOrder.stable()) .  0ceaed084bb7e52d8fa3b0760cb0ffe486918a00
3772 ; android/guava/src/com/google/common/base/Stopwatch.java ; MOE Sync 2020-01-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Update Public Suffix data.  fea136b2585cd01765e67de83e54dad6a0aebae5  -------  <p> Rewrite the Stopwatch docs to explain elapsed vs wall time  81b9816a5e8347a05518c7869464e0f357be58b7
3772 ;  guava/src/com/google/common/base/Stopwatch.java ; MOE Sync 2020-01-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Update Public Suffix data.  fea136b2585cd01765e67de83e54dad6a0aebae5  -------  <p> Rewrite the Stopwatch docs to explain elapsed vs wall time  81b9816a5e8347a05518c7869464e0f357be58b7
3773 ; android/guava/src/com/google/common/io/Resources.java ; MOE Sync 2020-01-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Update Resource.getResource to allow ignoring return value for existence checks.  Specifically this impacts getResource(contextClass  resourceName) as this is already present on getResource(resourceName)  RELNOTES=Update Resource.getResource(*) to allow ignoring return value for existence checks.  383c278b7b8044feac53153c0dd3202d3fa0b3c6
3773 ;  guava/src/com/google/common/io/Resources.java ; MOE Sync 2020-01-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Update Resource.getResource to allow ignoring return value for existence checks.  Specifically this impacts getResource(contextClass  resourceName) as this is already present on getResource(resourceName)  RELNOTES=Update Resource.getResource(*) to allow ignoring return value for existence checks.  383c278b7b8044feac53153c0dd3202d3fa0b3c6
3793 ; android/guava/src/com/google/common/io/BaseEncoding.java ; MOE Sync 2020-02-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Annotate upperCase and lowerCase with @LazyInit.  This eliminates a TSAN warning.  f325f04c86c8159f5bd9d771e697217a866c46d2
3793 ;  guava/src/com/google/common/io/BaseEncoding.java ; MOE Sync 2020-02-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Annotate upperCase and lowerCase with @LazyInit.  This eliminates a TSAN warning.  f325f04c86c8159f5bd9d771e697217a866c46d2
3796 ; android/guava/src/com/google/common/util/concurrent/AbstractFuture.java ; MOE Sync 2020-02-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make AbstractFuture compatible with ForkJoinPool by catching exceptions from property retrieval.  Fixes #3788  #3784  RELNOTES=Made it safe to load the  AbstractFuture  class from a  ForkJoinPool  thread under a security manager.  e589b5c884a5996f7040ae38bdf02709f9e300da
3796 ;  guava-tests/test/com/google/common/util/concurrent/AbstractFutureInnocuousThreadTest.java ; MOE Sync 2020-02-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make AbstractFuture compatible with ForkJoinPool by catching exceptions from property retrieval.  Fixes #3788  #3784  RELNOTES=Made it safe to load the  AbstractFuture  class from a  ForkJoinPool  thread under a security manager.  e589b5c884a5996f7040ae38bdf02709f9e300da
3796 ;  guava/src/com/google/common/util/concurrent/AbstractFuture.java ; MOE Sync 2020-02-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make AbstractFuture compatible with ForkJoinPool by catching exceptions from property retrieval.  Fixes #3788  #3784  RELNOTES=Made it safe to load the  AbstractFuture  class from a  ForkJoinPool  thread under a security manager.  e589b5c884a5996f7040ae38bdf02709f9e300da
3797 ; android/guava/src/com/google/common/collect/Table.java ; MOE Sync 2020-02-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add missing @Nullable.  afa21015d337d38bbaa752aa29b2d50c700f8190
3797 ;  guava/src/com/google/common/collect/Table.java ; MOE Sync 2020-02-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add missing @Nullable.  afa21015d337d38bbaa752aa29b2d50c700f8190
3801 ; android/guava-tests/test/com/google/common/graph/StandardImmutableDirectedGraphTest.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  android/guava-tests/test/com/google/common/graph/StandardImmutableUndirectedGraphTest.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  android/guava-tests/test/com/google/common/graph/StandardMutableDirectedGraphTest.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  android/guava-tests/test/com/google/common/graph/StandardMutableUndirectedGraphTest.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  android/guava-tests/test/com/google/common/graph/ValueGraphTest.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  android/guava/src/com/google/common/graph/GraphBuilder.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  android/guava/src/com/google/common/graph/ImmutableGraph.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  android/guava/src/com/google/common/graph/ImmutableValueGraph.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  android/guava/src/com/google/common/graph/StandardMutableGraph.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  android/guava/src/com/google/common/graph/StandardMutableValueGraph.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  android/guava/src/com/google/common/graph/StandardValueGraph.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  android/guava/src/com/google/common/graph/ValueGraphBuilder.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  guava-tests/test/com/google/common/graph/StandardImmutableDirectedGraphTest.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  guava-tests/test/com/google/common/graph/StandardImmutableUndirectedGraphTest.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  guava-tests/test/com/google/common/graph/StandardMutableDirectedGraphTest.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  guava-tests/test/com/google/common/graph/StandardMutableUndirectedGraphTest.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  guava-tests/test/com/google/common/graph/ValueGraphTest.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  guava/src/com/google/common/graph/GraphBuilder.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  guava/src/com/google/common/graph/ImmutableGraph.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  guava/src/com/google/common/graph/ImmutableValueGraph.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  guava/src/com/google/common/graph/StandardMutableGraph.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  guava/src/com/google/common/graph/StandardMutableValueGraph.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  guava/src/com/google/common/graph/StandardValueGraph.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3801 ;  guava/src/com/google/common/graph/ValueGraphBuilder.java ; MOE Sync 2020-02-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Rename  ConfigurableX  to  StandardX  for [Value]Graph  which better captures what these implementations represent.  Note that this work was already started in the past with the abstract StandardGraph tests.  1be4110bac4c8540053fb4d096fdbb6d28d8a504
3802 ; android/guava/src/com/google/common/collect/SortedMultiset.java ; MOE Sync 2020-02-19 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make TopKSelector ctor throw IllegalArgumentException when buffer size is too big to be held in memory.  Previously this would lead to java.lang.NegativeArraySizeException.  e0418c067aea976e3e59e23e035d15177112597a  -------  <p> Annotate FluentIterable.from(FluentIterable) with @DoNotCall  RELNOTES=Annotate FluentIterable.from(FluentIterable) with @DoNotCall  e3264687f823752dea2d724d2734b4a18e5c92a3  -------  <p> Fixing a typo in some Guava javadocs.  RELNOTES=Fixing a typo in javadoc.  5efab94ad9b77695012878c6b7c5a8815c7d2d36
3802 ;  android/guava/src/com/google/common/collect/TreeMultimap.java ; MOE Sync 2020-02-19 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make TopKSelector ctor throw IllegalArgumentException when buffer size is too big to be held in memory.  Previously this would lead to java.lang.NegativeArraySizeException.  e0418c067aea976e3e59e23e035d15177112597a  -------  <p> Annotate FluentIterable.from(FluentIterable) with @DoNotCall  RELNOTES=Annotate FluentIterable.from(FluentIterable) with @DoNotCall  e3264687f823752dea2d724d2734b4a18e5c92a3  -------  <p> Fixing a typo in some Guava javadocs.  RELNOTES=Fixing a typo in javadoc.  5efab94ad9b77695012878c6b7c5a8815c7d2d36
3802 ;  guava/src/com/google/common/collect/SortedMultiset.java ; MOE Sync 2020-02-19 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make TopKSelector ctor throw IllegalArgumentException when buffer size is too big to be held in memory.  Previously this would lead to java.lang.NegativeArraySizeException.  e0418c067aea976e3e59e23e035d15177112597a  -------  <p> Annotate FluentIterable.from(FluentIterable) with @DoNotCall  RELNOTES=Annotate FluentIterable.from(FluentIterable) with @DoNotCall  e3264687f823752dea2d724d2734b4a18e5c92a3  -------  <p> Fixing a typo in some Guava javadocs.  RELNOTES=Fixing a typo in javadoc.  5efab94ad9b77695012878c6b7c5a8815c7d2d36
3802 ;  guava/src/com/google/common/collect/TreeMultimap.java ; MOE Sync 2020-02-19 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make TopKSelector ctor throw IllegalArgumentException when buffer size is too big to be held in memory.  Previously this would lead to java.lang.NegativeArraySizeException.  e0418c067aea976e3e59e23e035d15177112597a  -------  <p> Annotate FluentIterable.from(FluentIterable) with @DoNotCall  RELNOTES=Annotate FluentIterable.from(FluentIterable) with @DoNotCall  e3264687f823752dea2d724d2734b4a18e5c92a3  -------  <p> Fixing a typo in some Guava javadocs.  RELNOTES=Fixing a typo in javadoc.  5efab94ad9b77695012878c6b7c5a8815c7d2d36
3804 ; android/guava-tests/test/com/google/common/collect/CompactHashMapTest.java ; MOE Sync 2020-02-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Invalidate delegate iterators during clear() and make FPP tests more strict  2cb0a5968938965027b9fc046f67db565a8cb68c
3804 ;  android/guava-tests/test/com/google/common/collect/CompactLinkedHashMapTest.java ; MOE Sync 2020-02-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Invalidate delegate iterators during clear() and make FPP tests more strict  2cb0a5968938965027b9fc046f67db565a8cb68c
3804 ;  android/guava/src/com/google/common/collect/CompactHashMap.java ; MOE Sync 2020-02-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Invalidate delegate iterators during clear() and make FPP tests more strict  2cb0a5968938965027b9fc046f67db565a8cb68c
3804 ;  guava-tests/test/com/google/common/collect/CompactHashMapTest.java ; MOE Sync 2020-02-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Invalidate delegate iterators during clear() and make FPP tests more strict  2cb0a5968938965027b9fc046f67db565a8cb68c
3804 ;  guava-tests/test/com/google/common/collect/CompactLinkedHashMapTest.java ; MOE Sync 2020-02-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Invalidate delegate iterators during clear() and make FPP tests more strict  2cb0a5968938965027b9fc046f67db565a8cb68c
3804 ;  guava/src/com/google/common/collect/CompactHashMap.java ; MOE Sync 2020-02-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Invalidate delegate iterators during clear() and make FPP tests more strict  2cb0a5968938965027b9fc046f67db565a8cb68c
3805 ; android/guava-testlib/src/com/google/common/collect/testing/CollectionTestSuiteBuilder.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  android/guava-testlib/src/com/google/common/collect/testing/Helpers.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  android/guava-testlib/src/com/google/common/collect/testing/ListTestSuiteBuilder.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  android/guava-testlib/src/com/google/common/collect/testing/SetTestSuiteBuilder.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  android/guava-testlib/src/com/google/common/collect/testing/SortedSetTestSuiteBuilder.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  android/guava-testlib/src/com/google/common/collect/testing/google/MultisetTestSuiteBuilder.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  android/guava-testlib/src/com/google/common/collect/testing/google/SortedMultisetTestSuiteBuilder.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  android/guava-testlib/src/com/google/common/testing/ClusterException.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  android/guava-tests/test/com/google/common/collect/IteratorsTest.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  guava-testlib/src/com/google/common/collect/testing/CollectionTestSuiteBuilder.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  guava-testlib/src/com/google/common/collect/testing/Helpers.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  guava-testlib/src/com/google/common/collect/testing/ListTestSuiteBuilder.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  guava-testlib/src/com/google/common/collect/testing/SetTestSuiteBuilder.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  guava-testlib/src/com/google/common/collect/testing/SortedSetTestSuiteBuilder.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  guava-testlib/src/com/google/common/collect/testing/google/MultisetTestSuiteBuilder.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  guava-testlib/src/com/google/common/collect/testing/google/SortedMultisetTestSuiteBuilder.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  guava-testlib/src/com/google/common/testing/ClusterException.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3805 ;  guava-tests/test/com/google/common/collect/IteratorsTest.java ; MOE Sync 2020-02-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify redundant  Collection.addAll()  calls.  Fixes #3800  ae564a1d7c39704e800f04cef427f4c8abd6f010
3807 ; android/guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  android/guava-tests/test/com/google/common/graph/AbstractNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  android/guava-tests/test/com/google/common/graph/AbstractUndirectedNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  android/guava-tests/test/com/google/common/graph/ConfigurableDirectedMultiNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  android/guava-tests/test/com/google/common/graph/ConfigurableDirectedNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  android/guava-tests/test/com/google/common/graph/ConfigurableSimpleDirectedNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  android/guava-tests/test/com/google/common/graph/ConfigurableSimpleUndirectedNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  android/guava-tests/test/com/google/common/graph/ConfigurableUndirectedMultiNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  android/guava-tests/test/com/google/common/graph/ConfigurableUndirectedNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  guava-tests/test/com/google/common/graph/AbstractDirectedNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  guava-tests/test/com/google/common/graph/AbstractNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  guava-tests/test/com/google/common/graph/AbstractUndirectedNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  guava-tests/test/com/google/common/graph/ConfigurableDirectedMultiNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  guava-tests/test/com/google/common/graph/ConfigurableDirectedNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  guava-tests/test/com/google/common/graph/ConfigurableSimpleDirectedNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  guava-tests/test/com/google/common/graph/ConfigurableSimpleUndirectedNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  guava-tests/test/com/google/common/graph/ConfigurableUndirectedMultiNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3807 ;  guava-tests/test/com/google/common/graph/ConfigurableUndirectedNetworkTest.java ; MOE Sync 2020-02-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor AbstractNetworkTest in the same way as AbstractGraphTest was refactored earlier: Allow the graph under test to be immutable.  Note: This is a pure refactor  no coverage is changing.  1ae455b65162b8a1adf369e24f1d593b5f2886a3
3810 ; android/guava-tests/test/com/google/common/graph/StandardDirectedMultiNetworkTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  android/guava-tests/test/com/google/common/graph/StandardDirectedNetworkTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  android/guava-tests/test/com/google/common/graph/StandardSimpleDirectedNetworkTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  android/guava-tests/test/com/google/common/graph/StandardSimpleDirectedSortedNetworkTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  android/guava-tests/test/com/google/common/graph/StandardSimpleUndirectedNetworkTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  android/guava-tests/test/com/google/common/graph/StandardUndirectedMultiNetworkTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  android/guava-tests/test/com/google/common/graph/StandardUndirectedNetworkTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  android/guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  android/guava/src/com/google/common/graph/DirectedGraphConnections.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  android/guava/src/com/google/common/graph/ElementOrder.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  android/guava/src/com/google/common/graph/ImmutableNetwork.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  android/guava/src/com/google/common/graph/NetworkBuilder.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  android/guava/src/com/google/common/graph/StandardMutableNetwork.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  android/guava/src/com/google/common/graph/StandardNetwork.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  guava-tests/test/com/google/common/graph/StandardDirectedMultiNetworkTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  guava-tests/test/com/google/common/graph/StandardDirectedNetworkTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  guava-tests/test/com/google/common/graph/StandardSimpleDirectedNetworkTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  guava-tests/test/com/google/common/graph/StandardSimpleDirectedSortedNetworkTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  guava-tests/test/com/google/common/graph/StandardSimpleUndirectedNetworkTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  guava-tests/test/com/google/common/graph/StandardUndirectedMultiNetworkTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  guava-tests/test/com/google/common/graph/StandardUndirectedNetworkTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  guava/src/com/google/common/graph/AbstractDirectedNetworkConnections.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  guava/src/com/google/common/graph/DirectedGraphConnections.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  guava/src/com/google/common/graph/ElementOrder.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  guava/src/com/google/common/graph/ImmutableNetwork.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  guava/src/com/google/common/graph/NetworkBuilder.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  guava/src/com/google/common/graph/StandardMutableNetwork.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3810 ;  guava/src/com/google/common/graph/StandardNetwork.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make Compact(Linked)HashSet fall back to a java.util.LinkedHashSet if hash flooding is detected  just as the immutable collections do.  a97eccf35da1290e69a2b95375b10cbced95c7b6  -------  <p> Make lenientToString easier for nullness-analysis tools to understand.  And I think prevent it from turning a StackOverflowError into a NullPointerException in unlikely cases?  As far as tools know  String.valueOf is capable of throwing an Error or RuntimeException  even when it s called with a parameter whose values is null. Thus  tools conclude that the flow of the program might reach  o.getClass().getName()  when  o  is null. That would in turn produce NullPointerException.  Tools might not even be wrong  since String.valueOf could produce a StackOverflowError if we were *just* about to run out of space. Of course  in that case we re going to have problems in the catch() block no matter what... :)  To avoid this  we check for null in lenientToString itself.  e9d2fcc35213b848d2904e82768dc5d42d33039a  -------  <p> Make GWT compilation of tests no longer flaky.  bb6e55fe20861fe0160d9e95fc5507ef4c6a0ee2  -------  <p> Update Public Suffix data.  1323cda77015764438d4febdd83240c006b9da48  -------  <p> Rename  ConfigurableX  to  StandardX  for Network  which better captures what these implementations represent.  Note that this work was already done for [Value]Graph.  ef37cf45afbcd44a75de665b03966a075af7727a
3811 ; android/guava-tests/test/com/google/common/graph/AbstractGraphTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove remaining documentation references to configurable implementations  9c3f315f62358c54a0e03fda782eba0e8d39419f  -------  <p> Delete unused method  71f625f15620bf4893322011536977459321c1a5
3811 ;  guava-tests/test/com/google/common/graph/AbstractGraphTest.java ; MOE Sync 2020-02-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove remaining documentation references to configurable implementations  9c3f315f62358c54a0e03fda782eba0e8d39419f  -------  <p> Delete unused method  71f625f15620bf4893322011536977459321c1a5
3814 ; android/guava-tests/test/com/google/common/io/CharStreamsTest.java ; MOE Sync 2020-03-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make nullWriter().append(...) (both overloads) accept a null CharSequence.  The docs of Writer are misleading:      An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.toString())     https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#append%28java.lang.CharSequence%29  But that s not true  as the docs go on to say:      csq - The character sequence to append. If csq is null  then the four characters  null  are appended to this writer.      Accepting null in the 2-arg method is arguably even weirder  but at least the docs call it out more prominently: https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#append%28java.lang.CharSequence %20int %20int%29  Credit to the Checker Framework for identifying this bug.  a27746a876d9426a7252460ef288f4abf9c0d785
3814 ;  android/guava/src/com/google/common/io/CharStreams.java ; MOE Sync 2020-03-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make nullWriter().append(...) (both overloads) accept a null CharSequence.  The docs of Writer are misleading:      An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.toString())     https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#append%28java.lang.CharSequence%29  But that s not true  as the docs go on to say:      csq - The character sequence to append. If csq is null  then the four characters  null  are appended to this writer.      Accepting null in the 2-arg method is arguably even weirder  but at least the docs call it out more prominently: https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#append%28java.lang.CharSequence %20int %20int%29  Credit to the Checker Framework for identifying this bug.  a27746a876d9426a7252460ef288f4abf9c0d785
3814 ;  guava-tests/test/com/google/common/io/CharStreamsTest.java ; MOE Sync 2020-03-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make nullWriter().append(...) (both overloads) accept a null CharSequence.  The docs of Writer are misleading:      An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.toString())     https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#append%28java.lang.CharSequence%29  But that s not true  as the docs go on to say:      csq - The character sequence to append. If csq is null  then the four characters  null  are appended to this writer.      Accepting null in the 2-arg method is arguably even weirder  but at least the docs call it out more prominently: https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#append%28java.lang.CharSequence %20int %20int%29  Credit to the Checker Framework for identifying this bug.  a27746a876d9426a7252460ef288f4abf9c0d785
3814 ;  guava/src/com/google/common/io/CharStreams.java ; MOE Sync 2020-03-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make nullWriter().append(...) (both overloads) accept a null CharSequence.  The docs of Writer are misleading:      An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.toString())     https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#append%28java.lang.CharSequence%29  But that s not true  as the docs go on to say:      csq - The character sequence to append. If csq is null  then the four characters  null  are appended to this writer.      Accepting null in the 2-arg method is arguably even weirder  but at least the docs call it out more prominently: https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#append%28java.lang.CharSequence %20int %20int%29  Credit to the Checker Framework for identifying this bug.  a27746a876d9426a7252460ef288f4abf9c0d785
3815 ; android/guava-tests/test/com/google/common/io/CharStreamsTest.java ; MOE Sync 2020-03-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Store each result in a  Present<V>  instance instead of an Optional<V>.  We can t store a plain V because we need to distinguish between Optional.absent() and null (at least in the Google-internal successfulAsMap -- and eventually in whenAllComplete(...).collectToList() (#1519)  which is likely to omit failures instead of mapping them to null as successfulAsList does).  We may have problems using Optional when we adopt new nullability annotations  since Optional<V> might not be a valid instantiation when V is instantiated with a nullable type.  e371bf1af65c4c6727d1194fd59ffcc99a8ea084  -------  <p> Migrate from @MonotonicNonNull to @Nullable.  The features of @MonotonicNonNull don t buy us anything in our use case  since we check the fields for null on every access  anyway.  And @MonotonicNonNull is likely not to be available in the set of nullness annotations we adopt.  https://checkerframework.org/api/org/checkerframework/checker/nullness/qual/MonotonicNonNull.html  d4d5d6293d45c41110cb35c3e6e3a27996fe91bc  -------  <p> Rollback a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d pending internal break  8a32d0b35e3c8342ef1cb503de9ef2881958ad68  -------  <p> Roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d  Make nullWriter().append(...) (both overloads) accept a null CharSequence.  The docs of Writer are misleading:      An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.toString())     https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#app...  29992f2f557770a4c52c78f47750ae12b26d72fd
3815 ;  android/guava/src/com/google/common/io/CharStreams.java ; MOE Sync 2020-03-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Store each result in a  Present<V>  instance instead of an Optional<V>.  We can t store a plain V because we need to distinguish between Optional.absent() and null (at least in the Google-internal successfulAsMap -- and eventually in whenAllComplete(...).collectToList() (#1519)  which is likely to omit failures instead of mapping them to null as successfulAsList does).  We may have problems using Optional when we adopt new nullability annotations  since Optional<V> might not be a valid instantiation when V is instantiated with a nullable type.  e371bf1af65c4c6727d1194fd59ffcc99a8ea084  -------  <p> Migrate from @MonotonicNonNull to @Nullable.  The features of @MonotonicNonNull don t buy us anything in our use case  since we check the fields for null on every access  anyway.  And @MonotonicNonNull is likely not to be available in the set of nullness annotations we adopt.  https://checkerframework.org/api/org/checkerframework/checker/nullness/qual/MonotonicNonNull.html  d4d5d6293d45c41110cb35c3e6e3a27996fe91bc  -------  <p> Rollback a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d pending internal break  8a32d0b35e3c8342ef1cb503de9ef2881958ad68  -------  <p> Roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d  Make nullWriter().append(...) (both overloads) accept a null CharSequence.  The docs of Writer are misleading:      An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.toString())     https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#app...  29992f2f557770a4c52c78f47750ae12b26d72fd
3815 ;  guava-tests/test/com/google/common/io/CharStreamsTest.java ; MOE Sync 2020-03-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Store each result in a  Present<V>  instance instead of an Optional<V>.  We can t store a plain V because we need to distinguish between Optional.absent() and null (at least in the Google-internal successfulAsMap -- and eventually in whenAllComplete(...).collectToList() (#1519)  which is likely to omit failures instead of mapping them to null as successfulAsList does).  We may have problems using Optional when we adopt new nullability annotations  since Optional<V> might not be a valid instantiation when V is instantiated with a nullable type.  e371bf1af65c4c6727d1194fd59ffcc99a8ea084  -------  <p> Migrate from @MonotonicNonNull to @Nullable.  The features of @MonotonicNonNull don t buy us anything in our use case  since we check the fields for null on every access  anyway.  And @MonotonicNonNull is likely not to be available in the set of nullness annotations we adopt.  https://checkerframework.org/api/org/checkerframework/checker/nullness/qual/MonotonicNonNull.html  d4d5d6293d45c41110cb35c3e6e3a27996fe91bc  -------  <p> Rollback a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d pending internal break  8a32d0b35e3c8342ef1cb503de9ef2881958ad68  -------  <p> Roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d  Make nullWriter().append(...) (both overloads) accept a null CharSequence.  The docs of Writer are misleading:      An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.toString())     https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#app...  29992f2f557770a4c52c78f47750ae12b26d72fd
3815 ;  guava/src/com/google/common/io/CharStreams.java ; MOE Sync 2020-03-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Store each result in a  Present<V>  instance instead of an Optional<V>.  We can t store a plain V because we need to distinguish between Optional.absent() and null (at least in the Google-internal successfulAsMap -- and eventually in whenAllComplete(...).collectToList() (#1519)  which is likely to omit failures instead of mapping them to null as successfulAsList does).  We may have problems using Optional when we adopt new nullability annotations  since Optional<V> might not be a valid instantiation when V is instantiated with a nullable type.  e371bf1af65c4c6727d1194fd59ffcc99a8ea084  -------  <p> Migrate from @MonotonicNonNull to @Nullable.  The features of @MonotonicNonNull don t buy us anything in our use case  since we check the fields for null on every access  anyway.  And @MonotonicNonNull is likely not to be available in the set of nullness annotations we adopt.  https://checkerframework.org/api/org/checkerframework/checker/nullness/qual/MonotonicNonNull.html  d4d5d6293d45c41110cb35c3e6e3a27996fe91bc  -------  <p> Rollback a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d pending internal break  8a32d0b35e3c8342ef1cb503de9ef2881958ad68  -------  <p> Roll-forward of a8107fae90ddec3a1c6d4dbba80ccf9c8a90c54d  Make nullWriter().append(...) (both overloads) accept a null CharSequence.  The docs of Writer are misleading:      An invocation of this method of the form out.append(csq) behaves in exactly the same way as the invocation      out.write(csq.toString())     https://docs.oracle.com/javase/7/docs/api/java/io/Writer.html#app...  29992f2f557770a4c52c78f47750ae12b26d72fd
3818 ; android/guava/src/com/google/common/util/concurrent/CollectionFuture.java ; MOE Sync 2020-03-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Document that our racy access is safe.  2c9301827eab9df3769c09ca1ae74c7c8673ea76
3818 ;  guava/src/com/google/common/util/concurrent/CollectionFuture.java ; MOE Sync 2020-03-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Document that our racy access is safe.  2c9301827eab9df3769c09ca1ae74c7c8673ea76
3819 ; android/guava-tests/test/com/google/common/graph/StandardMutableDirectedNetworkTest.java ; MOE Sync 2020-03-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify AbstractGraphTest by replacing allowsSelfLoops() and incidentEdgeOrder() by graph accessors.  a8d9fcb85edea8f185af28da6b4e12f2636e59a6  -------  <p> Simplify the AbstractNetworkTest tree (undirected branch): Delete StandardSimpleUndirectedNetworkTest  This is similar to an earlier refector of the AbstractGraphTest tree.  Note: This is a pure refactor: No tests were added or removed.  34ed9b2c6d258e867b043401ebd9614a175476b8  -------  <p> Move all tests from StandardMutableUndirectedNetworkTest to AbstractStandardUndirectedNetworkTest  This is similar to an earlier refector of the AbstractGraphTest tree.  Note: This is a pure refactor: No tests were added or removed.  6dfb447e78c21e1e206cb91453f4e4e03e6b261b  -------  <p> Make StandardMutableUndirectedNetworkTest parameterized so that it tests both with and without self loops.  This is similar to an earlier refector of the AbstractGraphTest tree.  ee6595018132ed9e859152f0d11450598c168774  -------  <p> Simplify the AbstractNetworkTest tree (directed branch): Delete StandardSimpleDirectedNetworkTest  This is similar to an earlier refector of the AbstractGraphTest tree.  45bb762daf790b278f7ceaaab8c94575b70df32d  -------  <p> Move all tests from StandardMutableDirectedNetworkTest to AbstractStandardDirectedNetworkTest  This is similar to an earlier refector of the AbstractGraphTest tree.  Note: This is a pure refactor: No tests were added or removed.  bd328cd0dfeb89d27225cf9b4caecc5756ed42b3  -------  <p> Make StandardMutableDirectedNetworkTest parameterized so that it tests both with and without self loops.  This is similar to an earlier refector of the AbstractGraphTest tree.  c5d8c5b19184f54be74b27d56e7d4f29824fdeac
3819 ;  guava-tests/test/com/google/common/graph/StandardMutableDirectedNetworkTest.java ; MOE Sync 2020-03-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Simplify AbstractGraphTest by replacing allowsSelfLoops() and incidentEdgeOrder() by graph accessors.  a8d9fcb85edea8f185af28da6b4e12f2636e59a6  -------  <p> Simplify the AbstractNetworkTest tree (undirected branch): Delete StandardSimpleUndirectedNetworkTest  This is similar to an earlier refector of the AbstractGraphTest tree.  Note: This is a pure refactor: No tests were added or removed.  34ed9b2c6d258e867b043401ebd9614a175476b8  -------  <p> Move all tests from StandardMutableUndirectedNetworkTest to AbstractStandardUndirectedNetworkTest  This is similar to an earlier refector of the AbstractGraphTest tree.  Note: This is a pure refactor: No tests were added or removed.  6dfb447e78c21e1e206cb91453f4e4e03e6b261b  -------  <p> Make StandardMutableUndirectedNetworkTest parameterized so that it tests both with and without self loops.  This is similar to an earlier refector of the AbstractGraphTest tree.  ee6595018132ed9e859152f0d11450598c168774  -------  <p> Simplify the AbstractNetworkTest tree (directed branch): Delete StandardSimpleDirectedNetworkTest  This is similar to an earlier refector of the AbstractGraphTest tree.  45bb762daf790b278f7ceaaab8c94575b70df32d  -------  <p> Move all tests from StandardMutableDirectedNetworkTest to AbstractStandardDirectedNetworkTest  This is similar to an earlier refector of the AbstractGraphTest tree.  Note: This is a pure refactor: No tests were added or removed.  bd328cd0dfeb89d27225cf9b4caecc5756ed42b3  -------  <p> Make StandardMutableDirectedNetworkTest parameterized so that it tests both with and without self loops.  This is similar to an earlier refector of the AbstractGraphTest tree.  c5d8c5b19184f54be74b27d56e7d4f29824fdeac
3823 ; android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java ; MOE Sync 2020-03-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Replace Thread.currentThread().interrupted() with Thread.interrupted() or Thread.currentThread().interrupt()  whichever seems appropriate.  Thread.interrupted: static method on Thread which returns whether the thread has been interrupted (and resets the interrupt bit)  Thread.currentThread().interrupt(): interrupts the current thread  744b356fa6769d4ae6924d649ac20da6c7e748ac
3823 ;  guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java ; MOE Sync 2020-03-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Replace Thread.currentThread().interrupted() with Thread.interrupted() or Thread.currentThread().interrupt()  whichever seems appropriate.  Thread.interrupted: static method on Thread which returns whether the thread has been interrupted (and resets the interrupt bit)  Thread.currentThread().interrupt(): interrupts the current thread  744b356fa6769d4ae6924d649ac20da6c7e748ac
3824 ; android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java ; MOE Sync 2020-03-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Implement some more toString() methods for debugging.  I added these locally while debugging  but they seem potentially generally useful.  d52651a64c4965bb06be812b90aee6191e7a80f8
3824 ;  android/guava/src/com/google/common/util/concurrent/MoreExecutors.java ; MOE Sync 2020-03-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Implement some more toString() methods for debugging.  I added these locally while debugging  but they seem potentially generally useful.  d52651a64c4965bb06be812b90aee6191e7a80f8
3824 ;  android/guava/src/com/google/common/util/concurrent/SequentialExecutor.java ; MOE Sync 2020-03-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Implement some more toString() methods for debugging.  I added these locally while debugging  but they seem potentially generally useful.  d52651a64c4965bb06be812b90aee6191e7a80f8
3824 ;  guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java ; MOE Sync 2020-03-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Implement some more toString() methods for debugging.  I added these locally while debugging  but they seem potentially generally useful.  d52651a64c4965bb06be812b90aee6191e7a80f8
3824 ;  guava/src/com/google/common/util/concurrent/MoreExecutors.java ; MOE Sync 2020-03-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Implement some more toString() methods for debugging.  I added these locally while debugging  but they seem potentially generally useful.  d52651a64c4965bb06be812b90aee6191e7a80f8
3824 ;  guava/src/com/google/common/util/concurrent/SequentialExecutor.java ; MOE Sync 2020-03-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Implement some more toString() methods for debugging.  I added these locally while debugging  but they seem potentially generally useful.  d52651a64c4965bb06be812b90aee6191e7a80f8
3825 ; android/guava/src/com/google/common/util/concurrent/CollectionFuture.java ; MOE Sync 2020-03-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Store  values  in a local first instead of repeatedly reading it from a field.  At worst  this is a no-op. At best  it may perform better.  b6d4f65f1065dcf3fe75bbeb1b2df226280116c5
3825 ;  guava/src/com/google/common/util/concurrent/CollectionFuture.java ; MOE Sync 2020-03-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Store  values  in a local first instead of repeatedly reading it from a field.  At worst  this is a no-op. At best  it may perform better.  b6d4f65f1065dcf3fe75bbeb1b2df226280116c5
3827 ; guava-tests/test/com/google/common/util/concurrent/ListeningScheduledExecutorServiceTest.java ; MOE Sync 2020-03-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add  Duration -based default methods to  ListeningScheduledExecutorService   They just delegate to the existing methods from the interface  using the existing saturated conversion to nanoseconds. This matches existing  Duration -based overloads of  (long  TimeUnit)  methods in the same package.  RELNOTES=Added  Duration -based  default  methods to  ListeningScheduledExecutorService .  c7984e7e5c40868ca47faede472ad77c10965114
3827 ;  guava/src/com/google/common/util/concurrent/ListeningScheduledExecutorService.java ; MOE Sync 2020-03-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add  Duration -based default methods to  ListeningScheduledExecutorService   They just delegate to the existing methods from the interface  using the existing saturated conversion to nanoseconds. This matches existing  Duration -based overloads of  (long  TimeUnit)  methods in the same package.  RELNOTES=Added  Duration -based  default  methods to  ListeningScheduledExecutorService .  c7984e7e5c40868ca47faede472ad77c10965114
3830 ; android/guava-tests/test/com/google/common/io/ByteSourceTest.java ; MOE Sync 2020-03-19 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fixed double slicing ByteSource (#3501).  Fixes #3829  6fb7746b8bc39d4d547a1b2bb47549c6b8314af4
3830 ;  android/guava/src/com/google/common/io/ByteSource.java ; MOE Sync 2020-03-19 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fixed double slicing ByteSource (#3501).  Fixes #3829  6fb7746b8bc39d4d547a1b2bb47549c6b8314af4
3830 ;  guava-tests/test/com/google/common/io/ByteSourceTest.java ; MOE Sync 2020-03-19 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fixed double slicing ByteSource (#3501).  Fixes #3829  6fb7746b8bc39d4d547a1b2bb47549c6b8314af4
3830 ;  guava/src/com/google/common/io/ByteSource.java ; MOE Sync 2020-03-19 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fixed double slicing ByteSource (#3501).  Fixes #3829  6fb7746b8bc39d4d547a1b2bb47549c6b8314af4
3831 ; android/guava-tests/test/com/google/common/io/BaseEncodingTest.java ; MOE Sync 2020-03-20 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add some unit tests for base64Url() in BaseEncoding  Fixes #3816  e1c08a80e340efb4477dd601d6073936cc67617f
3831 ;  guava-gwt/test/com/google/common/io/BaseEncodingTest_gwt.java ; MOE Sync 2020-03-20 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add some unit tests for base64Url() in BaseEncoding  Fixes #3816  e1c08a80e340efb4477dd601d6073936cc67617f
3831 ;  guava-tests/test/com/google/common/io/BaseEncodingTest.java ; MOE Sync 2020-03-20 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add some unit tests for base64Url() in BaseEncoding  Fixes #3816  e1c08a80e340efb4477dd601d6073936cc67617f
3833 ; android/guava/src/com/google/common/util/concurrent/ServiceManager.java ; MOE Sync 2020-03-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make sure native.js files are included in the Guava GWT release.  This is needed for J2CL compatibility.  b1511bdf9bd51b666d07550ba258f556a6bef2fa  -------  <p> Add missing  @since  for 1-arg  ServiceManager.addListener .  https://guava.dev/releases/15.0/api/diffs/changes/com.google.common.util.concurrent.ServiceManager.html#com.google.common.util.concurrent.ServiceManager.addListener_added%28com.google.common.util.concurrent.ServiceManager.Listener%29  29d356e629ed4798ba2fe9a71600e708e132b529
3833 ;  guava/src/com/google/common/util/concurrent/ServiceManager.java ; MOE Sync 2020-03-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make sure native.js files are included in the Guava GWT release.  This is needed for J2CL compatibility.  b1511bdf9bd51b666d07550ba258f556a6bef2fa  -------  <p> Add missing  @since  for 1-arg  ServiceManager.addListener .  https://guava.dev/releases/15.0/api/diffs/changes/com.google.common.util.concurrent.ServiceManager.html#com.google.common.util.concurrent.ServiceManager.addListener_added%28com.google.common.util.concurrent.ServiceManager.Listener%29  29d356e629ed4798ba2fe9a71600e708e132b529
3836 ; android/guava/src/com/google/common/util/concurrent/ServiceManager.java ; MOE Sync 2020-03-30 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Deprecate 1-arg overload of ServiceManager.addListener.  It default to directExecutor(). directExecutor() is often useful  but it should be an explicit choice  as some usages are dangerous: https://guava.dev/releases/snapshot-jre/api/docs/com/google/common/util/concurrent/ListenableFuture.html#addListener-java.lang.Runnable-java.util.concurrent.Executor-  https://github.com/google/guava/issues/3418  RELNOTES= util.concurrent : Deprecated the 1-arg overload of  ServiceManager.addListener .  200056a4525bf28f1d252505f1564fdf26322ccb
3836 ;  guava/src/com/google/common/util/concurrent/ServiceManager.java ; MOE Sync 2020-03-30 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Deprecate 1-arg overload of ServiceManager.addListener.  It default to directExecutor(). directExecutor() is often useful  but it should be an explicit choice  as some usages are dangerous: https://guava.dev/releases/snapshot-jre/api/docs/com/google/common/util/concurrent/ListenableFuture.html#addListener-java.lang.Runnable-java.util.concurrent.Executor-  https://github.com/google/guava/issues/3418  RELNOTES= util.concurrent : Deprecated the 1-arg overload of  ServiceManager.addListener .  200056a4525bf28f1d252505f1564fdf26322ccb
3837 ; android/guava-tests/test/com/google/common/util/concurrent/FuturesTest.java ; MOE Sync 2020-03-30 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add immediateVoidFuture() to Futures.java to create an immediately succeeding ListenableFuture<Void>.  RELNOTES= util.concurrent : Added  immediateVoidFuture .  e90c8bbe566429fc46a33f88930c6379e57a8094
3837 ;  android/guava/src/com/google/common/util/concurrent/Futures.java ; MOE Sync 2020-03-30 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add immediateVoidFuture() to Futures.java to create an immediately succeeding ListenableFuture<Void>.  RELNOTES= util.concurrent : Added  immediateVoidFuture .  e90c8bbe566429fc46a33f88930c6379e57a8094
3837 ;  guava-gwt/test/com/google/common/util/concurrent/FuturesTest_gwt.java ; MOE Sync 2020-03-30 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add immediateVoidFuture() to Futures.java to create an immediately succeeding ListenableFuture<Void>.  RELNOTES= util.concurrent : Added  immediateVoidFuture .  e90c8bbe566429fc46a33f88930c6379e57a8094
3837 ;  guava-tests/test/com/google/common/util/concurrent/FuturesTest.java ; MOE Sync 2020-03-30 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add immediateVoidFuture() to Futures.java to create an immediately succeeding ListenableFuture<Void>.  RELNOTES= util.concurrent : Added  immediateVoidFuture .  e90c8bbe566429fc46a33f88930c6379e57a8094
3837 ;  guava/src/com/google/common/util/concurrent/Futures.java ; MOE Sync 2020-03-30 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add immediateVoidFuture() to Futures.java to create an immediately succeeding ListenableFuture<Void>.  RELNOTES= util.concurrent : Added  immediateVoidFuture .  e90c8bbe566429fc46a33f88930c6379e57a8094
3839 ; android/guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java ; MOE Sync 2020-03-31 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Introducing floor(E) and ceiling(E) method in GWT emulated ImmutableSortedSet package.  RELNOTES= com.google.common.collect.ImmutableSortedSet : Added  ceiling  and  floor  methods for GWT emulated ImmutableSortedSet  706830ee1c7903af3d1d04478a601c2bd0a763bc
3839 ;  android/guava/src/com/google/common/collect/ImmutableSortedSet.java ; MOE Sync 2020-03-31 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Introducing floor(E) and ceiling(E) method in GWT emulated ImmutableSortedSet package.  RELNOTES= com.google.common.collect.ImmutableSortedSet : Added  ceiling  and  floor  methods for GWT emulated ImmutableSortedSet  706830ee1c7903af3d1d04478a601c2bd0a763bc
3839 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java ; MOE Sync 2020-03-31 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Introducing floor(E) and ceiling(E) method in GWT emulated ImmutableSortedSet package.  RELNOTES= com.google.common.collect.ImmutableSortedSet : Added  ceiling  and  floor  methods for GWT emulated ImmutableSortedSet  706830ee1c7903af3d1d04478a601c2bd0a763bc
3839 ;  guava-gwt/test/com/google/common/collect/ImmutableSortedSetTest_gwt.java ; MOE Sync 2020-03-31 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Introducing floor(E) and ceiling(E) method in GWT emulated ImmutableSortedSet package.  RELNOTES= com.google.common.collect.ImmutableSortedSet : Added  ceiling  and  floor  methods for GWT emulated ImmutableSortedSet  706830ee1c7903af3d1d04478a601c2bd0a763bc
3839 ;  guava-tests/test/com/google/common/collect/ImmutableSortedSetTest.java ; MOE Sync 2020-03-31 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Introducing floor(E) and ceiling(E) method in GWT emulated ImmutableSortedSet package.  RELNOTES= com.google.common.collect.ImmutableSortedSet : Added  ceiling  and  floor  methods for GWT emulated ImmutableSortedSet  706830ee1c7903af3d1d04478a601c2bd0a763bc
3839 ;  guava/src/com/google/common/collect/ImmutableSortedSet.java ; MOE Sync 2020-03-31 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Introducing floor(E) and ceiling(E) method in GWT emulated ImmutableSortedSet package.  RELNOTES= com.google.common.collect.ImmutableSortedSet : Added  ceiling  and  floor  methods for GWT emulated ImmutableSortedSet  706830ee1c7903af3d1d04478a601c2bd0a763bc
3840 ; android/guava/src/com/google/common/collect/ImmutableSortedSet.java ; MOE Sync 2020-03-31 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Making headSet(E  boolean)  tailSet(E  boolean) public in GWT emulated ImmutableSortedSet.  RELNOTES= com.google.common.collect.ImmutableSortedSet : Making  headSet(E  boolean)  and  tailSet(E  boolean)  methods public for GWT emulated ImmutableSortedSet.  e6779e404f0cd44fdc4b955acc03ad39250ffbe3
3840 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java ; MOE Sync 2020-03-31 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Making headSet(E  boolean)  tailSet(E  boolean) public in GWT emulated ImmutableSortedSet.  RELNOTES= com.google.common.collect.ImmutableSortedSet : Making  headSet(E  boolean)  and  tailSet(E  boolean)  methods public for GWT emulated ImmutableSortedSet.  e6779e404f0cd44fdc4b955acc03ad39250ffbe3
3840 ;  guava/src/com/google/common/collect/ImmutableSortedSet.java ; MOE Sync 2020-03-31 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Making headSet(E  boolean)  tailSet(E  boolean) public in GWT emulated ImmutableSortedSet.  RELNOTES= com.google.common.collect.ImmutableSortedSet : Making  headSet(E  boolean)  and  tailSet(E  boolean)  methods public for GWT emulated ImmutableSortedSet.  e6779e404f0cd44fdc4b955acc03ad39250ffbe3
3841 ; android/guava-tests/test/com/google/common/collect/QueuesTest.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make  Duration  overloads of  awaitRunning  and  awaitTerminated   final  in all  Abstract*Service  classes.  The other overloads already are already  final . These ones aren t only because we didn t think to do this when adding the new  default  methods.  929867a724fc2a9b4f881534dca8d1458c9ece9c  -------  <p> Extend deadline to fix flakiness.  It s possible that we don t really need to assert that the pool finishes shutting down at all. Maybe the other existing assertions are enough? But I haven t bothered to look into it.  1611de32e6a029ef713499b6e878c1af11f613ca
3841 ;  guava-tests/test/com/google/common/collect/QueuesTest.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make  Duration  overloads of  awaitRunning  and  awaitTerminated   final  in all  Abstract*Service  classes.  The other overloads already are already  final . These ones aren t only because we didn t think to do this when adding the new  default  methods.  929867a724fc2a9b4f881534dca8d1458c9ece9c  -------  <p> Extend deadline to fix flakiness.  It s possible that we don t really need to assert that the pool finishes shutting down at all. Maybe the other existing assertions are enough? But I haven t bothered to look into it.  1611de32e6a029ef713499b6e878c1af11f613ca
3842 ; android/guava-tests/test/com/google/common/primitives/DoublesTest.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  android/guava-tests/test/com/google/common/primitives/FloatsTest.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  android/guava-tests/test/com/google/common/primitives/IntsTest.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  android/guava-tests/test/com/google/common/primitives/ShortsTest.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  android/guava/src/com/google/common/primitives/Doubles.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  android/guava/src/com/google/common/primitives/DoublesMethodsForWeb.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  android/guava/src/com/google/common/primitives/Floats.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  android/guava/src/com/google/common/primitives/FloatsMethodsForWeb.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  android/guava/src/com/google/common/primitives/Ints.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  android/guava/src/com/google/common/primitives/IntsMethodsForWeb.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  android/guava/src/com/google/common/primitives/Shorts.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  android/guava/src/com/google/common/primitives/ShortsMethodsForWeb.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/DoublesMethodsForWeb.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/FloatsMethodsForWeb.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/IntsMethodsForWeb.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava-gwt/src-super/com/google/common/primitives/super/com/google/common/primitives/ShortsMethodsForWeb.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava-gwt/test/com/google/common/primitives/DoublesTest_gwt.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava-gwt/test/com/google/common/primitives/FloatsTest_gwt.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava-gwt/test/com/google/common/primitives/IntsTest_gwt.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava-gwt/test/com/google/common/primitives/ShortsTest_gwt.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava-tests/test/com/google/common/primitives/DoublesTest.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava-tests/test/com/google/common/primitives/FloatsTest.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava-tests/test/com/google/common/primitives/IntsTest.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava-tests/test/com/google/common/primitives/ShortsTest.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava/src/com/google/common/primitives/Doubles.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava/src/com/google/common/primitives/DoublesMethodsForWeb.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava/src/com/google/common/primitives/Floats.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava/src/com/google/common/primitives/FloatsMethodsForWeb.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava/src/com/google/common/primitives/Ints.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava/src/com/google/common/primitives/IntsMethodsForWeb.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava/src/com/google/common/primitives/Shorts.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3842 ;  guava/src/com/google/common/primitives/ShortsMethodsForWeb.java ; MOE Sync 2020-04-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add j2cl specializers for Doubles.min/max  Floats.min/max  Ints.min/max  and Shorts.min/max.  79c378445bb29e204853b80645e6fb0f949c289c
3846 ; android/guava/src/com/google/common/util/concurrent/ServiceManager.java ; MOE Sync 2020-04-03 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Change return type of ServiceManager.servicesByState() to ImmutableSetMultimap.  But also generate a bridge method with the old signature for binary compatibility.  https://github.com/google/guava/issues/3418 (which I keep forgetting to mention from commits...)  []  RELNOTES= util.concurrent : Changed the return type of  ServiceManager.servicesByState()  to  ImmutableSetMultimap  (but also retained a method with the old signature for binary compatibility).  c467744698d85d56349fbc773cb75fae747a9a4c
3846 ;  android/guava/src/com/google/common/util/concurrent/ServiceManagerBridge.java ; MOE Sync 2020-04-03 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Change return type of ServiceManager.servicesByState() to ImmutableSetMultimap.  But also generate a bridge method with the old signature for binary compatibility.  https://github.com/google/guava/issues/3418 (which I keep forgetting to mention from commits...)  []  RELNOTES= util.concurrent : Changed the return type of  ServiceManager.servicesByState()  to  ImmutableSetMultimap  (but also retained a method with the old signature for binary compatibility).  c467744698d85d56349fbc773cb75fae747a9a4c
3846 ;  guava/src/com/google/common/util/concurrent/ServiceManager.java ; MOE Sync 2020-04-03 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Change return type of ServiceManager.servicesByState() to ImmutableSetMultimap.  But also generate a bridge method with the old signature for binary compatibility.  https://github.com/google/guava/issues/3418 (which I keep forgetting to mention from commits...)  []  RELNOTES= util.concurrent : Changed the return type of  ServiceManager.servicesByState()  to  ImmutableSetMultimap  (but also retained a method with the old signature for binary compatibility).  c467744698d85d56349fbc773cb75fae747a9a4c
3846 ;  guava/src/com/google/common/util/concurrent/ServiceManagerBridge.java ; MOE Sync 2020-04-03 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Change return type of ServiceManager.servicesByState() to ImmutableSetMultimap.  But also generate a bridge method with the old signature for binary compatibility.  https://github.com/google/guava/issues/3418 (which I keep forgetting to mention from commits...)  []  RELNOTES= util.concurrent : Changed the return type of  ServiceManager.servicesByState()  to  ImmutableSetMultimap  (but also retained a method with the old signature for binary compatibility).  c467744698d85d56349fbc773cb75fae747a9a4c
3852 ; android/guava/src/com/google/common/hash/Murmur3_128HashFunction.java ; MOE Sync 2020-04-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Merge StandardSimpleDirectedSortedNetworkTest into StandardMutableDirectedNetworkTest.  1f1a0a2fd37345ee966049e54091cb2f66f4c1c3  -------  <p> Move tests from Multinetwork-test classes to base classes in preparation for merging the Multinetwork-classes with the mutable classes.  8563c8706b499acd7f1e16c6cf42904f032aa5d1  -------  <p> Merge StandardDirectedMultiNetworkTest into StandardMutableDirectedNetworkTest.  d50fcf89b5148f12e4d0713e3deab0a75ac47c1a  -------  <p> Merge StandardUndirectedMultiNetworkTest into StandardMutableUndirectedNetworkTest  bbce918101323bbaf2e8f063a1ceca4769d74996  -------  <p> Add StandardImmutableDirectedNetworkTest.  879cec90e07092bf63d748dbac028f2d2b28a9bc  -------  <p> Fix unnecessary method access level escalation.  Fixes https://github.com/google/guava/pull/3843  8ae733081feff0801bb1fb71e5bd39f713e19595
3852 ;  android/guava/src/com/google/common/hash/SipHashFunction.java ; MOE Sync 2020-04-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Merge StandardSimpleDirectedSortedNetworkTest into StandardMutableDirectedNetworkTest.  1f1a0a2fd37345ee966049e54091cb2f66f4c1c3  -------  <p> Move tests from Multinetwork-test classes to base classes in preparation for merging the Multinetwork-classes with the mutable classes.  8563c8706b499acd7f1e16c6cf42904f032aa5d1  -------  <p> Merge StandardDirectedMultiNetworkTest into StandardMutableDirectedNetworkTest.  d50fcf89b5148f12e4d0713e3deab0a75ac47c1a  -------  <p> Merge StandardUndirectedMultiNetworkTest into StandardMutableUndirectedNetworkTest  bbce918101323bbaf2e8f063a1ceca4769d74996  -------  <p> Add StandardImmutableDirectedNetworkTest.  879cec90e07092bf63d748dbac028f2d2b28a9bc  -------  <p> Fix unnecessary method access level escalation.  Fixes https://github.com/google/guava/pull/3843  8ae733081feff0801bb1fb71e5bd39f713e19595
3852 ;  guava/src/com/google/common/hash/Murmur3_128HashFunction.java ; MOE Sync 2020-04-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Merge StandardSimpleDirectedSortedNetworkTest into StandardMutableDirectedNetworkTest.  1f1a0a2fd37345ee966049e54091cb2f66f4c1c3  -------  <p> Move tests from Multinetwork-test classes to base classes in preparation for merging the Multinetwork-classes with the mutable classes.  8563c8706b499acd7f1e16c6cf42904f032aa5d1  -------  <p> Merge StandardDirectedMultiNetworkTest into StandardMutableDirectedNetworkTest.  d50fcf89b5148f12e4d0713e3deab0a75ac47c1a  -------  <p> Merge StandardUndirectedMultiNetworkTest into StandardMutableUndirectedNetworkTest  bbce918101323bbaf2e8f063a1ceca4769d74996  -------  <p> Add StandardImmutableDirectedNetworkTest.  879cec90e07092bf63d748dbac028f2d2b28a9bc  -------  <p> Fix unnecessary method access level escalation.  Fixes https://github.com/google/guava/pull/3843  8ae733081feff0801bb1fb71e5bd39f713e19595
3852 ;  guava/src/com/google/common/hash/SipHashFunction.java ; MOE Sync 2020-04-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Merge StandardSimpleDirectedSortedNetworkTest into StandardMutableDirectedNetworkTest.  1f1a0a2fd37345ee966049e54091cb2f66f4c1c3  -------  <p> Move tests from Multinetwork-test classes to base classes in preparation for merging the Multinetwork-classes with the mutable classes.  8563c8706b499acd7f1e16c6cf42904f032aa5d1  -------  <p> Merge StandardDirectedMultiNetworkTest into StandardMutableDirectedNetworkTest.  d50fcf89b5148f12e4d0713e3deab0a75ac47c1a  -------  <p> Merge StandardUndirectedMultiNetworkTest into StandardMutableUndirectedNetworkTest  bbce918101323bbaf2e8f063a1ceca4769d74996  -------  <p> Add StandardImmutableDirectedNetworkTest.  879cec90e07092bf63d748dbac028f2d2b28a9bc  -------  <p> Fix unnecessary method access level escalation.  Fixes https://github.com/google/guava/pull/3843  8ae733081feff0801bb1fb71e5bd39f713e19595
3856 ; android/guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java ; MOE Sync 2020-04-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove  @Beta  from  Service  and  ServiceManager .  This leaves  AbstractListeningExecutorService  as  @Beta .  Fixes #3806  #3418 Relevant to #2966  (I have tweaked Jesse s initial PR to leave  AbstractExecutionThreadService.triggerShutdown  and  AbstractService.doCancelStart  as  @Beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  Listener.stopping  _might_ be a reasonable substitute for both.)  RELNOTES= util.concurrent : Removed  @Beta  from  Service  and related classes.  33574d771b099991822ed78a726df0eea4646eea
3856 ;  android/guava/src/com/google/common/util/concurrent/AbstractIdleService.java ; MOE Sync 2020-04-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove  @Beta  from  Service  and  ServiceManager .  This leaves  AbstractListeningExecutorService  as  @Beta .  Fixes #3806  #3418 Relevant to #2966  (I have tweaked Jesse s initial PR to leave  AbstractExecutionThreadService.triggerShutdown  and  AbstractService.doCancelStart  as  @Beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  Listener.stopping  _might_ be a reasonable substitute for both.)  RELNOTES= util.concurrent : Removed  @Beta  from  Service  and related classes.  33574d771b099991822ed78a726df0eea4646eea
3856 ;  android/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java ; MOE Sync 2020-04-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove  @Beta  from  Service  and  ServiceManager .  This leaves  AbstractListeningExecutorService  as  @Beta .  Fixes #3806  #3418 Relevant to #2966  (I have tweaked Jesse s initial PR to leave  AbstractExecutionThreadService.triggerShutdown  and  AbstractService.doCancelStart  as  @Beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  Listener.stopping  _might_ be a reasonable substitute for both.)  RELNOTES= util.concurrent : Removed  @Beta  from  Service  and related classes.  33574d771b099991822ed78a726df0eea4646eea
3856 ;  android/guava/src/com/google/common/util/concurrent/AbstractService.java ; MOE Sync 2020-04-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove  @Beta  from  Service  and  ServiceManager .  This leaves  AbstractListeningExecutorService  as  @Beta .  Fixes #3806  #3418 Relevant to #2966  (I have tweaked Jesse s initial PR to leave  AbstractExecutionThreadService.triggerShutdown  and  AbstractService.doCancelStart  as  @Beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  Listener.stopping  _might_ be a reasonable substitute for both.)  RELNOTES= util.concurrent : Removed  @Beta  from  Service  and related classes.  33574d771b099991822ed78a726df0eea4646eea
3856 ;  android/guava/src/com/google/common/util/concurrent/Service.java ; MOE Sync 2020-04-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove  @Beta  from  Service  and  ServiceManager .  This leaves  AbstractListeningExecutorService  as  @Beta .  Fixes #3806  #3418 Relevant to #2966  (I have tweaked Jesse s initial PR to leave  AbstractExecutionThreadService.triggerShutdown  and  AbstractService.doCancelStart  as  @Beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  Listener.stopping  _might_ be a reasonable substitute for both.)  RELNOTES= util.concurrent : Removed  @Beta  from  Service  and related classes.  33574d771b099991822ed78a726df0eea4646eea
3856 ;  android/guava/src/com/google/common/util/concurrent/ServiceManager.java ; MOE Sync 2020-04-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove  @Beta  from  Service  and  ServiceManager .  This leaves  AbstractListeningExecutorService  as  @Beta .  Fixes #3806  #3418 Relevant to #2966  (I have tweaked Jesse s initial PR to leave  AbstractExecutionThreadService.triggerShutdown  and  AbstractService.doCancelStart  as  @Beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  Listener.stopping  _might_ be a reasonable substitute for both.)  RELNOTES= util.concurrent : Removed  @Beta  from  Service  and related classes.  33574d771b099991822ed78a726df0eea4646eea
3856 ;  guava/src/com/google/common/util/concurrent/AbstractExecutionThreadService.java ; MOE Sync 2020-04-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove  @Beta  from  Service  and  ServiceManager .  This leaves  AbstractListeningExecutorService  as  @Beta .  Fixes #3806  #3418 Relevant to #2966  (I have tweaked Jesse s initial PR to leave  AbstractExecutionThreadService.triggerShutdown  and  AbstractService.doCancelStart  as  @Beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  Listener.stopping  _might_ be a reasonable substitute for both.)  RELNOTES= util.concurrent : Removed  @Beta  from  Service  and related classes.  33574d771b099991822ed78a726df0eea4646eea
3856 ;  guava/src/com/google/common/util/concurrent/AbstractIdleService.java ; MOE Sync 2020-04-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove  @Beta  from  Service  and  ServiceManager .  This leaves  AbstractListeningExecutorService  as  @Beta .  Fixes #3806  #3418 Relevant to #2966  (I have tweaked Jesse s initial PR to leave  AbstractExecutionThreadService.triggerShutdown  and  AbstractService.doCancelStart  as  @Beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  Listener.stopping  _might_ be a reasonable substitute for both.)  RELNOTES= util.concurrent : Removed  @Beta  from  Service  and related classes.  33574d771b099991822ed78a726df0eea4646eea
3856 ;  guava/src/com/google/common/util/concurrent/AbstractScheduledService.java ; MOE Sync 2020-04-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove  @Beta  from  Service  and  ServiceManager .  This leaves  AbstractListeningExecutorService  as  @Beta .  Fixes #3806  #3418 Relevant to #2966  (I have tweaked Jesse s initial PR to leave  AbstractExecutionThreadService.triggerShutdown  and  AbstractService.doCancelStart  as  @Beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  Listener.stopping  _might_ be a reasonable substitute for both.)  RELNOTES= util.concurrent : Removed  @Beta  from  Service  and related classes.  33574d771b099991822ed78a726df0eea4646eea
3856 ;  guava/src/com/google/common/util/concurrent/AbstractService.java ; MOE Sync 2020-04-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove  @Beta  from  Service  and  ServiceManager .  This leaves  AbstractListeningExecutorService  as  @Beta .  Fixes #3806  #3418 Relevant to #2966  (I have tweaked Jesse s initial PR to leave  AbstractExecutionThreadService.triggerShutdown  and  AbstractService.doCancelStart  as  @Beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  Listener.stopping  _might_ be a reasonable substitute for both.)  RELNOTES= util.concurrent : Removed  @Beta  from  Service  and related classes.  33574d771b099991822ed78a726df0eea4646eea
3856 ;  guava/src/com/google/common/util/concurrent/Service.java ; MOE Sync 2020-04-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove  @Beta  from  Service  and  ServiceManager .  This leaves  AbstractListeningExecutorService  as  @Beta .  Fixes #3806  #3418 Relevant to #2966  (I have tweaked Jesse s initial PR to leave  AbstractExecutionThreadService.triggerShutdown  and  AbstractService.doCancelStart  as  @Beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  Listener.stopping  _might_ be a reasonable substitute for both.)  RELNOTES= util.concurrent : Removed  @Beta  from  Service  and related classes.  33574d771b099991822ed78a726df0eea4646eea
3856 ;  guava/src/com/google/common/util/concurrent/ServiceManager.java ; MOE Sync 2020-04-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove  @Beta  from  Service  and  ServiceManager .  This leaves  AbstractListeningExecutorService  as  @Beta .  Fixes #3806  #3418 Relevant to #2966  (I have tweaked Jesse s initial PR to leave  AbstractExecutionThreadService.triggerShutdown  and  AbstractService.doCancelStart  as  @Beta   since we aren t sure we like the locking behavior of the former  and we ve realized that  Listener.stopping  _might_ be a reasonable substitute for both.)  RELNOTES= util.concurrent : Removed  @Beta  from  Service  and related classes.  33574d771b099991822ed78a726df0eea4646eea
3869 ; refactorings/TraverserRewrite.java ; MOE Sync 2020-04-20 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> This change suppresses DefaultPackage check for any java class which uses the default java package  in preparation for enabling a compiler error that will prevent new instances of the bug.  The Google Java Style Guide §8.2.1 requires Java files to have a (non-default) package declaration.  Missing package declarations can cause odd problems that are difficult to debug  such as a class not being included in a test suite or confusion around package-private visibility.  RELNOTES=suppresses warning for using default package  6eec9ca96b8880cf17b9190b1148e28b3e2ca2e4
3875 ; android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; MOE Sync 2020-04-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Hide InternetDomainName.region() from GWT/j2cl.  The method is not used from GWT/j2cl.  c5ee3ef6930aacb7f517f403ff4f69c16c6ae1c3  -------  <p> Update Public Suffix data.  The Guava copy is typically updated whenever Chrome s copy is updated  which is roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the dates.  2cd759cecd0b76ab124d1a32522fb43880b5358b
3875 ;  guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; MOE Sync 2020-04-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Hide InternetDomainName.region() from GWT/j2cl.  The method is not used from GWT/j2cl.  c5ee3ef6930aacb7f517f403ff4f69c16c6ae1c3  -------  <p> Update Public Suffix data.  The Guava copy is typically updated whenever Chrome s copy is updated  which is roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the dates.  2cd759cecd0b76ab124d1a32522fb43880b5358b
3876 ; android/guava/src/com/google/common/collect/CartesianList.java ; MOE Sync 2020-04-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix GitHub #3873 by reimplementing Cartesian{Set List}.contains.  RELNOTES=Fixed #3873.  27506700d2ce3a3a24840aa0ba932dba4a275663
3876 ;  android/guava/src/com/google/common/collect/Sets.java ; MOE Sync 2020-04-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix GitHub #3873 by reimplementing Cartesian{Set List}.contains.  RELNOTES=Fixed #3873.  27506700d2ce3a3a24840aa0ba932dba4a275663
3876 ;  guava/src/com/google/common/collect/CartesianList.java ; MOE Sync 2020-04-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix GitHub #3873 by reimplementing Cartesian{Set List}.contains.  RELNOTES=Fixed #3873.  27506700d2ce3a3a24840aa0ba932dba4a275663
3876 ;  guava/src/com/google/common/collect/Sets.java ; MOE Sync 2020-04-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix GitHub #3873 by reimplementing Cartesian{Set List}.contains.  RELNOTES=Fixed #3873.  27506700d2ce3a3a24840aa0ba932dba4a275663
3885 ; android/guava/src/com/google/common/collect/TreeRangeMap.java ; MOE Sync 2020-04-28 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Move comment to a more appropriate location  The comment was added along with putCoalescing in CL 143507326.  Fixes #3883  8a704a86f565065a7573a13bb95d919a6c5bcbeb
3885 ;  guava/src/com/google/common/collect/TreeRangeMap.java ; MOE Sync 2020-04-28 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Move comment to a more appropriate location  The comment was added along with putCoalescing in CL 143507326.  Fixes #3883  8a704a86f565065a7573a13bb95d919a6c5bcbeb
3887 ; android/guava-tests/test/com/google/common/collect/TreeRangeMapTest.java ; MOE Sync 2020-04-28 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fixed TreeRangeMap.SubRangeMap.putCoalescing  The short circuiting on an attempt to put an empty range caused the contract of putCoalescing to be violated.  Fixes #3886  6e0e978abc6d3de458ed7e2b9cb0533c735d36a2
3887 ;  android/guava/src/com/google/common/collect/TreeRangeMap.java ; MOE Sync 2020-04-28 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fixed TreeRangeMap.SubRangeMap.putCoalescing  The short circuiting on an attempt to put an empty range caused the contract of putCoalescing to be violated.  Fixes #3886  6e0e978abc6d3de458ed7e2b9cb0533c735d36a2
3887 ;  guava-tests/test/com/google/common/collect/TreeRangeMapTest.java ; MOE Sync 2020-04-28 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fixed TreeRangeMap.SubRangeMap.putCoalescing  The short circuiting on an attempt to put an empty range caused the contract of putCoalescing to be violated.  Fixes #3886  6e0e978abc6d3de458ed7e2b9cb0533c735d36a2
3887 ;  guava/src/com/google/common/collect/TreeRangeMap.java ; MOE Sync 2020-04-28 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fixed TreeRangeMap.SubRangeMap.putCoalescing  The short circuiting on an attempt to put an empty range caused the contract of putCoalescing to be violated.  Fixes #3886  6e0e978abc6d3de458ed7e2b9cb0533c735d36a2
3892 ; android/guava-tests/test/com/google/common/collect/SetsTest.java ; MOE Sync 2020-05-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix PowerSet.equals() when comparing to another PowerSet whose items are the same  but in a different iteration order.  RELNOTES:   Fix issue where PowerSet.equals(PowerSet) would erroneously return   false if the PowerSet s underlying Sets were equal  but in a different   iteration order.  Fixes #3891  #3890  befd5ced9edc93a65c75201eb0698a571398005f
3892 ;  android/guava/src/com/google/common/collect/Sets.java ; MOE Sync 2020-05-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix PowerSet.equals() when comparing to another PowerSet whose items are the same  but in a different iteration order.  RELNOTES:   Fix issue where PowerSet.equals(PowerSet) would erroneously return   false if the PowerSet s underlying Sets were equal  but in a different   iteration order.  Fixes #3891  #3890  befd5ced9edc93a65c75201eb0698a571398005f
3892 ;  guava-gwt/test/com/google/common/collect/SetsTest_gwt.java ; MOE Sync 2020-05-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix PowerSet.equals() when comparing to another PowerSet whose items are the same  but in a different iteration order.  RELNOTES:   Fix issue where PowerSet.equals(PowerSet) would erroneously return   false if the PowerSet s underlying Sets were equal  but in a different   iteration order.  Fixes #3891  #3890  befd5ced9edc93a65c75201eb0698a571398005f
3892 ;  guava-tests/test/com/google/common/collect/SetsTest.java ; MOE Sync 2020-05-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix PowerSet.equals() when comparing to another PowerSet whose items are the same  but in a different iteration order.  RELNOTES:   Fix issue where PowerSet.equals(PowerSet) would erroneously return   false if the PowerSet s underlying Sets were equal  but in a different   iteration order.  Fixes #3891  #3890  befd5ced9edc93a65c75201eb0698a571398005f
3892 ;  guava/src/com/google/common/collect/Sets.java ; MOE Sync 2020-05-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix PowerSet.equals() when comparing to another PowerSet whose items are the same  but in a different iteration order.  RELNOTES:   Fix issue where PowerSet.equals(PowerSet) would erroneously return   false if the PowerSet s underlying Sets were equal  but in a different   iteration order.  Fixes #3891  #3890  befd5ced9edc93a65c75201eb0698a571398005f
3893 ; android/guava-tests/test/com/google/common/util/concurrent/UninterruptiblesTest.java ; MOE Sync 2020-05-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for  Cross-Origin-Embedder-Policy(-Report-Only)?  headers ([W3](https://wicg.github.io/cross-origin-embedder-policy/#COEP)).  RELNOTES=Adds constants for  Cross-Origin-Embedder-Policy(-Report-Only)?  headers.  a061f7e066ad470b47b749c0514ac581cf2397e2  -------  <p> Implement tryLockUninterruptibly  Fixes #3880  c9278360493d074ecc88c9d42adbcde2ad90f035
3893 ;  android/guava/src/com/google/common/util/concurrent/Uninterruptibles.java ; MOE Sync 2020-05-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for  Cross-Origin-Embedder-Policy(-Report-Only)?  headers ([W3](https://wicg.github.io/cross-origin-embedder-policy/#COEP)).  RELNOTES=Adds constants for  Cross-Origin-Embedder-Policy(-Report-Only)?  headers.  a061f7e066ad470b47b749c0514ac581cf2397e2  -------  <p> Implement tryLockUninterruptibly  Fixes #3880  c9278360493d074ecc88c9d42adbcde2ad90f035
3893 ;  guava-tests/test/com/google/common/util/concurrent/UninterruptiblesTest.java ; MOE Sync 2020-05-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for  Cross-Origin-Embedder-Policy(-Report-Only)?  headers ([W3](https://wicg.github.io/cross-origin-embedder-policy/#COEP)).  RELNOTES=Adds constants for  Cross-Origin-Embedder-Policy(-Report-Only)?  headers.  a061f7e066ad470b47b749c0514ac581cf2397e2  -------  <p> Implement tryLockUninterruptibly  Fixes #3880  c9278360493d074ecc88c9d42adbcde2ad90f035
3893 ;  guava/src/com/google/common/util/concurrent/Uninterruptibles.java ; MOE Sync 2020-05-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Adds constants for  Cross-Origin-Embedder-Policy(-Report-Only)?  headers ([W3](https://wicg.github.io/cross-origin-embedder-policy/#COEP)).  RELNOTES=Adds constants for  Cross-Origin-Embedder-Policy(-Report-Only)?  headers.  a061f7e066ad470b47b749c0514ac581cf2397e2  -------  <p> Implement tryLockUninterruptibly  Fixes #3880  c9278360493d074ecc88c9d42adbcde2ad90f035
3898 ; android/guava/src/com/google/common/util/concurrent/SequentialExecutor.java ; MOE Sync 2020-05-12 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure QueueWorker does not outlive SequentialExecutor on iOS.  When  SequentialExecutor  is used on iOS as J2ObjC-transpiled code  we need to make sure that  SequentialExecutor.QueueWorker  does not outlive its outer class. Previously  because the inner class was annotated with  @WeakOuter   it could happen  and  when this happened  the inner class would then invoke methods on a dangling pointer and crash the process in turn. The issue is now fixed by annotating the worker field in the outer class with  @RetainedWith .  Although  @RetainedWith  was initially designed for bimaps  the annotation addresses exactly the lifecycle problem here.  180157a2ab9d4574d69eeed3d654ceaff7f5b59d
3898 ;  guava/src/com/google/common/util/concurrent/SequentialExecutor.java ; MOE Sync 2020-05-12 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure QueueWorker does not outlive SequentialExecutor on iOS.  When  SequentialExecutor  is used on iOS as J2ObjC-transpiled code  we need to make sure that  SequentialExecutor.QueueWorker  does not outlive its outer class. Previously  because the inner class was annotated with  @WeakOuter   it could happen  and  when this happened  the inner class would then invoke methods on a dangling pointer and crash the process in turn. The issue is now fixed by annotating the worker field in the outer class with  @RetainedWith .  Although  @RetainedWith  was initially designed for bimaps  the annotation addresses exactly the lifecycle problem here.  180157a2ab9d4574d69eeed3d654ceaff7f5b59d
3899 ; android/guava-tests/test/com/google/common/collect/ListsTest.java ; MOE Sync 2020-05-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> In ImmutableIntArray  use Arrays.copyOf when expanding the internal array.  909bdb290675c41238a194ad32e6686cda58f6dc  -------  <p> Implemented lastIndexOf in CartesianList  Fixes #3878  13da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f
3899 ;  android/guava/src/com/google/common/collect/CartesianList.java ; MOE Sync 2020-05-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> In ImmutableIntArray  use Arrays.copyOf when expanding the internal array.  909bdb290675c41238a194ad32e6686cda58f6dc  -------  <p> Implemented lastIndexOf in CartesianList  Fixes #3878  13da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f
3899 ;  guava-gwt/test/com/google/common/collect/ListsTest_gwt.java ; MOE Sync 2020-05-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> In ImmutableIntArray  use Arrays.copyOf when expanding the internal array.  909bdb290675c41238a194ad32e6686cda58f6dc  -------  <p> Implemented lastIndexOf in CartesianList  Fixes #3878  13da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f
3899 ;  guava-tests/test/com/google/common/collect/ListsTest.java ; MOE Sync 2020-05-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> In ImmutableIntArray  use Arrays.copyOf when expanding the internal array.  909bdb290675c41238a194ad32e6686cda58f6dc  -------  <p> Implemented lastIndexOf in CartesianList  Fixes #3878  13da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f
3899 ;  guava/src/com/google/common/collect/CartesianList.java ; MOE Sync 2020-05-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> In ImmutableIntArray  use Arrays.copyOf when expanding the internal array.  909bdb290675c41238a194ad32e6686cda58f6dc  -------  <p> Implemented lastIndexOf in CartesianList  Fixes #3878  13da6dd1e8446bc2e5e6a5ac6e87e82ce0b7743f
3904 ; android/guava-tests/test/com/google/common/net/HttpHeadersTest.java ; MOE Sync 2020-05-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Suppress IdentityHashMapBoxing check  This would soon become an ERROR in blaze.  0b46c0b65b9f98f3cc36aaf185a888d3e8e76f60  -------  <p> Adding the Sec-CH-UA header. Ignore ClangTidy. It has to do with the constant naming scheme for httputils.h.  Spec for header: https://wicg.github.io/ua-client-hints/  bd128b4f293ea94eaad3aa0ba29d71ee8ea25b3c
3904 ;  android/guava/src/com/google/common/net/HttpHeaders.java ; MOE Sync 2020-05-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Suppress IdentityHashMapBoxing check  This would soon become an ERROR in blaze.  0b46c0b65b9f98f3cc36aaf185a888d3e8e76f60  -------  <p> Adding the Sec-CH-UA header. Ignore ClangTidy. It has to do with the constant naming scheme for httputils.h.  Spec for header: https://wicg.github.io/ua-client-hints/  bd128b4f293ea94eaad3aa0ba29d71ee8ea25b3c
3904 ;  guava-tests/test/com/google/common/net/HttpHeadersTest.java ; MOE Sync 2020-05-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Suppress IdentityHashMapBoxing check  This would soon become an ERROR in blaze.  0b46c0b65b9f98f3cc36aaf185a888d3e8e76f60  -------  <p> Adding the Sec-CH-UA header. Ignore ClangTidy. It has to do with the constant naming scheme for httputils.h.  Spec for header: https://wicg.github.io/ua-client-hints/  bd128b4f293ea94eaad3aa0ba29d71ee8ea25b3c
3904 ;  guava/src/com/google/common/net/HttpHeaders.java ; MOE Sync 2020-05-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Suppress IdentityHashMapBoxing check  This would soon become an ERROR in blaze.  0b46c0b65b9f98f3cc36aaf185a888d3e8e76f60  -------  <p> Adding the Sec-CH-UA header. Ignore ClangTidy. It has to do with the constant naming scheme for httputils.h.  Spec for header: https://wicg.github.io/ua-client-hints/  bd128b4f293ea94eaad3aa0ba29d71ee8ea25b3c
3905 ; android/guava/src/com/google/common/net/HttpHeaders.java ; MOE Sync 2020-05-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Adding the rest of the client-hints headers (besides Arch which I don t think we need).  Header Spec Here: https://wicg.github.io/ua-client-hints/#http-ua-hints  RELNOTES=N/A  fab81c3b8e934e47c7cb846b1428865781ac2200
3905 ;  guava/src/com/google/common/net/HttpHeaders.java ; MOE Sync 2020-05-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Adding the rest of the client-hints headers (besides Arch which I don t think we need).  Header Spec Here: https://wicg.github.io/ua-client-hints/#http-ua-hints  RELNOTES=N/A  fab81c3b8e934e47c7cb846b1428865781ac2200
3915 ; android/guava/src/com/google/common/collect/Range.java ; MOE Sync 2020-06-01 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Document that Ranges are immutable.  Fixes https://github.com/google/guava/issues/1813  9485ee0fb525dfa69d91561aba0035b371d9c327
3915 ;  guava/src/com/google/common/collect/Range.java ; MOE Sync 2020-06-01 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Document that Ranges are immutable.  Fixes https://github.com/google/guava/issues/1813  9485ee0fb525dfa69d91561aba0035b371d9c327
3917 ; android/guava/src/com/google/common/annotations/VisibleForTesting.java ; MOE Sync 2020-06-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Added support for the  font  Top-Level Media Type (https://tools.ietf.org/html/rfc8081)  RELNOTES= net : Added support for  font  Top-Level Media Type  45003f5fe824838cdce85fea05de84dcb6b54993  -------  <p> guava: disavow VisibleForTesting  Johannes and I invented this class in the early days of Blaze  and in hindsight it was clearly a mistake  it encourages self-deception. This change adds a comment discouraging its further use.  8bb1bf1b54f6152c14b69c3699c7fe7f07332a9a
3917 ;  guava/src/com/google/common/annotations/VisibleForTesting.java ; MOE Sync 2020-06-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Added support for the  font  Top-Level Media Type (https://tools.ietf.org/html/rfc8081)  RELNOTES= net : Added support for  font  Top-Level Media Type  45003f5fe824838cdce85fea05de84dcb6b54993  -------  <p> guava: disavow VisibleForTesting  Johannes and I invented this class in the early days of Blaze  and in hindsight it was clearly a mistake  it encourages self-deception. This change adds a comment discouraging its further use.  8bb1bf1b54f6152c14b69c3699c7fe7f07332a9a
3919 ; android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; MOE Sync 2020-06-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove @DoNotCall from FluentIterable.from(FluentIterable).  4ec122fa84a4d3384324250a74120d32e0ccfa1c  -------  <p> Update Public Suffix data.  This copy is typically updated whenever Chrome s copy is updated  which is roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the dates.  0d5c668d46ecba2a1ec5656b603bbdb30786e9e1
3919 ;  guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; MOE Sync 2020-06-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove @DoNotCall from FluentIterable.from(FluentIterable).  4ec122fa84a4d3384324250a74120d32e0ccfa1c  -------  <p> Update Public Suffix data.  This copy is typically updated whenever Chrome s copy is updated  which is roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the dates.  0d5c668d46ecba2a1ec5656b603bbdb30786e9e1
3921 ; android/guava-tests/test/com/google/common/math/BigIntegerMathTest.java ; MOE Sync 2020-06-05 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Implement BigIntegerMath.roundToDouble  which rounds to the nearest representable double value.  Partially implements https://github.com/google/guava/issues/3895  RELNOTES= math : Added  BigIntegerMath.roundToDouble .  d01a196043e7d1620f2880da5d35a31da9acd898
3921 ;  android/guava/src/com/google/common/math/BigIntegerMath.java ; MOE Sync 2020-06-05 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Implement BigIntegerMath.roundToDouble  which rounds to the nearest representable double value.  Partially implements https://github.com/google/guava/issues/3895  RELNOTES= math : Added  BigIntegerMath.roundToDouble .  d01a196043e7d1620f2880da5d35a31da9acd898
3921 ;  android/guava/src/com/google/common/math/ToDoubleRounder.java ; MOE Sync 2020-06-05 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Implement BigIntegerMath.roundToDouble  which rounds to the nearest representable double value.  Partially implements https://github.com/google/guava/issues/3895  RELNOTES= math : Added  BigIntegerMath.roundToDouble .  d01a196043e7d1620f2880da5d35a31da9acd898
3921 ;  guava-tests/test/com/google/common/math/BigIntegerMathTest.java ; MOE Sync 2020-06-05 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Implement BigIntegerMath.roundToDouble  which rounds to the nearest representable double value.  Partially implements https://github.com/google/guava/issues/3895  RELNOTES= math : Added  BigIntegerMath.roundToDouble .  d01a196043e7d1620f2880da5d35a31da9acd898
3921 ;  guava/src/com/google/common/math/BigIntegerMath.java ; MOE Sync 2020-06-05 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Implement BigIntegerMath.roundToDouble  which rounds to the nearest representable double value.  Partially implements https://github.com/google/guava/issues/3895  RELNOTES= math : Added  BigIntegerMath.roundToDouble .  d01a196043e7d1620f2880da5d35a31da9acd898
3921 ;  guava/src/com/google/common/math/ToDoubleRounder.java ; MOE Sync 2020-06-05 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Implement BigIntegerMath.roundToDouble  which rounds to the nearest representable double value.  Partially implements https://github.com/google/guava/issues/3895  RELNOTES= math : Added  BigIntegerMath.roundToDouble .  d01a196043e7d1620f2880da5d35a31da9acd898
3922 ; android/guava/src/com/google/common/collect/Ordering.java ; MOE Sync 2020-06-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Efficient UnmodifiableMultimap forEach  forEach can pass calls directly to the delegate protected collection because it is a read-only operation.  Fixes #3911 Fixes #3912  98a616453df021b0792beb71c81b94d73e0cb69b  -------  <p> Add Comparators.min/max  RELNOTES= collect : Added two-element min and max methods to Comparators.  fc7433e647e82057ccc040885bf38dc503465d54  -------  <p> Discourage Ordering.min(E  E) and max(E  E) in favor of Comparators.min(E  E  Comparator) and max(E  E  Comparator).  RELNOTES=Discourage the use of Ordering.min(E  E) and max(E  E).  8bf31e175d0f103ade07a351ed6135496f635991
3922 ;  guava/src/com/google/common/collect/Ordering.java ; MOE Sync 2020-06-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Efficient UnmodifiableMultimap forEach  forEach can pass calls directly to the delegate protected collection because it is a read-only operation.  Fixes #3911 Fixes #3912  98a616453df021b0792beb71c81b94d73e0cb69b  -------  <p> Add Comparators.min/max  RELNOTES= collect : Added two-element min and max methods to Comparators.  fc7433e647e82057ccc040885bf38dc503465d54  -------  <p> Discourage Ordering.min(E  E) and max(E  E) in favor of Comparators.min(E  E  Comparator) and max(E  E  Comparator).  RELNOTES=Discourage the use of Ordering.min(E  E) and max(E  E).  8bf31e175d0f103ade07a351ed6135496f635991
3924 ; android/guava-tests/test/com/google/common/collect/MapsTest.java ; MOE Sync 2020-06-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Suppress IdentityHashMapBoxing check  6d6dcf2a14a3cf58feed2f5eb4bbe5c69eaabd83
3924 ;  guava-tests/test/com/google/common/collect/MapsTest.java ; MOE Sync 2020-06-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Suppress IdentityHashMapBoxing check  6d6dcf2a14a3cf58feed2f5eb4bbe5c69eaabd83
3925 ; android/guava/src/com/google/common/base/Converter.java ; MOE Sync 2020-06-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Break retain-cycle in Converter.java  when used in J2ObjC target.  4e820ef25352203e042bc4fc45547fae3da7c55d
3925 ;  guava/src/com/google/common/base/Converter.java ; MOE Sync 2020-06-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Break retain-cycle in Converter.java  when used in J2ObjC target.  4e820ef25352203e042bc4fc45547fae3da7c55d
3930 ; android/guava-tests/test/com/google/common/io/ByteStreamsTest.java ; MOE Sync 2020-06-12 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Cleanup ByteStreamsTest.java to fix a couple of IntelliJ warnings/suggestions.  #codehealh  acc2296fdea9cb498431a92eb5b363262b74b313  -------  <p> Inline  ByteStreamsTest#assertEquals(byte[]  byte[])   #codehealth  62ee8a07ad4d3c66e255da66a3382ac790656e2d
3930 ;  guava-tests/test/com/google/common/io/ByteStreamsTest.java ; MOE Sync 2020-06-12 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Cleanup ByteStreamsTest.java to fix a couple of IntelliJ warnings/suggestions.  #codehealh  acc2296fdea9cb498431a92eb5b363262b74b313  -------  <p> Inline  ByteStreamsTest#assertEquals(byte[]  byte[])   #codehealth  62ee8a07ad4d3c66e255da66a3382ac790656e2d
3931 ; android/guava-tests/test/com/google/common/io/ByteStreamsTest.java ; MOE Sync 2020-06-12 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Upgraded ByteStreams#copy(InputStream  OutputStream) to use the faster FileChannel if possible. See also https://medium.com/@xunnan.xu/its-all-about-buffers-zero-copy-mmap-and-java-nio-50f2a1bfc05c for some background.  RELNOTES= io : Upgraded  ByteStreams#copy(InputStream  OutputStream)  to use the faster  FileChannel  if possible.  27bc3deb733b2f38bd853953fa21e2e116fc6c34
3931 ;  android/guava-tests/test/com/google/common/io/IoTestCase.java ; MOE Sync 2020-06-12 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Upgraded ByteStreams#copy(InputStream  OutputStream) to use the faster FileChannel if possible. See also https://medium.com/@xunnan.xu/its-all-about-buffers-zero-copy-mmap-and-java-nio-50f2a1bfc05c for some background.  RELNOTES= io : Upgraded  ByteStreams#copy(InputStream  OutputStream)  to use the faster  FileChannel  if possible.  27bc3deb733b2f38bd853953fa21e2e116fc6c34
3931 ;  android/guava/src/com/google/common/io/ByteStreams.java ; MOE Sync 2020-06-12 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Upgraded ByteStreams#copy(InputStream  OutputStream) to use the faster FileChannel if possible. See also https://medium.com/@xunnan.xu/its-all-about-buffers-zero-copy-mmap-and-java-nio-50f2a1bfc05c for some background.  RELNOTES= io : Upgraded  ByteStreams#copy(InputStream  OutputStream)  to use the faster  FileChannel  if possible.  27bc3deb733b2f38bd853953fa21e2e116fc6c34
3931 ;  guava-tests/test/com/google/common/io/ByteStreamsTest.java ; MOE Sync 2020-06-12 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Upgraded ByteStreams#copy(InputStream  OutputStream) to use the faster FileChannel if possible. See also https://medium.com/@xunnan.xu/its-all-about-buffers-zero-copy-mmap-and-java-nio-50f2a1bfc05c for some background.  RELNOTES= io : Upgraded  ByteStreams#copy(InputStream  OutputStream)  to use the faster  FileChannel  if possible.  27bc3deb733b2f38bd853953fa21e2e116fc6c34
3931 ;  guava-tests/test/com/google/common/io/IoTestCase.java ; MOE Sync 2020-06-12 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Upgraded ByteStreams#copy(InputStream  OutputStream) to use the faster FileChannel if possible. See also https://medium.com/@xunnan.xu/its-all-about-buffers-zero-copy-mmap-and-java-nio-50f2a1bfc05c for some background.  RELNOTES= io : Upgraded  ByteStreams#copy(InputStream  OutputStream)  to use the faster  FileChannel  if possible.  27bc3deb733b2f38bd853953fa21e2e116fc6c34
3931 ;  guava/src/com/google/common/io/ByteStreams.java ; MOE Sync 2020-06-12 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Upgraded ByteStreams#copy(InputStream  OutputStream) to use the faster FileChannel if possible. See also https://medium.com/@xunnan.xu/its-all-about-buffers-zero-copy-mmap-and-java-nio-50f2a1bfc05c for some background.  RELNOTES= io : Upgraded  ByteStreams#copy(InputStream  OutputStream)  to use the faster  FileChannel  if possible.  27bc3deb733b2f38bd853953fa21e2e116fc6c34
3936 ; android/guava-tests/test/com/google/common/io/ByteStreamsTest.java ; MOE Sync 2020-06-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4  Causing some internal failures  457767d10299005df3f7a3e7aba3eef8ee528b9a
3936 ;  android/guava-tests/test/com/google/common/io/IoTestCase.java ; MOE Sync 2020-06-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4  Causing some internal failures  457767d10299005df3f7a3e7aba3eef8ee528b9a
3936 ;  android/guava/src/com/google/common/io/ByteStreams.java ; MOE Sync 2020-06-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4  Causing some internal failures  457767d10299005df3f7a3e7aba3eef8ee528b9a
3936 ;  guava-tests/test/com/google/common/io/ByteStreamsTest.java ; MOE Sync 2020-06-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4  Causing some internal failures  457767d10299005df3f7a3e7aba3eef8ee528b9a
3936 ;  guava-tests/test/com/google/common/io/IoTestCase.java ; MOE Sync 2020-06-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4  Causing some internal failures  457767d10299005df3f7a3e7aba3eef8ee528b9a
3936 ;  guava/src/com/google/common/io/ByteStreams.java ; MOE Sync 2020-06-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Revert a1e9a0bd1260a657f7502e5b81d38dfb818cd1d4  Causing some internal failures  457767d10299005df3f7a3e7aba3eef8ee528b9a
3937 ; android/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java ; MOE Sync 2020-06-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a Guava wiki entry about finding the min/max for various circumstances.  3bb0d85dd8f0e404684bede39c06bc0602b3f0c5  -------  <p> Avoid reentrancy in ExecutionSequencer.  db53357fea477695deeaa32746660bf86d6d51c1  -------  <p> Revert db53357fea477695deeaa32746660bf86d6d51c1  Broke a test  2ef8463838b23ae8c40c022fd96e7b143e0de018
3937 ;  android/guava/src/com/google/common/util/concurrent/ExecutionSequencer.java ; MOE Sync 2020-06-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a Guava wiki entry about finding the min/max for various circumstances.  3bb0d85dd8f0e404684bede39c06bc0602b3f0c5  -------  <p> Avoid reentrancy in ExecutionSequencer.  db53357fea477695deeaa32746660bf86d6d51c1  -------  <p> Revert db53357fea477695deeaa32746660bf86d6d51c1  Broke a test  2ef8463838b23ae8c40c022fd96e7b143e0de018
3937 ;  guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java ; MOE Sync 2020-06-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a Guava wiki entry about finding the min/max for various circumstances.  3bb0d85dd8f0e404684bede39c06bc0602b3f0c5  -------  <p> Avoid reentrancy in ExecutionSequencer.  db53357fea477695deeaa32746660bf86d6d51c1  -------  <p> Revert db53357fea477695deeaa32746660bf86d6d51c1  Broke a test  2ef8463838b23ae8c40c022fd96e7b143e0de018
3937 ;  guava/src/com/google/common/util/concurrent/ExecutionSequencer.java ; MOE Sync 2020-06-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add a Guava wiki entry about finding the min/max for various circumstances.  3bb0d85dd8f0e404684bede39c06bc0602b3f0c5  -------  <p> Avoid reentrancy in ExecutionSequencer.  db53357fea477695deeaa32746660bf86d6d51c1  -------  <p> Revert db53357fea477695deeaa32746660bf86d6d51c1  Broke a test  2ef8463838b23ae8c40c022fd96e7b143e0de018
3939 ; android/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java ; MOE Sync 2020-06-18 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add LongMath.roundToDouble.  RELNOTES=Add LongMath.roundToDouble (#3895)  6f176593caf7fe7549c115ada136287ea31e2875  -------  <p> Add a test for the bug introduced by CL 316779471.  68962e5893c9812d79508d82c8b70e9bb7350146
3939 ;  guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java ; MOE Sync 2020-06-18 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add LongMath.roundToDouble.  RELNOTES=Add LongMath.roundToDouble (#3895)  6f176593caf7fe7549c115ada136287ea31e2875  -------  <p> Add a test for the bug introduced by CL 316779471.  68962e5893c9812d79508d82c8b70e9bb7350146
3941 ; android/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java ; MOE Sync 2020-06-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Avoid reentrancy in ExecutionSequencer.  37d4506a2874cd223d88ebf98e8d28ff333c11de
3941 ;  android/guava/src/com/google/common/util/concurrent/ExecutionSequencer.java ; MOE Sync 2020-06-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Avoid reentrancy in ExecutionSequencer.  37d4506a2874cd223d88ebf98e8d28ff333c11de
3941 ;  guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java ; MOE Sync 2020-06-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Avoid reentrancy in ExecutionSequencer.  37d4506a2874cd223d88ebf98e8d28ff333c11de
3941 ;  guava/src/com/google/common/util/concurrent/ExecutionSequencer.java ; MOE Sync 2020-06-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Avoid reentrancy in ExecutionSequencer.  37d4506a2874cd223d88ebf98e8d28ff333c11de
3942 ;  guava/src/com/google/common/collect/SingletonImmutableBiMap.java ; MOE Sync 2020-06-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix memory leak in SingletonImmutableBiMap which would appear in transpiled J2ObjC code.  The @RetainedWith annotation can not be used on both sides of the retain-cycle. The RegularImmutableBiMap does not have this problem  because it uses Inverse inner class. This CL applies similar trick in SingletonImmutableBiMap  although without additional inner class.  RELNOTES=Update SingletonImmutableBiMap to avoid retain-cycle in transpiled Obj-C code.  d7d07d50c7ae699b71c9a239212f4c3728180327
3947 ; android/guava-tests/benchmark/com/google/common/math/BigIntegerMathRoundingBenchmark.java ; MOE Sync 2020-06-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct LongMath.roundToDouble for values at and near Long.MAX_VALUE  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> In ImmutableDoubleArray and ImmutableLongArray  use Arrays.copyOf when expanding the internal array.  In ImmutableIntArray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> Implement BigDecimalMath.roundToDouble.  RELNOTES=Add BigDecimalMath.roundToDouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee
3947 ;  android/guava-tests/test/com/google/common/math/BigDecimalMathTest.java ; MOE Sync 2020-06-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct LongMath.roundToDouble for values at and near Long.MAX_VALUE  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> In ImmutableDoubleArray and ImmutableLongArray  use Arrays.copyOf when expanding the internal array.  In ImmutableIntArray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> Implement BigDecimalMath.roundToDouble.  RELNOTES=Add BigDecimalMath.roundToDouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee
3947 ;  android/guava/src/com/google/common/math/BigDecimalMath.java ; MOE Sync 2020-06-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct LongMath.roundToDouble for values at and near Long.MAX_VALUE  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> In ImmutableDoubleArray and ImmutableLongArray  use Arrays.copyOf when expanding the internal array.  In ImmutableIntArray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> Implement BigDecimalMath.roundToDouble.  RELNOTES=Add BigDecimalMath.roundToDouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee
3947 ;  android/guava/src/com/google/common/math/BigIntegerMath.java ; MOE Sync 2020-06-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct LongMath.roundToDouble for values at and near Long.MAX_VALUE  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> In ImmutableDoubleArray and ImmutableLongArray  use Arrays.copyOf when expanding the internal array.  In ImmutableIntArray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> Implement BigDecimalMath.roundToDouble.  RELNOTES=Add BigDecimalMath.roundToDouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee
3947 ;  android/guava/src/com/google/common/math/ToDoubleRounder.java ; MOE Sync 2020-06-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct LongMath.roundToDouble for values at and near Long.MAX_VALUE  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> In ImmutableDoubleArray and ImmutableLongArray  use Arrays.copyOf when expanding the internal array.  In ImmutableIntArray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> Implement BigDecimalMath.roundToDouble.  RELNOTES=Add BigDecimalMath.roundToDouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee
3947 ;  guava-gwt/test/com/google/common/math/BigDecimalMathTest_gwt.java ; MOE Sync 2020-06-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct LongMath.roundToDouble for values at and near Long.MAX_VALUE  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> In ImmutableDoubleArray and ImmutableLongArray  use Arrays.copyOf when expanding the internal array.  In ImmutableIntArray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> Implement BigDecimalMath.roundToDouble.  RELNOTES=Add BigDecimalMath.roundToDouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee
3947 ;  guava-tests/benchmark/com/google/common/math/BigIntegerMathRoundingBenchmark.java ; MOE Sync 2020-06-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct LongMath.roundToDouble for values at and near Long.MAX_VALUE  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> In ImmutableDoubleArray and ImmutableLongArray  use Arrays.copyOf when expanding the internal array.  In ImmutableIntArray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> Implement BigDecimalMath.roundToDouble.  RELNOTES=Add BigDecimalMath.roundToDouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee
3947 ;  guava-tests/test/com/google/common/math/BigDecimalMathTest.java ; MOE Sync 2020-06-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct LongMath.roundToDouble for values at and near Long.MAX_VALUE  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> In ImmutableDoubleArray and ImmutableLongArray  use Arrays.copyOf when expanding the internal array.  In ImmutableIntArray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> Implement BigDecimalMath.roundToDouble.  RELNOTES=Add BigDecimalMath.roundToDouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee
3947 ;  guava/src/com/google/common/math/BigDecimalMath.java ; MOE Sync 2020-06-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct LongMath.roundToDouble for values at and near Long.MAX_VALUE  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> In ImmutableDoubleArray and ImmutableLongArray  use Arrays.copyOf when expanding the internal array.  In ImmutableIntArray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> Implement BigDecimalMath.roundToDouble.  RELNOTES=Add BigDecimalMath.roundToDouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee
3947 ;  guava/src/com/google/common/math/BigIntegerMath.java ; MOE Sync 2020-06-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct LongMath.roundToDouble for values at and near Long.MAX_VALUE  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> In ImmutableDoubleArray and ImmutableLongArray  use Arrays.copyOf when expanding the internal array.  In ImmutableIntArray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> Implement BigDecimalMath.roundToDouble.  RELNOTES=Add BigDecimalMath.roundToDouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee
3947 ;  guava/src/com/google/common/math/ToDoubleRounder.java ; MOE Sync 2020-06-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct LongMath.roundToDouble for values at and near Long.MAX_VALUE  3d88ea8f940ecadea86d12f8993ac58f99684e6b  -------  <p> In ImmutableDoubleArray and ImmutableLongArray  use Arrays.copyOf when expanding the internal array.  In ImmutableIntArray  where we already made this change  remove an inconsistent  this. .  6a8cfb3c83f7bc2a6cbec83e0ce240988f20997e  -------  <p> Implement BigDecimalMath.roundToDouble.  RELNOTES=Add BigDecimalMath.roundToDouble.  690b2a6b02bddcaab0a4050a92f490546c71e2ee
3949 ; android/guava/src/com/google/common/base/Converter.java ; MOE Sync 2020-06-30 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix Converter.java by moving @RetainedWith annotation to the correct side of the cycle.  The annotation should be placed inside the  parent  object  and not the  child  object.  Reference: https://developers.google.com/j2objc/javadoc/annotations/reference/com/google/j2objc/annotations/RetainedWith  RELNOTES=N/A  58ad44a9ac2fde40095f28c504c95c6fed902d1f
3949 ;  guava/src/com/google/common/base/Converter.java ; MOE Sync 2020-06-30 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix Converter.java by moving @RetainedWith annotation to the correct side of the cycle.  The annotation should be placed inside the  parent  object  and not the  child  object.  Reference: https://developers.google.com/j2objc/javadoc/annotations/reference/com/google/j2objc/annotations/RetainedWith  RELNOTES=N/A  58ad44a9ac2fde40095f28c504c95c6fed902d1f
3950 ; android/guava/src/com/google/common/hash/BloomFilter.java ; MOE Sync 2020-07-01 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove unnecessary comment.  a3084e48846ebddfc9d046670f7be8c0f60e6cb3
3950 ;  guava/src/com/google/common/hash/BloomFilter.java ; MOE Sync 2020-07-01 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove unnecessary comment.  a3084e48846ebddfc9d046670f7be8c0f60e6cb3
3954 ; android/guava/src/com/google/common/util/concurrent/ExecutionSequencer.java ; MOE Sync 2020-07-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Hint with the type that  oldFuture  /  newFuture  /  ref  s  Future  never contains a value.  Being clear may become slightly more valuable when we put nullness type annotations on this code.  e655aa8df4bd53a11edf8bb99e8b35f746f54196
3954 ;  guava/src/com/google/common/util/concurrent/ExecutionSequencer.java ; MOE Sync 2020-07-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Hint with the type that  oldFuture  /  newFuture  /  ref  s  Future  never contains a value.  Being clear may become slightly more valuable when we put nullness type annotations on this code.  e655aa8df4bd53a11edf8bb99e8b35f746f54196
3956 ; android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; MOE Sync 2020-07-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix annotation positions in Guava.  795b357bddc097c87340f0ce573160b2d39e97c6  -------  <p> Update Public Suffix data.  The [] copy is typically updated whenever Chrome s copy is updated  which is roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the dates.  For this update  []  8ec74f444b4903871face31bf10139375749358b
3956 ;  guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; MOE Sync 2020-07-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix annotation positions in Guava.  795b357bddc097c87340f0ce573160b2d39e97c6  -------  <p> Update Public Suffix data.  The [] copy is typically updated whenever Chrome s copy is updated  which is roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the dates.  For this update  []  8ec74f444b4903871face31bf10139375749358b
3958 ; android/guava/src/com/google/common/io/ByteStreams.java ; MOE Sync 2020-07-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Declare static types as Queue instead of Deque.  This may slightly clarify how the object is used.  (I was looking through com.google.common for Deque instances that were used as stacks  so I noticed this one that was used only as a queue.)  752dd15c34f206b2103e2bd338610177088c4feb
3958 ;  guava/src/com/google/common/io/ByteStreams.java ; MOE Sync 2020-07-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Declare static types as Queue instead of Deque.  This may slightly clarify how the object is used.  (I was looking through com.google.common for Deque instances that were used as stacks  so I noticed this one that was used only as a queue.)  752dd15c34f206b2103e2bd338610177088c4feb
3962 ; android/guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java ; MOE Sync 2020-07-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Speed up Traverser and cut about 30 lines of code.  When stacked against the unsubmitted Walker  before the change:    breadthFirst was roughly on par     preOrder/postOrder were about 70% slower (1359 vs. 2358)   After adopting the Walker impl  the tree traversal preorder/postorder are improved close to Walker impl.  There is still about 10% slowness (2405 vs. 2268) remaining  which I suspect is due to Iterator being slower than Spliterator  because with Spliterator  we can tryAdvance() once for each element  while with Iterator  we have to call both hasNext() and next().  The graph traversal adoption is similar  with about 15% remaining slowness compared to Walker (1583 vs. 1338)  which is likely result of Spliterator.tryAdvance() vs. Iterator.hasNext() + next().  Did not adopt the Walker s breadth-first impl for the following reasons:  1. Adopting the Walker s breadth-first impl contributed about 10% slowdown compared to the current impl. I think this is likely due to the eager foreach loop of the successors in the current breadth-first iterator. In the full traversal benchmark  it s likely faster than consuming the successor iterator lazily.  On the other hand  the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazily.  For follow-up: It might be better to go complete lazy for breadth-first  even at the cost of 10% slowdown in the full-traversal benchmark. Plus we can reuse code and delete the two existing BreadthFirstIterator classes.  I m going to add the benchmark class in the the labs directory to compare between Iteration and Traverser.  RELNOTES=Optimize Traverser  e81f5012d5207c4f07b49007eeff3d19ae618cf8  -------  <p> Add toString() for SequentialExecutor s worker runnable  1facb168dc541be1afa2bf26e15340b0a2e3cffe
3962 ;  android/guava/src/com/google/common/util/concurrent/SequentialExecutor.java ; MOE Sync 2020-07-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Speed up Traverser and cut about 30 lines of code.  When stacked against the unsubmitted Walker  before the change:    breadthFirst was roughly on par     preOrder/postOrder were about 70% slower (1359 vs. 2358)   After adopting the Walker impl  the tree traversal preorder/postorder are improved close to Walker impl.  There is still about 10% slowness (2405 vs. 2268) remaining  which I suspect is due to Iterator being slower than Spliterator  because with Spliterator  we can tryAdvance() once for each element  while with Iterator  we have to call both hasNext() and next().  The graph traversal adoption is similar  with about 15% remaining slowness compared to Walker (1583 vs. 1338)  which is likely result of Spliterator.tryAdvance() vs. Iterator.hasNext() + next().  Did not adopt the Walker s breadth-first impl for the following reasons:  1. Adopting the Walker s breadth-first impl contributed about 10% slowdown compared to the current impl. I think this is likely due to the eager foreach loop of the successors in the current breadth-first iterator. In the full traversal benchmark  it s likely faster than consuming the successor iterator lazily.  On the other hand  the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazily.  For follow-up: It might be better to go complete lazy for breadth-first  even at the cost of 10% slowdown in the full-traversal benchmark. Plus we can reuse code and delete the two existing BreadthFirstIterator classes.  I m going to add the benchmark class in the the labs directory to compare between Iteration and Traverser.  RELNOTES=Optimize Traverser  e81f5012d5207c4f07b49007eeff3d19ae618cf8  -------  <p> Add toString() for SequentialExecutor s worker runnable  1facb168dc541be1afa2bf26e15340b0a2e3cffe
3962 ;  guava-tests/test/com/google/common/util/concurrent/SequentialExecutorTest.java ; MOE Sync 2020-07-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Speed up Traverser and cut about 30 lines of code.  When stacked against the unsubmitted Walker  before the change:    breadthFirst was roughly on par     preOrder/postOrder were about 70% slower (1359 vs. 2358)   After adopting the Walker impl  the tree traversal preorder/postorder are improved close to Walker impl.  There is still about 10% slowness (2405 vs. 2268) remaining  which I suspect is due to Iterator being slower than Spliterator  because with Spliterator  we can tryAdvance() once for each element  while with Iterator  we have to call both hasNext() and next().  The graph traversal adoption is similar  with about 15% remaining slowness compared to Walker (1583 vs. 1338)  which is likely result of Spliterator.tryAdvance() vs. Iterator.hasNext() + next().  Did not adopt the Walker s breadth-first impl for the following reasons:  1. Adopting the Walker s breadth-first impl contributed about 10% slowdown compared to the current impl. I think this is likely due to the eager foreach loop of the successors in the current breadth-first iterator. In the full traversal benchmark  it s likely faster than consuming the successor iterator lazily.  On the other hand  the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazily.  For follow-up: It might be better to go complete lazy for breadth-first  even at the cost of 10% slowdown in the full-traversal benchmark. Plus we can reuse code and delete the two existing BreadthFirstIterator classes.  I m going to add the benchmark class in the the labs directory to compare between Iteration and Traverser.  RELNOTES=Optimize Traverser  e81f5012d5207c4f07b49007eeff3d19ae618cf8  -------  <p> Add toString() for SequentialExecutor s worker runnable  1facb168dc541be1afa2bf26e15340b0a2e3cffe
3962 ;  guava/src/com/google/common/util/concurrent/SequentialExecutor.java ; MOE Sync 2020-07-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Speed up Traverser and cut about 30 lines of code.  When stacked against the unsubmitted Walker  before the change:    breadthFirst was roughly on par     preOrder/postOrder were about 70% slower (1359 vs. 2358)   After adopting the Walker impl  the tree traversal preorder/postorder are improved close to Walker impl.  There is still about 10% slowness (2405 vs. 2268) remaining  which I suspect is due to Iterator being slower than Spliterator  because with Spliterator  we can tryAdvance() once for each element  while with Iterator  we have to call both hasNext() and next().  The graph traversal adoption is similar  with about 15% remaining slowness compared to Walker (1583 vs. 1338)  which is likely result of Spliterator.tryAdvance() vs. Iterator.hasNext() + next().  Did not adopt the Walker s breadth-first impl for the following reasons:  1. Adopting the Walker s breadth-first impl contributed about 10% slowdown compared to the current impl. I think this is likely due to the eager foreach loop of the successors in the current breadth-first iterator. In the full traversal benchmark  it s likely faster than consuming the successor iterator lazily.  On the other hand  the breadth-first iterator is inconsistent with the depth-first iterators that consume the successor iterators lazily.  For follow-up: It might be better to go complete lazy for breadth-first  even at the cost of 10% slowdown in the full-traversal benchmark. Plus we can reuse code and delete the two existing BreadthFirstIterator classes.  I m going to add the benchmark class in the the labs directory to compare between Iteration and Traverser.  RELNOTES=Optimize Traverser  e81f5012d5207c4f07b49007eeff3d19ae618cf8  -------  <p> Add toString() for SequentialExecutor s worker runnable  1facb168dc541be1afa2bf26e15340b0a2e3cffe
3964 ; android/guava-tests/test/com/google/common/graph/TraverserTest.java ; MOE Sync 2020-07-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make breadth-first iterators consume the successor iterators lazily  and refactor to  cut about 150 lines of code.  RELNOTES=Lazier Traverser#breadthFirst().  579c06dc9453fc7b09c8b392507cba09e239c363
3964 ;  android/guava/src/com/google/common/graph/Traverser.java ; MOE Sync 2020-07-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make breadth-first iterators consume the successor iterators lazily  and refactor to  cut about 150 lines of code.  RELNOTES=Lazier Traverser#breadthFirst().  579c06dc9453fc7b09c8b392507cba09e239c363
3964 ;  guava-tests/test/com/google/common/graph/TraverserTest.java ; MOE Sync 2020-07-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make breadth-first iterators consume the successor iterators lazily  and refactor to  cut about 150 lines of code.  RELNOTES=Lazier Traverser#breadthFirst().  579c06dc9453fc7b09c8b392507cba09e239c363
3964 ;  guava/src/com/google/common/graph/Traverser.java ; MOE Sync 2020-07-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make breadth-first iterators consume the successor iterators lazily  and refactor to  cut about 150 lines of code.  RELNOTES=Lazier Traverser#breadthFirst().  579c06dc9453fc7b09c8b392507cba09e239c363
3967 ; android/guava-tests/test/com/google/common/graph/TraverserTest.java ; MOE Sync 2020-07-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Unconditionally call setException for RejectedExecutionException.  Under JDK11  the write to thrownByExecute / thrownFromDelegate is upsetting TSAN. I *suspect* that TSAN is incorrect (and that it is likely to identify the same  problem  in other code).  However  we years ago questioned whether the code I m removing served any real purpose... (fixes https://github.com/google/guava/issues/2877) ...so now seems like a good time to get rid of it and  at minimum  hopefully eliminate the current TSAN failure.  The code that we re running in the executor is under our control. (That is  we re the ones who implement Runnable.run().) We re catching exceptions (and thus any RejectedExecutionException) in the obvious places. Occasionally we do call listeners  but naturally we do that only after completing the future or at least calling setFuture (after which a stray setException(rejectedExecutionException) would be a no-op).  The one(?) exception to that is that InterruptibleTask.run() can call currentThread.interrupt()  which we learned a few years ago can call arbitrary code through nio callbacks. At some point  though  I throw my hands up and say  whatever.   (If the interrupt were to be a problem  it would have to be with an executor that executes tasks inline  like directExecutor. But I note that rejectionPropagatingExecutor  at least  already defends against this for directExecutor itself (by skipping the RejectedExecutionException logic entirely). So the danger exists only with CombinedFutureInterruptibleTask or with a non-directExecutor that can execute tasks inline without catching exceptions -- and again  only in concert with nio interrupt callbacks. I think.)  238c383c13d05a75bb6b590f1542e5f4b11f0634  -------  <p> Add @DoNotMock to Traverser.  RELNOTES=Add @DoNotMock to Traverser  83e545cd90bbd64b71ac66ff51267bca670bf8f9
3967 ;  android/guava/src/com/google/common/graph/Traverser.java ; MOE Sync 2020-07-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Unconditionally call setException for RejectedExecutionException.  Under JDK11  the write to thrownByExecute / thrownFromDelegate is upsetting TSAN. I *suspect* that TSAN is incorrect (and that it is likely to identify the same  problem  in other code).  However  we years ago questioned whether the code I m removing served any real purpose... (fixes https://github.com/google/guava/issues/2877) ...so now seems like a good time to get rid of it and  at minimum  hopefully eliminate the current TSAN failure.  The code that we re running in the executor is under our control. (That is  we re the ones who implement Runnable.run().) We re catching exceptions (and thus any RejectedExecutionException) in the obvious places. Occasionally we do call listeners  but naturally we do that only after completing the future or at least calling setFuture (after which a stray setException(rejectedExecutionException) would be a no-op).  The one(?) exception to that is that InterruptibleTask.run() can call currentThread.interrupt()  which we learned a few years ago can call arbitrary code through nio callbacks. At some point  though  I throw my hands up and say  whatever.   (If the interrupt were to be a problem  it would have to be with an executor that executes tasks inline  like directExecutor. But I note that rejectionPropagatingExecutor  at least  already defends against this for directExecutor itself (by skipping the RejectedExecutionException logic entirely). So the danger exists only with CombinedFutureInterruptibleTask or with a non-directExecutor that can execute tasks inline without catching exceptions -- and again  only in concert with nio interrupt callbacks. I think.)  238c383c13d05a75bb6b590f1542e5f4b11f0634  -------  <p> Add @DoNotMock to Traverser.  RELNOTES=Add @DoNotMock to Traverser  83e545cd90bbd64b71ac66ff51267bca670bf8f9
3967 ;  guava-tests/test/com/google/common/graph/TraverserTest.java ; MOE Sync 2020-07-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Unconditionally call setException for RejectedExecutionException.  Under JDK11  the write to thrownByExecute / thrownFromDelegate is upsetting TSAN. I *suspect* that TSAN is incorrect (and that it is likely to identify the same  problem  in other code).  However  we years ago questioned whether the code I m removing served any real purpose... (fixes https://github.com/google/guava/issues/2877) ...so now seems like a good time to get rid of it and  at minimum  hopefully eliminate the current TSAN failure.  The code that we re running in the executor is under our control. (That is  we re the ones who implement Runnable.run().) We re catching exceptions (and thus any RejectedExecutionException) in the obvious places. Occasionally we do call listeners  but naturally we do that only after completing the future or at least calling setFuture (after which a stray setException(rejectedExecutionException) would be a no-op).  The one(?) exception to that is that InterruptibleTask.run() can call currentThread.interrupt()  which we learned a few years ago can call arbitrary code through nio callbacks. At some point  though  I throw my hands up and say  whatever.   (If the interrupt were to be a problem  it would have to be with an executor that executes tasks inline  like directExecutor. But I note that rejectionPropagatingExecutor  at least  already defends against this for directExecutor itself (by skipping the RejectedExecutionException logic entirely). So the danger exists only with CombinedFutureInterruptibleTask or with a non-directExecutor that can execute tasks inline without catching exceptions -- and again  only in concert with nio interrupt callbacks. I think.)  238c383c13d05a75bb6b590f1542e5f4b11f0634  -------  <p> Add @DoNotMock to Traverser.  RELNOTES=Add @DoNotMock to Traverser  83e545cd90bbd64b71ac66ff51267bca670bf8f9
3967 ;  guava/src/com/google/common/graph/Traverser.java ; MOE Sync 2020-07-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Unconditionally call setException for RejectedExecutionException.  Under JDK11  the write to thrownByExecute / thrownFromDelegate is upsetting TSAN. I *suspect* that TSAN is incorrect (and that it is likely to identify the same  problem  in other code).  However  we years ago questioned whether the code I m removing served any real purpose... (fixes https://github.com/google/guava/issues/2877) ...so now seems like a good time to get rid of it and  at minimum  hopefully eliminate the current TSAN failure.  The code that we re running in the executor is under our control. (That is  we re the ones who implement Runnable.run().) We re catching exceptions (and thus any RejectedExecutionException) in the obvious places. Occasionally we do call listeners  but naturally we do that only after completing the future or at least calling setFuture (after which a stray setException(rejectedExecutionException) would be a no-op).  The one(?) exception to that is that InterruptibleTask.run() can call currentThread.interrupt()  which we learned a few years ago can call arbitrary code through nio callbacks. At some point  though  I throw my hands up and say  whatever.   (If the interrupt were to be a problem  it would have to be with an executor that executes tasks inline  like directExecutor. But I note that rejectionPropagatingExecutor  at least  already defends against this for directExecutor itself (by skipping the RejectedExecutionException logic entirely). So the danger exists only with CombinedFutureInterruptibleTask or with a non-directExecutor that can execute tasks inline without catching exceptions -- and again  only in concert with nio interrupt callbacks. I think.)  238c383c13d05a75bb6b590f1542e5f4b11f0634  -------  <p> Add @DoNotMock to Traverser.  RELNOTES=Add @DoNotMock to Traverser  83e545cd90bbd64b71ac66ff51267bca670bf8f9
3970 ; android/guava/src/com/google/common/util/concurrent/AbstractFuture.java ; MOE Sync 2020-07-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Warn about stack overflows from directExecutor  add more warnings (including on AbstractFuture.set* and cancel)  and move warnings to directExecutor itself.  e649a158d3202beefd3375c1774db90a31228708
3970 ;  android/guava/src/com/google/common/util/concurrent/Futures.java ; MOE Sync 2020-07-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Warn about stack overflows from directExecutor  add more warnings (including on AbstractFuture.set* and cancel)  and move warnings to directExecutor itself.  e649a158d3202beefd3375c1774db90a31228708
3970 ;  android/guava/src/com/google/common/util/concurrent/ListenableFuture.java ; MOE Sync 2020-07-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Warn about stack overflows from directExecutor  add more warnings (including on AbstractFuture.set* and cancel)  and move warnings to directExecutor itself.  e649a158d3202beefd3375c1774db90a31228708
3970 ;  android/guava/src/com/google/common/util/concurrent/MoreExecutors.java ; MOE Sync 2020-07-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Warn about stack overflows from directExecutor  add more warnings (including on AbstractFuture.set* and cancel)  and move warnings to directExecutor itself.  e649a158d3202beefd3375c1774db90a31228708
3970 ;  futures/listenablefuture1/src/com/google/common/util/concurrent/ListenableFuture.java ; MOE Sync 2020-07-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Warn about stack overflows from directExecutor  add more warnings (including on AbstractFuture.set* and cancel)  and move warnings to directExecutor itself.  e649a158d3202beefd3375c1774db90a31228708
3970 ;  guava/src/com/google/common/util/concurrent/AbstractFuture.java ; MOE Sync 2020-07-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Warn about stack overflows from directExecutor  add more warnings (including on AbstractFuture.set* and cancel)  and move warnings to directExecutor itself.  e649a158d3202beefd3375c1774db90a31228708
3970 ;  guava/src/com/google/common/util/concurrent/Futures.java ; MOE Sync 2020-07-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Warn about stack overflows from directExecutor  add more warnings (including on AbstractFuture.set* and cancel)  and move warnings to directExecutor itself.  e649a158d3202beefd3375c1774db90a31228708
3970 ;  guava/src/com/google/common/util/concurrent/ListenableFuture.java ; MOE Sync 2020-07-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Warn about stack overflows from directExecutor  add more warnings (including on AbstractFuture.set* and cancel)  and move warnings to directExecutor itself.  e649a158d3202beefd3375c1774db90a31228708
3970 ;  guava/src/com/google/common/util/concurrent/MoreExecutors.java ; MOE Sync 2020-07-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Warn about stack overflows from directExecutor  add more warnings (including on AbstractFuture.set* and cancel)  and move warnings to directExecutor itself.  e649a158d3202beefd3375c1774db90a31228708
3971 ; android/guava-tests/test/com/google/common/util/concurrent/UninterruptiblesTest.java ; MOE Sync 2020-07-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add awaitTerminationUninterruptibly.  Fixes #3908 Fixes #1315 Somewhat relevant to https://github.com/google/guava/issues/3655 Vaguely relevant to https://github.com/google/error-prone/issues/1490  since it creates a  @CheckReturnValue  variant of a  java.util.concurrent  method that returns  false  to indicate timeout.  RELNOTES= util.concurrent : Added  awaitTerminationUninterruptibly .  1ec90b045a45b4603ea5bd1c296f284ec1c438db
3971 ;  android/guava/src/com/google/common/util/concurrent/Uninterruptibles.java ; MOE Sync 2020-07-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add awaitTerminationUninterruptibly.  Fixes #3908 Fixes #1315 Somewhat relevant to https://github.com/google/guava/issues/3655 Vaguely relevant to https://github.com/google/error-prone/issues/1490  since it creates a  @CheckReturnValue  variant of a  java.util.concurrent  method that returns  false  to indicate timeout.  RELNOTES= util.concurrent : Added  awaitTerminationUninterruptibly .  1ec90b045a45b4603ea5bd1c296f284ec1c438db
3971 ;  guava-tests/test/com/google/common/util/concurrent/UninterruptiblesTest.java ; MOE Sync 2020-07-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add awaitTerminationUninterruptibly.  Fixes #3908 Fixes #1315 Somewhat relevant to https://github.com/google/guava/issues/3655 Vaguely relevant to https://github.com/google/error-prone/issues/1490  since it creates a  @CheckReturnValue  variant of a  java.util.concurrent  method that returns  false  to indicate timeout.  RELNOTES= util.concurrent : Added  awaitTerminationUninterruptibly .  1ec90b045a45b4603ea5bd1c296f284ec1c438db
3971 ;  guava/src/com/google/common/util/concurrent/Uninterruptibles.java ; MOE Sync 2020-07-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add awaitTerminationUninterruptibly.  Fixes #3908 Fixes #1315 Somewhat relevant to https://github.com/google/guava/issues/3655 Vaguely relevant to https://github.com/google/error-prone/issues/1490  since it creates a  @CheckReturnValue  variant of a  java.util.concurrent  method that returns  false  to indicate timeout.  RELNOTES= util.concurrent : Added  awaitTerminationUninterruptibly .  1ec90b045a45b4603ea5bd1c296f284ec1c438db
3973 ; guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableBiMap.java ; MOE Sync 2020-07-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Shorten toString for AbstractFuture implementations inside util.concurrent.  9da95c25c87f8ae009bfa56410db470ed0760f14  -------  <p> De-beta toImmutable* methods in GWT variants( emulated ) of common.collect.  4e12478cc5955c20ea34095acf274a2c8172a2c2
3973 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableList.java ; MOE Sync 2020-07-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Shorten toString for AbstractFuture implementations inside util.concurrent.  9da95c25c87f8ae009bfa56410db470ed0760f14  -------  <p> De-beta toImmutable* methods in GWT variants( emulated ) of common.collect.  4e12478cc5955c20ea34095acf274a2c8172a2c2
3973 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableMap.java ; MOE Sync 2020-07-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Shorten toString for AbstractFuture implementations inside util.concurrent.  9da95c25c87f8ae009bfa56410db470ed0760f14  -------  <p> De-beta toImmutable* methods in GWT variants( emulated ) of common.collect.  4e12478cc5955c20ea34095acf274a2c8172a2c2
3973 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSet.java ; MOE Sync 2020-07-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Shorten toString for AbstractFuture implementations inside util.concurrent.  9da95c25c87f8ae009bfa56410db470ed0760f14  -------  <p> De-beta toImmutable* methods in GWT variants( emulated ) of common.collect.  4e12478cc5955c20ea34095acf274a2c8172a2c2
3973 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedMap.java ; MOE Sync 2020-07-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Shorten toString for AbstractFuture implementations inside util.concurrent.  9da95c25c87f8ae009bfa56410db470ed0760f14  -------  <p> De-beta toImmutable* methods in GWT variants( emulated ) of common.collect.  4e12478cc5955c20ea34095acf274a2c8172a2c2
3973 ;  guava-gwt/src-super/com/google/common/collect/super/com/google/common/collect/ImmutableSortedSet.java ; MOE Sync 2020-07-23 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Shorten toString for AbstractFuture implementations inside util.concurrent.  9da95c25c87f8ae009bfa56410db470ed0760f14  -------  <p> De-beta toImmutable* methods in GWT variants( emulated ) of common.collect.  4e12478cc5955c20ea34095acf274a2c8172a2c2
3982 ; android/guava-tests/test/com/google/common/collect/ImmutableMapTest.java ; MOE Sync 2020-08-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that the set returned by ImmutableMap<K  V>.keySet() is serializable when K is serializable  and similarly for values().  Set<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set  the original map is serialized is well. This change changes this so that only the keys are serialized.  RELNOTES= collect : Ensure that the set returned by  ImmutableMap<K  V>.keySet()  is serializable when  K  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76
3982 ;  android/guava-tests/test/com/google/common/collect/LenientSerializableTester.java ; MOE Sync 2020-08-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that the set returned by ImmutableMap<K  V>.keySet() is serializable when K is serializable  and similarly for values().  Set<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set  the original map is serialized is well. This change changes this so that only the keys are serialized.  RELNOTES= collect : Ensure that the set returned by  ImmutableMap<K  V>.keySet()  is serializable when  K  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76
3982 ;  android/guava/src/com/google/common/collect/ImmutableBiMap.java ; MOE Sync 2020-08-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that the set returned by ImmutableMap<K  V>.keySet() is serializable when K is serializable  and similarly for values().  Set<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set  the original map is serialized is well. This change changes this so that only the keys are serialized.  RELNOTES= collect : Ensure that the set returned by  ImmutableMap<K  V>.keySet()  is serializable when  K  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76
3982 ;  android/guava/src/com/google/common/collect/ImmutableMap.java ; MOE Sync 2020-08-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that the set returned by ImmutableMap<K  V>.keySet() is serializable when K is serializable  and similarly for values().  Set<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set  the original map is serialized is well. This change changes this so that only the keys are serialized.  RELNOTES= collect : Ensure that the set returned by  ImmutableMap<K  V>.keySet()  is serializable when  K  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76
3982 ;  android/guava/src/com/google/common/collect/ImmutableSortedMap.java ; MOE Sync 2020-08-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that the set returned by ImmutableMap<K  V>.keySet() is serializable when K is serializable  and similarly for values().  Set<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set  the original map is serialized is well. This change changes this so that only the keys are serialized.  RELNOTES= collect : Ensure that the set returned by  ImmutableMap<K  V>.keySet()  is serializable when  K  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76
3982 ;  guava-tests/test/com/google/common/collect/ImmutableMapTest.java ; MOE Sync 2020-08-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that the set returned by ImmutableMap<K  V>.keySet() is serializable when K is serializable  and similarly for values().  Set<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set  the original map is serialized is well. This change changes this so that only the keys are serialized.  RELNOTES= collect : Ensure that the set returned by  ImmutableMap<K  V>.keySet()  is serializable when  K  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76
3982 ;  guava-tests/test/com/google/common/collect/LenientSerializableTester.java ; MOE Sync 2020-08-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that the set returned by ImmutableMap<K  V>.keySet() is serializable when K is serializable  and similarly for values().  Set<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set  the original map is serialized is well. This change changes this so that only the keys are serialized.  RELNOTES= collect : Ensure that the set returned by  ImmutableMap<K  V>.keySet()  is serializable when  K  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76
3982 ;  guava/src/com/google/common/collect/ImmutableBiMap.java ; MOE Sync 2020-08-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that the set returned by ImmutableMap<K  V>.keySet() is serializable when K is serializable  and similarly for values().  Set<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set  the original map is serialized is well. This change changes this so that only the keys are serialized.  RELNOTES= collect : Ensure that the set returned by  ImmutableMap<K  V>.keySet()  is serializable when  K  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76
3982 ;  guava/src/com/google/common/collect/ImmutableMap.java ; MOE Sync 2020-08-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that the set returned by ImmutableMap<K  V>.keySet() is serializable when K is serializable  and similarly for values().  Set<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set  the original map is serialized is well. This change changes this so that only the keys are serialized.  RELNOTES= collect : Ensure that the set returned by  ImmutableMap<K  V>.keySet()  is serializable when  K  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76
3982 ;  guava/src/com/google/common/collect/ImmutableMapKeySet.java ; MOE Sync 2020-08-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that the set returned by ImmutableMap<K  V>.keySet() is serializable when K is serializable  and similarly for values().  Set<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set  the original map is serialized is well. This change changes this so that only the keys are serialized.  RELNOTES= collect : Ensure that the set returned by  ImmutableMap<K  V>.keySet()  is serializable when  K  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76
3982 ;  guava/src/com/google/common/collect/ImmutableMapValues.java ; MOE Sync 2020-08-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that the set returned by ImmutableMap<K  V>.keySet() is serializable when K is serializable  and similarly for values().  Set<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set  the original map is serialized is well. This change changes this so that only the keys are serialized.  RELNOTES= collect : Ensure that the set returned by  ImmutableMap<K  V>.keySet()  is serializable when  K  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76
3982 ;  guava/src/com/google/common/collect/ImmutableSortedMap.java ; MOE Sync 2020-08-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that the set returned by ImmutableMap<K  V>.keySet() is serializable when K is serializable  and similarly for values().  Set<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set  the original map is serialized is well. This change changes this so that only the keys are serialized.  RELNOTES= collect : Ensure that the set returned by  ImmutableMap<K  V>.keySet()  is serializable when  K  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76
3982 ;  guava/src/com/google/common/collect/RegularImmutableMap.java ; MOE Sync 2020-08-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Ensure that the set returned by ImmutableMap<K  V>.keySet() is serializable when K is serializable  and similarly for values().  Set<T> should be serializable when T is serializable but that is not always the case for the set returned by ImmutableMap.keySet() due to a reference from the returned set back to the original map. When serializing this set  the original map is serialized is well. This change changes this so that only the keys are serialized.  RELNOTES= collect : Ensure that the set returned by  ImmutableMap<K  V>.keySet()  is serializable when  K  is serializable (and similarly for  values() ).  cf94f5601b32662a236f5534c1a7d4ceab132e76
3983 ; android/guava/src/com/google/common/cache/LocalCache.java ; MOE Sync 2020-08-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix memory-leaks in LocalCache on iOS  caused by:  1. Retain-cycle between outer LocalCache instance and inner Values  KeySet and EntrySet instances. The use of @Weak and @WeakOuter is incorrect there  since inner instances can outlive outer LocalCache instance. The correct solution is to use @RetainedWith annotation to inner-classes.  2. Retain-cycle between ReferenceEntry objects which internally form a doubly-linked list. Fixed by adding @Weak annotation to  next  and  previous  links. This is correct  since ReferenceEntry instances are already retained by Segments.  The unit test for leak detection is added inside Xplat  because the required testing infrastructure is not present inside  google_common  (the IosAsserts class). Eventually  everything should be moved to  google_common .  RELNOTES=Fix memory-leak in LocalCache on iOS  8fb1cada24cae186226f0d3785704fc19ea2e9fa
3983 ;  guava/src/com/google/common/cache/LocalCache.java ; MOE Sync 2020-08-06 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix memory-leaks in LocalCache on iOS  caused by:  1. Retain-cycle between outer LocalCache instance and inner Values  KeySet and EntrySet instances. The use of @Weak and @WeakOuter is incorrect there  since inner instances can outlive outer LocalCache instance. The correct solution is to use @RetainedWith annotation to inner-classes.  2. Retain-cycle between ReferenceEntry objects which internally form a doubly-linked list. Fixed by adding @Weak annotation to  next  and  previous  links. This is correct  since ReferenceEntry instances are already retained by Segments.  The unit test for leak detection is added inside Xplat  because the required testing infrastructure is not present inside  google_common  (the IosAsserts class). Eventually  everything should be moved to  google_common .  RELNOTES=Fix memory-leak in LocalCache on iOS  8fb1cada24cae186226f0d3785704fc19ea2e9fa
3985 ; android/guava-tests/test/com/google/common/net/InetAddressesTest.java ; MOE Sync 2020-08-07 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> [Efficiency] Creates a variant of parseHextet and parseOctet that can work on a larger string with start and end indices.  97638e61eb63e1fb3f994cbf3079c33205fa61b9  -------  <p> [Efficiency] Modifies textToNumericFormatV4 to parse the input String in place.  0e6c0c99f06c7e7c510507b202a2546ab8026dcc
3985 ;  android/guava/src/com/google/common/net/InetAddresses.java ; MOE Sync 2020-08-07 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> [Efficiency] Creates a variant of parseHextet and parseOctet that can work on a larger string with start and end indices.  97638e61eb63e1fb3f994cbf3079c33205fa61b9  -------  <p> [Efficiency] Modifies textToNumericFormatV4 to parse the input String in place.  0e6c0c99f06c7e7c510507b202a2546ab8026dcc
3985 ;  guava-tests/test/com/google/common/net/InetAddressesTest.java ; MOE Sync 2020-08-07 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> [Efficiency] Creates a variant of parseHextet and parseOctet that can work on a larger string with start and end indices.  97638e61eb63e1fb3f994cbf3079c33205fa61b9  -------  <p> [Efficiency] Modifies textToNumericFormatV4 to parse the input String in place.  0e6c0c99f06c7e7c510507b202a2546ab8026dcc
3985 ;  guava/src/com/google/common/net/InetAddresses.java ; MOE Sync 2020-08-07 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> [Efficiency] Creates a variant of parseHextet and parseOctet that can work on a larger string with start and end indices.  97638e61eb63e1fb3f994cbf3079c33205fa61b9  -------  <p> [Efficiency] Modifies textToNumericFormatV4 to parse the input String in place.  0e6c0c99f06c7e7c510507b202a2546ab8026dcc
3987 ; guava/src/com/google/common/collect/ImmutableMapKeySet.java ; MOE Sync 2020-08-12 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Avoid boxing in Doubles.constrainToRange() and Floats.constrainToRange().  Fixes https://github.com/google/guava/issues/3984  f850db59358a3b5f9b2da96b7feea06802077b19  -------  <p> Remove  @Beta  from  Multimaps.toMultimap .  Fixes https://github.com/google/guava/issues/3957  RELNOTES= collect : Removed  @Beta  from  Multimaps.toMultimap .  b9fe10a7b1c67518d9c6b86fc6611473943c188c  -------  <p> Bring back previously deleted SerializedForms so that old data can still be read.  RELNOTES= collect : Data that was previously serialized  and that originated from ImmutableMap.keySet() or .values()  is now deserializable again.  d66fda44e127d00e401cadde1834454feffade86
3987 ;  guava/src/com/google/common/collect/ImmutableMapValues.java ; MOE Sync 2020-08-12 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Avoid boxing in Doubles.constrainToRange() and Floats.constrainToRange().  Fixes https://github.com/google/guava/issues/3984  f850db59358a3b5f9b2da96b7feea06802077b19  -------  <p> Remove  @Beta  from  Multimaps.toMultimap .  Fixes https://github.com/google/guava/issues/3957  RELNOTES= collect : Removed  @Beta  from  Multimaps.toMultimap .  b9fe10a7b1c67518d9c6b86fc6611473943c188c  -------  <p> Bring back previously deleted SerializedForms so that old data can still be read.  RELNOTES= collect : Data that was previously serialized  and that originated from ImmutableMap.keySet() or .values()  is now deserializable again.  d66fda44e127d00e401cadde1834454feffade86
3987 ;  guava/src/com/google/common/collect/RegularImmutableMap.java ; MOE Sync 2020-08-12 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Avoid boxing in Doubles.constrainToRange() and Floats.constrainToRange().  Fixes https://github.com/google/guava/issues/3984  f850db59358a3b5f9b2da96b7feea06802077b19  -------  <p> Remove  @Beta  from  Multimaps.toMultimap .  Fixes https://github.com/google/guava/issues/3957  RELNOTES= collect : Removed  @Beta  from  Multimaps.toMultimap .  b9fe10a7b1c67518d9c6b86fc6611473943c188c  -------  <p> Bring back previously deleted SerializedForms so that old data can still be read.  RELNOTES= collect : Data that was previously serialized  and that originated from ImmutableMap.keySet() or .values()  is now deserializable again.  d66fda44e127d00e401cadde1834454feffade86
3988 ; android/guava-tests/test/com/google/common/net/InetAddressesTest.java ; MOE Sync 2020-08-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> [Efficiency] Modifies testToNumericFormatV6 to parse the input String in place.  RELNOTES= InetAddresses : InetAddress parsing is now more efficient  62a8cc4512d12d7afd1960ddca07b595be3eaf55
3988 ;  android/guava/src/com/google/common/net/InetAddresses.java ; MOE Sync 2020-08-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> [Efficiency] Modifies testToNumericFormatV6 to parse the input String in place.  RELNOTES= InetAddresses : InetAddress parsing is now more efficient  62a8cc4512d12d7afd1960ddca07b595be3eaf55
3988 ;  guava-tests/test/com/google/common/net/InetAddressesTest.java ; MOE Sync 2020-08-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> [Efficiency] Modifies testToNumericFormatV6 to parse the input String in place.  RELNOTES= InetAddresses : InetAddress parsing is now more efficient  62a8cc4512d12d7afd1960ddca07b595be3eaf55
3988 ;  guava/src/com/google/common/net/InetAddresses.java ; MOE Sync 2020-08-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> [Efficiency] Modifies testToNumericFormatV6 to parse the input String in place.  RELNOTES= InetAddresses : InetAddress parsing is now more efficient  62a8cc4512d12d7afd1960ddca07b595be3eaf55
3994 ; android/guava/src/com/google/common/hash/AbstractByteHasher.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  android/guava/src/com/google/common/hash/AbstractCompositeHashFunction.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  android/guava/src/com/google/common/hash/AbstractHasher.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  android/guava/src/com/google/common/hash/AbstractStreamingHasher.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  android/guava/src/com/google/common/hash/Java8Compatibility.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  android/guava/src/com/google/common/io/ByteStreams.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  android/guava/src/com/google/common/io/CharStreams.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  android/guava/src/com/google/common/io/Java8Compatibility.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  android/guava/src/com/google/common/io/LineReader.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  android/guava/src/com/google/common/io/ReaderInputStream.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  guava/src/com/google/common/hash/AbstractByteHasher.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  guava/src/com/google/common/hash/AbstractCompositeHashFunction.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  guava/src/com/google/common/hash/AbstractHasher.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  guava/src/com/google/common/hash/AbstractStreamingHasher.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  guava/src/com/google/common/hash/Java8Compatibility.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  guava/src/com/google/common/io/ByteStreams.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  guava/src/com/google/common/io/CharStreams.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  guava/src/com/google/common/io/Java8Compatibility.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  guava/src/com/google/common/io/LineReader.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3994 ;  guava/src/com/google/common/io/ReaderInputStream.java ; MOE Sync 2020-08-21 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t directly call ByteBuffer  etc. methods that have covariant returns in Java 9+.  Doing so produces a jar that doesn t work under Java 8.  This CL addresses the currently existing problematic calls (by calling the methods on the supertype Buffer instead)  but we should also add safeguards.  The normal solution to this general problem is to use --release  but doing so here is complicated.  For more information  see https://github.com/google/guava/issues/3990  406a4eafa25ccd8f456622be19e2ce1e624bc227
3996 ; android/guava/src/com/google/common/util/concurrent/AbstractFuture.java ; MOE Sync 2020-08-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Adding SEC-CH-UA-Arch header.  Header Spec Here: https://wicg.github.io/ua-client-hints/#http-ua-hints  RELNOTES=N/A  8ed8696b2a1700bfcf5e7727f0be6141d2438e20  -------  <p> Work around an android bug in LockSupport  this time with @CanIgnoreReturnValue  a849f7f1264b586d44f2b34f274bac9f1d7eff19
3996 ;  android/guava/src/com/google/common/util/concurrent/ListenableFutureTask.java ; MOE Sync 2020-08-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Adding SEC-CH-UA-Arch header.  Header Spec Here: https://wicg.github.io/ua-client-hints/#http-ua-hints  RELNOTES=N/A  8ed8696b2a1700bfcf5e7727f0be6141d2438e20  -------  <p> Work around an android bug in LockSupport  this time with @CanIgnoreReturnValue  a849f7f1264b586d44f2b34f274bac9f1d7eff19
3996 ;  android/guava/src/com/google/common/util/concurrent/OverflowAvoidingLockSupport.java ; MOE Sync 2020-08-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Adding SEC-CH-UA-Arch header.  Header Spec Here: https://wicg.github.io/ua-client-hints/#http-ua-hints  RELNOTES=N/A  8ed8696b2a1700bfcf5e7727f0be6141d2438e20  -------  <p> Work around an android bug in LockSupport  this time with @CanIgnoreReturnValue  a849f7f1264b586d44f2b34f274bac9f1d7eff19
3996 ;  guava/src/com/google/common/util/concurrent/AbstractFuture.java ; MOE Sync 2020-08-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Adding SEC-CH-UA-Arch header.  Header Spec Here: https://wicg.github.io/ua-client-hints/#http-ua-hints  RELNOTES=N/A  8ed8696b2a1700bfcf5e7727f0be6141d2438e20  -------  <p> Work around an android bug in LockSupport  this time with @CanIgnoreReturnValue  a849f7f1264b586d44f2b34f274bac9f1d7eff19
3996 ;  guava/src/com/google/common/util/concurrent/ListenableFutureTask.java ; MOE Sync 2020-08-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Adding SEC-CH-UA-Arch header.  Header Spec Here: https://wicg.github.io/ua-client-hints/#http-ua-hints  RELNOTES=N/A  8ed8696b2a1700bfcf5e7727f0be6141d2438e20  -------  <p> Work around an android bug in LockSupport  this time with @CanIgnoreReturnValue  a849f7f1264b586d44f2b34f274bac9f1d7eff19
3996 ;  guava/src/com/google/common/util/concurrent/OverflowAvoidingLockSupport.java ; MOE Sync 2020-08-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Adding SEC-CH-UA-Arch header.  Header Spec Here: https://wicg.github.io/ua-client-hints/#http-ua-hints  RELNOTES=N/A  8ed8696b2a1700bfcf5e7727f0be6141d2438e20  -------  <p> Work around an android bug in LockSupport  this time with @CanIgnoreReturnValue  a849f7f1264b586d44f2b34f274bac9f1d7eff19
3998 ; android/guava-tests/test/com/google/common/eventbus/EventBusTest.java ; MOE Sync 2020-08-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Throw if @Subscribe is applied to a method that takes a primitive parameter.  Fixes https://github.com/google/guava/issues/3992.  RELNOTES=Prevent @Subscribe being applied to a method that takes a primitive  as that will never be called.  9fe4ecdc84e628c7da0aa68fc6257932dc9dbced
3998 ;  android/guava/src/com/google/common/eventbus/Subscribe.java ; MOE Sync 2020-08-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Throw if @Subscribe is applied to a method that takes a primitive parameter.  Fixes https://github.com/google/guava/issues/3992.  RELNOTES=Prevent @Subscribe being applied to a method that takes a primitive  as that will never be called.  9fe4ecdc84e628c7da0aa68fc6257932dc9dbced
3998 ;  android/guava/src/com/google/common/eventbus/SubscriberRegistry.java ; MOE Sync 2020-08-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Throw if @Subscribe is applied to a method that takes a primitive parameter.  Fixes https://github.com/google/guava/issues/3992.  RELNOTES=Prevent @Subscribe being applied to a method that takes a primitive  as that will never be called.  9fe4ecdc84e628c7da0aa68fc6257932dc9dbced
3998 ;  guava-tests/test/com/google/common/eventbus/EventBusTest.java ; MOE Sync 2020-08-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Throw if @Subscribe is applied to a method that takes a primitive parameter.  Fixes https://github.com/google/guava/issues/3992.  RELNOTES=Prevent @Subscribe being applied to a method that takes a primitive  as that will never be called.  9fe4ecdc84e628c7da0aa68fc6257932dc9dbced
3998 ;  guava/src/com/google/common/eventbus/Subscribe.java ; MOE Sync 2020-08-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Throw if @Subscribe is applied to a method that takes a primitive parameter.  Fixes https://github.com/google/guava/issues/3992.  RELNOTES=Prevent @Subscribe being applied to a method that takes a primitive  as that will never be called.  9fe4ecdc84e628c7da0aa68fc6257932dc9dbced
3998 ;  guava/src/com/google/common/eventbus/SubscriberRegistry.java ; MOE Sync 2020-08-25 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Throw if @Subscribe is applied to a method that takes a primitive parameter.  Fixes https://github.com/google/guava/issues/3992.  RELNOTES=Prevent @Subscribe being applied to a method that takes a primitive  as that will never be called.  9fe4ecdc84e628c7da0aa68fc6257932dc9dbced
4000 ; android/guava/src/com/google/common/io/Files.java ; MOE Sync 2020-08-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Deprecate Files.createTempDir()  noting that better alternatives exist for Android as well as for users running Java 7 or later.  RELNOTES= io : Deprecated  Files.createTempDir() .  9258dd9071c850dde0461f0f0cad81105442fdce
4000 ;  guava/src/com/google/common/io/Files.java ; MOE Sync 2020-08-27 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Deprecate Files.createTempDir()  noting that better alternatives exist for Android as well as for users running Java 7 or later.  RELNOTES= io : Deprecated  Files.createTempDir() .  9258dd9071c850dde0461f0f0cad81105442fdce
4003 ; android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; MOE Sync 2020-08-31 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Update Public Suffix data.  The copy is typically updated whenever Chrome s copy is updated  which is roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the dates.  ac1b252294c4c5547384b86d40345e59e3dedc8a
4003 ;  guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; MOE Sync 2020-08-31 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Update Public Suffix data.  The copy is typically updated whenever Chrome s copy is updated  which is roughly every 6 weeks. Subscribe to the Chrome Milestone Calendar to see the dates.  ac1b252294c4c5547384b86d40345e59e3dedc8a
4020 ; android/guava/src/com/google/common/util/concurrent/ClosingFuture.java ; MOE Sync 2020-09-15 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make ClosingFuture available in open-source Guava (@Beta).  RELNOTES= util.concurrent : Add  ClosingFuture .  48851566428571694e62dee9f277d9833e78f17a  -------  <p> Fix typos and remove unnecessary words.  Fixes #4012  12c9012b0bde00a99cd454f1af6d90b1e5e11508  -------  <p> Bump checker-qual from 2.11.1 to 3.5.0.  For unfortunate reasons involving internal legacy infrastructure  this is easier than merging #4018. But at least it gets us on the newest major version. That makes it easier to see that it s safe to resolve a conflict between  say  3.5.0 and 3.6.1 by just using the newer one.  a2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d  -------  <p> Remove spurious annotation to fix Travis build.  f106608d0c58c2c67dcd56e638ace73472768f65
4020 ;  guava/src/com/google/common/util/concurrent/ClosingFuture.java ; MOE Sync 2020-09-15 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make ClosingFuture available in open-source Guava (@Beta).  RELNOTES= util.concurrent : Add  ClosingFuture .  48851566428571694e62dee9f277d9833e78f17a  -------  <p> Fix typos and remove unnecessary words.  Fixes #4012  12c9012b0bde00a99cd454f1af6d90b1e5e11508  -------  <p> Bump checker-qual from 2.11.1 to 3.5.0.  For unfortunate reasons involving internal legacy infrastructure  this is easier than merging #4018. But at least it gets us on the newest major version. That makes it easier to see that it s safe to resolve a conflict between  say  3.5.0 and 3.6.1 by just using the newer one.  a2ad1ee1fa9fcc591edc79f5e7c160ddd19b851d  -------  <p> Remove spurious annotation to fix Travis build.  f106608d0c58c2c67dcd56e638ace73472768f65
4025 ; android/guava-testlib/src/com/google/common/testing/EqualsTester.java ; MOE Sync 2020-09-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make EqualsTester test that non-Strings are not equal to their String representation.  RELNOTES=Make EqualsTester test that non-Strings are not equal to their String representation.  5f5a9b98d87d0439bb9670947a4bef331e8dcb4c
4025 ;  android/guava-testlib/test/com/google/common/testing/EqualsTesterTest.java ; MOE Sync 2020-09-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make EqualsTester test that non-Strings are not equal to their String representation.  RELNOTES=Make EqualsTester test that non-Strings are not equal to their String representation.  5f5a9b98d87d0439bb9670947a4bef331e8dcb4c
4025 ;  guava-gwt/test/com/google/common/testing/EqualsTesterTest_gwt.java ; MOE Sync 2020-09-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make EqualsTester test that non-Strings are not equal to their String representation.  RELNOTES=Make EqualsTester test that non-Strings are not equal to their String representation.  5f5a9b98d87d0439bb9670947a4bef331e8dcb4c
4025 ;  guava-testlib/src/com/google/common/testing/EqualsTester.java ; MOE Sync 2020-09-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make EqualsTester test that non-Strings are not equal to their String representation.  RELNOTES=Make EqualsTester test that non-Strings are not equal to their String representation.  5f5a9b98d87d0439bb9670947a4bef331e8dcb4c
4025 ;  guava-testlib/test/com/google/common/testing/EqualsTesterTest.java ; MOE Sync 2020-09-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make EqualsTester test that non-Strings are not equal to their String representation.  RELNOTES=Make EqualsTester test that non-Strings are not equal to their String representation.  5f5a9b98d87d0439bb9670947a4bef331e8dcb4c
4029 ; android/guava/src/com/google/common/util/concurrent/ClosingFuture.java ; MOE Sync 2020-09-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix AssertionError from Range.gap.  Fixes #4007  #4004  88593a07f3a04163f2c68cf323a54cd8f8efdd03  -------  <p> Fix random typos in Guava.  Fixes #4021  1102d11be3bbe534a5a569832aeb0099aa0eaa61  -------  <p> Add back web.app to public suffix list  d12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d  -------  <p> Externally restore @DoNotMock to ClosingFuture.Combiner  and externally add @DoNotMock to ClosingFuture itself.  This implements an alternative workaround for https://bugs.openjdk.java.net/browse/JDK-7101822  replacing the one submitted in CL 331770482.  7b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5
4029 ;  guava/src/com/google/common/util/concurrent/ClosingFuture.java ; MOE Sync 2020-09-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix AssertionError from Range.gap.  Fixes #4007  #4004  88593a07f3a04163f2c68cf323a54cd8f8efdd03  -------  <p> Fix random typos in Guava.  Fixes #4021  1102d11be3bbe534a5a569832aeb0099aa0eaa61  -------  <p> Add back web.app to public suffix list  d12e9833c5232032c8e9a0b51c9ea3b9ce5e2b9d  -------  <p> Externally restore @DoNotMock to ClosingFuture.Combiner  and externally add @DoNotMock to ClosingFuture itself.  This implements an alternative workaround for https://bugs.openjdk.java.net/browse/JDK-7101822  replacing the one submitted in CL 331770482.  7b4c82f4e436311184cfb61cd6cfd8fb85a3dbe5
4030 ; android/guava/src/com/google/common/collect/ForwardingMap.java ; MOE Sync 2020-09-18 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix UnsupportedOperationException from TreeRangeSet.subRangeSet(...).add(...).  Fixes #4019  #4002  3685507ce36e24f111cabb45c6d5c5dd26565aad  -------  <p> Deal with Class#isInstance checks which are guaranteed to be false.  2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71  -------  <p> Change  ForwardingMap.remove(Object)  parameter name from  object  to  key  to match  Map.remove(Object key) .  Fixes https://github.com/google/guava/issues/4028  204904cbe79852e29aec2e461273f9b6112bd2f9
4030 ;  guava/src/com/google/common/collect/ForwardingMap.java ; MOE Sync 2020-09-18 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix UnsupportedOperationException from TreeRangeSet.subRangeSet(...).add(...).  Fixes #4019  #4002  3685507ce36e24f111cabb45c6d5c5dd26565aad  -------  <p> Deal with Class#isInstance checks which are guaranteed to be false.  2fa82f2cb6e1d2f6c29b7986be6e95063b65bf71  -------  <p> Change  ForwardingMap.remove(Object)  parameter name from  object  to  key  to match  Map.remove(Object key) .  Fixes https://github.com/google/guava/issues/4028  204904cbe79852e29aec2e461273f9b6112bd2f9
4035 ; android/guava-tests/test/com/google/common/collect/RangeTest.java ; MOE Sync 2020-09-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add brief test to Range for  [_  X].isConnected([X  _])    RELNOTES: n/a  4629a25981b1ff667315d481fc21bcb094d436dc
4035 ;  guava-tests/test/com/google/common/collect/RangeTest.java ; MOE Sync 2020-09-22 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add brief test to Range for  [_  X].isConnected([X  _])    RELNOTES: n/a  4629a25981b1ff667315d481fc21bcb094d436dc
5252 ; android/guava-tests/test/com/google/common/reflect/ClassPathTest.java ; MOE Sync 2020-09-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal changes to ClassPath.  643423a88d854deb863fa08f550a6e41d2823df5  -------  <p> Internal changes to ClassPath.  b7e83b114f95f5b776ed60f5932420e5c5fc24ad  -------  <p> Remove unnecessary parens  Fixes #4036  30c69a1ff047f8dad3abef2c315c305e052da0b2  -------  <p> Also print Android test failures.  0644480db466a331b7bd9fa7a8690f37d05ddda2  -------  <p> Fix ClassPathTest on Android JDK 11.  037e10c0da8159c06fa471142ae923dceb03e4ea
5252 ;  android/guava/src/com/google/common/reflect/ClassPath.java ; MOE Sync 2020-09-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal changes to ClassPath.  643423a88d854deb863fa08f550a6e41d2823df5  -------  <p> Internal changes to ClassPath.  b7e83b114f95f5b776ed60f5932420e5c5fc24ad  -------  <p> Remove unnecessary parens  Fixes #4036  30c69a1ff047f8dad3abef2c315c305e052da0b2  -------  <p> Also print Android test failures.  0644480db466a331b7bd9fa7a8690f37d05ddda2  -------  <p> Fix ClassPathTest on Android JDK 11.  037e10c0da8159c06fa471142ae923dceb03e4ea
5252 ;  guava-tests/test/com/google/common/reflect/ClassPathTest.java ; MOE Sync 2020-09-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal changes to ClassPath.  643423a88d854deb863fa08f550a6e41d2823df5  -------  <p> Internal changes to ClassPath.  b7e83b114f95f5b776ed60f5932420e5c5fc24ad  -------  <p> Remove unnecessary parens  Fixes #4036  30c69a1ff047f8dad3abef2c315c305e052da0b2  -------  <p> Also print Android test failures.  0644480db466a331b7bd9fa7a8690f37d05ddda2  -------  <p> Fix ClassPathTest on Android JDK 11.  037e10c0da8159c06fa471142ae923dceb03e4ea
5252 ;  guava/src/com/google/common/reflect/ClassPath.java ; MOE Sync 2020-09-29 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal changes to ClassPath.  643423a88d854deb863fa08f550a6e41d2823df5  -------  <p> Internal changes to ClassPath.  b7e83b114f95f5b776ed60f5932420e5c5fc24ad  -------  <p> Remove unnecessary parens  Fixes #4036  30c69a1ff047f8dad3abef2c315c305e052da0b2  -------  <p> Also print Android test failures.  0644480db466a331b7bd9fa7a8690f37d05ddda2  -------  <p> Fix ClassPathTest on Android JDK 11.  037e10c0da8159c06fa471142ae923dceb03e4ea
5256 ; android/guava-tests/test/com/google/common/math/BigDecimalMathTest.java ; MOE Sync 2020-10-01 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fully remove GWT-RPC support externally.  Really  really closes https://github.com/google/guava/issues/3680.  Possible future work: - Be consistent about whether we put @GwtCompatible on the remaining internal CustomFieldSerializer classes. (For those files  it probably acts only as documentation (of something that is pretty obvious :)). Our open-source build used to take action when it saw  @GwtCompatible(emulated=true)   but (a) it doesn t anymore  (b) those files don t exist externally anymore  and (c) they weren t  emulated=true  :) I believe that our internal build requires @GwtCompatible on most files in our GWT target  but I think there s an exception for GWT-target-only sources.) - Remove some of the GwtSerializationDependencies classes. However  some of these classe are set up as *supertypes* of our prod classes  so this would require some surgery. Keeping them is harmless: It doesn t actually make the classes GWT-serializable. - Remove the usages of serializable=true on @GwtCompatible  at least externally but maybe just entirely.  RELNOTES=[Guava types can no longer be sent over GWT-RPC.](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ) Even the earlier  temporary way to reenable support ( guava.gwt.emergency_reenable_rpc ) no longer has an effect.  4d2eb90089e9115cb00477b815289a2fe56e8a24  -------  <p> Mark BigDecimalMathTest as fully @GwtIncompatible.  Currently it has every member annotated as @GwtIncompatible. This works fine internally  but the external GWT tests (which we run only at release time) complain about the resulting empty BigDecimalMathTest_gwt: https://github.com/google/guava/blob/master/guava-gwt/test/com/google/common/math/BigDecimalMathTest_gwt.java  0f9ee58d8caa8a12ac77fe01e097e39386157d2c
5256 ;  guava-gwt/test/com/google/common/math/BigDecimalMathTest_gwt.java ; MOE Sync 2020-10-01 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fully remove GWT-RPC support externally.  Really  really closes https://github.com/google/guava/issues/3680.  Possible future work: - Be consistent about whether we put @GwtCompatible on the remaining internal CustomFieldSerializer classes. (For those files  it probably acts only as documentation (of something that is pretty obvious :)). Our open-source build used to take action when it saw  @GwtCompatible(emulated=true)   but (a) it doesn t anymore  (b) those files don t exist externally anymore  and (c) they weren t  emulated=true  :) I believe that our internal build requires @GwtCompatible on most files in our GWT target  but I think there s an exception for GWT-target-only sources.) - Remove some of the GwtSerializationDependencies classes. However  some of these classe are set up as *supertypes* of our prod classes  so this would require some surgery. Keeping them is harmless: It doesn t actually make the classes GWT-serializable. - Remove the usages of serializable=true on @GwtCompatible  at least externally but maybe just entirely.  RELNOTES=[Guava types can no longer be sent over GWT-RPC.](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ) Even the earlier  temporary way to reenable support ( guava.gwt.emergency_reenable_rpc ) no longer has an effect.  4d2eb90089e9115cb00477b815289a2fe56e8a24  -------  <p> Mark BigDecimalMathTest as fully @GwtIncompatible.  Currently it has every member annotated as @GwtIncompatible. This works fine internally  but the external GWT tests (which we run only at release time) complain about the resulting empty BigDecimalMathTest_gwt: https://github.com/google/guava/blob/master/guava-gwt/test/com/google/common/math/BigDecimalMathTest_gwt.java  0f9ee58d8caa8a12ac77fe01e097e39386157d2c
5256 ;  guava-tests/test/com/google/common/math/BigDecimalMathTest.java ; MOE Sync 2020-10-01 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fully remove GWT-RPC support externally.  Really  really closes https://github.com/google/guava/issues/3680.  Possible future work: - Be consistent about whether we put @GwtCompatible on the remaining internal CustomFieldSerializer classes. (For those files  it probably acts only as documentation (of something that is pretty obvious :)). Our open-source build used to take action when it saw  @GwtCompatible(emulated=true)   but (a) it doesn t anymore  (b) those files don t exist externally anymore  and (c) they weren t  emulated=true  :) I believe that our internal build requires @GwtCompatible on most files in our GWT target  but I think there s an exception for GWT-target-only sources.) - Remove some of the GwtSerializationDependencies classes. However  some of these classe are set up as *supertypes* of our prod classes  so this would require some surgery. Keeping them is harmless: It doesn t actually make the classes GWT-serializable. - Remove the usages of serializable=true on @GwtCompatible  at least externally but maybe just entirely.  RELNOTES=[Guava types can no longer be sent over GWT-RPC.](https://groups.google.com/d/msg/guava-announce/zHZTFg7YF3o/rQNnwdHeEwAJ) Even the earlier  temporary way to reenable support ( guava.gwt.emergency_reenable_rpc ) no longer has an effect.  4d2eb90089e9115cb00477b815289a2fe56e8a24  -------  <p> Mark BigDecimalMathTest as fully @GwtIncompatible.  Currently it has every member annotated as @GwtIncompatible. This works fine internally  but the external GWT tests (which we run only at release time) complain about the resulting empty BigDecimalMathTest_gwt: https://github.com/google/guava/blob/master/guava-gwt/test/com/google/common/math/BigDecimalMathTest_gwt.java  0f9ee58d8caa8a12ac77fe01e097e39386157d2c
5258 ; android/guava-tests/test/com/google/common/cache/ForwardingCacheTest.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  android/guava-tests/test/com/google/common/cache/ForwardingLoadingCacheTest.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  android/guava-tests/test/com/google/common/hash/FunnelsTest.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  android/guava-tests/test/com/google/common/hash/HashingInputStreamTest.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  android/guava-tests/test/com/google/common/hash/HashingOutputStreamTest.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  android/guava/src/com/google/common/hash/LittleEndianByteArray.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  android/guava/src/com/google/common/util/concurrent/FluentFuture.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  android/guava/src/com/google/common/util/concurrent/Futures.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  android/guava/src/com/google/common/util/concurrent/ListenableFuture.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  android/guava/src/com/google/common/util/concurrent/UncaughtExceptionHandlers.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  futures/listenablefuture1/src/com/google/common/util/concurrent/ListenableFuture.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  guava-tests/test/com/google/common/cache/ForwardingCacheTest.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  guava-tests/test/com/google/common/cache/ForwardingLoadingCacheTest.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  guava-tests/test/com/google/common/hash/FunnelsTest.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  guava-tests/test/com/google/common/hash/HashingInputStreamTest.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  guava-tests/test/com/google/common/hash/HashingOutputStreamTest.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  guava/src/com/google/common/hash/LittleEndianByteArray.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  guava/src/com/google/common/util/concurrent/FluentFuture.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  guava/src/com/google/common/util/concurrent/Futures.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  guava/src/com/google/common/util/concurrent/ListenableFuture.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5258 ;  guava/src/com/google/common/util/concurrent/UncaughtExceptionHandlers.java ; MOE Sync 2020-10-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Begin tweaking Guava sources to satisfy Copybara.  - Change from http to https (and from github.io links to guava.dev/truth.dev while I m at it). - Remove go/ links. - Add whitespace around MOE directives. - Put MOE stripping directives alone in comments  moving other comment text to a separate comment. - One particular case of that: Put MOE intracomment stripping into HTML comments... even when it happens in non-Javadoc comments (i.e.  /* */). It seems that Copybara wants for intracomment directives to stand alone in *some* kind of comment? - Add @GoogleInternal to some files that are currently omitted from Guava simply by not being in MOE filegroup targets.  This is surely not a complete set of changes  but it s enough to get me started.  b5dce621aed0d374d3abc000eb51cb513e7b496e
5263 ; guava-gwt/src/com/google/common/base/GwtSerializationDependencies.java ; MOE Sync 2020-10-05 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove GWT tests from open source.  We will continue to run these tests internally.  I m not sure how much value the remaining open-source GwtTestSuite file provides us. Hopefully it s at least a sanity check on .gwt.xml files. But I haven t tested by breaking a .gwt.xml file to see what happens.  5773612ad40c7ab38e2cc8e5dd5a526d5b672652  -------  <p> Tweak TODOs.  58855f44498d1dd61cfad4f812a14bac2079e71c  -------  <p> Remove a couple GwtSerializationDependencies classes from open-source Guava after all.  As noted in 0cb89dd110ce88770207889901e95ea2ac896932  this isn t necessary. As *also* noted there  we have *additional* FooGwtSerializationDependencies classes that I m leaving in place because they are *supertypes* of the prod classes and thus harder to remove.  But I m removing these 2 because it saves me a few lines in the Copybara config :)  (Followup after https://github.com/google/guava/issues/3680)  cb6023b3285ba8c2b6c249c7ef977df2baac2b65
5263 ;  guava-gwt/src/com/google/common/collect/GwtSerializationDependencies.java ; MOE Sync 2020-10-05 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove GWT tests from open source.  We will continue to run these tests internally.  I m not sure how much value the remaining open-source GwtTestSuite file provides us. Hopefully it s at least a sanity check on .gwt.xml files. But I haven t tested by breaking a .gwt.xml file to see what happens.  5773612ad40c7ab38e2cc8e5dd5a526d5b672652  -------  <p> Tweak TODOs.  58855f44498d1dd61cfad4f812a14bac2079e71c  -------  <p> Remove a couple GwtSerializationDependencies classes from open-source Guava after all.  As noted in 0cb89dd110ce88770207889901e95ea2ac896932  this isn t necessary. As *also* noted there  we have *additional* FooGwtSerializationDependencies classes that I m leaving in place because they are *supertypes* of the prod classes and thus harder to remove.  But I m removing these 2 because it saves me a few lines in the Copybara config :)  (Followup after https://github.com/google/guava/issues/3680)  cb6023b3285ba8c2b6c249c7ef977df2baac2b65
5267 ; guava-testlib/test/com/google/common/collect/testing/TestModuleEntryPoint.java ; MOE Sync 2020-10-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Run all zero of our GWT tests during presubmit/CI.  Unfortunately  this does *not* detect any bogus <inherits> lines in *test* .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml). (And bogus <inherits> lines in *prod* .gwt.xml files were already detected even before this change.)  As a result  this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I ll end up rolling it back if we reenable the tests externally someday. Still  for now it seems like a reasonable thing to clean up  if only to prevent me from trying to clean it up again 6 months from now :)  (Followup after https://github.com/google/guava/issues/3680)  9230b14efefc11d24c3c969f2dbae7f8595ef469  -------  <p> Check the generated PublicSuffixPatterns.java into Piper.  Copybara can t export generated files.  Also  reformat the template (and then the file) so that autoformatting the file doesn t produce diffs.  eebb75ecc2beb4ff5c95cca974d3529505e31a60  -------  <p> Omit TestModuleEntryPoint from open-source repo.  Since I ve disabled GWT tests in the open-source repo  these no longer serve a purpose. (They re still listed in our testModule.gwt.xml files  but as noted in a previous commit  the GWT test infrastructure doesn t seem to care what we put in those files anymore.)  We could still include them  but they re generated during our build  so that complicates exporting them with Copybara.  5948a59b546c02d61ac9c2f590483fb4a7271ddd
5267 ;  guava-testlib/test/com/google/common/testing/TestModuleEntryPoint.java ; MOE Sync 2020-10-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Run all zero of our GWT tests during presubmit/CI.  Unfortunately  this does *not* detect any bogus <inherits> lines in *test* .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml). (And bogus <inherits> lines in *prod* .gwt.xml files were already detected even before this change.)  As a result  this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I ll end up rolling it back if we reenable the tests externally someday. Still  for now it seems like a reasonable thing to clean up  if only to prevent me from trying to clean it up again 6 months from now :)  (Followup after https://github.com/google/guava/issues/3680)  9230b14efefc11d24c3c969f2dbae7f8595ef469  -------  <p> Check the generated PublicSuffixPatterns.java into Piper.  Copybara can t export generated files.  Also  reformat the template (and then the file) so that autoformatting the file doesn t produce diffs.  eebb75ecc2beb4ff5c95cca974d3529505e31a60  -------  <p> Omit TestModuleEntryPoint from open-source repo.  Since I ve disabled GWT tests in the open-source repo  these no longer serve a purpose. (They re still listed in our testModule.gwt.xml files  but as noted in a previous commit  the GWT test infrastructure doesn t seem to care what we put in those files anymore.)  We could still include them  but they re generated during our build  so that complicates exporting them with Copybara.  5948a59b546c02d61ac9c2f590483fb4a7271ddd
5267 ;  guava-tests/test/com/google/common/base/TestModuleEntryPoint.java ; MOE Sync 2020-10-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Run all zero of our GWT tests during presubmit/CI.  Unfortunately  this does *not* detect any bogus <inherits> lines in *test* .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml). (And bogus <inherits> lines in *prod* .gwt.xml files were already detected even before this change.)  As a result  this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I ll end up rolling it back if we reenable the tests externally someday. Still  for now it seems like a reasonable thing to clean up  if only to prevent me from trying to clean it up again 6 months from now :)  (Followup after https://github.com/google/guava/issues/3680)  9230b14efefc11d24c3c969f2dbae7f8595ef469  -------  <p> Check the generated PublicSuffixPatterns.java into Piper.  Copybara can t export generated files.  Also  reformat the template (and then the file) so that autoformatting the file doesn t produce diffs.  eebb75ecc2beb4ff5c95cca974d3529505e31a60  -------  <p> Omit TestModuleEntryPoint from open-source repo.  Since I ve disabled GWT tests in the open-source repo  these no longer serve a purpose. (They re still listed in our testModule.gwt.xml files  but as noted in a previous commit  the GWT test infrastructure doesn t seem to care what we put in those files anymore.)  We could still include them  but they re generated during our build  so that complicates exporting them with Copybara.  5948a59b546c02d61ac9c2f590483fb4a7271ddd
5267 ;  guava-tests/test/com/google/common/cache/TestModuleEntryPoint.java ; MOE Sync 2020-10-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Run all zero of our GWT tests during presubmit/CI.  Unfortunately  this does *not* detect any bogus <inherits> lines in *test* .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml). (And bogus <inherits> lines in *prod* .gwt.xml files were already detected even before this change.)  As a result  this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I ll end up rolling it back if we reenable the tests externally someday. Still  for now it seems like a reasonable thing to clean up  if only to prevent me from trying to clean it up again 6 months from now :)  (Followup after https://github.com/google/guava/issues/3680)  9230b14efefc11d24c3c969f2dbae7f8595ef469  -------  <p> Check the generated PublicSuffixPatterns.java into Piper.  Copybara can t export generated files.  Also  reformat the template (and then the file) so that autoformatting the file doesn t produce diffs.  eebb75ecc2beb4ff5c95cca974d3529505e31a60  -------  <p> Omit TestModuleEntryPoint from open-source repo.  Since I ve disabled GWT tests in the open-source repo  these no longer serve a purpose. (They re still listed in our testModule.gwt.xml files  but as noted in a previous commit  the GWT test infrastructure doesn t seem to care what we put in those files anymore.)  We could still include them  but they re generated during our build  so that complicates exporting them with Copybara.  5948a59b546c02d61ac9c2f590483fb4a7271ddd
5267 ;  guava-tests/test/com/google/common/collect/TestModuleEntryPoint.java ; MOE Sync 2020-10-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Run all zero of our GWT tests during presubmit/CI.  Unfortunately  this does *not* detect any bogus <inherits> lines in *test* .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml). (And bogus <inherits> lines in *prod* .gwt.xml files were already detected even before this change.)  As a result  this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I ll end up rolling it back if we reenable the tests externally someday. Still  for now it seems like a reasonable thing to clean up  if only to prevent me from trying to clean it up again 6 months from now :)  (Followup after https://github.com/google/guava/issues/3680)  9230b14efefc11d24c3c969f2dbae7f8595ef469  -------  <p> Check the generated PublicSuffixPatterns.java into Piper.  Copybara can t export generated files.  Also  reformat the template (and then the file) so that autoformatting the file doesn t produce diffs.  eebb75ecc2beb4ff5c95cca974d3529505e31a60  -------  <p> Omit TestModuleEntryPoint from open-source repo.  Since I ve disabled GWT tests in the open-source repo  these no longer serve a purpose. (They re still listed in our testModule.gwt.xml files  but as noted in a previous commit  the GWT test infrastructure doesn t seem to care what we put in those files anymore.)  We could still include them  but they re generated during our build  so that complicates exporting them with Copybara.  5948a59b546c02d61ac9c2f590483fb4a7271ddd
5267 ;  guava-tests/test/com/google/common/escape/TestModuleEntryPoint.java ; MOE Sync 2020-10-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Run all zero of our GWT tests during presubmit/CI.  Unfortunately  this does *not* detect any bogus <inherits> lines in *test* .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml). (And bogus <inherits> lines in *prod* .gwt.xml files were already detected even before this change.)  As a result  this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I ll end up rolling it back if we reenable the tests externally someday. Still  for now it seems like a reasonable thing to clean up  if only to prevent me from trying to clean it up again 6 months from now :)  (Followup after https://github.com/google/guava/issues/3680)  9230b14efefc11d24c3c969f2dbae7f8595ef469  -------  <p> Check the generated PublicSuffixPatterns.java into Piper.  Copybara can t export generated files.  Also  reformat the template (and then the file) so that autoformatting the file doesn t produce diffs.  eebb75ecc2beb4ff5c95cca974d3529505e31a60  -------  <p> Omit TestModuleEntryPoint from open-source repo.  Since I ve disabled GWT tests in the open-source repo  these no longer serve a purpose. (They re still listed in our testModule.gwt.xml files  but as noted in a previous commit  the GWT test infrastructure doesn t seem to care what we put in those files anymore.)  We could still include them  but they re generated during our build  so that complicates exporting them with Copybara.  5948a59b546c02d61ac9c2f590483fb4a7271ddd
5267 ;  guava-tests/test/com/google/common/html/TestModuleEntryPoint.java ; MOE Sync 2020-10-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Run all zero of our GWT tests during presubmit/CI.  Unfortunately  this does *not* detect any bogus <inherits> lines in *test* .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml). (And bogus <inherits> lines in *prod* .gwt.xml files were already detected even before this change.)  As a result  this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I ll end up rolling it back if we reenable the tests externally someday. Still  for now it seems like a reasonable thing to clean up  if only to prevent me from trying to clean it up again 6 months from now :)  (Followup after https://github.com/google/guava/issues/3680)  9230b14efefc11d24c3c969f2dbae7f8595ef469  -------  <p> Check the generated PublicSuffixPatterns.java into Piper.  Copybara can t export generated files.  Also  reformat the template (and then the file) so that autoformatting the file doesn t produce diffs.  eebb75ecc2beb4ff5c95cca974d3529505e31a60  -------  <p> Omit TestModuleEntryPoint from open-source repo.  Since I ve disabled GWT tests in the open-source repo  these no longer serve a purpose. (They re still listed in our testModule.gwt.xml files  but as noted in a previous commit  the GWT test infrastructure doesn t seem to care what we put in those files anymore.)  We could still include them  but they re generated during our build  so that complicates exporting them with Copybara.  5948a59b546c02d61ac9c2f590483fb4a7271ddd
5267 ;  guava-tests/test/com/google/common/io/TestModuleEntryPoint.java ; MOE Sync 2020-10-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Run all zero of our GWT tests during presubmit/CI.  Unfortunately  this does *not* detect any bogus <inherits> lines in *test* .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml). (And bogus <inherits> lines in *prod* .gwt.xml files were already detected even before this change.)  As a result  this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I ll end up rolling it back if we reenable the tests externally someday. Still  for now it seems like a reasonable thing to clean up  if only to prevent me from trying to clean it up again 6 months from now :)  (Followup after https://github.com/google/guava/issues/3680)  9230b14efefc11d24c3c969f2dbae7f8595ef469  -------  <p> Check the generated PublicSuffixPatterns.java into Piper.  Copybara can t export generated files.  Also  reformat the template (and then the file) so that autoformatting the file doesn t produce diffs.  eebb75ecc2beb4ff5c95cca974d3529505e31a60  -------  <p> Omit TestModuleEntryPoint from open-source repo.  Since I ve disabled GWT tests in the open-source repo  these no longer serve a purpose. (They re still listed in our testModule.gwt.xml files  but as noted in a previous commit  the GWT test infrastructure doesn t seem to care what we put in those files anymore.)  We could still include them  but they re generated during our build  so that complicates exporting them with Copybara.  5948a59b546c02d61ac9c2f590483fb4a7271ddd
5267 ;  guava-tests/test/com/google/common/math/TestModuleEntryPoint.java ; MOE Sync 2020-10-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Run all zero of our GWT tests during presubmit/CI.  Unfortunately  this does *not* detect any bogus <inherits> lines in *test* .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml). (And bogus <inherits> lines in *prod* .gwt.xml files were already detected even before this change.)  As a result  this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I ll end up rolling it back if we reenable the tests externally someday. Still  for now it seems like a reasonable thing to clean up  if only to prevent me from trying to clean it up again 6 months from now :)  (Followup after https://github.com/google/guava/issues/3680)  9230b14efefc11d24c3c969f2dbae7f8595ef469  -------  <p> Check the generated PublicSuffixPatterns.java into Piper.  Copybara can t export generated files.  Also  reformat the template (and then the file) so that autoformatting the file doesn t produce diffs.  eebb75ecc2beb4ff5c95cca974d3529505e31a60  -------  <p> Omit TestModuleEntryPoint from open-source repo.  Since I ve disabled GWT tests in the open-source repo  these no longer serve a purpose. (They re still listed in our testModule.gwt.xml files  but as noted in a previous commit  the GWT test infrastructure doesn t seem to care what we put in those files anymore.)  We could still include them  but they re generated during our build  so that complicates exporting them with Copybara.  5948a59b546c02d61ac9c2f590483fb4a7271ddd
5267 ;  guava-tests/test/com/google/common/net/TestModuleEntryPoint.java ; MOE Sync 2020-10-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Run all zero of our GWT tests during presubmit/CI.  Unfortunately  this does *not* detect any bogus <inherits> lines in *test* .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml). (And bogus <inherits> lines in *prod* .gwt.xml files were already detected even before this change.)  As a result  this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I ll end up rolling it back if we reenable the tests externally someday. Still  for now it seems like a reasonable thing to clean up  if only to prevent me from trying to clean it up again 6 months from now :)  (Followup after https://github.com/google/guava/issues/3680)  9230b14efefc11d24c3c969f2dbae7f8595ef469  -------  <p> Check the generated PublicSuffixPatterns.java into Piper.  Copybara can t export generated files.  Also  reformat the template (and then the file) so that autoformatting the file doesn t produce diffs.  eebb75ecc2beb4ff5c95cca974d3529505e31a60  -------  <p> Omit TestModuleEntryPoint from open-source repo.  Since I ve disabled GWT tests in the open-source repo  these no longer serve a purpose. (They re still listed in our testModule.gwt.xml files  but as noted in a previous commit  the GWT test infrastructure doesn t seem to care what we put in those files anymore.)  We could still include them  but they re generated during our build  so that complicates exporting them with Copybara.  5948a59b546c02d61ac9c2f590483fb4a7271ddd
5267 ;  guava-tests/test/com/google/common/primitives/TestModuleEntryPoint.java ; MOE Sync 2020-10-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Run all zero of our GWT tests during presubmit/CI.  Unfortunately  this does *not* detect any bogus <inherits> lines in *test* .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml). (And bogus <inherits> lines in *prod* .gwt.xml files were already detected even before this change.)  As a result  this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I ll end up rolling it back if we reenable the tests externally someday. Still  for now it seems like a reasonable thing to clean up  if only to prevent me from trying to clean it up again 6 months from now :)  (Followup after https://github.com/google/guava/issues/3680)  9230b14efefc11d24c3c969f2dbae7f8595ef469  -------  <p> Check the generated PublicSuffixPatterns.java into Piper.  Copybara can t export generated files.  Also  reformat the template (and then the file) so that autoformatting the file doesn t produce diffs.  eebb75ecc2beb4ff5c95cca974d3529505e31a60  -------  <p> Omit TestModuleEntryPoint from open-source repo.  Since I ve disabled GWT tests in the open-source repo  these no longer serve a purpose. (They re still listed in our testModule.gwt.xml files  but as noted in a previous commit  the GWT test infrastructure doesn t seem to care what we put in those files anymore.)  We could still include them  but they re generated during our build  so that complicates exporting them with Copybara.  5948a59b546c02d61ac9c2f590483fb4a7271ddd
5267 ;  guava-tests/test/com/google/common/util/concurrent/TestModuleEntryPoint.java ; MOE Sync 2020-10-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Run all zero of our GWT tests during presubmit/CI.  Unfortunately  this does *not* detect any bogus <inherits> lines in *test* .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml). (And bogus <inherits> lines in *prod* .gwt.xml files were already detected even before this change.)  As a result  this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I ll end up rolling it back if we reenable the tests externally someday. Still  for now it seems like a reasonable thing to clean up  if only to prevent me from trying to clean it up again 6 months from now :)  (Followup after https://github.com/google/guava/issues/3680)  9230b14efefc11d24c3c969f2dbae7f8595ef469  -------  <p> Check the generated PublicSuffixPatterns.java into Piper.  Copybara can t export generated files.  Also  reformat the template (and then the file) so that autoformatting the file doesn t produce diffs.  eebb75ecc2beb4ff5c95cca974d3529505e31a60  -------  <p> Omit TestModuleEntryPoint from open-source repo.  Since I ve disabled GWT tests in the open-source repo  these no longer serve a purpose. (They re still listed in our testModule.gwt.xml files  but as noted in a previous commit  the GWT test infrastructure doesn t seem to care what we put in those files anymore.)  We could still include them  but they re generated during our build  so that complicates exporting them with Copybara.  5948a59b546c02d61ac9c2f590483fb4a7271ddd
5267 ;  guava-tests/test/com/google/common/xml/TestModuleEntryPoint.java ; MOE Sync 2020-10-08 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Run all zero of our GWT tests during presubmit/CI.  Unfortunately  this does *not* detect any bogus <inherits> lines in *test* .gwt.xml files (neither the individual testModule.gwt.xml files nor the top-level GuavaTests.gwt.xml). (And bogus <inherits> lines in *prod* .gwt.xml files were already detected even before this change.)  As a result  this CL appears to be very nearly a no-op -- maybe just a verification that the no-op GWT module and entry point exist. And maybe I ll end up rolling it back if we reenable the tests externally someday. Still  for now it seems like a reasonable thing to clean up  if only to prevent me from trying to clean it up again 6 months from now :)  (Followup after https://github.com/google/guava/issues/3680)  9230b14efefc11d24c3c969f2dbae7f8595ef469  -------  <p> Check the generated PublicSuffixPatterns.java into Piper.  Copybara can t export generated files.  Also  reformat the template (and then the file) so that autoformatting the file doesn t produce diffs.  eebb75ecc2beb4ff5c95cca974d3529505e31a60  -------  <p> Omit TestModuleEntryPoint from open-source repo.  Since I ve disabled GWT tests in the open-source repo  these no longer serve a purpose. (They re still listed in our testModule.gwt.xml files  but as noted in a previous commit  the GWT test infrastructure doesn t seem to care what we put in those files anymore.)  We could still include them  but they re generated during our build  so that complicates exporting them with Copybara.  5948a59b546c02d61ac9c2f590483fb4a7271ddd
5268 ; android/guava/src/com/google/common/collect/Collections2.java ; MOE Sync 2020-10-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify  HashMultimap  docs about concurrency.  Closes #5266. Fixes #3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> Removed all references to now useless workaround  Fixes #3679 Fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71
5268 ;  android/guava/src/com/google/common/collect/FluentIterable.java ; MOE Sync 2020-10-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify  HashMultimap  docs about concurrency.  Closes #5266. Fixes #3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> Removed all references to now useless workaround  Fixes #3679 Fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71
5268 ;  android/guava/src/com/google/common/collect/Iterables.java ; MOE Sync 2020-10-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify  HashMultimap  docs about concurrency.  Closes #5266. Fixes #3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> Removed all references to now useless workaround  Fixes #3679 Fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71
5268 ;  android/guava/src/com/google/common/collect/Lists.java ; MOE Sync 2020-10-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify  HashMultimap  docs about concurrency.  Closes #5266. Fixes #3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> Removed all references to now useless workaround  Fixes #3679 Fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71
5268 ;  android/guava/src/com/google/common/collect/Queues.java ; MOE Sync 2020-10-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify  HashMultimap  docs about concurrency.  Closes #5266. Fixes #3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> Removed all references to now useless workaround  Fixes #3679 Fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71
5268 ;  android/guava/src/com/google/common/collect/Sets.java ; MOE Sync 2020-10-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify  HashMultimap  docs about concurrency.  Closes #5266. Fixes #3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> Removed all references to now useless workaround  Fixes #3679 Fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71
5268 ;  guava/src/com/google/common/collect/Collections2.java ; MOE Sync 2020-10-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify  HashMultimap  docs about concurrency.  Closes #5266. Fixes #3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> Removed all references to now useless workaround  Fixes #3679 Fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71
5268 ;  guava/src/com/google/common/collect/FluentIterable.java ; MOE Sync 2020-10-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify  HashMultimap  docs about concurrency.  Closes #5266. Fixes #3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> Removed all references to now useless workaround  Fixes #3679 Fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71
5268 ;  guava/src/com/google/common/collect/Iterables.java ; MOE Sync 2020-10-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify  HashMultimap  docs about concurrency.  Closes #5266. Fixes #3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> Removed all references to now useless workaround  Fixes #3679 Fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71
5268 ;  guava/src/com/google/common/collect/Lists.java ; MOE Sync 2020-10-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify  HashMultimap  docs about concurrency.  Closes #5266. Fixes #3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> Removed all references to now useless workaround  Fixes #3679 Fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71
5268 ;  guava/src/com/google/common/collect/Queues.java ; MOE Sync 2020-10-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify  HashMultimap  docs about concurrency.  Closes #5266. Fixes #3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> Removed all references to now useless workaround  Fixes #3679 Fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71
5268 ;  guava/src/com/google/common/collect/Sets.java ; MOE Sync 2020-10-09 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify  HashMultimap  docs about concurrency.  Closes #5266. Fixes #3682.  e6b523481b34b2c2007046ea987bf62df92eb0f8  -------  <p> Removed all references to now useless workaround  Fixes #3679 Fixes #5265  26da0949c1cf54eb730578e75fe087f67110ee71
5275 ; android/guava/src/com/google/common/util/concurrent/ExecutionSequencer.java ; MOE Sync 2020-10-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify how to use  IteratorTester   When using  IteratorTester   IntelliJ IDEA automatically imports  AbstractIteratorTester.KnownOrder . However  AbstractIteratorTester  is private  and it is not obvious that one was meant to import  IteratorTester.KnownOrder  instead. Therefore this commit updates the Javadoc to give an example of how to use the API properly.  Fixes #5272  c3172e1a55041b118a984bc5863082fda32d8243  -------  <p> Add a bunch of warnings to ExecutionSequencer.  See discussion on CL 335046640.  0b7dfb6ebeff542ac6d013f0a5690ccfce7a1eac
5275 ;  guava/src/com/google/common/util/concurrent/ExecutionSequencer.java ; MOE Sync 2020-10-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify how to use  IteratorTester   When using  IteratorTester   IntelliJ IDEA automatically imports  AbstractIteratorTester.KnownOrder . However  AbstractIteratorTester  is private  and it is not obvious that one was meant to import  IteratorTester.KnownOrder  instead. Therefore this commit updates the Javadoc to give an example of how to use the API properly.  Fixes #5272  c3172e1a55041b118a984bc5863082fda32d8243  -------  <p> Add a bunch of warnings to ExecutionSequencer.  See discussion on CL 335046640.  0b7dfb6ebeff542ac6d013f0a5690ccfce7a1eac
5277 ; android/guava-testlib/src/com/google/common/collect/testing/IteratorTester.java ; MOE Sync 2020-10-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t call toString() on the results of successful futures.  RELNOTES=AbstractFuture.toString() no longer includes the toString() of the result.  771629df701dfe565024db1cabfe19d7a5b2abfc  -------  <p> Fix example in documentation for  IteratorTester   I made a mistake and accidentally included an example that does not compile. Specifically  importing  KnownOrder  as-is does not compile  instead one needs to import  IteratorTester.KnownOrder . See #5254 for more information.  I also changed the example to use  Collections#unmodifiableList  rather than  ArrayList  because  ArrayList#iterator  does not satisfy all the requirements of  IteratorFeature#MODIFIABLE .  Fixes #5276  448afdbd4fc53f8d8f636516e54bfcbad9d6b3c0
5277 ;  guava-testlib/src/com/google/common/collect/testing/IteratorTester.java ; MOE Sync 2020-10-13 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Don t call toString() on the results of successful futures.  RELNOTES=AbstractFuture.toString() no longer includes the toString() of the result.  771629df701dfe565024db1cabfe19d7a5b2abfc  -------  <p> Fix example in documentation for  IteratorTester   I made a mistake and accidentally included an example that does not compile. Specifically  importing  KnownOrder  as-is does not compile  instead one needs to import  IteratorTester.KnownOrder . See #5254 for more information.  I also changed the example to use  Collections#unmodifiableList  rather than  ArrayList  because  ArrayList#iterator  does not satisfy all the requirements of  IteratorFeature#MODIFIABLE .  Fixes #5276  448afdbd4fc53f8d8f636516e54bfcbad9d6b3c0
5278 ; android/guava/src/com/google/common/util/concurrent/Futures.java ; MOE Sync 2020-10-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify that Interner should be preferred instead of String.intern()  the existing language implies it s intended _only_ for other types.  See also https://github.com/google/guava/issues/399#issuecomment-61307754  1034a2ee444ad03ec869638efa53b3ae880c7f4d  -------  <p> Document what happens when FutureCallback throws exception.  Fixes #5250  #2058  3d573ac2514c53d678c3855b28d9223fea9c7e8f
5278 ;  guava/src/com/google/common/util/concurrent/Futures.java ; MOE Sync 2020-10-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Clarify that Interner should be preferred instead of String.intern()  the existing language implies it s intended _only_ for other types.  See also https://github.com/google/guava/issues/399#issuecomment-61307754  1034a2ee444ad03ec869638efa53b3ae880c7f4d  -------  <p> Document what happens when FutureCallback throws exception.  Fixes #5250  #2058  3d573ac2514c53d678c3855b28d9223fea9c7e8f
5280 ; android/guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java ; MOE Sync 2020-10-15 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add tests which validate the run order of listeners on futures when the output is cancelled to test the behavior added in cl/161148771  Remove cancellation propagation test  as the intent of not propagating cancellation is to make sure run order is as expected.  If we propagate cancellations  the test fails.  c8f8cbe91a5c67d9b1f3a4ee240a48a288fadc6a
5280 ;  guava-tests/test/com/google/common/util/concurrent/ExecutionSequencerTest.java ; MOE Sync 2020-10-15 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add tests which validate the run order of listeners on futures when the output is cancelled to test the behavior added in cl/161148771  Remove cancellation propagation test  as the intent of not propagating cancellation is to make sure run order is as expected.  If we propagate cancellations  the test fails.  c8f8cbe91a5c67d9b1f3a4ee240a48a288fadc6a
5283 ; android/guava/src/com/google/common/util/concurrent/ClosingFuture.java ; MOE Sync 2020-10-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Encode all primes less-than 66 into a bitmask  Use a bitmask to make prime computation for all values less-than 66 O(1) and avoid any remainder calculations in these cases.  a2fcd41b7c10847d22943e083da450749a99c72b  -------  <p> Added  @CanIgnoreReturnValue  to  cancel .  a4cf89bfc87cf95cdfad56d9a9c384c9e6dd0b33
5283 ;  guava/src/com/google/common/util/concurrent/ClosingFuture.java ; MOE Sync 2020-10-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Encode all primes less-than 66 into a bitmask  Use a bitmask to make prime computation for all values less-than 66 O(1) and avoid any remainder calculations in these cases.  a2fcd41b7c10847d22943e083da450749a99c72b  -------  <p> Added  @CanIgnoreReturnValue  to  cancel .  a4cf89bfc87cf95cdfad56d9a9c384c9e6dd0b33
5285 ; android/guava/src/com/google/common/io/Files.java ; MOE Sync 2020-10-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove deprecated method Files.fileTreeTraverser() that isn t being used anymore.  295dd8008d06d73a99ffe076d1c302113b5a8f54
5285 ;  guava/src/com/google/common/io/Files.java ; MOE Sync 2020-10-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Remove deprecated method Files.fileTreeTraverser() that isn t being used anymore.  295dd8008d06d73a99ffe076d1c302113b5a8f54
5286 ; android/guava-testlib/src/com/google/common/collect/testing/IteratorTester.java ; MOE Sync 2020-10-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Prepare for release 30.0.  06c1d37ea914125b88bc27d0a570df84fe900a4f  -------  <p> Remove deprecated 1-arg ServiceManager.addListener.  []  RELNOTES= util.concurrent : Removed the deprecated 1-arg  ServiceManager.addListener(Listener) . Use the 2-arg  addListener(Listener  Executor)  overload  setting the executor to  directExecutor()  for equivalent behavior.  d13ebb04258a0caecea56d908a391e7e694004b2  -------  <p> Update IteratorTester example with a greater  steps  value  This allows IteratorTester to check the edge case that when an iterator has been exhausted (that is   next  has been called repeatedly until  hasNext  returns false) then calling  next  on the iterator again exhibits the same behavior as the user s chosen  known good  reference implementation.  Fixes #5281  b094a4b3f43645298a7c9bce9b5d72184d7ff4cf
5286 ;  guava-testlib/src/com/google/common/collect/testing/IteratorTester.java ; MOE Sync 2020-10-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Prepare for release 30.0.  06c1d37ea914125b88bc27d0a570df84fe900a4f  -------  <p> Remove deprecated 1-arg ServiceManager.addListener.  []  RELNOTES= util.concurrent : Removed the deprecated 1-arg  ServiceManager.addListener(Listener) . Use the 2-arg  addListener(Listener  Executor)  overload  setting the executor to  directExecutor()  for equivalent behavior.  d13ebb04258a0caecea56d908a391e7e694004b2  -------  <p> Update IteratorTester example with a greater  steps  value  This allows IteratorTester to check the edge case that when an iterator has been exhausted (that is   next  has been called repeatedly until  hasNext  returns false) then calling  next  on the iterator again exhibits the same behavior as the user s chosen  known good  reference implementation.  Fixes #5281  b094a4b3f43645298a7c9bce9b5d72184d7ff4cf
5293 ; android/guava/src/com/google/common/reflect/ClassPath.java ; MOE Sync 2020-10-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add ClassInfo.isTopLevel().  Seems like a useful method? I can t remember why I didn t add it in the first place. Perhaps just an oversight.  Partially addresses https://github.com/google/guava/issues/3349  RELNOTES= reflect : Added  ClassInfo.isTopLevel() .  14173d1bd5997fab0da2e8636e3c3a78f8e7cd61
5293 ;  guava/src/com/google/common/reflect/ClassPath.java ; MOE Sync 2020-10-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Add ClassInfo.isTopLevel().  Seems like a useful method? I can t remember why I didn t add it in the first place. Perhaps just an oversight.  Partially addresses https://github.com/google/guava/issues/3349  RELNOTES= reflect : Added  ClassInfo.isTopLevel() .  14173d1bd5997fab0da2e8636e3c3a78f8e7cd61
5294 ; android/guava/src/com/google/common/reflect/ClassPath.java ; MOE Sync 2020-10-26 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix minor documentation typos  thanks to @Stephan202 and @jbduncan  fe37cd815ed687f7bd6881cb60717e0d641b3e1b
5294 ;  guava/src/com/google/common/reflect/ClassPath.java ; MOE Sync 2020-10-26 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Fix minor documentation typos  thanks to @Stephan202 and @jbduncan  fe37cd815ed687f7bd6881cb60717e0d641b3e1b
5307 ; android/guava-tests/test/com/google/common/reflect/ClassPathTest.java ; MOE Sync 2020-11-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor ClassPath: replace Scanner with Location class.  75c2c543c6ac64943037630cfa40945feff10f42  -------  <p> Fix documentation for HashCode.toString() that incorrectly claimed it returned in big-endian order.  The implementation of toString() goes through the bytes in the same order that asBytes() returns  so if the order of the underlying bytes is little-endian (as is the case for LongHashCode)  then the string will also be little-endian  contradicting what the documentation says.  841129afbd77f8c78bb469de2ece758b418d322b  -------  <p> Optimize Hashing.crc32c() by eliminating two xors for every byte of input.  Benchmarks suggest a modest speedup around 8%.  b685bf7068044cfef0c73163408a0ccebacef203  -------  <p> Add constant for Origin Isolation header  Spec: https://github.com/WICG/origin-isolation  RELNOTES=Adds constant for the Origin-Isolation header.  f3d79119d1e1f9937f332a8c73ed1690dfbb8ffb  -------  <p> Remove outdated reference in docs  3ac6e42a8622be4b122dfd4b9eef989148141148  -------  <p> Add additional test for  Crc32cHashFunction .  4f7e925397e6ca2b17ce3d563ba1968e94959bd1  -------  <p> Verify maximumWeight before setting  The maximumWeight builder method is the only method that does the argument verification before the assignment. It looks like a typo  and does not affect anyone in practice  but it is still better to have the implementation uniform.  Fixes #5298  f1d40c3dd5243c5a29fe683fb42f7ff61b2a3068  -------  <p> Do 16-byte strides in CRC32C in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 GB/s.  This is probably as good as it gets until Java 11  when we ll have access to the intrinsics that use CRC hardware when available.  6d9e9e33c6a784f86b51c3fac785532351374271  -------  <p> Rollback  *** Original change description ***  Do 16-byte strides in CRC32C in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 GB/s.  This is probably as good as it gets until Java 11  when we ll have access to the intrinsics that use CRC hardware when available.  ***  916807371db167b99bb8b591a22c9ec07fe2bac2  -------  <p> Backport  combine  to java7 for  ImmutableList  &  ImmutableSet .  This is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections.  a275458c2601c33bfb5ba6ec54e2458feeeff06a  -------  <p> Fix  LoadingCache  minor documentation typo.  Fixes #5503.  59a9556d82fc233acf8c0a3ad00de14e02384f75  -------  <p> Added submitAsync to ClosingFuture.  RELNOTES= Added  submitAsync(AsyncClosingCallable)  to  ClosingFuture .   187db6d240a896be6efb6fc98f014b9d4690fe30  -------  <p> Add  X-Request-ID  to  HttpHeaders .  Fixes #5306.  RELNOTES=Add  X-Request-ID  to  HttpHeaders .  0f5a31bbc213f61404189d777b2039842210cab5  -------  <p> Fix Android test failure in ClassPathTest.  Reproduced the error and verified that this change fixes it.  c1f6ac185f0e72998ed30ae72a0983804c5a4f5a
5307 ;  guava-tests/test/com/google/common/reflect/ClassPathTest.java ; MOE Sync 2020-11-10 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Refactor ClassPath: replace Scanner with Location class.  75c2c543c6ac64943037630cfa40945feff10f42  -------  <p> Fix documentation for HashCode.toString() that incorrectly claimed it returned in big-endian order.  The implementation of toString() goes through the bytes in the same order that asBytes() returns  so if the order of the underlying bytes is little-endian (as is the case for LongHashCode)  then the string will also be little-endian  contradicting what the documentation says.  841129afbd77f8c78bb469de2ece758b418d322b  -------  <p> Optimize Hashing.crc32c() by eliminating two xors for every byte of input.  Benchmarks suggest a modest speedup around 8%.  b685bf7068044cfef0c73163408a0ccebacef203  -------  <p> Add constant for Origin Isolation header  Spec: https://github.com/WICG/origin-isolation  RELNOTES=Adds constant for the Origin-Isolation header.  f3d79119d1e1f9937f332a8c73ed1690dfbb8ffb  -------  <p> Remove outdated reference in docs  3ac6e42a8622be4b122dfd4b9eef989148141148  -------  <p> Add additional test for  Crc32cHashFunction .  4f7e925397e6ca2b17ce3d563ba1968e94959bd1  -------  <p> Verify maximumWeight before setting  The maximumWeight builder method is the only method that does the argument verification before the assignment. It looks like a typo  and does not affect anyone in practice  but it is still better to have the implementation uniform.  Fixes #5298  f1d40c3dd5243c5a29fe683fb42f7ff61b2a3068  -------  <p> Do 16-byte strides in CRC32C in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 GB/s.  This is probably as good as it gets until Java 11  when we ll have access to the intrinsics that use CRC hardware when available.  6d9e9e33c6a784f86b51c3fac785532351374271  -------  <p> Rollback  *** Original change description ***  Do 16-byte strides in CRC32C in c.g.c.hash  resulting in roughly a 3.3x speedup to 1.5 GB/s.  This is probably as good as it gets until Java 11  when we ll have access to the intrinsics that use CRC hardware when available.  ***  916807371db167b99bb8b591a22c9ec07fe2bac2  -------  <p> Backport  combine  to java7 for  ImmutableList  &  ImmutableSet .  This is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections.  a275458c2601c33bfb5ba6ec54e2458feeeff06a  -------  <p> Fix  LoadingCache  minor documentation typo.  Fixes #5503.  59a9556d82fc233acf8c0a3ad00de14e02384f75  -------  <p> Added submitAsync to ClosingFuture.  RELNOTES= Added  submitAsync(AsyncClosingCallable)  to  ClosingFuture .   187db6d240a896be6efb6fc98f014b9d4690fe30  -------  <p> Add  X-Request-ID  to  HttpHeaders .  Fixes #5306.  RELNOTES=Add  X-Request-ID  to  HttpHeaders .  0f5a31bbc213f61404189d777b2039842210cab5  -------  <p> Fix Android test failure in ClassPathTest.  Reproduced the error and verified that this change fixes it.  c1f6ac185f0e72998ed30ae72a0983804c5a4f5a
5308 ; guava/src/com/google/common/collect/HashBiMap.java ; MOE Sync 2020-11-11 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Backport  combine  to java7 for  ImmutableMap .  This is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections.  The Java8/Java7 implementations branched once again  where Java8 uses an array of Entries  whereas Java7 uses an array of alternating key/value pairs. Either way  the implementations were pretty trivial this time.  2afe372fb9fd390ceb671003588c053b7d463399  -------  <p> Backport combine to java7 for  ImmutableRangeSet / ImmutableRangeSet .  This is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections.  I saved this for last  but they turned out to be the easiest to do. Tests are kind of crap  but honestly  baseline tests also seemed a little bit light to me.  a742fca6c4f0f96bfedac86b0722efec196b9052  -------  <p> Backport  combine  to java7 for Sorted collections & (Immutable)BiMap.  This is so that Java8 code relying on the Java7 branch of Guava can still efficiently collect Guava collections.  4c7fe5993f6938d60ecbf90494c93b827253101e  -------  <p> Fix memory leaks and potential crashes in HashBiMap  which occur in transpiled ObjC code.  450bf69d33c855032e3698ee96bae3994cc0377e
5321 ; android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; MOE Sync 2020-11-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Replaces cycle_finder references to  --whitelist  with  --suppress-list   and  --blacklist  with  --restrict-to .  RELNOTES=none  3bf14a6ebdcaba662e39ea1d98e20e15cf53370d  -------  <p> Add AndroidAccessToCollectors.  This adds the base Immutable collectors already in CollectCollectors  but is still lacking the Table-collections  Multi-collections  and mutable-collections.  e93c0557542e53a90ac3b5bae31a41bc102da806  -------  <p> Backport ImmutableTable.combine  That should be the last combine to backport. All remainging collectors are implemented in terms of existing collection transformations.  564439f883f709843801bb260e998ed6ac6a427d  -------  <p> Add to[Immutable]Multiset to AndroidAccessToCollectors  2a232a71cb980c689ee6b43ac241a0764d41cfbf  -------  <p> Backport combine to Immutable[List|Set]Multimap  Interestingly  ImmutableMultimap already had combine implemented by lowasser since 2017. Probably a backport oversight.  c9dd38f640734604397db8fdeea3f315afb8c487  -------  <p> Add Multimap collectors to AndroidAccessToCollectors  4a89571b10379e2e885ce221173365c7deb1b1be  -------  <p> Add TableCollectors to AndroidAccessToCollectors  7b5f741e939c80f0924bec4353d3b1f672d79eb4  -------  <p> Fix open source “No tests found in com.google.common.collect.TableCollectorsTest”  d5f07055a1a38227c98c4ec038d74ce7504b3d6f  -------  <p> Update Public Suffix data.  a132338a913fba14384234649f2a6a170f7b7dca
5321 ;  guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; MOE Sync 2020-11-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Replaces cycle_finder references to  --whitelist  with  --suppress-list   and  --blacklist  with  --restrict-to .  RELNOTES=none  3bf14a6ebdcaba662e39ea1d98e20e15cf53370d  -------  <p> Add AndroidAccessToCollectors.  This adds the base Immutable collectors already in CollectCollectors  but is still lacking the Table-collections  Multi-collections  and mutable-collections.  e93c0557542e53a90ac3b5bae31a41bc102da806  -------  <p> Backport ImmutableTable.combine  That should be the last combine to backport. All remainging collectors are implemented in terms of existing collection transformations.  564439f883f709843801bb260e998ed6ac6a427d  -------  <p> Add to[Immutable]Multiset to AndroidAccessToCollectors  2a232a71cb980c689ee6b43ac241a0764d41cfbf  -------  <p> Backport combine to Immutable[List|Set]Multimap  Interestingly  ImmutableMultimap already had combine implemented by lowasser since 2017. Probably a backport oversight.  c9dd38f640734604397db8fdeea3f315afb8c487  -------  <p> Add Multimap collectors to AndroidAccessToCollectors  4a89571b10379e2e885ce221173365c7deb1b1be  -------  <p> Add TableCollectors to AndroidAccessToCollectors  7b5f741e939c80f0924bec4353d3b1f672d79eb4  -------  <p> Fix open source “No tests found in com.google.common.collect.TableCollectorsTest”  d5f07055a1a38227c98c4ec038d74ce7504b3d6f  -------  <p> Update Public Suffix data.  a132338a913fba14384234649f2a6a170f7b7dca
5322 ; guava/src/com/google/common/collect/CollectCollectors.java ; MOE Sync 2020-11-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make toImmutableEnum[Set|Map] to AndroidAccessToCollectors  I think that’s the last of them.  The implementations I moved verbatim  and there was no change of code there.  660f036a37966bbee88b3b002d1ad9d1afa8e50e
5322 ;  guava/src/com/google/common/collect/Maps.java ; MOE Sync 2020-11-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make toImmutableEnum[Set|Map] to AndroidAccessToCollectors  I think that’s the last of them.  The implementations I moved verbatim  and there was no change of code there.  660f036a37966bbee88b3b002d1ad9d1afa8e50e
5322 ;  guava/src/com/google/common/collect/Sets.java ; MOE Sync 2020-11-17 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make toImmutableEnum[Set|Map] to AndroidAccessToCollectors  I think that’s the last of them.  The implementations I moved verbatim  and there was no change of code there.  660f036a37966bbee88b3b002d1ad9d1afa8e50e
5331 ; guava/src/com/google/common/collect/ImmutableSortedMap.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Make toImmutableSortedMap levarage collect collectors  b499958c1439b0c1c76732ec50daec8b46a1789b
5332 ; guava/src/com/google/common/collect/ImmutableList.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/ImmutableListMultimap.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/ImmutableMap.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/ImmutableMultiset.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/ImmutableRangeMap.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/ImmutableRangeSet.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/ImmutableSet.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/ImmutableSetMultimap.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/ImmutableSortedMap.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/ImmutableSortedSet.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/ImmutableTable.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/Maps.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/Multimaps.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/Multisets.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/Sets.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5332 ;  guava/src/com/google/common/collect/Tables.java ; MOE Sync 2020-11-24 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal change.  412db47018be7ccee39905468f65cd1f7b9f0eb2
5338 ; android/guava/src/com/google/common/cache/LocalCache.java ; MOE Sync 2020-11-30 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> PUBLIC: Add missing Override annotations.  da5e9d98f43b039c64a62182614f74ca188cd2ce
5338 ;  android/guava/src/com/google/common/collect/ContiguousSet.java ; MOE Sync 2020-11-30 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> PUBLIC: Add missing Override annotations.  da5e9d98f43b039c64a62182614f74ca188cd2ce
5338 ;  guava/src/com/google/common/collect/ContiguousSet.java ; MOE Sync 2020-11-30 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> PUBLIC: Add missing Override annotations.  da5e9d98f43b039c64a62182614f74ca188cd2ce
5339 ; android/guava/src/com/google/common/collect/AbstractMultimap.java ; MOE Sync 2020-12-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Suppress TSAN errors for benign races.  Compare other usages of  @LazyInit  on collection views  such as  HashBiMap.inverse  and  AbstractTable.cellSet .  2dd065fb4e67aa61c0db2e8851ae002e3b8959a2
5339 ;  android/guava/src/com/google/common/collect/Multimaps.java ; MOE Sync 2020-12-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Suppress TSAN errors for benign races.  Compare other usages of  @LazyInit  on collection views  such as  HashBiMap.inverse  and  AbstractTable.cellSet .  2dd065fb4e67aa61c0db2e8851ae002e3b8959a2
5339 ;  guava/src/com/google/common/collect/AbstractMultimap.java ; MOE Sync 2020-12-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Suppress TSAN errors for benign races.  Compare other usages of  @LazyInit  on collection views  such as  HashBiMap.inverse  and  AbstractTable.cellSet .  2dd065fb4e67aa61c0db2e8851ae002e3b8959a2
5339 ;  guava/src/com/google/common/collect/Multimaps.java ; MOE Sync 2020-12-02 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Suppress TSAN errors for benign races.  Compare other usages of  @LazyInit  on collection views  such as  HashBiMap.inverse  and  AbstractTable.cellSet .  2dd065fb4e67aa61c0db2e8851ae002e3b8959a2
5343 ; guava/src/com/google/common/collect/HashBiMap.java ; MOE Sync 2020-12-03 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Explain when StandardSystemProperty.value() can return a null value  and deprecate JAVA_EXT_DIRS.  value() s return type has been @Nullable since 4232450e7bb7c46c08868f699323db3e787507c8  but I had forgotten the details about why  despite past CLs to update the test for specific missing keys.  I assume that we ll never actually *remove* JAVA_EXT_DIRS.  (Just slightly relevant to https://github.com/google/guava/issues/2571)  RELNOTES= base : Deprecated  StandardSystemProperty.JAVA_EXT_DIRS . We do not plan to remove the API  but in recent versions of Java  that property always has a value of  null .  5cdf73749704cdb752b922ec8c66dff2d36b22de  -------  <p> Automated rollback of 67517b5a5b7627eee39a47917197998b9f974751.  *** Reason for rollback ***  Causing Sheets iOS crash  *** Original change description ***  Fix memory leaks and potential crashes in HashBiMap  which occur in transpiled ObjC code. Add iOS specific unit tests in XPlat  because Guava is missing infrastructure for iOS tests.  ***  d2568df195c16cdbc62c6ab93ce489f9a4a81dc3
5347 ; guava/src/com/google/common/collect/HashBiMap.java ; MOE Sync 2020-12-04 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> System.getProperties().getProperty => System.getProperty.  My motivation was that it s slightly easier for a nullness checker to determine that System.getProperty(standardProperty) is (generally speaking) non-null. But it turns out that java.runtime.name is not a standard property!  Still  this is a slight simplification  so I guess I m submitting.  96203a3d7a76dda7190e30d58431515fd9ad4ea3  -------  <p> Fix a bug in HashBiMap which was causing crashes in Sheets on iOS.  The crash was caused by the fact  that linked-list of BiEntry instances inside a bucket were using @Weak references  and only the first entry in the list was strongly referenced. The remaining ones were deallocated.  With this change  Sheets iOS is not crashing anymore.  847c0235ef0a768a4d19274a1fe8264bcbfc190a
5354 ;  android/guava/src/com/google/common/base/Java8Usage.java ; MOE Sync 2020-12-11 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct a typo and some odd phrasing in the first paragraph of the javadoc for SmoothRateLimiter.  8d571ca36055d207635d84db4159607c511de649  -------  <p> Log a warning if running under a Java 7 VM.  More precisely  log a warning if lambda expressions or type annotations in our classes would produce an exception. If someone wants to use Retrolambda or a similar tool to rewrite our classes  that s fine with us if it works. And our support for Android is unchanged: The Android toolchain rewrites lambdas and removes type annotations.  This is a step toward removing Java 7 support entirely: https://github.com/google/guava/issues/5269  RELNOTES=Introduced a warning log message when running under Java 7. This warning is not _guaranteed_ to be logged when running under Java 7  so please don t rely on it as your only warning about future problems. If the warning _itself_ causes you trouble  you can eliminate it by silencing the logger for  com.google.common.base.MoreObjects$ToStringHelper  (which is used _only_ for this warning). This warning prepares for [removing support for Java 7 in 2021](https://github.com/google/guava/issues/5269). Please report any problems.  0357006a920c9cf84d47901471a525da85deba34
5354 ;  android/guava/src/com/google/common/base/MoreObjects.java ; MOE Sync 2020-12-11 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct a typo and some odd phrasing in the first paragraph of the javadoc for SmoothRateLimiter.  8d571ca36055d207635d84db4159607c511de649  -------  <p> Log a warning if running under a Java 7 VM.  More precisely  log a warning if lambda expressions or type annotations in our classes would produce an exception. If someone wants to use Retrolambda or a similar tool to rewrite our classes  that s fine with us if it works. And our support for Android is unchanged: The Android toolchain rewrites lambdas and removes type annotations.  This is a step toward removing Java 7 support entirely: https://github.com/google/guava/issues/5269  RELNOTES=Introduced a warning log message when running under Java 7. This warning is not _guaranteed_ to be logged when running under Java 7  so please don t rely on it as your only warning about future problems. If the warning _itself_ causes you trouble  you can eliminate it by silencing the logger for  com.google.common.base.MoreObjects$ToStringHelper  (which is used _only_ for this warning). This warning prepares for [removing support for Java 7 in 2021](https://github.com/google/guava/issues/5269). Please report any problems.  0357006a920c9cf84d47901471a525da85deba34
5354 ;  guava/src/com/google/common/base/Java8Usage.java ; MOE Sync 2020-12-11 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct a typo and some odd phrasing in the first paragraph of the javadoc for SmoothRateLimiter.  8d571ca36055d207635d84db4159607c511de649  -------  <p> Log a warning if running under a Java 7 VM.  More precisely  log a warning if lambda expressions or type annotations in our classes would produce an exception. If someone wants to use Retrolambda or a similar tool to rewrite our classes  that s fine with us if it works. And our support for Android is unchanged: The Android toolchain rewrites lambdas and removes type annotations.  This is a step toward removing Java 7 support entirely: https://github.com/google/guava/issues/5269  RELNOTES=Introduced a warning log message when running under Java 7. This warning is not _guaranteed_ to be logged when running under Java 7  so please don t rely on it as your only warning about future problems. If the warning _itself_ causes you trouble  you can eliminate it by silencing the logger for  com.google.common.base.MoreObjects$ToStringHelper  (which is used _only_ for this warning). This warning prepares for [removing support for Java 7 in 2021](https://github.com/google/guava/issues/5269). Please report any problems.  0357006a920c9cf84d47901471a525da85deba34
5354 ;  guava/src/com/google/common/base/MoreObjects.java ; MOE Sync 2020-12-11 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Correct a typo and some odd phrasing in the first paragraph of the javadoc for SmoothRateLimiter.  8d571ca36055d207635d84db4159607c511de649  -------  <p> Log a warning if running under a Java 7 VM.  More precisely  log a warning if lambda expressions or type annotations in our classes would produce an exception. If someone wants to use Retrolambda or a similar tool to rewrite our classes  that s fine with us if it works. And our support for Android is unchanged: The Android toolchain rewrites lambdas and removes type annotations.  This is a step toward removing Java 7 support entirely: https://github.com/google/guava/issues/5269  RELNOTES=Introduced a warning log message when running under Java 7. This warning is not _guaranteed_ to be logged when running under Java 7  so please don t rely on it as your only warning about future problems. If the warning _itself_ causes you trouble  you can eliminate it by silencing the logger for  com.google.common.base.MoreObjects$ToStringHelper  (which is used _only_ for this warning). This warning prepares for [removing support for Java 7 in 2021](https://github.com/google/guava/issues/5269). Please report any problems.  0357006a920c9cf84d47901471a525da85deba34
5355 ;  android/guava/src/com/google/common/net/HttpHeaders.java ; MOE Sync 2020-12-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Prepare for release 30.1.  81e941f66865d6bece7c3f09cde513a6cc50b858
5355 ;  android/guava/src/com/google/common/reflect/ClassPath.java ; MOE Sync 2020-12-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Prepare for release 30.1.  81e941f66865d6bece7c3f09cde513a6cc50b858
5355 ;  android/guava/src/com/google/common/util/concurrent/ClosingFuture.java ; MOE Sync 2020-12-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Prepare for release 30.1.  81e941f66865d6bece7c3f09cde513a6cc50b858
5355 ;  guava/src/com/google/common/net/HttpHeaders.java ; MOE Sync 2020-12-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Prepare for release 30.1.  81e941f66865d6bece7c3f09cde513a6cc50b858
5355 ;  guava/src/com/google/common/reflect/ClassPath.java ; MOE Sync 2020-12-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Prepare for release 30.1.  81e941f66865d6bece7c3f09cde513a6cc50b858
5355 ;  guava/src/com/google/common/util/concurrent/ClosingFuture.java ; MOE Sync 2020-12-14 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Prepare for release 30.1.  81e941f66865d6bece7c3f09cde513a6cc50b858
5357 ; android/guava-testlib/test/com/google/common/util/concurrent/testing/TestingExecutorsTest.java ; MOE Sync 2020-12-16 ; This code has been reviewed and submitted internally. Feel free to discuss on the PR  and we can submit follow-up changes as necessary.  Commits: ===== <p> Internal changes.  965731aaf97ab84a3af5c21db64e76152bcba744
5373 ; android/guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Update Public Suffix data. ; Update Public Suffix data.  RELNOTES=n/a
5373 ;  guava/src/com/google/thirdparty/publicsuffix/PublicSuffixPatterns.java ; Update Public Suffix data. ; Update Public Suffix data.  RELNOTES=n/a
5415 ; android/guava/src/com/google/common/collect/ImmutableSet.java ; Remove redundant  else  blocks. ; Remove redundant  else  blocks.  Fixes #3974.  RELNOTES=n/a
5415 ;  android/guava/src/com/google/common/io/BaseEncoding.java ; Remove redundant  else  blocks. ; Remove redundant  else  blocks.  Fixes #3974.  RELNOTES=n/a
5415 ;  android/guava/src/com/google/common/io/CharStreams.java ; Remove redundant  else  blocks. ; Remove redundant  else  blocks.  Fixes #3974.  RELNOTES=n/a
5415 ;  guava/src/com/google/common/collect/ImmutableSet.java ; Remove redundant  else  blocks. ; Remove redundant  else  blocks.  Fixes #3974.  RELNOTES=n/a
5415 ;  guava/src/com/google/common/io/BaseEncoding.java ; Remove redundant  else  blocks. ; Remove redundant  else  blocks.  Fixes #3974.  RELNOTES=n/a
5415 ;  guava/src/com/google/common/io/CharStreams.java ; Remove redundant  else  blocks. ; Remove redundant  else  blocks.  Fixes #3974.  RELNOTES=n/a
5431 ; android/guava/src/com/google/common/util/concurrent/AggregateFuture.java ; Internal change. ; Internal change.  RELNOTES=n/a
5431 ;  guava/src/com/google/common/util/concurrent/AggregateFuture.java ; Internal change. ; Internal change.  RELNOTES=n/a
5452 ; android/guava/src/com/google/common/graph/ForwardingGraph.java ; Mark  Abstract*.delegate  methods in  graph  as package-private. ; Mark  Abstract*.delegate  methods in  graph  as package-private.  The method was exposing the package-private  BaseGraph  type through the public type  ImmutableGraph .  (But it was exposing it only as  protected   and no one could subclass  ImmutableGraph  outside the package. So this should be mostly academic.)  Fixes https://github.com/google/guava/issues/5450  RELNOTES=n/a
5452 ;  android/guava/src/com/google/common/graph/ForwardingNetwork.java ; Mark  Abstract*.delegate  methods in  graph  as package-private. ; Mark  Abstract*.delegate  methods in  graph  as package-private.  The method was exposing the package-private  BaseGraph  type through the public type  ImmutableGraph .  (But it was exposing it only as  protected   and no one could subclass  ImmutableGraph  outside the package. So this should be mostly academic.)  Fixes https://github.com/google/guava/issues/5450  RELNOTES=n/a
5452 ;  android/guava/src/com/google/common/graph/ForwardingValueGraph.java ; Mark  Abstract*.delegate  methods in  graph  as package-private. ; Mark  Abstract*.delegate  methods in  graph  as package-private.  The method was exposing the package-private  BaseGraph  type through the public type  ImmutableGraph .  (But it was exposing it only as  protected   and no one could subclass  ImmutableGraph  outside the package. So this should be mostly academic.)  Fixes https://github.com/google/guava/issues/5450  RELNOTES=n/a
5452 ;  android/guava/src/com/google/common/graph/Graphs.java ; Mark  Abstract*.delegate  methods in  graph  as package-private. ; Mark  Abstract*.delegate  methods in  graph  as package-private.  The method was exposing the package-private  BaseGraph  type through the public type  ImmutableGraph .  (But it was exposing it only as  protected   and no one could subclass  ImmutableGraph  outside the package. So this should be mostly academic.)  Fixes https://github.com/google/guava/issues/5450  RELNOTES=n/a
5452 ;  android/guava/src/com/google/common/graph/ImmutableGraph.java ; Mark  Abstract*.delegate  methods in  graph  as package-private. ; Mark  Abstract*.delegate  methods in  graph  as package-private.  The method was exposing the package-private  BaseGraph  type through the public type  ImmutableGraph .  (But it was exposing it only as  protected   and no one could subclass  ImmutableGraph  outside the package. So this should be mostly academic.)  Fixes https://github.com/google/guava/issues/5450  RELNOTES=n/a
5452 ;  android/guava/src/com/google/common/graph/StandardMutableGraph.java ; Mark  Abstract*.delegate  methods in  graph  as package-private. ; Mark  Abstract*.delegate  methods in  graph  as package-private.  The method was exposing the package-private  BaseGraph  type through the public type  ImmutableGraph .  (But it was exposing it only as  protected   and no one could subclass  ImmutableGraph  outside the package. So this should be mostly academic.)  Fixes https://github.com/google/guava/issues/5450  RELNOTES=n/a
5452 ;  guava/src/com/google/common/graph/ForwardingGraph.java ; Mark  Abstract*.delegate  methods in  graph  as package-private. ; Mark  Abstract*.delegate  methods in  graph  as package-private.  The method was exposing the package-private  BaseGraph  type through the public type  ImmutableGraph .  (But it was exposing it only as  protected   and no one could subclass  ImmutableGraph  outside the package. So this should be mostly academic.)  Fixes https://github.com/google/guava/issues/5450  RELNOTES=n/a
5452 ;  guava/src/com/google/common/graph/ForwardingNetwork.java ; Mark  Abstract*.delegate  methods in  graph  as package-private. ; Mark  Abstract*.delegate  methods in  graph  as package-private.  The method was exposing the package-private  BaseGraph  type through the public type  ImmutableGraph .  (But it was exposing it only as  protected   and no one could subclass  ImmutableGraph  outside the package. So this should be mostly academic.)  Fixes https://github.com/google/guava/issues/5450  RELNOTES=n/a
5452 ;  guava/src/com/google/common/graph/ForwardingValueGraph.java ; Mark  Abstract*.delegate  methods in  graph  as package-private. ; Mark  Abstract*.delegate  methods in  graph  as package-private.  The method was exposing the package-private  BaseGraph  type through the public type  ImmutableGraph .  (But it was exposing it only as  protected   and no one could subclass  ImmutableGraph  outside the package. So this should be mostly academic.)  Fixes https://github.com/google/guava/issues/5450  RELNOTES=n/a
5452 ;  guava/src/com/google/common/graph/Graphs.java ; Mark  Abstract*.delegate  methods in  graph  as package-private. ; Mark  Abstract*.delegate  methods in  graph  as package-private.  The method was exposing the package-private  BaseGraph  type through the public type  ImmutableGraph .  (But it was exposing it only as  protected   and no one could subclass  ImmutableGraph  outside the package. So this should be mostly academic.)  Fixes https://github.com/google/guava/issues/5450  RELNOTES=n/a
5452 ;  guava/src/com/google/common/graph/ImmutableGraph.java ; Mark  Abstract*.delegate  methods in  graph  as package-private. ; Mark  Abstract*.delegate  methods in  graph  as package-private.  The method was exposing the package-private  BaseGraph  type through the public type  ImmutableGraph .  (But it was exposing it only as  protected   and no one could subclass  ImmutableGraph  outside the package. So this should be mostly academic.)  Fixes https://github.com/google/guava/issues/5450  RELNOTES=n/a
5452 ;  guava/src/com/google/common/graph/StandardMutableGraph.java ; Mark  Abstract*.delegate  methods in  graph  as package-private. ; Mark  Abstract*.delegate  methods in  graph  as package-private.  The method was exposing the package-private  BaseGraph  type through the public type  ImmutableGraph .  (But it was exposing it only as  protected   and no one could subclass  ImmutableGraph  outside the package. So this should be mostly academic.)  Fixes https://github.com/google/guava/issues/5450  RELNOTES=n/a
5486 ; android/guava/src/com/google/common/base/Converter.java ; Annotate Converter for nullness. ; Annotate Converter for nullness.  RELNOTES=n/a
5486 ;  android/guava/src/com/google/common/base/NullnessCasts.java ; Annotate Converter for nullness. ; Annotate Converter for nullness.  RELNOTES=n/a
5486 ;  guava/src/com/google/common/base/Converter.java ; Annotate Converter for nullness. ; Annotate Converter for nullness.  RELNOTES=n/a
5486 ;  guava/src/com/google/common/base/NullnessCasts.java ; Annotate Converter for nullness. ; Annotate Converter for nullness.  RELNOTES=n/a
5500 ; android/guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  android/guava/src/com/google/common/util/concurrent/AggregateFutureState.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  android/guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  android/guava/src/com/google/common/util/concurrent/ForwardingFuture.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  android/guava/src/com/google/common/util/concurrent/ForwardingListenableFuture.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  android/guava/src/com/google/common/util/concurrent/Futures.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  android/guava/src/com/google/common/util/concurrent/ImmediateFuture.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  android/guava/src/com/google/common/util/concurrent/InterruptibleTask.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  android/guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  android/guava/src/com/google/common/util/concurrent/ListenableFuture.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  android/guava/src/com/google/common/util/concurrent/ListenableFutureTask.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  android/guava/src/com/google/common/util/concurrent/ListenableScheduledFuture.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  android/guava/src/com/google/common/util/concurrent/ServiceManager.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  android/guava/src/com/google/common/util/concurrent/TrustedListenableFutureTask.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  futures/listenablefuture1/src/com/google/common/util/concurrent/ListenableFuture.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  guava/src/com/google/common/util/concurrent/AbstractFuture.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  guava/src/com/google/common/util/concurrent/AggregateFutureState.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  guava/src/com/google/common/util/concurrent/CycleDetectingLockFactory.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  guava/src/com/google/common/util/concurrent/ForwardingFuture.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  guava/src/com/google/common/util/concurrent/ForwardingListenableFuture.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  guava/src/com/google/common/util/concurrent/Futures.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  guava/src/com/google/common/util/concurrent/ImmediateFuture.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  guava/src/com/google/common/util/concurrent/InterruptibleTask.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  guava/src/com/google/common/util/concurrent/JdkFutureAdapters.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  guava/src/com/google/common/util/concurrent/ListenableFuture.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  guava/src/com/google/common/util/concurrent/ListenableFutureTask.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  guava/src/com/google/common/util/concurrent/ListenableScheduledFuture.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  guava/src/com/google/common/util/concurrent/ServiceManager.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5500 ;  guava/src/com/google/common/util/concurrent/TrustedListenableFutureTask.java ; Suppress or fix all compiler warnings in util/concurrent ; Suppress or fix all compiler warnings in util/concurrent  RELNOTES=n/a
5501 ; android/guava/src/com/google/common/reflect/AbstractInvocationHandler.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  android/guava/src/com/google/common/reflect/ClassPath.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  android/guava/src/com/google/common/reflect/Element.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  android/guava/src/com/google/common/reflect/ElementTypesAreNonnullByDefault.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  android/guava/src/com/google/common/reflect/Invokable.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  android/guava/src/com/google/common/reflect/Parameter.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  android/guava/src/com/google/common/reflect/ParametricNullness.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  android/guava/src/com/google/common/reflect/Reflection.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  android/guava/src/com/google/common/reflect/TypeCapture.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  android/guava/src/com/google/common/reflect/TypeParameter.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  android/guava/src/com/google/common/reflect/TypeResolver.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  android/guava/src/com/google/common/reflect/TypeToken.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  android/guava/src/com/google/common/reflect/TypeVisitor.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  android/guava/src/com/google/common/reflect/Types.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  guava/src/com/google/common/reflect/AbstractInvocationHandler.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  guava/src/com/google/common/reflect/ClassPath.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  guava/src/com/google/common/reflect/Element.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  guava/src/com/google/common/reflect/ElementTypesAreNonnullByDefault.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  guava/src/com/google/common/reflect/Invokable.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  guava/src/com/google/common/reflect/Parameter.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  guava/src/com/google/common/reflect/ParametricNullness.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  guava/src/com/google/common/reflect/Reflection.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  guava/src/com/google/common/reflect/TypeCapture.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  guava/src/com/google/common/reflect/TypeParameter.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  guava/src/com/google/common/reflect/TypeResolver.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  guava/src/com/google/common/reflect/TypeToken.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  guava/src/com/google/common/reflect/TypeVisitor.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5501 ;  guava/src/com/google/common/reflect/Types.java ; Annotate most of  reflect  for nullness. ; Annotate most of  reflect  for nullness.  And add some documentation relevant to https://github.com/google/guava/issues/3349  RELNOTES=n/a
5503 ; guava/src/com/google/common/collect/Multimaps.java ; Link to the immutable collectors from the utility classes. ; Link to the immutable collectors from the utility classes.  RELNOTES=n/a
5503 ;  guava/src/com/google/common/collect/Multisets.java ; Link to the immutable collectors from the utility classes. ; Link to the immutable collectors from the utility classes.  RELNOTES=n/a
5503 ;  guava/src/com/google/common/collect/Tables.java ; Link to the immutable collectors from the utility classes. ; Link to the immutable collectors from the utility classes.  RELNOTES=n/a
5505 ; android/guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java ; clarify  AtomicDoubleArray.set()  javadocs. ; clarify  AtomicDoubleArray.set()  javadocs.  RELNOTES=n/a
5505 ;  guava/src/com/google/common/util/concurrent/AtomicDoubleArray.java ; clarify  AtomicDoubleArray.set()  javadocs. ; clarify  AtomicDoubleArray.set()  javadocs.  RELNOTES=n/a
5511 ; android/guava-testlib/src/com/google/common/testing/NullPointerTester.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  android/guava-tests/test/com/google/common/io/ByteSourceTester.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  android/guava/src/com/google/common/base/FinalizableReferenceQueue.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  android/guava/src/com/google/common/eventbus/SubscriberExceptionContext.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  android/guava/src/com/google/common/io/ByteSource.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  android/guava/src/com/google/common/math/DoubleMath.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  android/guava/src/com/google/common/util/concurrent/AbstractScheduledService.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  android/guava/src/com/google/common/util/concurrent/Futures.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  android/guava/src/com/google/common/util/concurrent/ListenerCallQueue.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  guava-testlib/src/com/google/common/testing/NullPointerTester.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  guava-tests/test/com/google/common/io/ByteSourceTester.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  guava/src/com/google/common/base/FinalizableReferenceQueue.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  guava/src/com/google/common/collect/CollectCollectors.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  guava/src/com/google/common/eventbus/SubscriberExceptionContext.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  guava/src/com/google/common/io/ByteSource.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  guava/src/com/google/common/math/DoubleMath.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  guava/src/com/google/common/util/concurrent/AbstractScheduledService.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  guava/src/com/google/common/util/concurrent/Futures.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5511 ;  guava/src/com/google/common/util/concurrent/ListenerCallQueue.java ; fix javadoc typos ; fix javadoc typos  RELNOTES=n/a
5512 ; android/guava/src/com/google/common/cache/CacheBuilder.java ; Clarify LRU behavior of  CacheBuilder . ; Clarify LRU behavior of  CacheBuilder .  RELNOTES=n/a
5512 ;  guava/src/com/google/common/cache/CacheBuilder.java ; Clarify LRU behavior of  CacheBuilder . ; Clarify LRU behavior of  CacheBuilder .  RELNOTES=n/a
5533 ; android/guava/src/com/google/common/io/AppendableWriter.java ; Reject  null  in  CharStreams.asWriter(appendable).write(string[  ...]) . ; Reject  null  in  CharStreams.asWriter(appendable).write(string[  ...]) .  This brings its behavior in line with other  Writer  implementations. Unfortunately  the docs don t describe this behavior:  https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/io/Writer.html#write(java.lang.String)  Note also that this behavior differs from the behavior of  Writer.append(null)   which is to write the four characters  null.  That behavior is itself poorly documented  since the docs for  append(CharSequence)  claim that it is equivalent to  out.write(csq.toString())   which would throw NPE... though at least *that* is contradicted in the  @param  tag. (The difference between  write  and  append  presumably arises from inheriting  append  from the newer  Appendable  API.)  RELNOTES= io : Changed  CharStreams.asWriter(appendable).write(string[  ...])  to reject a null  string .
5533 ;  guava/src/com/google/common/io/AppendableWriter.java ; Reject  null  in  CharStreams.asWriter(appendable).write(string[  ...]) . ; Reject  null  in  CharStreams.asWriter(appendable).write(string[  ...]) .  This brings its behavior in line with other  Writer  implementations. Unfortunately  the docs don t describe this behavior:  https://docs.oracle.com/en/java/javase/14/docs/api/java.base/java/io/Writer.html#write(java.lang.String)  Note also that this behavior differs from the behavior of  Writer.append(null)   which is to write the four characters  null.  That behavior is itself poorly documented  since the docs for  append(CharSequence)  claim that it is equivalent to  out.write(csq.toString())   which would throw NPE... though at least *that* is contradicted in the  @param  tag. (The difference between  write  and  append  presumably arises from inheriting  append  from the newer  Appendable  API.)  RELNOTES= io : Changed  CharStreams.asWriter(appendable).write(string[  ...])  to reject a null  string .
5534 ; guava/src/com/google/common/io/MoreFiles.java ; Avoid unlikely NullPointerException in deleteDirectoryContents and deleteRecursively. ; Avoid unlikely NullPointerException in deleteDirectoryContents and deleteRecursively.  RELNOTES=n/a
5536 ; android/guava-tests/test/com/google/common/io/ByteSourceTest.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava-tests/test/com/google/common/io/CharSourceTest.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava-tests/test/com/google/common/io/CloserTest.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava-tests/test/com/google/common/io/PatternFilenameFilterTest.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/AppendableWriter.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/BaseEncoding.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/ByteArrayDataInput.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/ByteArrayDataOutput.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/ByteProcessor.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/ByteSink.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/ByteSource.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/ByteStreams.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/CharSequenceReader.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/CharSink.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/CharSource.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/CharStreams.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/Closeables.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/Closer.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/CountingInputStream.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/CountingOutputStream.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/ElementTypesAreNonnullByDefault.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/FileBackedOutputStream.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/FileWriteMode.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/Files.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/Flushables.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/Java8Compatibility.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/LineBuffer.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/LineProcessor.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/LineReader.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/LittleEndianDataInputStream.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/LittleEndianDataOutputStream.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/MultiInputStream.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/MultiReader.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/ParametricNullness.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/PatternFilenameFilter.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/ReaderInputStream.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  android/guava/src/com/google/common/io/Resources.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava-tests/test/com/google/common/io/ByteSourceTest.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava-tests/test/com/google/common/io/CharSourceTest.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava-tests/test/com/google/common/io/CloserTest.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava-tests/test/com/google/common/io/PatternFilenameFilterTest.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/AppendableWriter.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/BaseEncoding.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/ByteArrayDataInput.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/ByteArrayDataOutput.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/ByteProcessor.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/ByteSink.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/ByteSource.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/ByteStreams.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/CharSequenceReader.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/CharSink.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/CharSource.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/CharStreams.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/Closeables.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/Closer.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/CountingInputStream.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/CountingOutputStream.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/ElementTypesAreNonnullByDefault.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/FileBackedOutputStream.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/FileWriteMode.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/Files.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/Flushables.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/InsecureRecursiveDeleteException.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/Java8Compatibility.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/LineBuffer.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/LineProcessor.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/LineReader.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/LittleEndianDataInputStream.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/LittleEndianDataOutputStream.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/MoreFiles.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/MultiInputStream.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/MultiReader.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/ParametricNullness.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/PatternFilenameFilter.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/ReaderInputStream.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/RecursiveDeleteOption.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5536 ;  guava/src/com/google/common/io/Resources.java ; Annotate  io  for nullness. ; Annotate  io  for nullness.  RELNOTES=n/a
5538 ; android/guava-tests/test/com/google/common/math/MathPreconditionsTest.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/BigDecimalMath.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/BigIntegerMath.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/DoubleMath.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/DoubleUtils.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/ElementTypesAreNonnullByDefault.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/IntMath.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/LinearTransformation.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/LongMath.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/MathPreconditions.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/PairedStats.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/PairedStatsAccumulator.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/ParametricNullness.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/Quantiles.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/Stats.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/StatsAccumulator.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  android/guava/src/com/google/common/math/ToDoubleRounder.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava-tests/test/com/google/common/math/MathPreconditionsTest.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/BigDecimalMath.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/BigIntegerMath.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/DoubleMath.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/DoubleUtils.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/ElementTypesAreNonnullByDefault.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/IntMath.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/LinearTransformation.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/LongMath.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/MathPreconditions.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/PairedStats.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/PairedStatsAccumulator.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/ParametricNullness.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/Quantiles.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/Stats.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/StatsAccumulator.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5538 ;  guava/src/com/google/common/math/ToDoubleRounder.java ; Annotate  math  for nullness. ; Annotate  math  for nullness.  RELNOTES=n/a
5539 ; android/guava/src/com/google/common/base/Throwables.java ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location. ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location.  Also  standardize TODOs.  RELNOTES=n/a
5539 ;  android/guava/src/com/google/common/io/Closer.java ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location. ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location.  Also  standardize TODOs.  RELNOTES=n/a
5539 ;  android/guava/src/com/google/common/io/LineReader.java ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location. ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location.  Also  standardize TODOs.  RELNOTES=n/a
5539 ;  android/guava/src/com/google/common/io/PatternFilenameFilter.java ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location. ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location.  Also  standardize TODOs.  RELNOTES=n/a
5539 ;  android/guava/src/com/google/common/reflect/AbstractInvocationHandler.java ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location. ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location.  Also  standardize TODOs.  RELNOTES=n/a
5539 ;  guava/src/com/google/common/base/Throwables.java ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location. ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location.  Also  standardize TODOs.  RELNOTES=n/a
5539 ;  guava/src/com/google/common/io/Closer.java ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location. ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location.  Also  standardize TODOs.  RELNOTES=n/a
5539 ;  guava/src/com/google/common/io/LineReader.java ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location. ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location.  Also  standardize TODOs.  RELNOTES=n/a
5539 ;  guava/src/com/google/common/io/PatternFilenameFilter.java ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location. ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location.  Also  standardize TODOs.  RELNOTES=n/a
5539 ;  guava/src/com/google/common/reflect/AbstractInvocationHandler.java ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location. ; Comment out @ElementTypesAreNonnullByDefault in classes that are missing  @CheckReturnValue  for at least one location.  Also  standardize TODOs.  RELNOTES=n/a
5556 ; android/guava/src/com/google/common/base/Functions.java ; Generalize  Function  and  Predicate  factories to let callers specify the desired input type. ; Generalize  Function  and  Predicate  factories to let callers specify the desired input type.  RELNOTES= base : Changed  Functions.forSupplier  and  Predicates.instanceOf  to accept an additional type argument to specify the input type for the returned  Function / Predicate . The flexibility we re adding should typically not be necessary if users follow the [PECS](https://stackoverflow.com/a/2723538/28465) principle  but it can be useful in some cases  particularly around nullness analysis. Note that this change may require updates to callers  source code (to specify an additional type argument). Still  it maintains _binary_ compatibility.
5556 ;  android/guava/src/com/google/common/base/Predicates.java ; Generalize  Function  and  Predicate  factories to let callers specify the desired input type. ; Generalize  Function  and  Predicate  factories to let callers specify the desired input type.  RELNOTES= base : Changed  Functions.forSupplier  and  Predicates.instanceOf  to accept an additional type argument to specify the input type for the returned  Function / Predicate . The flexibility we re adding should typically not be necessary if users follow the [PECS](https://stackoverflow.com/a/2723538/28465) principle  but it can be useful in some cases  particularly around nullness analysis. Note that this change may require updates to callers  source code (to specify an additional type argument). Still  it maintains _binary_ compatibility.
5556 ;  guava/src/com/google/common/base/Functions.java ; Generalize  Function  and  Predicate  factories to let callers specify the desired input type. ; Generalize  Function  and  Predicate  factories to let callers specify the desired input type.  RELNOTES= base : Changed  Functions.forSupplier  and  Predicates.instanceOf  to accept an additional type argument to specify the input type for the returned  Function / Predicate . The flexibility we re adding should typically not be necessary if users follow the [PECS](https://stackoverflow.com/a/2723538/28465) principle  but it can be useful in some cases  particularly around nullness analysis. Note that this change may require updates to callers  source code (to specify an additional type argument). Still  it maintains _binary_ compatibility.
5556 ;  guava/src/com/google/common/base/Predicates.java ; Generalize  Function  and  Predicate  factories to let callers specify the desired input type. ; Generalize  Function  and  Predicate  factories to let callers specify the desired input type.  RELNOTES= base : Changed  Functions.forSupplier  and  Predicates.instanceOf  to accept an additional type argument to specify the input type for the returned  Function / Predicate . The flexibility we re adding should typically not be necessary if users follow the [PECS](https://stackoverflow.com/a/2723538/28465) principle  but it can be useful in some cases  particularly around nullness analysis. Note that this change may require updates to callers  source code (to specify an additional type argument). Still  it maintains _binary_ compatibility.
5572 ; android/guava/src/com/google/common/collect/Queues.java ; Clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415. ; Clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415.  RELNOTES=n/a
5572 ;  android/guava/src/com/google/common/graph/EndpointPair.java ; Clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415. ; Clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415.  RELNOTES=n/a
5572 ;  guava/src/com/google/common/collect/Queues.java ; Clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415. ; Clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415.  RELNOTES=n/a
5572 ;  guava/src/com/google/common/graph/EndpointPair.java ; Clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415. ; Clarify comments discussed in https://github.com/google/guava/pull/5546#discussion_r626856415.  RELNOTES=n/a
5582 ; android/guava/src/com/google/common/cache/CacheBuilder.java ; Fix typo noted by @ben-manes in https://github.com/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526. ; Fix typo noted by @ben-manes in https://github.com/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526.  RELNOTES=n/a
5582 ;  guava/src/com/google/common/cache/CacheBuilder.java ; Fix typo noted by @ben-manes in https://github.com/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526. ; Fix typo noted by @ben-manes in https://github.com/google/guava/commit/ce4bad32a3f15ffb21cc2a13e6db4ad03f915033#r51511526.  RELNOTES=n/a
5583 ; android/guava/src/com/google/common/base/Stopwatch.java ; Split  java.time  tests out of  StopwatchTest . ; Split  java.time  tests out of  StopwatchTest .  RELNOTES=n/a
5583 ;  guava-tests/test/com/google/common/base/StopwatchJavaTimeTest.java ; Split  java.time  tests out of  StopwatchTest . ; Split  java.time  tests out of  StopwatchTest .  RELNOTES=n/a
5583 ;  guava-tests/test/com/google/common/base/StopwatchTest.java ; Split  java.time  tests out of  StopwatchTest . ; Split  java.time  tests out of  StopwatchTest .  RELNOTES=n/a
5584 ; android/guava/src/com/google/common/util/concurrent/AbstractService.java ; Remove  Service.State.isTerminal() . ; Remove  Service.State.isTerminal() .  It was only referenced in one place. Since we guarantee that transitions between the states in the  Service.State  enum are always from an earlier to a later value  we know that the terminal states must be last. So it s enough to compare with the first terminal state   TERMINATED . The code in question already does something very similar with the  RUNNING  state a few lines earlier.  RELNOTES=n/a
5584 ;  android/guava/src/com/google/common/util/concurrent/Service.java ; Remove  Service.State.isTerminal() . ; Remove  Service.State.isTerminal() .  It was only referenced in one place. Since we guarantee that transitions between the states in the  Service.State  enum are always from an earlier to a later value  we know that the terminal states must be last. So it s enough to compare with the first terminal state   TERMINATED . The code in question already does something very similar with the  RUNNING  state a few lines earlier.  RELNOTES=n/a
5584 ;  guava/src/com/google/common/util/concurrent/AbstractService.java ; Remove  Service.State.isTerminal() . ; Remove  Service.State.isTerminal() .  It was only referenced in one place. Since we guarantee that transitions between the states in the  Service.State  enum are always from an earlier to a later value  we know that the terminal states must be last. So it s enough to compare with the first terminal state   TERMINATED . The code in question already does something very similar with the  RUNNING  state a few lines earlier.  RELNOTES=n/a
5584 ;  guava/src/com/google/common/util/concurrent/Service.java ; Remove  Service.State.isTerminal() . ; Remove  Service.State.isTerminal() .  It was only referenced in one place. Since we guarantee that transitions between the states in the  Service.State  enum are always from an earlier to a later value  we know that the terminal states must be last. So it s enough to compare with the first terminal state   TERMINATED . The code in question already does something very similar with the  RUNNING  state a few lines earlier.  RELNOTES=n/a
